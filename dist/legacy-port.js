(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.singleSpaAngularjs = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports["default"] = singleSpaAngularJS;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  var defaultOpts = {
    // required opts
    angular: null,
    domElementGetter: null,
    mainAngularModule: null,
    // optional opts
    uiRouter: false,
    preserveGlobal: false,
    elementId: "__single_spa_angular_1",
    strictDi: false,
    template: undefined
  };

  function singleSpaAngularJS(userOpts) {
    if (_typeof(userOpts) !== "object") {
      throw new Error("single-spa-angularjs requires a configuration object");
    }

    var opts = _objectSpread({}, defaultOpts, {}, userOpts);

    if (!opts.angular) {
      throw new Error("single-spa-angularjs must be passed opts.angular");
    }

    if (opts.domElementGetter && typeof opts.domElementGetter !== "function") {
      throw new Error("single-spa-angularjs opts.domElementGetter must be a function");
    }

    if (!opts.mainAngularModule) {
      throw new Error("single-spa-angularjs must be passed opts.mainAngularModule string");
    } // A shared object to store mounted object state


    var mountedInstances = {};
    return {
      bootstrap: bootstrap.bind(null, opts, mountedInstances),
      mount: mount.bind(null, opts, mountedInstances),
      unmount: unmount.bind(null, opts, mountedInstances)
    };
  }

  function bootstrap(opts) {
    return Promise.resolve();
  }

  function mount(opts, mountedInstances) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return Promise.resolve().then(function () {
      window.angular = opts.angular;
      var containerEl = getContainerEl(opts, props);
      var bootstrapEl = document.createElement("div");
      bootstrapEl.id = opts.elementId;
      containerEl.appendChild(bootstrapEl);

      if (opts.uiRouter) {
        var uiViewEl = document.createElement("div");
        uiViewEl.setAttribute("ui-view", opts.uiRouter === true ? "" : opts.uiRouter);
        bootstrapEl.appendChild(uiViewEl);
      }

      if (opts.template) {
        bootstrapEl.innerHTML = opts.template;
      }

      if (opts.strictDi) {
        mountedInstances.instance = opts.angular.bootstrap(bootstrapEl, [opts.mainAngularModule], {
          strictDi: opts.strictDi
        });
      } else {
        mountedInstances.instance = opts.angular.bootstrap(bootstrapEl, [opts.mainAngularModule]);
      }

      mountedInstances.instance.get("$rootScope").singleSpaProps = props;
    });
  }

  function unmount(opts, mountedInstances) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    return new Promise(function (resolve, reject) {
      mountedInstances.instance.get("$rootScope").$destroy();
      getContainerEl(opts, props).innerHTML = "";
      if (opts.angular === window.angular && !opts.preserveGlobal) delete window.angular;
      setTimeout(resolve);
    });
  }

  function getContainerEl(opts, props) {
    var element;

    if (opts.domElementGetter) {
      element = opts.domElementGetter(props);
    } else {
      var htmlId = "single-spa-application:".concat(props.name || props.appName);
      element = document.getElementById(htmlId);

      if (!element) {
        element = document.createElement("div");
        element.id = htmlId;
        document.body.appendChild(element);
      }
    }

    if (!element) {
      throw new Error("domElementGetter did not return a valid dom element");
    }

    return element;
  }
});
//# sourceMappingURL=single-spa-angularjs.js.map
import singleSpaAngularJS from "single-spa-angularjs";
import angular from "angular";
import uiRouter from 'angular-ui-router';

const BCMLegacy = singleSpaAngularJS({
  angular: angular,
  mainAngularModule: "blueconnect.mobile.app",
  uiRouter: true,
  preserveGlobal: false,
  template: "<account-settings />",
});

export const bootstrap = BCMLegacy.bootstrap;
export const mount = BCMLegacy.mount;
export const unmount = BCMLegacy.unmount;

(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.app', [
      'ngRoute',
      'ngSanitize',
      'ngAnimate',
      'ngTouch',
      'angular-cache',
      'bcbsnc.cloud.directives.bindHtmlCompile',
      // Constants
      'blueconnect.mobile.config',
      'blueconnect.mobile.directiveHtml',
      'blueconnect.mobile.analyticConstants',
      // Services
      'blueconnect.mobile.services.cordova',
      'blueconnect.mobile.services.adobe',
      'blueconnect.mobile.services.language',
      'blueconnect.mobile.services.message',
      'blueconnect.mobile.services.inquiry',
      'blueconnect.mobile.services.storage',
      'blueconnect.mobile.services.quickAlert',
      'blueconnect.mobile.services.alert',
      'blueconnect.mobile.services.share',
      'blueconnect.mobile.services.help',
      'blueconnect.mobile.services.login',
      'blueconnect.mobile.services.googleMaps',
      'blueconnect.mobile.services.claims',
      'blueconnect.mobile.services.policy',
      'blueconnect.mobile.services.livechat',
      'blueconnect.mobile.services.customerServiceHours',
      'blueconnect.mobile.services.paymentFlowFactory',
      'blueconnect.mobile.services.billingInvoiceHistoryFactory',
      'blueconnect.mobile.services.coachmark',
      'blueconnect.mobile.services.transparencyFactory',
      'blueconnect.mobile.services.geoLocation',
      'blueconnect.mobile.services.backButton',
      'blueconnect.mobile.services.findDoctor',
      // Controllers
      'blueconnect.mobile.controllers.main',
      'blueconnect.mobile.controllers.landing',
      'blueconnect.mobile.controllers.home',
      'blueconnect.mobile.controllers.homeRefresh',
      'blueconnect.mobile.controllers.setup',
      'blueconnect.mobile.controllers.login',
      'blueconnect.mobile.controllers.logout',
      'blueconnect.mobile.controllers.inbox',
      'blueconnect.mobile.controllers.compose',
      'blueconnect.mobile.controllers.inboxSearch',
      'blueconnect.mobile.controllers.help',
      'blueconnect.mobile.controllers.claims',
      'blueconnect.mobile.controllers.benefits',
      'blueconnect.mobile.controllers.about',
      'blueconnect.mobile.controllers.faq',
      'blueconnect.mobile.controllers.healthNav',
      'blueconnect.mobile.controllers.settings',
      'blueconnect.mobile.controllers.idCard',
      'blueconnect.mobile.controllers.customerService',
      'blueconnect.mobile.controllers.feedback',
      'blueconnect.mobile.controllers.billing',
      'blueconnect.mobile.controllers.billing.preferences',
      'blueconnect.mobile.controllers.billinghistory',
      'blueconnect.mobile.controllers.billingpaperless',
      'blueconnect.mobile.controllers.networkLandingLocal',
      'blueconnect.mobile.controllers.paymentFlow',
      'blueconnect.mobile.controllers.payment.method',
      'blueconnect.mobile.controllers.payment.details',
      'blueconnect.mobile.controllers.payment.confirmation',
      'blueconnect.mobile.controllers.payment.review',
      'blueconnect.mobile.controllers.editBillingMethodPage',
      'blueconnect.mobile.controllers.update.autopay',
      'blueconnect.mobile.controllers.stop.autopay',
      'blueconnect.mobile.controllers.editAutopayFlowPage',
      'blueconnect.mobile.controllers.billingInvoiceHistory',
      'blueconnect.mobile.controllers.billingHistoryFilter',
      'blueconnect.mobile.controllers.autopay.method',
      'blueconnect.mobile.controllers.billingHistoryUnderstandInvoice',
      'blueconnect.mobile.controllers.findDoctor',
      'blueconnect.mobile.controllers.findCare',
      'blueconnect.mobile.controllers.findDoctorAuthenticated',
      'blueconnect.mobile.controllers.findDoctorSearch',
      'blueconnect.mobile.controllers.findDoctorBrowser',
      'blueconnect.mobile.controllers.findDoctorSearchResults',
      'blueconnect.mobile.controllers.findDoctorResultsDetails',
      'blueconnect.mobile.controllers.findDoctorFilter',
      'blueconnect.mobile.controllers.upgrade',
      'blueconnect.mobile.controllers.pcp.ManageDependentsPcpController',
      'blueconnect.mobile.controllers.findDoctor',
      'blueconnect.mobile.controllers.findDoctorSearch',
      'blueconnect.mobile.controllers.findDoctorBrowser',
      'blueconnect.mobile.controllers.findDoctorSearchResults',
      'blueconnect.mobile.controllers.findDoctorResultsDetails',
      'blueconnect.mobile.controllers.findDoctorFilter',
      // Filters
      'blueconnect.mobile.filters.capitalize',
      'blueconnect.mobile.filters.padCurrencyAmount',
      'blueconnect.mobile.filters.maskAccount',
      'blueconnect.mobile.filters.addLeadingZeroToSingleDigit',
      'blueconnect.mobile.filters.removeCommas',
      'blueconnect.mobile.filters.toDropDownFilter',
      'blueconnect.mobile.filters.fromDropDownFilter',
      'blueconnect.mobile.filters.billingHistoryFromDateFilter',
      'blueconnect.mobile.filters.billingHistoryToDateFilter',
      'blueconnect.mobile.filters.limitFilter',
      // Directives
      'blueconnect.mobile.directives.goBack',
      'blueconnect.mobile.directives.goInbox',
      'blueconnect.mobile.directives.navbarLoading',
      'blueconnect.mobile.directives.checkBox',
      'blueconnect.mobile.directives.checkBoxGroup',
      'blueconnect.mobile.directives.radioButton',
      'blueconnect.mobile.directives.navbar',
      'blueconnect.mobile.directives.policySelect',
      'blueconnect.mobile.directives.homeCardIdCard',
      'blueconnect.mobile.directives.homeCardBilling',
      'blueconnect.mobile.directives.homeCardBillingError',
      'blueconnect.mobile.directives.homeCardClaims',
      'blueconnect.mobile.directives.homeCardInbox',
      'blueconnect.mobile.directives.homeCardCustomerService',
      'blueconnect.mobile.directives.homeCardSettings',
      'blueconnect.mobile.directives.homeCardInformationAlert',
      'blueconnect.mobile.directives.homeCardFindCare',
      'blueconnect.mobile.directives.findCare',
      'blueconnect.mobile.directives.tabSelect',
      'blueconnect.mobile.directives.glossaryOfTerms',
      'blueconnect.mobile.directives.inboxMessageList',
      'blueconnect.mobile.directives.inboxBottomBar',
      'blueconnect.mobile.directives.idCardBottomBar',
      'blueconnect.mobile.directives.idCardInfo',
      'blueconnect.mobile.directives.idCardMemberDetails',
      'blueconnect.mobile.directives.idCardImageTypes',
      'blueconnect.mobile.directives.idCardNetworkDetails',
      'blueconnect.mobile.directives.inboxMessage',
      'blueconnect.mobile.directives.inboxMessageBottomBar',
      'blueconnect.mobile.directives.inboxCompose',
      'blueconnect.mobile.directives.inboxError',
      'blueconnect.mobile.directives.loginBottomBar',
      'blueconnect.mobile.directives.basicNavbar',
      'blueconnect.mobile.directives.helpItemGroup',
      'blueconnect.mobile.directives.bottomButton',
      'blueconnect.mobile.directives.quickAlertModal',
      'blueconnect.mobile.directives.alertModal',
      'blueconnect.mobile.directives.searchInput',
      'blueconnect.mobile.directives.safeInput',
      'blueconnect.mobile.directives.blueBarLabel',
      'blueconnect.mobile.directives.claimsList',
      'blueconnect.mobile.directives.memberSavingsFooter',
      'blueconnect.mobile.directives.shareModal',
      'blueconnect.mobile.directives.claimsSearchInput',
      'blueconnect.mobile.directives.claimsFilterCriteria',
      'blueconnect.mobile.directives.helpModal',
      'blueconnect.mobile.directives.termsModal',
      'blueconnect.mobile.directives.fullScreenModal',
      'blueconnect.mobile.directives.policyHeaderGray',
      'blueconnect.mobile.directives.policyHeaderBlue',
      'blueconnect.mobile.directives.claimMember',
      'blueconnect.mobile.directives.claimAmounts',
      'blueconnect.mobile.directives.claimInfo',
      'blueconnect.mobile.directives.claimCompose',
      'blueconnect.mobile.directives.documentButtons',
      'blueconnect.mobile.directives.claimBottomBar',
      'blueconnect.mobile.directives.helpIcon',
      'blueconnect.mobile.directives.helpLink',
      'blueconnect.mobile.directives.dynamicHelpIcon',
      'blueconnect.mobile.directives.about',
      'blueconnect.mobile.directives.faq',
      'blueconnect.mobile.directives.healthNav',
      'blueconnect.mobile.directives.toggleSwitch',
      'blueconnect.mobile.directives.homeCardNewsUpdate',
      'blueconnect.mobile.directives.settingsList',
      'blueconnect.mobile.directives.listMessaging',
      'blueconnect.mobile.directives.homeCardBenefits',
      'blueconnect.mobile.directives.homeCardBenefitsSelect',
      'blueconnect.mobile.directives.benefitsDetail',
      'blueconnect.mobile.directives.benefitsSelectDetail',
      'blueconnect.mobile.directives.errorLoadingPage',
      'blueconnect.mobile.directives.homeCardOtherLanguages',
      'blueconnect.mobile.directives.fundData',
      'blueconnect.mobile.directives.idCardCustomerService',
      'blueconnect.mobile.directives.idCard',
      'blueconnect.mobile.directives.customerServiceCard',
      'blueconnect.mobile.directives.customerServiceSecureInbox',
      'blueconnect.mobile.directives.verticalBarGraph',
      'blueconnect.mobile.directives.feedback',
      'blueconnect.mobile.directives.benefitsCoverageDetails',
      'blueconnect.mobile.directives.benefitsBookletsDetails',
      'blueconnect.mobile.directives.medicarePlanBenefits',
      'blueconnect.mobile.directives.medicareDrugBenefits',
      'blueconnect.mobile.directives.medicareDrugBenefitsInitialCoverage',
      'blueconnect.mobile.directives.medicareDrugBenefitsCoverageGap',
      'blueconnect.mobile.directives.medicareFootnotes',
      'blueconnect.mobile.directives.medicareMoreInformationPdf',
      'blueconnect.mobile.directives.medicareSuppPlan',
      'blueconnect.mobile.directives.medicareGroupInfo',
      'blueconnect.mobile.directives.billingSummary',
      'blueconnect.mobile.directives.billingSummaryError',
      'blueconnect.mobile.directives.billingAndPaymentsComingSoon',
      'blueconnect.mobile.directives.prescriptionOnlyInfo',
      'blueconnect.mobile.directives.paymentFlowTotalBalance',
      'blueconnect.mobile.directives.paymentFlowTracker',
      'blueconnect.mobile.directives.paymentFlowPaymentFrequency',
      'blueconnect.mobile.directives.paymentFlowTitleBar',
      'blueconnect.mobile.directives.trackerBillingSummary',
      'blueconnect.mobile.directives.prescriptionOnlyInfo',
      'blueconnect.mobile.directives.dentalOnlyInfo',
      'blueconnect.mobile.directives.lowCostDentalOnlyInfo',
      'blueconnect.mobile.directives.visionOnlyInfo',
      'blueconnect.mobile.directives.contraceptiveOnlyInfo',
      'blueconnect.mobile.directives.paymentFlowPaymentAmount',
      'blueconnect.mobile.directives.paymentFlowRadioGroup',
      'blueconnect.mobile.directives.paymentFlowCheckbox',
      'blueconnect.mobile.directives.paymentFlowInputs',
      'blueconnect.mobile.directives.scrollStart',
      'blueconnect.mobile.directives.scrollEnd',
      'blueconnect.mobile.directives.benefitsNav',
      'blueconnect.mobile.directives.autopayFlowBillingMethod',
      'blueconnect.mobile.directives.paymentFlowBillingMethod',
      'blueconnect.mobile.directives.paymentFlowPaymentMethod',
      'blueconnect.mobile.directives.paymentFlow',
      'blueconnect.mobile.directives.paperlessAgreement',
      'blueconnect.mobile.directives.paymentFlowReusableDirectives',
      'blueconnect.mobile.directives.paymentFlowBankDetails',
      'blueconnect.mobile.directives.paymentFlowCreditCardDetails',
      'blueconnect.mobile.directives.paymentFlowPaymentMethodSelected',
      'blueconnect.mobile.directives.totalRemainingBalance',
      'blueconnect.mobile.directives.termsConditions',
      'blueconnect.mobile.directives.paymentFlowReviewDetails',
      'blueconnect.mobile.directives.maxLengthEnforce',
      'blueconnect.mobile.directives.cvnValidation',
      'blueconnect.mobile.directives.creditCardNumberValidation',
      'blueconnect.mobile.directives.paymentFlowProcessingPayment',
      'blueconnect.mobile.directives.paymentFlowAutopayPromo',
      'blueconnect.mobile.directives.paymentFlowPaymentReceipt',
      'blueconnect.mobile.directives.paymentFlowHelpShare',
      'blueconnect.mobile.directives.paymentFlowStateSelect',
      'blueconnect.mobile.directives.paymentFlowPaperlessSuccess',
      'blueconnect.mobile.directives.paidComponent',
      'blueconnect.mobile.directives.paymentProcessing',
      'blueconnect.mobile.directives.paymentUnsuccessful',
      'blueconnect.mobile.directives.billingSummaryNewMember',
      'blueconnect.mobile.directives.billingStatusPaidInFull',
      'blueconnect.mobile.directives.paymentFlowCtaButton',
      'blueconnect.mobile.directives.paymentFlowCancelButton',
      'blueconnect.mobile.directives.reinstatementSummary',
      'blueconnect.mobile.directives.paymentFlowReinstatementPending',
      'blueconnect.mobile.directives.customerServicePhoneCard',
      'blueconnect.mobile.directives.blockUnderClick',
      'blueconnect.mobile.directives.homeCardBillingAutopayStaticContent',
      'blueconnect.mobile.directives.invoicePayments',
      'blueconnect.mobile.directives.billingServiceDown',
      'blueconnect.mobile.directives.editBillingMethod',
      'blueconnect.mobile.directives.paymentFlowPaymentError',
      'blueconnect.mobile.directives.billingPreferencesDetails',
      'blueconnect.mobile.directives.stopAutopay',
      'blueconnect.mobile.directives.homecardChat',
      'blueconnect.mobile.directive.editAutopayFlowPageMethod',
      'blueconnect.mobile.directive.editAutopayFlowPageDetails',
      'blueconnect.mobile.directive.editAutopayFlowPageReview',
      'blueconnect.mobile.directive.editAutopayFlowPageConfirmation',
      'blueconnect.mobile.directives.billingPreferencesUpdate',
      'blueconnect.mobile.directives.editAutopayFlowPaymentReceipt',
      'blueconnect.mobile.directives.paymentFlowAutoPayPending',
      'blueconnect.mobile.directives.paymentFlowAutoPaySuccess',
      'blueconnect.mobile.directives.planDetails',
      'blueconnect.mobile.directives.billingInvoiceHistoryFilterRibbon',
      'blueconnect.mobile.directives.billingInvoiceHistoryNoInvoices',
      'blueconnect.mobile.directives.paymentFlowAutoPaySetup',
      'blueconnect.mobile.directives.billingHistoryUnderstandInvoice',
      'blueconnect.mobile.directives.billingServiceDown',
      'blueconnect.mobile.directives.paymentFlowPaymentError',
      'blueconnect.mobile.directives.coachmark',
      'blueconnect.mobile.directives.invoiceHistoryCard',
      'blueconnect.mobile.directives.billingButtons',
      'blueconnect.mobile.directives.downloadPDFButton',
      'blueconnect.mobile.directives.paymentFlowFaqsButton',
      'blueconnect.mobile.directives.findDoctorNavbar',
      'blueconnect.mobile.directives.findDoctorAuthenticatedNavbar',
      'blueconnect.mobile.directives.findDoctor',
      'blueconnect.mobile.directives.findDoctorSearch',
      'blueconnect.mobile.directives.planSelect',
      'blueconnect.mobile.directives.findDoctorBrowser',
      'blueconnect.mobile.directives.findDoctorSearchBottomBar',
      'blueconnect.mobile.directives.findDoctorSearchResults',
      'blueconnect.mobile.directives.findDoctorResultsDetails',
      'blueconnect.mobile.directives.resultsDetailsBlocks',
      'blueconnect.mobile.directives.planHeader',
      'blueconnect.mobile.directives.filterDetails',
      'blueconnect.mobile.directives.liveChat',
      'blueconnect.mobile.directives.lookupCitiesInput',
      'blueconnect.mobile.directives.homecardPcp',
      'blueconnect.mobile.directives.pcpDependentPcps',
      'blueconnect.mobile.directives.idCardPlanDetails',
    ])
    .run([
      function() {
        FastClick.attach(document.body);
      }
    ])
    .config([
      '$routeProvider',
      function($routeProvider) {
        $routeProvider
          .when('/network-landing-local', {
            templateUrl: 'views/network-landing-local.html',
            controller: 'NetworkLandingLocalController'
          })
          .when('/', {
            templateUrl: 'views/landing.html',
            controller: 'LandingController'
          })
          .when('/autopay-method', {
            templateUrl: 'views/autopay-flow-page-method.html',
            controller: 'AutopayMethodController'
          })
          .when('/billing-preferences', {
            templateUrl: 'views/billing-preferences.html',
            controller: 'BillingPreferencesController'
          })
          .when('/billing-history', {
            templateUrl: 'views/billing-history.html',
            controller: 'BillingHistoryController'
          })
          .when('/billing-paperless', {
            templateUrl: 'views/billing-paperless.html',
            controller: 'BillingPaperlessController'
          })
          .when('/home', {
            templateUrl: 'views/home.html',
            reloadOnSearch: false,
            controller: 'HomeController'
          })
          .when('/home-refresh', {
            templateUrl: 'views/landing.html',
            controller: 'HomeRefreshController'
          })
          .when('/setup', {
            templateUrl: 'views/setup.html',
            controller: 'SetupController'
          })
          .when('/login', {
            templateUrl: 'views/login.html',
            controller: 'LoginController'
          })
          .when('/logout', {
            templateUrl: 'views/landing.html',
            controller: 'LogoutController'
          })
          .when('/inbox', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/sent', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/bookmarked', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/messages/:id', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/compose', {
            templateUrl: 'views/compose.html',
            controller: 'ComposeController'
          })
          .when('/inbox/compose/:id', {
            templateUrl: 'views/compose.html',
            controller: 'ComposeController'
          })
          .when('/inbox/search', {
            templateUrl: 'views/inbox-search.html',
            controller: 'InboxSearchController'
          })
          .when('/inbox/search/sent', {
            templateUrl: 'views/inbox-search.html',
            controller: 'InboxSearchController'
          })
          .when('/inbox/search/bookmarked', {
            templateUrl: 'views/inbox-search.html',
            controller: 'InboxSearchController'
          })
          .when('/help', {
            templateUrl: 'views/help.html',
            controller: 'HelpController'
          })
          .when('/claims', {
            templateUrl: 'views/claims.html',
            controller: 'ClaimsController'
          })
          .when('/claims/search', {
            templateUrl: 'views/claims-search.html',
            controller: 'ClaimsController'
          })
          .when('/claims/filter', {
            templateUrl: 'views/claims-filter.html',
            controller: 'ClaimsController'
          })
          .when('/claims/:id/:dependentNo', {
            templateUrl: 'views/claims.html',
            controller: 'ClaimsController'
          })
          .when('/benefits', {
            templateUrl: 'views/benefits-in-network.html',
            reloadOnSearch: false,
            controller: 'BenefitsController'
          })
          .when('/medicare-benefits', {
            templateUrl: 'views/medicare-benefits.html',
            reloadOnSearch: false,
            controller: 'BenefitsController'
          })
          .when('/benefits/out-of-network', {
            templateUrl: 'views/benefits-out-of-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/tier1', {
            templateUrl: 'views/benefits-tier1-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/bbt-only', {
            templateUrl: 'views/benefits-bbt-only-info.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/tier2', {
            templateUrl: 'views/benefits-tier2-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/tieroon', {
            templateUrl: 'views/benefits-tier-out-of-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/preferinnetwork', {
            templateUrl: 'views/benefits-prefer-in-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/otherinnetwork', {
            templateUrl: 'views/benefits-other-in-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/otheroutofnetwork', {
            templateUrl: 'views/benefits-other-out-of-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/benefitsselectinnetwork', {
            templateUrl: 'views/benefits-select-in-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/benefitsselectoutnetwork', {
            templateUrl: 'views/benefits-select-out-network.html',
            controller: 'BenefitsController'
          })
          .when('/about', {
            templateUrl: 'views/about.html',
            controller: 'AboutController'
          })
          .when('/faq', {
            templateUrl: 'views/faq.html',
            controller: 'FAQController'
          })
          .when('/healthnav', {
            templateUrl: 'views/health-nav.html',
            controller: 'HealthNavController'
          })
          .when('/settings', {
            templateUrl: 'views/settings.html',
            controller: 'SettingsController'
          })
          .when('/id-card', {
            templateUrl: 'views/id-card.html',
            controller: 'IdCardController'
          })
          .when('/customer-service', {
            templateUrl: 'views/customer-service.html',
            controller: 'CustomerServiceController'
          })
          .when('/feedback', {
            templateUrl: 'views/feedback.html',
            controller: 'FeedbackController'
          })
          .when('/benefits/viewcoverage', {
            templateUrl: 'views/benefits-coverage.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/dental-only', {
            templateUrl: 'views/benefits-dental-only.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/low-cost-dental-only', {
            templateUrl: 'views/benefits-low-cost-dental-only.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/vision-only', {
            templateUrl: 'views/benefits-vision-only.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/contraceptive-only', {
            templateUrl: 'views/benefits-contraceptive-only.html',
            controller: 'BenefitsController'
          })
          .when('/billing', {
            templateUrl: 'views/billing-payments-landing.html',
            controller: 'BillingController'
          })
          .when('/edit-billing-method', {
            templateUrl: 'views/edit-billing-method.html',
            controller: 'EditBillingMethodPage'
          })
          .when('/update-autopay', {
            templateUrl: 'views/update-autopay.html',
            controller: 'UpdateAutoPayController'
          })
          .when('/stop-autopay', {
            templateUrl: 'views/stop-autopay.html',
            controller: 'StopAutoPayController'
          })
          .when('/billing-invoice-history', {
            templateUrl: 'views/billing-invoice-history.html',
            controller: 'BillingInvoiceHistory'
          })
          .when('/billing-history-filter', {
            templateUrl: 'views/billing-history-filter.html',
            controller: 'BillingHistoryFilter'
          })
          .when('/understand-invoice', {
            templateUrl: 'views/billing-history-understand-invoice.html',
            controller: 'BillingHistoryUnderstandInvoice'
          })
          .when('/payment/:step', {
            template: function($routeParams) {
              return [
                '<div class="payment-container ' + $routeParams.step + '">',
                '<payment-flow-page',
                'ng-if="billingInfo && step"',
                'localization="loc"',
                'step="' + $routeParams.step + '"',
                'tracker-info="trackerInfo"',
                'billing-info="billingInfo"',
                'validate-form="' + $routeParams.step + 'ValidateForm"',
                'navbar-details="navbarDetails"',
                '>',
                '</payment-flow-page>',
                '</div>'
              ].join(' ');
            },
            controller: 'PaymentFlowController'
          })
          .when('/edit-autopay-flow/:step', {
            templateUrl: 'views/edit-autopay-flow.html',
            controller: 'editAutopayFlow'
          })
          .when('/fad-auth/find-doctor', {
            templateUrl: 'views/find-doctor-authenticated.html',
            controller: 'FindDoctorAuthenticatedController'
          })
          .when('/find-doctor', {
            templateUrl: 'views/find-doctor.html',
            controller: 'FindDoctorController'
          })
          .when('/find-doctor-search', {
            templateUrl: 'views/find-doctor-search.html',
            controller: 'FindDoctorSearchController'
          })
          .when('/find-doctor-browser', {
            templateUrl: 'views/find-doctor-browser.html',
            controller: 'FindDoctorBrowserController'
          })
          .when('/find-doctor-search-results', {
            templateUrl: 'views/find-doctor-search-results.html',
            controller: 'FindDoctorSearchResultsController'
          })
          .when('/find-doctor-results-details', {
            templateUrl: 'views/find-doctor-results-details.html',
            controller: 'FindDoctorResultsDetailsController'
          })
          .when('/find-doctor-filter', {
            templateUrl: 'views/find-doctor-filter.html',
            controller: 'FindDoctorFilterController'
          })
          .when('/upgrade', {
            templateUrl: 'views/upgrade.html',
            controller: 'UpgradeController'
          })
          .when('/pcp-manage-dependents-pcp', {
            templateUrl: 'views/pcp-manage-dependents.html',
            controller: 'ManageDependentsPcpController'
          })
          .when('/find-doctor', {
            templateUrl: 'views/find-doctor.html',
            controller: 'FindDoctorController'
          })
          .when('/find-doctor-search', {
            templateUrl: 'views/find-doctor-search.html',
            controller: 'FindDoctorSearchController'
          })
          .when('/find-doctor-browser', {
            templateUrl: 'views/find-doctor-browser.html',
            controller: 'FindDoctorBrowserController'
          })
          .when('/find-care', {
            templateUrl: 'views/find-care.html',
            controller: 'FindCareController'
          })
          .when('/find-doctor-search-results', {
            templateUrl: 'views/find-doctor-search-results.html',
            controller: 'FindDoctorSearchResultsController'
          })
          .when('/find-doctor-results-details', {
            templateUrl: 'views/find-doctor-results-details.html',
            controller: 'FindDoctorResultsDetailsController'
          })
          .when('/find-doctor-filter', {
            templateUrl: 'views/find-doctor-filter.html',
            controller: 'FindDoctorFilterController'
          });
      }
    ]);
})();

(function() {
    'use strict';
    // constants for analytics
    angular.module('blueconnect.mobile.analyticConstants', [])
    .constant('analyticConstants', {
      BENEFITS_SECTION: 'Benefits',
      BILLING_SECTION: 'Billing',
      CLAIMS_SECTION: 'Claims',
      FAQ_SECTION: 'Faq',
      HEALTHNAV_SECTION: 'HealthNAV',
      HELP_SECTION: 'Help',
      HOME_SECTION: 'Home',
      IDCARD_SECTION: 'Id-card',
      INBOX_SECTION: 'Inbox',
      LOGIN_SECTION: 'Login',
      MENU_SECTION: 'Menu',
      PCP_SECTION: 'PCP',
      SETTINGS_SECTION: 'Settings',
      SMARTSHOPPER_SECTION: 'SmartShopper'
    });
  })();

(function() {
  'use strict';
  angular.module('blueconnect.mobile.directiveHtml', [])
    .constant('directiveHtml', {
      BillingHistory: '<BillingHistory billing-history="^billingHistory^"></BillingHistory>',
      BillingPaperless: '<BillingPaperless billing-paperless="^billingPaperless^"></BillingPaperless>',
      navbarMobile: '<navbar navbar-details="^navbarDetails^" geo-location-details="^geoLocationDetails^" urgent-care-details="^urgentCareDetails^"></navbar>',
      policySelectMobile: '<policy-select ng-if="showPolicySelect"></policy-select>',
      homeCardIdCard: '<home-card-id-card policy-index="^policyIndex^"></home-card-id-card>',
      homeCardBilling: '<home-card-billing payment-details="^paymentDetails^" plan-details="^planDetails^" billing-link="^billingLink^"></home-card-billing>',
      homeCardBillingError: '<home-card-billing-error plan-details="^planDetails^" error="error"></home-card-billing-error>',
      homeCardInbox: '<home-card-inbox inbox-details="^inboxDetails^"></home-card-inbox>',
      homeCardClaims: '<home-card-claims claims-title="^claimsTitle^" policy-selection="^policySelection^" claims="^claims^" total-claims="^totalClaims^"></home-card-claims>',
      tabSelect: '<tab-select tabs="^tabs^"></tab-select>',
      inboxMessageList: '<inbox-message-list messages="^messages^"></inbox-message-list>',
      inboxBottomBar: '<inbox-bottom-bar></inbox-bottom-bar>',
      inboxMessage: '<inbox-message message="^message^"></inbox-message>',
      inboxMessageBottomBar: '<inbox-message-bottom-bar message="^message^"></inbox-message-bottom-bar>',
      inboxCompose: '<inbox-compose message="^message^"></inbox-compose>',
      inboxError: '<inbox-error></inbox-error>',
      basicNavbar: '<basic-navbar navbar-details="^navbarDetails^" left-click="basicNavbarLeftClick()" right-click="basicNavbarRightClick()"></basic-navbar>',
      inboxSearch: '<inbox-search></inbox-search>',
      helpItemGroup: '<help-item-group group-details="^groupDetails^" urgent-care-details= "^urgentCareDetails^" geo-location-details= "^geoLocationDetails^"></help-item-group>',
      bottomButton: '<bottom-button button-details="^buttonDetails^"></bottom-button>',
      searchInput: '<search-input></search-input>',
      blueBarLabel: '<blue-bar-label title="^title^"></blue-bar-label>',
      listMessaging: '<list-messaging title="^title^" page-name="^pageName^"></list-messaging>',
      claimsList: '<claims-list claims="^claims^" policy-selection="^policySelection^" show-ribbon="^showRibbon^" filter-text="^filterText^" has-ccr="^hasCcr^"></claims-list>',
      memberSavingsFooter: '<member-savings-footer member-savings="^memberSavings^"></member-savings-footer>',
      claimsSearchInput: '<claims-search-input></claims-search-input>',
      claimsFilterCriteria: '<claims-filter-criteria members="^members^"></claims-filter-criteria>',
      policyHeaderGray: '<policy-header-gray></policy-header-gray>',
      policyHeaderBlue: '<policy-header-blue></policy-header-blue>',
      claimMember: '<claim-member member-name="^memberName^"></claim-member>',
      claimAmounts: '<claim-amounts amounts="^amounts^"></claim-amounts>',
      claimInfo: '<claim-info info="^info^"></claim-info>',
      claimCompose: '<claim-compose secure-message="^secureMessage^"></claim-compose>',
      idCardCustomerService: '<id-card-customer-service contact-details="^contactDetails^"></id-card-customer-service>',
      idCardInfo: '<id-card-info info="^info^"></id-card-info>',
      idCardPlanDetails: '<id-card-plan-details id-card-policy-details="^idCardPolicyDetails^"></id-card-plan-details>',
      idCardMemberDetails: '<id-card-member-details member-details="^memberDetails^"></id-card-member-details>',
      idCardImageTypes: '<id-card-image-types image-types="^imageTypes^"></id-card-image-types>',
      documentButtons: '<document-buttons buttons="^buttons^"></document-buttons>',
      claimBottomBar: '<claim-bottom-bar claim="^claim^"></claim-bottom-bar>',
      idCardNetworkDetails: '<id-card-network-details network-details="^networkDetails^"></id-card-network-details>',
      idCardBottomBar: '<id-card-bottom-bar></id-card-bottom-bar>',
      about: '<about about-details="^aboutDetails^"></about>',
      setup: '<setup data="^data^"></setup>',
      loginBottomBar: '<login-bottom-bar data="^data^"></login-bottom-bar>',
      faq: '<faq faq-details="^faqDetails^"></faq>',
      healthNav: '<health-nav health-nav-details="^healthNavDetails^"></health-nav>',
      homeCardCustomerService: '<home-card-customer-service customer-details="^customerDetails^" fad-alert-modal="^fadAlertModal^"></home-card-customer-service>',
      homeCardNewsUpdate: '<home-card-news-update news-details="^newsDetails^"></home-card-news-update>',
      homeCardInformationAlert: '<home-card-information-alert information-details="^informationDetails^"></home-card-information-alert>',
      homeCardBenefits: '<home-card-benefits selected-policy="^selectedPolicy^" policy-selection="^policySelection^" benefits="^benefits^"></home-card-benefits>',
      homeCardBenefitsSelect: '<home-card-benefits-select selected-policy="^selectedPolicy^" policy-selection="^policySelection^" benefits="^benefits^"></home-card-benefits-select>',
      benefitsDetail: '<benefits-detail benefits-data="^benefitsData^"></benefits-detail>',
      benefitsSelectDetail: '<benefits-select-detail benefits-data="^benefitsData^"></benefits-select-detail>',
      settingsList: '<settings-list settings-data="^settingsData^"></settings-list>',
      homeCardOtherLanguages: '<home-card-other-languages other-languages="^otherLanguages^"></home-card-other-languages>',
      homeCardSettings: '<home-card-settings settings="^settings^"></home-card-settings>',
      fundData: '<fund-data funds="^funds^"></fund-data>',
      idCard: '<id-card id-card-details="^idCardDetails^"></id-card>',
      verticalBarGraph: '<vertical-bar-graph graph-values="^graphValues^" graph-height="^graphHeight^"></vertical-bar-graph>',
      customerServiceCard: '<customer-service-card customer-service-card-details="^customerServiceCardDetails^" secure-inbox="^secureInbox^" localization="^localization^"></customer-service-card>',
      customerServicePhoneCard: '<customer-service-phone-card card-details="^cardDetails^" localization="^localization^" policy="^policy^"></customer-service-phone-card>',
      customerServiceSecureInbox: '<customer-service-secure-inbox customer-service-secure-inbox-details="^customerServiceSecureInboxDetails^"></customer-service-secure-inbox>',
      feedback: '<feedback data="^data^"></feedback>',
      benefitsBookletsDetails: '<benefits-booklets-details benefit-booklets="^benefitBooklets^"></benefits-booklets-details>',
      benefitsCoverageDetails: '<benefits-coverage-details policy-selection="^policySelection^" coverage-data="^coverageData^"></benefits-coverage-details>',
      medicarePlanBenefits: '<medicare-plan-benefits medicare-plan-benefits-details="^medicarePlanBenefitsDetails^"></medicare-plan-benefits>',
      medicareDrugBenefits: '<medicare-drug-benefits medicare-drug-benefits-details="^medicareDrugBenefitsDetails^"></medicare-drug-benefits>',
      medicareDrugBenefitsInitialCoverage: '<medicare-drug-benefits-initial-coverage medicare-drug-benefits-initial-coverage-details="^medicareDrugBenefitsInitialCoverageDetails^"></medicare-drug-benefits-initial-coverage>',
      medicareDrugBenefitsCoverageGap: '<medicare-drug-benefits-coverage-gap medicare-drug-benefits-coverage-gap-details="^medicareDrugBenefitsCoverageGapDetails^"></medicare-drug-benefits-coverage-gap>',
      medicareFootnotes: '<medicare-footnotes medicare-footnotes-details="^medicareFootnotesDetails^"></medicare-footnotes>',
      medicareMoreInformationPdf: '<medicare-more-information-pdf medicare-more-information-pdf-details="^medicareMoreInformationPdfDetails^"></medicare-more-information-pdf>',
      medicareSuppPlan: '<medicare-supp-plan policy="^policy^" policy-index="^policyIndex^" medicare-supp-plan-details="^medicareSuppPlanDetails^"></medicare-supp-plan>',
      medicareGroupInfo: '<medicare-group-info medicare-group-info-details="^medicareGroupInfoDetails^"></medicare-group-info>',
      billingSummary: '<billing-summary billing-details="^billingDetails^" policy="^policy^"></billing-summary>',
      billingSummaryError: '<billing-summary-error></billing-summary-error>',
      billingComingSoon: '<billing-coming-soon></billing-coming-soon>',
      billingAndPaymentsComingSoon: '<billing-and-payments-coming-soon></billing-and-payments-coming-soon>',
      billingAndPaymentsComingSoonAutopay: '<billing-and-payments-coming-soon-autopay billing-link="^billingLink^"></billing-and-payments-coming-soon-autopay>',
      prescriptionOnlyInfo: '<prescription-only-info data="^data^"></prescription-only-info>',
      paymentFlowTotalBalance: '<payment-flow-total-balance balance-info="^balanceInfo^"></payment-flow-total-balance>',
      paymentFlowTracker: '<payment-flow-tracker tracker-info="^trackerInfo^"></payment-flow-tracker>',
      trackerBillingSummary: '<tracker-billing-summary tracker-billing-data="^trackerBillingData^"></tracker-billing-summary>',
      paymentFlowPaymentFrequency: '<payment-flow-payment-frequency autopay-enrollment="^autopayEnrollment^" balance-info="^balanceInfo^" reinstatement-info="^reinstatement^"></payment-flow-payment-frequency>',
      paymentFlowPaymentMethod: '<payment-flow-payment-method method-info="^methodInfo^"></payment-flow-payment-method>',
      paymentFlowPaymentMethodSelected: '<payment-flow-payment-method-selected method-info="^methodInfo^"></payment-flow-payment-method-selected>',
      autopayFlowBillingMethod: '<autopay-flow-billing-method balance-info="^balanceInfo^"></autopay-flow-billing-method>',
      paymentFlowBillingMethod: '<payment-flow-billing-method balance-info="^balanceInfo^"></payment-flow-billing-method>',
      dentalOnlyInfo: '<dental-only-info data="^data^"></dental-only-info>',
      lowCostDentalOnlyInfo: '<low-cost-dental-only-info data="^data^" geo-location-details="^geoLocationDetails^"></low-cost-dental-only-info>',
      visionOnlyInfo: '<vision-only-info vision-benefits-data="^visionBenefitsData^"></vision-only-info>',
      contraceptiveOnlyInfo: '<contraceptive-only-info data="^data^"></contraceptive-only-info>',
      paymentFlowPaymentAmount: '<payment-flow-payment-amount account-info="^accountInfo^"></payment-flow-payment-amount>',
      paymentFlow: '<payment-flow balance-info="^balanceInfo^"></payment-flow>',
      scrollStart: '<div class="scroll-body">',
      scrollEnd: '</div>',
      paymentFlowTermsConditions: '<payment-flow-terms-conditions terms-conditions="^termsConditions^"></payment-flow-terms-conditions>',
      paymentFlowReviewDetails: '<payment-flow-review-details review-details="^reviewDetails^"></payment-flow-review-details>',
      billingPreferencesDetails: '<billing-preferences-details billing-preferences-data="^billingPreferencesData^" policy="^policy^"></billing-preferences-details>',
      billingPreferencesUpdate: '<billing-preferences-update billing-preferences-update-data="^billingPreferencesUpdateData^" policy="^policy^"></billing-preferences-update>',
      stopAutopay: '<stop-autopay token="^token^" stop-autopay-data="^stopAutopayData^" policy="^policy^"></stop-autopay>',
      paymentFlowAutoPaySuccess: '<payment-flow-auto-pay-success billing-info="^billingInfo^"></payment-flow-auto-pay-success>',
      paymentFlowAutoPaySetup: '<payment-flow-auto-pay-setup billing-info="^billingInfo^"></payment-flow-auto-pay-setup>',
      billingButtons: '<billing-buttons billing-buttons-info="^billingButtonsInfo^"></billing-buttons>',
      findDoctorNavbar: '<find-doctor-navbar navbar-details="^navbarDetails^" find-doctor-search-details="^findDoctorSearchDetails^"></find-doctor-navbar>',
      findDoctor: '<find-doctor find-doctor-details="^findDoctorDetails^" plans="^plans^"></find-doctor>',
      findCare: '<find-care find-care-details="^findCareDetails^" plans="^plans^"></find-care>',
      findDoctorSearch: '<find-doctor-search find-doctor-search-details="^findDoctorSearchDetails^" smart-shopper-details="^smartShopperDetails^"></find-doctor-search>',
      homeCardFindCare: '<home-card-find-care find-care-details="^findCareDetails^" geo-location-details = "^geoLocationDetails^" jwt="^jwt^" signature="^signature^" smart-shopper-details="^smartShopperDetails^"></home-card-find-care>',
      planSelect: '<plan-select plan-select-details="^planSelectDetails^"></plan-select>',
      findDoctorBrowser: '<find-doctor-browser find-doctor-browser-details="^findDoctorBrowserDetails^" smart-shopper-flow="^smartShopperFlow^"></find-doctor-browser>',
      findDoctorAuthenticatedNavbar: '<find-doctor-authenticated-navbar navbar-details="^navbarDetails^" find-doctor-search-details="^findDoctorSearchDetails^" urgent-care-details="^urgentCareDetails^" geo-location-details="^geoLocationDetails^"></find-doctor-authenticated-navbar>',
      findDoctorSearchBottomBar: '<find-doctor-search-bottom-bar bottom-bar-details="^bottomBarDetails^" pcp-details="^pcpDetails^"></find-doctor-search-bottom-bar>',
      findDoctorSearchResults: '<find-doctor-search-results search-results-details="^searchResultsDetails^"></find-doctor-search-results>',
      findDoctorResultsDetails: '<find-doctor-results-details find-doctor-results-details="^findDoctorResultsDetails^" smart-shopper-details="^smartShopperDetails^"></find-doctor-results-details>',
      planHeader: '<plan-header></plan-header>',
      filterDetails: '<filter-details find-doctor-filter-details="^findDoctorFilterDetails^"></filter-details>',
      homeCardChat: '<home-card-chat chat-details="^chatDetails^" live-chat-details="^liveChatDetails^"></home-card-chat>',
      homeCardPcp: '<home-card-pcp pcp-details="^pcpDetails^"></home-card-pcp>',
      pcpDependentPcps: '<pcp-dependent-pcps dependent-pcp-details="^dependentPcpDetails^"></pcp-dependent-pcps>'
    });
}());

(function() {
  angular
    .module('blueconnect.mobile.filters.addLeadingZeroToSingleDigit', [])
    /**
     * @description
     * Adds a leading zero to a number to any single digit numbers, ex 1 becomes 01
     * @param {number|string} input
     * @return {string}
     */
    .filter('leadingZero', function() {
      return function(input) {
        return ('' + input).length === 1 ? '0' + input : '' + input;
      };
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.billingHistoryFromDateFilter', [])
    .filter('billingHistoryFromDateFilter', [
      '$rootScope',
      function billingHistoryFromDateFilter($rootScope) {
        return function(input, startMonth) {
          if (startMonth) {
            var endMonthList;
            endMonthList = input.filter(function(e) { return e.value >= startMonth.value; });
            return endMonthList;
          }else{
            return input;
          }
        }
      }]);
  })();

(function() {
  angular
    .module('blueconnect.mobile.filters.billingHistoryToDateFilter', [])
    .filter('billingHistoryToDateFilter', [
      '$rootScope',
      function billingHistoryToDateFilter($rootScope) {
        return function(input, startMonth) {
          if (startMonth) {
            var endMonthList;
            endMonthList = input.filter(function(e) { return e.value <= startMonth.value; });
            return endMonthList;
          }else{
            return input;
          }
        }
      }]);
  })();

(function() {
  angular
    .module('blueconnect.mobile.filters.capitalize', [])
    .filter('capitalize', function capitalize() {
      return function(inputStr) {
        if (!inputStr) {
          return '';
        }

        return inputStr[0].toUpperCase() + inputStr.slice(1).toLowerCase();
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.fromDropDownFilter', [])
    .filter('fromDropDownFilter', [
      '$rootScope',
      function fromDropDownFilter($rootScope) {
        return function(input, endMonth) {
          if (endMonth) {
            var startMonthList;
            var index;
            var currentYear = $rootScope.loc[moment(endMonth).format('MMMM').toUpperCase()] + moment(endMonth).format(' YYYY');
            function month(selectedMonth){
              return selectedMonth.name == currentYear;
            };
            index = input.findIndex(month) + 1;
            startMonthList = input.slice(0, index);
            return startMonthList;
          }
          else {
            return input;
          }
        }
      }]);
  })();

(function() {
  angular
    .module('blueconnect.mobile.filters.limitFilter', [])
    .filter('limit', function limitNumber() {
      return function(value, options) {
        // Min value.
        var min = Number(options.min);

        // Min value check.
        if (min && min > value) {
          return min;
        }

        // Max value.
        var max = Number(options.max);

        // Max value check.
        if (max && max < value) {
          return max;
        }

        // Return amount.
        return value;
      };
    });
})();

(function () {
  angular
      .module('blueconnect.mobile.filters.maskAccount', [])
      .filter('maskAccount', function maskAccount() {
        return function (acct) {
          if (!acct) {
            return '';
          }
          var beginMask;
          var endMask;
          var mask;

          if (acct.toString().length == 4) {
            var str1 = "XXXXXXXXXXXX";
            var res = str1.concat(acct);
            beginMask = res.substr(0, res.length - 4);
            endMask = res.substr(res.length - 4, 4);
            mask = beginMask.replace(/[0-9, X]/g, '\u2022') + endMask;
            return mask;
          }
          var maskacct = acct.toString();
          beginMask = maskacct.substr(0, maskacct.length - 4);
          endMask = maskacct.substr(maskacct.length - 4, 4);
          mask = beginMask.replace(/[0-9, X]/g, '\u2022') + endMask;
          return mask;
        }
      });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.padCurrencyAmount', [])
    .filter('padCurrencyAmount', function capitalize() {
      return function(amt) {
        if (!amt) {
          return '';
        }

        var amountDue = amt.toString();
        var cents = (amountDue.toString().slice(amountDue.indexOf('.') + 1));
        var dollars = amountDue.toString().slice(0, amountDue.indexOf('.')) || 0;
        return dollars + '.' + cents.padEnd(2, '0');
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.removeCommas', [])
    .filter('removeCommas', function capitalize() {
      return function(amt) {
        if (!amt) {
          return '';
        }

        return amt.replace(/,/g, '');
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.toDropDownFilter', [])
    .filter('toDropDownFilter', [
      '$rootScope',
      function toDropDownFilter($rootScope) {
        return function(input, startMonth) {
          if (startMonth) {
            var endMonthList;
            var index;
            var currentYear = $rootScope.loc[moment(startMonth).format('MMMM').toUpperCase()] + moment(startMonth).format(' YYYY');
            function month(selectedMonth){
              return selectedMonth.name == currentYear;
            };
            index = input.findIndex(month);
            endMonthList = input.slice(index);
            return endMonthList;
          }
          else {
            return input;
          }
        }
      }]);
  })();

/**
 * Service for managing Adobe Mobile Services
 *
 * @namespace Services
 * @class adobeService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.adobe', [])
    .directive('trackAction', [
      function() {
        return {
          restrict: 'A',
          controller: [
            '$scope',
            'adobeService',
            'analyticConstants',
            function($scope, adobeService, analyticConstants) {
              $scope.trackAction = adobeService.trackAction;
              $scope.analyticConstants = analyticConstants;
            },
          ],
          link: function($scope, $elem, $attr) {
            $elem.on('click', function() {
              var trackActionInfo = $scope.$eval($attr.trackAction);
              if (!trackActionInfo) {
                return console.warn('track action called with nothing passed in');
              }
              $scope.trackAction(
                trackActionInfo.action,
                trackActionInfo.section,
                trackActionInfo.details
              );
            });
          },
        };
      },
    ])
    .service('adobeService', [
      '$rootScope',
      '$window',
      'analyticConstants',
      function($rootScope, $window, analyticConstants) {
        var validSections = [];
        var sections = Object.keys(analyticConstants).filter(function(value) {
          return value.includes('SECTION');
        });

        sections.forEach(function(value) {
          validSections.push(analyticConstants[value]);
        });
        /**
         * Returns tracking details from information provided and rootscope variables.
         *
         * @param {Object} [details] Information that should be included in the tracking details.
         * @param {String} section   The section of the app the details correspond to.
         */
        function getTrackingDetails(details, section) {
          var trackingDetails = {
            loggedIn: $rootScope.loggedIn || false,
            language: getRootScopeLanguage(),
            section: getTrackingSection(section)
          };

          if (trackingDetails.loggedIn) {
            if (typeof details === 'string') {
              trackingDetails.query = details;
            }

            if ($rootScope.analyticsInfo) {
              trackingDetails.personId = $rootScope.analyticsInfo.info1;
              trackingDetails.ruid = $rootScope.analyticsInfo.info2;
            }

            if ($rootScope.selectedPolicy) {
              var i = $rootScope.selectedPolicy.index;

              trackingDetails.groupNumber = $rootScope.selectedPolicy.groupNumber;
              trackingDetails.groupName = $rootScope.selectedPolicy.groupName;
              trackingDetails.lobCode = $rootScope.selectedPolicy.lobCode;
              trackingDetails.isActive = $rootScope.selectedPolicy.active;

              if (
                $rootScope.selectedPolicy.policyMembers &&
                i < $rootScope.selectedPolicy.policyMembers.length
              ) {
                trackingDetails.ageRange = getAgeRange(
                  +$rootScope.selectedPolicy.policyMembers[i].ageNumber
                );
                trackingDetails.relationship =
                  getRelationship($rootScope.selectedPolicy.policyMembers[i].subscriberRelationshipCode);
                trackingDetails.gender = $rootScope.selectedPolicy.policyMembers[i].gender;
              }
            }
          }

          if (typeof details !== 'undefined' && typeof details === 'object') {
            trackingDetails = appendProperties(null, details, trackingDetails);
          }

          return trackingDetails;
        }

        // produces a flatten hierarchy of properties since adobe can only handle primitive values
        // input --> level1: {level2: {name2: 'value2'}, name1: 'value1'}
        // output--> level1.level2.name2 = 'value2', level1.name1 = 'value1'
        function appendProperties(prefix, properties, combinedProperties) {
            for (var key in properties) {
              var fullkey = prefix ? prefix + '.' + key : key;
              if (typeof properties[key] === 'object') {
                combinedProperties = appendProperties(fullkey, properties[key], combinedProperties);
              } else {
                combinedProperties[fullkey] = properties[key];
              }
            }

          return combinedProperties;
        }

        /**
         * Returns tracking section from information provided, uses analyticConstants
         *
         * @param {String} currentSection   The section of the app the details correspond to.
         * @see analyticConstants
         */
        function getTrackingSection(currentSection) {
          var section = '*' + currentSection;

          switch (true) {
            case validSections.includes(currentSection):
              section = currentSection;
              break;
            case /Billing/.test(currentSection):
              section = analyticConstants.BILLING_SECTION;
              break;
            case /Healthnav/.test(currentSection):
            case /find/i.test(currentSection):
              section = analyticConstants.HEALTHNAV_SECTION;
              break;
            case /Home/.test(currentSection):
              section = analyticConstants.HOME_SECTION;
              break;
            case /Menu/.test(currentSection):
              section = analyticConstants.MENU_SECTION;
              break;
            case /Id-card/.test(currentSection):
              section = analyticConstants.IDCARD_SECTION;
              break;
            case /Login/.test(currentSection):
              section = analyticConstants.LOGIN_SECTION;
              break;
            case /Setup/.test(currentSection):
              section = analyticConstants.SETTINGS_SECTION;
              break;
            case /inbox/i.test(currentSection):
              section = analyticConstants.INBOX_SECTION;
              break;
            case /Claim/.test(currentSection):
              section = analyticConstants.CLAIMS_SECTION;
              break;
            case /Benefit/.test(currentSection):
              section = analyticConstants.BENEFITS_SECTION;
              break;
            case /About/.test(currentSection):
            case /Feedback/.test(currentSection):
            case /customer-service/i.test(currentSection):
              section = analyticConstants.HELP_SECTION;
              break;
          }
          return section;
        }

        function getRootScopeLanguage() {
          var language = $rootScope.language || $window.navigator.language;
          var languages = {
            en: 'English',
            'en-US': 'English',
            es: 'Spanish',
            'es-US': 'Spanish',
            'es-ES': 'Spanish',
          };
          return languages[language] || language;
        }

        /**
         * Returns age range group that the provided age falls in.
         *
         * @param {number} age The age to categorize.
         *
         */
        function getAgeRange(age) {
          var ageRange = 'Unspecified';

          switch (true) {
            case age > 64:
              ageRange = '65 and Over';
              break;
            case age > 59:
              ageRange = '60 to 64';
              break;
            case age > 49:
              ageRange = '50 to 59';
              break;
            case age > 39:
              ageRange = '40 to 49';
              break;
            case age > 29:
              ageRange = '30 to 39';
              break;
            case age > 17:
              ageRange = '18 to 29';
              break;
            case age < 18:
              ageRange = 'Under 18';
              break;
          }

          return ageRange;
        }

        /**
         * Returns desktop relationship value from mobile one provided.
         *
         * @param {String} currentRelationship   The mobile relationship to convert.
         */
        function getRelationship(currentRelationship) {
          var relationship = '*' + currentRelationship;

          switch (true) {
            case /SUB/.test(currentRelationship):
              relationship = 'self';
              break;
            case /SPS/.test(currentRelationship):
              relationship = 'spouse';
              break;
            case /CHD/.test(currentRelationship):
              relationship = 'dependent';
              break;
            case /DBO/.test(currentRelationship):
              relationship = 'domestic_partner';
              break;
            case /OTH/.test(currentRelationship):
              relationship = 'other';
              break;
          }
          return relationship;
        }

        /**
         * Tracks an action inside the app.
         *
         * @memberof adobeService
         * @method trackAction
         * @param {String} eventName      The name of the event to track.
         * @param {String} section        The section of the app the event is in.
         * @param {Object} [eventDetails] Information object on the event.
         */
        this.trackAction = function(eventName, section, eventDetails) {
          var trackingDetails = getTrackingDetails(eventDetails, section);

          if ($window.ADB) {
            $window.ADB.trackAction(eventName, trackingDetails);
          } else {
            console.log('ADBTrackAction:', eventName, trackingDetails);
          }
        };

        /**
         * Tracks a change in app state.
         *
         * @memberof adobeService
         * @method trackState
         * @param {String} stateName      The name of the state to track.
         * @param {String} section        The section of the app the state is in.
         * @param {Object} [stateDetails] Information object on the state.
         */
        this.trackState = function(stateName, section, stateDetails) {
          var trackingDetails = getTrackingDetails(stateDetails, section);

          // short term debug for page equals billing
          if (stateName === 'billing') {
            trackingDetails.misc = new Error('billing').stack;
          }

          if ($window.ADB) {
            $window.ADB.trackState(stateName, trackingDetails);
          } else {
            console.log('ADBTrackState:', stateName, trackingDetails);
          }
        };
      },
    ]);
})();
/**
 * Service for showing an alert modal.
 *
 * @namespace Services
 * @class alertService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.alert', [])
    .service('alertService', [
      '$q',
      '$rootScope',
      '$sce',
      function($q, $rootScope, $sce) {
        /**
         * Shows an alert modal. It has a manditory confirm button and an optional cancel button.
         *
         * @memberof alertService
         * @method showAlert
         * @param  {String}  title          The text to display in the alert modal header.
         * @param  {String}  body           The text to display in the alert modal body.
         * @param  {Object} [confirmButton] Confirm button settings. It has two variables, title and color ('red','blue' or 'green').
         * @param  {Object} [cancelButton]  Cancel button settings. Uses the same variables as the confirm button.
         * @return {Promise} A promise that resolves or rejects, based on whether the alert was accepted or cancelled.
         */
        this.showAlert = function(title, body, confirmButton, cancelButton, style) {
          var deferred = $q.defer();

          $rootScope.alertModal = {
            title: title,
            body: $sce.trustAsHtml(body),
            confirmButton: confirmButton,
            cancelButton: cancelButton,
            style: style,
            result: function(confirm) {
              if (confirm) {
                angular.element('.alert-modal').modal('hide');
                $rootScope.blurContent = false;
                deferred.resolve();
              }
              else {
                angular.element('.alert-modal').modal('hide');
                $rootScope.blurContent = false;
                deferred.reject();
              }
              toggleModalState(false);
            }
          };


          $rootScope.blurContent = true;
          angular.element('.alert-modal').modal('show');
          toggleModalState(true);
          return deferred.promise;
        };
        /* Hides an alert modal before loading the login page
         *
         * @method closeAlert
         */
        this.closeAlert = function() {
          angular.element('.alert-modal').modal('hide');
          angular.element('.help-modal').modal('hide');
          angular.element('.terms-modal').modal('hide');
          $rootScope.blurContent = false;
          toggleModalState(false);
        };

        function toggleModalState(isModalOpen) {
          $rootScope.isModalOpen = isModalOpen;
        }
      }
    ]);
}());

/**
 * Service for communication with Androids's Fingerprint SDK.
 *
 * @namespace Services
 * @class androidFingerprintAuthService
 */
(function() {
	'use strict';

	angular.module('blueconnect.mobile.services.androidFingerprintAuth', [])
		.service('androidFingerprintAuthService', [
			'$rootScope',
			function($rootScope) {
				var parent = this;

				this.isAvailableSuccess = function (result) {
					// alert("FingerprintAuth available: " + JSON.stringify(result));
					if (result.isAvailable) {
						var encryptConfig = {
							clientId: "myAppName",
							username: "currentUser",
							password: "currentUserPassword",
	            disableBackup: true
						}; // See config object for required parameters
						FingerprintAuth.encrypt(encryptConfig, parent.successCallback, parent.errorCallback);
					}
				};

				this.isAvailableError = function (message) {
					// alert("isAvailableError(): " + message);
				};

				this.successCallback = function(result) {
					$rootScope.fingerprintOK();
				};

				this.errorCallback = function (error) {
					$rootScope.fingerprintNotOK();
				};

				var onPause = function () {
					// CRIT [ TODO: This application has been suspended. Save application state here.]
				};

				var onResume = function () {
					// CRIT [ TODO: This application has been reactivated. Restore application state here.]
				};

				if (typeof cordova !== 'undefined') {
					document.addEventListener('deviceready', function() {

						document.addEventListener( 'pause', onPause.bind( this ), false );
						document.addEventListener( 'resume', onResume.bind( this ), false );

					});
				}
			}
		]);
}());

/**
 * Services for the back button.
 *
 * @namespace Services
 * @class backButtonService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.backButton', [])
  .service('backButtonService', [
    '$rootScope',
    '$location',
    'TransparencyFactory',
    function($rootScope, $location, TransparencyFactory) {
      this.backButtonFunction = function() {
        $rootScope.resultsTermsArr = [];
        $rootScope.filtersDataArr = [];
        $rootScope.resultsDetailsTermArr = [];
        $rootScope.$on('$locationChangeStart', function () {
          // Skip fiter page
          if ($location.path() === '/find-doctor-filter') {
            if (!$rootScope.newFilter) {
              $rootScope.filtersDataArr.shift();
              var filtersData = $rootScope.filtersDataArr[0] || '';
              TransparencyFactory.setFilterTierSelectedTerm(filtersData.tierData || '');
              TransparencyFactory.setFilterSpecialtySelectedTerm(filtersData.specialty || '');
              TransparencyFactory.setFilterGenderSelectedTerm(filtersData.gender || '');
  
              window.history.back();
            } else {
              $rootScope.newFilter = false;
            }
          }
        });
  
        $rootScope.$on('$locationChangeSuccess', function () {
          // Track previous URL for go-back button
          var args = Array.prototype.slice.call(arguments);
          if (!$rootScope.routes) {
            $rootScope.routes = {
              current: args[1],
              previous: args[2],
              history: args.slice(1, 2)
            };
          } else {
            if (!/find-doctor-filter/.test(args[1])) {
              $rootScope.routes = {
                current: args[1],
                previous: args[2],
                history: $rootScope.routes.history.concat([args[1]])
              };
            }
          }
          if ($rootScope.routes && $rootScope.routes.history.length > 7) {
            $rootScope.routes.history = $rootScope.routes.history.slice(1);
          }
          // End of Track previous URL for go-back button
  
          if ($location.path() === '/find-doctor-browser') {
            // reset fromBackButton to false
            if ($rootScope.fromBackButton) {
              $rootScope.fromBackButton = false;
            }
          }
  
          if ($location.path() === '/find-doctor-search-results') {
            if ($rootScope.fromBackButton) {
              $rootScope.fromBackButton = false;
            } else {
              $rootScope.resultsTermsArr.unshift(TransparencyFactory.getResultsTerm());
            }
          }
  
          if ($location.path() === '/find-doctor-results-details') {
            if ($rootScope.detailsFromBackButton) {
              $rootScope.detailsFromBackButton = false;
            } else {
              $rootScope.resultsDetailsTermArr.unshift(TransparencyFactory.getResultsDetailsTerm());
            }
          }
  
          // reset fromBackButton to false
          if (!$rootScope.loggedIn && $location.path() === '/find-doctor-search') {
            $rootScope.fromBackButton = false;
            $rootScope.detailsFromBackButton = false;
          }
  
          // reset history arrays & fromBackButton to initial values
          if ((!$rootScope.loggedIn && $location.path() === '/login') || 
              ($rootScope.loggedIn && $location.path() === '/home') || 
              ($rootScope.loggedIn && $location.path() === '/find-doctor-search')) {
            $rootScope.resultsTermsArr = [];
            $rootScope.filtersDataArr = [];
            $rootScope.resultsDetailsTermArr = [];
            $rootScope.fromBackButton = false;
            $rootScope.detailsFromBackButton = false;
          }
        });
      };
    }
  ]);
}());
(function() {
  angular
    .module('blueconnect.mobile.services.billingInvoiceHistoryFactory', [])
    .factory('BillingInvoiceHistoryFactory', [function() {
      // Moment object dates
      var searchFromDate = null;
      var searchToDate = null;
      var serviceDateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZZ';

      var userSetData = {
        historyType: 'A',
        timeSpan: '3',
        token: null,
        dateList: null,
        startIndex: null,
        endIndex: null,
        startDate: null,
        endDate: null
      };

      return {
        serviceFormattedSearchFromDate: serviceFormattedSearchFromDate,
        getSearchFromDate: getSearchFromDate,
        setSearchFromDate: setSearchFromDate,
        serviceFormattedSearchToDate: serviceFormattedSearchToDate,
        getSearchToDate: getSearchToDate,
        setSearchToDate: setSearchToDate,
        getFilterTimespan: getFilterTimespan,
        getHistoryType: getHistoryType,
        setHistoryType: setHistoryType,
        getUserSetData: getUserSetData,
        getTimeSpan: getTimeSpan,
        setTimeSpan: setTimeSpan,
        getDateList: getDateList,
        setDateList: setDateList,
        getStartIndex: getStartIndex,
        setStartIndex: setStartIndex,
        getEndIndex: getEndIndex,
        setEndIndex: setEndIndex,
        getStartDate: getStartDate,
        setStartDate: setStartDate,
        getEndDate: getEndDate,
        setEndDate: setEndDate,
        getAccountToken: getAccountToken,
        setAccountToken: setAccountToken,
        setMedicareSSAValue: setMedicareSSAValue,
        getMedicareSSAValue: getMedicareSSAValue,
        resetFilter: resetFilter
      };

      /**
       * @return {string}
       */
      function serviceFormattedSearchFromDate() {
        return momentSearchFromDate().format(serviceDateTimeFormat);
      }
      /**
       * @return {Moment}
       */
      function momentSearchFromDate() {
        return searchFromDate || moment(momentSearchToDate()).subtract(3, 'months');
      }
      /**
       *
       */
      function setSearchFromDate(setDate) {
        searchFromDate = setDate;
      }

      function getSearchFromDate() {
        return searchFromDate;
      }

      /**
       * @return {string}
       */
      function serviceFormattedSearchToDate() {
        return momentSearchToDate().add(1, 'M').format(serviceDateTimeFormat);
      }
      /**
       * @return {Moment}
       */
      function momentSearchToDate() {
        return searchToDate || moment();
      }
      /**
       *
       */
      function setSearchToDate(setDate) {
        searchToDate = setDate;
      }
      function getSearchToDate() {
        return searchToDate;
      }
      /**
       * @typedef {InvoiceTimeSpan}
       * @param {Moment} searchFromDate
       * @param {Moment} searchToDate
       * @param {Number} timespan - Months between the searchFromDate and the searchToDate
       */

       /**
       * @return {InvoiceTimespan}
       */
      function getFilterTimespan() {
        return {
          searchFromDate: momentSearchFromDate(),
          searchToDate: momentSearchToDate(),
          timespan: getTimeSpan()
        };
      }

      function getHistoryType() {
        return userSetData.historyType;
      }
      function setHistoryType(type) {
        userSetData.historyType = type;
        return userSetData.historyType;
      }
      function getTimeSpan() {
        return userSetData.timeSpan;
      }
      function setTimeSpan(timespan) {
        userSetData.timeSpan = timespan;
        return userSetData.timeSpan;
      }
      function getDateList() {
        return userSetData.dateList;
      }
      function setDateList(dateList) {
        userSetData.dateList = dateList;
        return userSetData.dateList;
      }
      function getUserSetData() {
        return userSetData;
      }
      function getStartIndex() {
        return userSetData.startIndex;
      }
      function setStartIndex(startIndex) {
        userSetData.startIndex = startIndex;
        return userSetData.startIndex;
      }
      function getEndIndex() {
        return userSetData.endIndex;
      }
      function setEndIndex(endIndex) {
        userSetData.endIndex = endIndex;
        return userSetData.endIndex;
      }
      function getStartDate() {
        return userSetData.startDate;
      }
      function setStartDate(startDate) {
        userSetData.startDate = startDate;
        return userSetData.startDate;
      }
      function getEndDate() {
        return userSetData.endDate;
      }
      function setEndDate(endDate) {
        userSetData.endDate = endDate;
        return userSetData.endDate;
      }
      function getAccountToken() {
        return userSetData.token;
      }
      function setAccountToken(token) {
        userSetData.token = token;
        return userSetData;
      }
      function getMedicareSSAValue() {
        return userSetData.medicareSSA;
      }
      function setMedicareSSAValue(value) {
        userSetData.medicareSSA = value;
        return userSetData;
      }

      /**
       *
       */
      function resetFilter() {
        searchFromDate = null;
        searchToDate = null;
        setHistoryType('A');
        setTimeSpan('3');
      }
    }]);
})();
/**
 * Service for working with claims.
 *
 * @namespace Services
 * @class claimsService
 */

(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.claims', [])
    .service('claimsService', [
      '$rootScope',
      function($rootScope) {
        /**
         * This method generates the service request for the user entering search keywords.
         *
         * @memberof claimsService
         * @method generateSearchQuery
         * @param  {String}  userQuery         The keyword value entered by user for searching.
         * @param  {Date}    policyStartMonth  The currently selected policy's start date.
         * @param  {Date}    policyEndMonth    The currently selected policy's end date.
         */
        this.generateSearchQuery = function(
          userQuery,
          policyStartMonth,
          policyEndMonth
        ) {
          var basicSearch =
            'keyword=' +
            userQuery +
            '&' +
            'fromDate=' +
            '' +
            '&' +
            'toDate=' +
            '';

          return basicSearch;
        };

        /**
         * This method generates the service request for the user entering filter criteria.
         *
         * @memberof claimsService
         * @method generateFilterQuery
         * @param  {Object}  selection         The holding area for those member's selected.
         * @param  {String}  claimsStatus      The selected status for the claim.
         * @param  {Date}    startMonth        The starting filter date.
         * @param  {Date}    endMonth          The ending filter date.
         * @param  {Date}    policyStartMonth  The currently selected policy's start date.
         * @param  {Date}    policyEndMonth    The currently selected policy's end date.
         * @param  {String}  keyword           The currently selected keyword passed in
         */
        this.generateFilterQuery = function(
          selection,
          claimsStatus,
          startMonth,
          endMonth,
          policyStartMonth,
          policyEndMonth,
          keyword
        ) {
          claimsStatus = claimsStatus || '';
          startMonth = startMonth || '';
          endMonth = endMonth || '';
          policyStartMonth = policyStartMonth || '';
          policyEndMonth = policyEndMonth || '';
          keyword = keyword || '';

          var selectionArray = [];
          var queryPath =
            'claimsStatus=' +
            claimsStatus +
            '&' +
            'fromDate=' +
            startMonth +
            '&' +
            'toDate=' +
            endMonth +
            '&' +
            'keyword=' +
            keyword;

          if (selection != undefined) {
            var selectionString = String(selection);
            selectionArray = selectionString.split(',');
            for (var index = 0; index < selectionArray.length; index++) {
              queryPath += '&dependentNo=' + selectionArray[index];
            }
          }

          //console.log('Front End Query: ' + queryPath);

          return queryPath;
        };

        /**
         * This method generates filter date dropdown lists for the searching claims.
         *
         * @memberof claimsService
         * @method generateFilterDates
         * @param  {Object}  selectedPolicy  The currently selected policy.
         */
        this.generateFilterDates = function(selectedPolicy) {
          var filteredDates = {
            startDates: [],
            endDates: [],
          };

          var ONE_DAY = 1000 * 60 * 60 * 24;
          var policyStartDate = new Date(selectedPolicy.effectiveDate);
          var policyEndDate = new Date(selectedPolicy.expirationDate);

          if (
            Math.ceil(
              (policyEndDate.getTime() - policyStartDate.getTime()) / ONE_DAY
            ) <= 31
          ) {
            //Valid for only one month
            filteredDates.startDates.push(createDateValue(policyStartDate));
            filteredDates.endDates.push(createDateValue(policyEndDate));
          } else if (policyEndDate.getFullYear() >= 2099) {
            //Active Policy with no effective end date
            policyEndDate = new Date(policyStartDate.getFullYear(), 11, 31);
            generateDateOptions(policyStartDate, policyEndDate, filteredDates);
          } else {
            generateDateOptions(policyStartDate, policyEndDate, filteredDates);
          }

          return filteredDates;
        };

        /**
         * This sets the default members list to all checked or all not checked.
         *
         * @memberof claimsService
         * @method initializeMemberList
         * @param {Object}  members         The members associated with the current policy.
         * @param {boolean} isChecked       The flag used to determine if all members are selected or not.
         */
        this.initializeMemberList = function(members, isChecked) {
          var membersSelected = [];

          if (isChecked) {
            for (var i = 0; i < members.length; i++) {
              membersSelected.push(members[i].dependentNo);
            }
          }

          return membersSelected;
        };

        /**
         * This is used to reset the filter ribbon text to its default values
         *
         * @memberof claimsService
         * @method displayNoFilterText
         */
        this.displayNoFilterText = function() {
          return $rootScope.loc.CLAIMS_NO_FILTER;
        };

        /**
         * This is used to display the claims count within filter ribbon text.
         *
         * @memberof claimsService
         * @method displayClaimsCount
         * @param {Object}  claims         The collection of claims used to determine count
         */
        this.displayClaimsCount = function(claims) {
          var claimsCount = claims.length;
          var claimsCountText = '';

          if (claimsCount === 1) {
            claimsCountText = claimsCount + ' ' + $rootScope.loc.CLAIM;
          } else if (claimsCount === 0 || claimsCount > 1) {
            claimsCountText = claimsCount + ' ' + $rootScope.loc.CLAIMS;
          }

          return claimsCountText;
        };

        var generateDateOptions = function(startDate, endDate, filteredDates) {
          var nextMonth = new Date(
            startDate.getFullYear(),
            startDate.getMonth(),
            1
          );

          while (nextMonth <= endDate) {
            var startOfMonth = new Date(
              nextMonth.getFullYear(),
              nextMonth.getMonth(),
              1
            );
            var endOfMonth = new Date(
              nextMonth.getFullYear(),
              nextMonth.getMonth() + 1,
              0
            );

            filteredDates.startDates.push(createDateValue(startOfMonth));
            filteredDates.endDates.push(createDateValue(endOfMonth));

            nextMonth.setMonth(nextMonth.getMonth() + 1);
          }
        };

        var createDateValue = function(dateValue) {
          var newDate = {
            id: dateValue.getFullYear() + '-' + dateValue.getMonth(),
            name:
              $rootScope.loc[
                moment(dateValue)
                  .format('MMMM')
                  .toUpperCase()
              ] + moment(dateValue).format(' YYYY'),
            value: moment(dateValue).format('YYYY-MM-DD'),
          };

          return newDate;
        };
      },
    ]);
})();

/**
 * @description Service for showing an alert modal.
 * @namespace Services
 * @class alertService
 */
(function() {
  'use strict';

  angular
  .module('blueconnect.mobile.services.coachmark', [])
  .factory('coachmarkService', [
    '$rootScope',
    '$timeout',
    'restService',
    function($rootScope, $timeout, restService) {
      var coachmarksData = {};
      return {
        getCoachmarkData: function (page) {
          var queryString = "show=" + page + '&policyIndex=' + $rootScope.policyIndex
                            + '&policyExternalId=' + $rootScope.selectedPolicy.externalId +
                            "&policyEffectiveDate=" + $rootScope.selectedPolicy.effectiveDate + "&policyExpirationDate=" + $rootScope.selectedPolicy.expirationDate;

          return restService
            .getData('coachmarks?' + queryString, $rootScope.language || 'en')
            .then(function(result) {
              if (result.data && result.data.pages) {
                coachmarksData[page] = result.data;
              }
              return result;
            });
        },
        /**
         * @description Displays a coachmark for the specified page.
         * @memberof MainController
         * @method showCoachmark
         */
        showCoachmarks: function(page) {
          return this
            .getCoachmarkData(page)
            .then(function(result) {
              return $timeout(function() {
                angular
                  .element('.coachmark')
                  .scope()
                  .show(result);
              }, result.delay || 250);
          });
        }

      };
    }
  ]);
}());
/**
 * @description Services for managing actions only taken with physical devices.
 * @namespace Services
 * @class cordovaService
 */
(function() {
  "use strict";

  angular
    .module("blueconnect.mobile.services.cordova", [
      "blueconnect.mobile.services.touchId"
    ])
    .service('cordovaService', [
      '$rootScope',
      '$q',
      '$http',
      'alertService',
      'loginService',
      'storageService',
      'config',
      function ($rootScope, $q, $http, alertService, loginService, storageService, config) {
        /**
         * @description Checks device platform and OS version to determine if it's an old device.
         * @memberof cordovaService
         * @method checkForLowResDevice
         */

        this.checkForLowResDevice = function() {
          if (typeof cordova === "undefined") {
            return;
          }

          $rootScope.device = device.platform;
          $rootScope.lowResDevice = false;

          switch (device.platform) {
            case "iOS":
              var iosVersion = device.version;
              if (parseFloat(iosVersion) < 8) {
                $rootScope.lowResDevice = true;
              }
              break;
            case "Android":
            case "amazon-fireos":
              var androidVersion = device.version;
              if (androidVersion.indexOf("-") > -1) {
                androidVersion = androidVersion.substr(
                  0,
                  androidVersion.indexOf("-") + 1
                );
              }
              if (parseFloat(androidVersion) < 4.4) {
                $rootScope.lowResDevice = true;
              }
              break;
            default:
              break;
          }
        };

        this.deviceIsBrowser = function() {
          var deviceType = this.checkDeviceType();
          return deviceType.ios === false && deviceType.android === false;
        };

        // Checks for the device type, iphone or android.
        this.checkDeviceType = function () {
          if (typeof cordova === 'undefined' || typeof device === 'undefined') {
            return {
              ios: false,
              android: false
            };
          }

          $rootScope.device = device.platform;
          $rootScope.iphone = device.platform === "iOS";
          $rootScope.android =
            device.platform == "Android" || device.platform == "amazon-fireos";

          var platform = device.platform.toLowerCase();
          return {
            ios: platform === "ios",
            android: platform === "android" || platform === "amazon-fireos"
          };
        };

        /**
         * @description This method is called by the Settings page to update the local database.
         * @memberof cordovaService
         * @method updateAppSettings
         * @params {String} appKeyType The key for the data to be saved.
         * @params {Object} settingContent The data to be saved in the local database.
         * @return {Promise} A promise that resolves when the settings have been saved.
         */
        this.updateAppSettings = function (appKeyType, settingContent) {
          var apiUrl = config.apiUrl || 'https://api.bcbsnc.com';
          return $http.put(apiUrl + '/settings/' + appKeyType, settingContent)
        };

        /**
         * Opens a URL in the browser (internal or external).
         *
         * @memberof cordovaService
         * @method openInBrowser
         * @param  {String}  url       The URL to open.
         * @param  {String}  [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object}  [options] cordova-plugin-inappbrower options.
         * @param  {Boolean} [secure]  Whether or not the connection is through SSO
         */
        this.openInBrowser = function(url, target, options, secure) {
          var self = this;
          var ref = null;
          var page = null;

          switch (true) {
            case url.page === "RxClmDetl":
              page = url.page;
              url = url.ssoLink;
              break;
            case url.indexOf("findavisionprovider") > -1: 
              page = "SSO-VisionVndr";
              break;
            case url === "sso:cvs": 
              page = "SSO-CVS";
              break;  
          }

          alertService
            .showAlert(
              $rootScope.loc.EXTERNAL_LINK,
              $rootScope.loc.EXTERNAL_LINK_WARNING,
              {
                title: $rootScope.loc.CONTINUE,
                color: "blue"
              },
              {
                title: $rootScope.loc.CANCEL
              }
            )
            .then(function() {
              // To view prescription drug claims
              if (page) {
                var apiUrl = config.apiUrl
                  ? config.apiUrl + "/" + config.apiVersion
                  : "https://mobile.bcbsnc.com/api";
                var query = {
                  policyindex: $rootScope.policyIndex,
                  pageTph: page,
                  lobCode: $rootScope.selectedPolicy.lobCode,
                  groupId: $rootScope.selectedPolicy.groupNumber,
                  sourceSystem: $rootScope.selectedPolicy.sourceSystem,
                  policyMemberId:
                    $rootScope.selectedPolicy.alphaPrefix +
                    $rootScope.selectedPolicy.externalId
                };
                $http.post(apiUrl + "/touch-point", query).then(function() {
                  return;
                });
              }

              if (typeof cordova !== "undefined") {
                if (typeof options === "undefined") {
                  options = {
                    location: "yes"
                  };
                }

                var optionsString = "";
                for (var key in options) {
                  if (optionsString.length) {
                    optionsString += ",";
                  }
                  optionsString += key + "=" + options[key];
                }
                if (secure) {
                  $rootScope.$emit("pageLoading");
                  switch (url.split(":")[0]) {
                    case "sso":
                      self.setupSSO(url).then(function(result) {
                        $rootScope.$emit("pageLoaded");
                        ref = cordova.InAppBrowser.open(
                          result,
                          target || "_blank",
                          optionsString
                        );
                      });
                      break;
                    case "appsso":
                      self.setupSSOApp(url).then(function(result) {
                        $rootScope.$emit("pageLoaded");
                        var scheme;
                        var storeUrl;
                        self.checkDeviceType();
                        if ($rootScope.iphone) {
                          scheme = "heqmobile://";
                          storeUrl =
                            "itms://itunes.apple.com/us/app/healthequity-mobile/id642959434?mt=8";
                        } else {
                          scheme = "com.healthequity.healthequitymobile";
                          storeUrl =
                            "http://play.google.com/store/apps/details?id=" +
                            scheme;
                        }
                        appAvailability.check(
                          scheme,
                          function() {
                            self.getHeqApp(result, optionsString);
                          },
                          function() {
                            window.open(storeUrl);
                          }
                        );
                      });
                      break;
                    case "mbsso":
                      self.getSecureDesktopLink(url).then(function(result) {
                        $rootScope.$emit("pageLoaded");
                        ref = cordova.InAppBrowser.open(
                          result,
                          target || "_blank",
                          optionsString
                        );
                      });
                      break;
                    default:
                      ref = cordova.InAppBrowser.open(
                        config.bcbsWebUrl + "/" + url,
                        target || "_blank",
                        optionsString
                      );
                      break;
                  }
                } else {
                  ref = cordova.InAppBrowser.open(
                    url,
                    target || "_blank",
                    optionsString
                  );
                  ref.addEventListener("loadstart", function(event) {
                    if (event.url.match("mobile/close")) {
                      ref.close();
                    }
                  });
                }
              }
            });
        };

        this.setAppSettings = function() {
          return $q.reject(
            "Do not use this method: setAppSettings in cordovaService"
          );
        };
        this.saveAppSetting = function(key, value) {
          return $q.reject(
            "Do not use this method: saveAppSetting in cordovaService"
          );
        };

        /**
         * Stores app settings to encrypted storage.
         *
         * @memberof cordovaService
         * @method storeAppSettings
         * @param {Object} settings The app settings to store.
         */
        this.storeAppSettings = function(settings) {
          if (typeof cordova === "undefined") {
            return $q.reject("cordova is not available");
          }

          return storageService
            .set("appSettings", settings)
            .then(function(result) {
              console.log("App settings saved.");
              return result;
            })
            .catch(function(error) {
              console.warn(error);
              return error;
            });
        };

        /**
         * @description Adds a watcher on login settings to auto save them in secure storage.
         * @memberof cordovaService
         * @method addAppSettingsWatch
         */
        // TODO: make this work with new login storage
        this.addAppSettingsWatch = function() {
          var self = this;

          if (typeof cordova === "undefined") {
            return;
          }

          $rootScope.$watch(
            "appSettings",
            function(newVal, oldVal) {
              if (newVal !== oldVal) {
                self.storeAppSettings(newVal);
              }
            },
            true
          );
        };

        this.getHeqApp = function(result, optionsString) {
          $rootScope.$emit("pageLoaded");
          optionsString += ",hidden=yes";
          var ref = cordova.InAppBrowser.open(result, "_blank", optionsString);
          ref.addEventListener("loaderror", function(error) {
            console.log(error);
          });
          ref.addEventListener("loadstart", function(event) {
            console.log(event.url);
            if (event.url.indexOf("heqmobile") === 0) {
              ref.close();
              window.open(event.url);
            }
          });
        };

        this.getSecureDesktopLink = function (url) {
          var bearerToken = null;
          var urlComponents = url.toLowerCase().split(':');
          var ssourl = urlComponents[0];
          var getHeaders = urlComponents[1];

          $rootScope.$emit('pageLoading');
          return loginService
            .getAuthorization()
            .then(function(authObject) {
              bearerToken = 'Bearer ' + authObject.accessToken;
              return $http.get(config.apiUrl + '/get-sso-json');
            })
            .then(function (result) {
              var headers = result.data[getHeaders];
              return $http({
                method: 'POST',
                url: config.bcbsWebMobileUrl + '/' + ssourl,
                headers: {
                  'Authorization': bearerToken,
                  'ssorelaystate': headers.ssorelaystate,
                  'Content-Type': 'application/x-www-form-urlencoded'
                }
              });
            })
            .then(function (result) {
              $rootScope.$emit('pageLoaded');
              return ('data:text/html;base64,' + btoa(result.data));
            })
            .catch(function(error) {
              console.warn('Error in SSO', error);
              $rootScope.$emit('pageLoaded');
            });
        };

        /**
         * Handles the SSO setup process.
         *
         * @memberof cordovaService
         * @method getSSO
         * @return {Promise} A promise that resolves to a SAML response.
         */
        this.setupSSO = function(url) {
          var self = this;
          var deferred = $q.defer();
          var dataObjIn = null;
          // Use components for dynamic SSO config
          var components = url
            .toLowerCase()
            .substr(4)
            .split(":");
          var vendor = components[0];
          var deepLink = components[1];

          // Step 1.  Get SSO Configuration from Blue Connect
          this.getSSOVendorData()

            // Step 2.  Get Secure Cookies
            .then(function() {
              $rootScope.$emit("pageLoading");
              return $http.get(
                self.getMobileURL(config.bcbsWebUrl) +
                  "/members/secure/index.htm"
              );
            })
            .then(
              function() {
                return true;
              },
              function() {
                return true;
              }
            )

            // Step 3.  Pass Through Convenience Method (if applicable)
            .then(function() {

              $rootScope.$emit("pageLoading");
              if (
                $rootScope.ssoData[vendor].technique === "convenience" ||
                $rootScope.ssoData[vendor].technique === "heq"
              ) {
                if (vendor === "vitals") {
                  dataObjIn = {
                    policyIndex: 0,
                    //urgentcareFlag: 'N',
                    //teleHealthVendor: 'MDLIVE',
                    //fundBalance: 'false',
                    urgentcareFlag: "",
                    teleHealthVendor: "",
                    fundBalance: "",
                    teleHealthRedirectURL:
                      "https://www.bcbsnc.com/members/secure/doctors/telehealth.htm"
                  };
                } else if (vendor === "prime"){
                  if ($rootScope.futurePolicy){
                    dataObjIn = {
                      policyIndex: 1
                    };
                  } else {
                    dataObjIn = {
                      policyIndex: 0
                    };
                  }
                } else {
                  dataObjIn = {
                    policyIndex: 0
                  };
                }

                var url = self.getMobileURL(
                  $rootScope.ssoData[vendor].urlList["configureUrl"]
                );

                return $http({
                  method: "POST",
                  url: url,
                  headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                  },
                  transformRequest: function(obj) {
                    var str = [];
                    for (var p in obj) {
                      str.push(
                        encodeURIComponent(p) + "=" + encodeURIComponent(obj[p])
                      );
                    }
                    return str.join("&");
                  },
                  data: dataObjIn
                });
              } else {
                return true;
              }
            })
            .then(
              function() {
                return true;
              },
              function() {
                return true;
              }
            )

            // Step 4.  Get SAML Response
            .then(function() {
              var url = null;
              $rootScope.$emit("pageLoading");

              url = self.getMobileURL(
                $rootScope.ssoData[vendor].urlList["linkUrl"]
              );

              if (deepLink) {
                url +=
                  "&Target=" +
                  $rootScope.ssoData[vendor].deepLinkList[deepLink];
              }

              return $http({
                method: "POST",
                url: url,
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded"
                }
              });
            })

            // Step 5.  Send Output To InAppBrowser
            .then(function(result) {
              $rootScope.$emit("pageLoading");
              deferred.resolve("data:text/html;base64," + btoa(result.data));
            });

          return deferred.promise;
        };

        /**
         * @description Grabs the SSO vendor configuration data from Blue Connect.
         * @memberof cordovaService
         * @method getSSO
         * @return {Promise}
         */
        this.getSSOVendorData = function() {
          return $q(function(resolve, reject) {
            if ($rootScope.ssoData) {
              return resolve($rootScope.ssoData);
            }
            $http
              .get(config.bcbsWebUrl + "/members/secure/data/ssoVendors.json")
              .then(function(result) {
                $rootScope.ssoData = result.data;

                resolve(result.data);
              })
              .catch(reject);
          });
        };

        /**
         * @description Get the mobile version of a given URL.
         * @memberof cordovaService
         * @method getMobileURL
         * @return {String}
         */
        this.getMobileURL = function(url) {
          return url
            .replace(/(^https?:\/\/)(producer)/i, "$1mobile")
            .replace(/(^https?:\/\/)(www)/gi, "$1mobile");
        };

        /**
         * @description Retrieves the current app version and adds it to root scope.
         * @memberof cordovaService
         * @method getAppVersion
         * @return {Promise} A promise that resolves to function(version).
         */
        this.getAppVersion = getAppVersion;
        function getAppVersion() {
          if (typeof cordova === "undefined") {
            return $q.resolve(
              "not on real/emulated device, skipping version check"
            );
          }

          // wrapping in a $q promise because cordova promises are gross
          return $q(function(resolve, reject) {
            cordova
              .getAppVersion()
              .then(function(version) {
                $rootScope.appVersion = version;
                resolve(version);
              })
              .fail(reject);
          });
        }

        /**
         * @description Confirms that client side application version is valid.
         * @memberof cordovaService
         * @method verifyMinAppVersion
         * @return {Promise} A promise that resolves when client side application version is valid.
         */
        this.verifyMinAppVersion = function() {
          return $q(function(resolve, reject) {
            if (typeof cordova === "undefined") {
              // Get client application version
              return resolve(true);
            }

            getAppVersion()
              .then(function(version) {
                // Place call to Capra to verify application version
                return $http.post(config.capraApiUrl + "/version-validator", {
                  version: version
                });
              })
              .then(function(result) {
                if (result.data.valid) {
                  resolve(result.data);
                } else {
                  // If version is invalid, show modal that can not be closed
                  $rootScope.gotoView("/upgrade");
                }
              })
              .catch(reject);
          });
        };

        /**
         * Handles the SSO setup process.
         *
         * @memberof cordovaService
         * @method getSSO
         * @return {Promise} A promise that resolves to a SAML response.
         */
        this.setupSSOApp = function(url) {
          $rootScope.$emit("pageLoading");
          var urlComponents = url.toLowerCase().split(":");
          var ssourl = urlComponents[0];
          var getHeaders = urlComponents[1];
          var valuesReturn;
          return (
            $http
              .get(config.apiUrl + "/get-sso-json")
              .then(function(result) {
                valuesReturn = {
                  ssourl: ssourl,
                  headers: result.data[getHeaders]
                };
                return loginService.getAuthorization();
              })
              .then(function(authObject) {
                return $http({
                  method: "POST",
                  url: config.bcbsWebMobileUrl + "/mbsso",
                  headers: {
                    Authorization: 'Bearer ' + authObject.accessToken,
                    ssorelaystate: valuesReturn.headers.ssorelaystate,
                    "Content-Type": "application/x-www-form-urlencoded"
                  }
                });
              })
              .then(function() {
                return $http({
                  method: "POST",
                  url: config.heurl,
                  headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                  }
                });
              })
              .then(function(result) {
                $rootScope.$emit('pageLoaded');
                return "data:text/html;base64," + btoa(result.data);
              })
              .catch(function(error) {
                $rootScope.$emit('pageLoaded');
              })
          );
        };
      }
    ]);
})();
/**
 * Service for customer service hours.
 *
 * @namespace Services
 * @class customerServiceHours
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.customerServiceHours', [])
  .service('customerServiceHoursServices', [
    '$rootScope',
    function($rootScope) {
      /**
       * Names available for contacts
       *
       * @memberof customerServiceHoursServices
       * @memberof {object} getCustomerServiceHours
       */
      this.getCustomerServiceTitles = {
        servicesInfo: [{
          name:"customerservicenumber",
          title: $rootScope.loc.GENERAL_CUSTOMER_SERVICE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"ttytddnumber",
          title: $rootScope.loc.GENERAL_CUSTOMER_SERVICE_TTY,
          icon: "tty-icon",
          class: "tty-number",
          url: "/inbox/compose"
        },{
          name:"blueconnectsupport",
          title: $rootScope.loc.BLUE_CONNECT_SUPPORT,
          icon: "fc-phone-nocircle",
          class: "phone-number",
          url: "/inbox/compose"
        },{
          name:"dentalgridnumber",
          title: $rootScope.loc.DENTAL_SUPPORT_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"primemailnumber",
          title: $rootScope.loc.PRIME_MAIL_NUMBER,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"mentalhealthservicenumber",
          title: $rootScope.loc.MENTAL_HEALTH_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"locatenonncprovidernumber",
          title: $rootScope.loc.LOCATE_NON_NC_PROVIDER,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"providerservicenumber",
          title: $rootScope.loc.PROVIDER_SERVICE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"priorreviewcertificationnumber",
          title: $rootScope.loc.PRIOR_REVIEW_CUSTOMER_SERVICE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"wakemedhealthcontactnumber",
          title: $rootScope.loc.WAKE_MED,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"dukemedicinecontactnumber",
          title: $rootScope.loc.DUKE_HEALTH,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"nurselinenumber",
          title: $rootScope.loc.NURSE_SUPPORT,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"rxhelpdesknumber",
          title: $rootScope.loc.PRESCRIPTION_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"carolinashealthcaresystemcontactnumber",
          title: $rootScope.loc.CAROLINAS_HEATLHCARE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"billingpaymentsnumber",
          title: $rootScope.loc.BILLING_PAYMENTS_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"claimssupportnumber",
          title: $rootScope.loc.CLAIMS_SUPPORT_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"claimsbenefitsservicenumber",
          title: $rootScope.loc.CLAIMS_BENEFIT_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"billingmembershipservicenumber",
          title: $rootScope.loc.BILLING_MEMBERSHIP_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        }]
      };


      /**
       * Hours available for customer service contacts
       *
       * @memberof customerServiceHoursServices
       * @memberof {object} getCustomerServiceHours
       *
       * Use '9999' for unknown hours expect Saturday and Sunday
       */
      this.getCustomerServiceHours = {
        servicesHours: [{
          number:"1-888-868-5527",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-709-7092",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-215-4069",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-446-8053",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-705-7050",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-471-2738",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-451-9957",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-351-8283",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-310-4110",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-291-1782",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-281-1785",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-247-4145",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-234-2416",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-206-4697",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-442-7028",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-627-3287",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-494-7647",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-275-9787",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-258-3334",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-866-916-3475",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-817-7044",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-755-0790",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-672-7897",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-672-6584",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-621-8876",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-579-8022",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-324-4963",
          openEveryday: true,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-305-6638",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-412-6403",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-988-0059",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-713-7682",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-679-6272",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-484-5029",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-855-282-3517",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-817-6044",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-810-2583",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-422-1582",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-367-6143",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-274-5180",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-359-2422",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-214-4844",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-477-2424",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-274-5186",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-874-2807",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-672-9897",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-214-4484",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-919-350-2227",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-919-385-0555",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        }]
      };
    }
  ]);
}());

/**
 * Service to get the provider data from summary.json api call.
 *
 * @namespace Services
 * @class findDoctorService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.findDoctor', [])
    .service('findDoctorService', [
      '$rootScope',
      'config',
      '$http',
      function($rootScope, config, $http) {
        var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

        /**
         *  
         *
         * @memberof findDoctorService
         * @method getDoctorDetails
         */
        this.getDoctorDetails = function(params) {
          return $http.get(url + '/find-doctor-by-zipcode?network_id=' + params.network_id + '&accountId=' + params.accountId + '&planName=' + params.planName + '&locationName=' + params.locationName + '&zipCode=' + params.zipCode + '&name=' + params.doctorName, { cache: false })
            .then(function(response) {
              console.log(response.data);
              return response.data;
            })
            .catch(function(error) {
              console.log(error);
              return error;
            });
        };

        this.changePcp = function(changeReq) {
          const changeurl = url + '/change-pcp?';
          changeReq = Object.keys(changeReq)
            .map(function(key) {
              return key + '=' + changeReq[key];
            })
            .join('&');
          return $http.get(changeurl + changeReq)
            .then(function(response) {
              return response.data;
            })
            .catch(function(error) {
              return error;
            });
        };

        this.changeMultiPcp = function(changeReq) {
          const changeurl = url + '/change-multi-pcp?';
          return $http
            .post(changeurl, changeReq)
            .then(function(response) {
              const changeRes = response.data.map(function(eachMember) {
                return {
                  updateSucceedStatus: eachMember.successIndicator === 'true' ? true : false,
                  dependentNumber: eachMember.applicationMessageText.slice(-2)
                };
              });
              return changeRes;
            })
            .catch(function(error) {
              return error;
            });
        };
      }
    ]);
}());

/**
 * Service for getting geo location.
 *
 * @namespace Services
 * @class geoLocationService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.geoLocation', [])
    .service('geoLocationService', [
      '$q',
      '$rootScope',
      '$http',
      '$window',
      'config',
      function($q, $rootScope, $http, $window, config) {
        var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;
        this.getLocation = function() {
          return $q(function(resolve, reject) {
            navigator.geolocation.getCurrentPosition(
              onGeoSuccess,
              onGeoErrorNotAvailable,
              { timeout: 15000, enableHighAccuracy: true }
            );

            // Function for user allowing location access.
            function onGeoSuccess(position) {
              $http
                .get(
                  url +
                    '/get-nearest-city?lat=' +
                    position.coords.latitude +
                    '&lng=' +
                    position.coords.longitude +
                    (
                      $rootScope.vitalsJWT && $rootScope.vitalsSignature ?
                        ('&signature=' + $rootScope.vitalsSignature.signature + '&jwt=' + $rootScope.vitalsJWT):
                        ''
                    )
                )
                .then(resolve)
                .catch(reject);
            }

            function onGeoErrorNotAvailable(error) {
              resolve('position not found');
            }
          });
        };

        this.openMaps = function(location) {
          if (device.platform == 'iOS') {
            $window.open('maps://?q=' + location, '_system');
          } else {
            $window.open('geo:0,0?q=' + location, '_system');
          }
        };

        // Function to get search area center zip code for search a doctor results Map View.
        this.getNearestCity = function (position) {
          return $http
            .get(
              url +
                '/get-nearest-city?lat=' +
                position.lat() +
                '&lng=' +
                position.lng()
            )
            .then(function(response) {
              var nearestCity = response.data;
              nearestCity.cityFullName = nearestCity.city + ', ' + nearestCity.state_code + ' - ' + nearestCity.zip;
              return nearestCity;
            })
            .catch(function(error) {
              return error;
            });
        };

        // Function to get search area center zip code for search a doctor results Map View.
        this.getNearestCityByZip = function (zipCode) {
          return $http.get(url + '/get-nearest-city-by-zip?zip=' + zipCode)
            .then(function(response) {
              var centerLatLng = {
                lat: +response.data.lat,
                lng: +response.data.lng
              };
              return centerLatLng;
            })
            .catch(function(error) {
              return error;
            });
        };
      },
    ]);
})();

/**
 * Service for google maps api.
 *
 * @namespace Services
 * @class googleMapsService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.googleMaps', [])
  .service('googleMapsService', [
    '$rootScope',
    'config',
    function($rootScope, config) {
      var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

      /**
       * load 
       *
       * @memberof googleMapsService
       * @method getGoogleMapsApi
       */
      this.getGoogleMapsApi = function() {
        $.get(url + '/get-google-maps')
          .done(function( response ) {
            var googleMapsScript = document.createElement("script");
            googleMapsScript.type = "text/javascript";
            googleMapsScript.innerHTML = response;
            $("head").append(googleMapsScript);
            $rootScope.mapsReady = true;
          })
          .fail(function( error ) {
            return error;
          });
      };
    }
  ]);
}());

/**
 * Service for showing a help modal.
 *
 * @namespace Services
 * @class helpService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.help', [])
    .service('helpService', [
      '$rootScope',
      function($rootScope) {
        /**
         * Shows a help modal. it should use the name attribute to pull the correct html
         *
         * @memberof helpService
         * @method showHelp
         * @param  {String}  fileName  The name of the html file to display in the help modal.
         */

        this.showHelp = function(fileName, data) {

          $rootScope.helpModal = {
            helpPath: fileName + '.html',
            data: data
          };

          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;

          angular.element('.help-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);

          // start help body at top of scroll window each time it is opened
          angular.element('.help-modal').find('.modal-body').scrollTop(0);
        };

        this.help = function(info) {
          $rootScope.helpModal = {
            helpIn: info
          };
          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;

          angular.element('.help-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);
          // start help body at top of scroll window each time it is opened
          angular.element('.help-modal').find('.modal-body').scrollTop(0);
        };

        this.terms = function(info) {
          $rootScope.termsModal = {
            termsIn: info
          };
          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;

          angular.element('.terms-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);
          // start help body at top of scroll window each time it is opened
          angular.element('.terms-modal').find('.modal-body').scrollTop(0);
        };

        /**
         * Shows a image in full screen.
         *
         * @memberof helpService
         * @method imageFullScreen
         * @param  {String}  image  The image to display the fullScreen image.
         */

        this.imageFullScreen = function(image) {
          $rootScope.fullScreen = {
            imageIn: image
          };
          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;
          angular.element('.full-screen-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);
        };
      }
    ]);
}());

/**
 * Services for the retrieval and setting of language.
 *
 * @namespace Services
 * @class inquiryService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.inquiry', [])
  .service('inquiryService', [function() {

    /**
     * Returns the IDs of currently availalable inquiry types.
     *
     * @memberof inquiryService
     * @method getInquiryTypes
     * @return {Array} Available inquiry type IDs
     */
    this.getInquiryTypes = function(state) {
      if (state) {
        return [
          'ID_CARD_ISSUE',
          'CLAIMS',
          'WEBSITE_ISSUE',
          'BENEFITS_COVERAGE',
          'OTHER_ISSUE'
        ];
      } else {
        return [
          'ID_CARD_ISSUE',
          'PREMIUM_PAYMENT',
          'CLAIMS',
          'WEBSITE_ISSUE',
          'PRESCRIPTIONS',
          'BENEFITS_COVERAGE',
          'OTHER_ISSUE'
        ];
      }
    };

    /**
     * Returns the Salesforce string for inquiry type.
     *
     * @memberof inquiryService
     * @method getSalesforceInquiryType
     * @param  {String} uid The unique ID of the inquiry type
     * @return {String} The Salesforce string
     */
    this.getSalesforceInquiryType = function(uid) {
      switch(uid) {
        case 'ID_CARD_ISSUE':
          return 'ID Card Issue';
        case 'PREMIUM_PAYMENT':
          return 'Premium Payment';
        case 'CLAIMS':
          return 'Claims';
        case 'WEBSITE_ISSUE':
          return 'Website Issue';
        case 'PRESCRIPTIONS':
          return 'Prescriptions';
        case 'BENEFITS_COVERAGE':
          return 'Benefits/Coverage';
        case 'OTHER_ISSUE':
          return 'Other Issue';
        case 'CANCEL_POLICY':
          return 'Cancel Policy';
        default:
          return uid;
      }
    };

    /**
     * Returns the displayable name for an inquiry type.
     *
     * @memberof inquiryService
     * @method getDisplayName
     * @param  {String} uid The unique ID of the inquiry type
     * @return {String} The displayable name
     */
    this.getDisplayName = function(uid) {
      switch(uid) {
        case 'ID_CARD_ISSUE':
          return 'ID Card Issue';
        case 'PREMIUM_PAYMENT':
          return 'Premium Payment';
        case 'CLAIMS':
          return 'Claims';
        case 'WEBSITE_ISSUE':
          return 'Website Issue';
        case 'PRESCRIPTIONS':
          return 'Prescriptions';
        case 'BENEFITS_COVERAGE':
          return 'Benefits/Coverage';
        case 'OTHER_ISSUE':
          return 'Other Issue';
        case 'CANCEL_POLICY':
          return 'Cancel Policy';
        default:
          return uid;
      }
    };
  }]);
}());

/**
 * Services for the retrieval and setting of language.
 *
 * @namespace Services
 * @class languageService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.language', [
    'bcbsnc.cloud.services.rest'
  ])
  .service('languageService', [
    '$q',
    '$rootScope',
    'restService',
    function($q, $rootScope, restService) {
      $rootScope.loc = $rootScope.loc || {};
      /**
      * The current language.
      *
      * @memberof languageService
      * @member {String} language
      */
      this.language = 'en';

      /**
       * Sets the language of the app. If no language is provided, retrieves the default language.
       *
       * @memberof languageService
       * @method setLanguage
       * @param  {String} [lang] i18n language code
       * @return {Promise} A promise that resolves to function(language)
       */
      this.setLanguage = function(lang) {
        var self = this;
        lang = lang || self.getDefaultLanguage().substr(0, 2);
        self.language = lang;
        $rootScope.$emit('languageChanged', {lang: lang});
        return $q.resolve(lang);
      };

      /**
       * Retrieves the default language from the phone or browser.
       *
       * @memberof languageService
       * @method getDefaultLanguage
       * @return {Promise} A promise that resolves to function(language)
       */
      this.getDefaultLanguage = function() {
        return navigator.language.substr(0, 2);
      };

      /**
       * Retrieves the locale object for the provided language from the data service.
       *
       * @memberof languageService
       * @method getLocale
       * @param  {String} lang i18n language code
       * @return {Promise} A promise that resolves to function(locale)
       */
      this.getLocale = function(lang) {
        return restService.getData('locale', lang, {loggedIn : $rootScope.loggedIn});
      };

      /**
       * Retrieves the internal (offline) locale object for the provided language.
       *
       * @memberof languageService
       * @method getInternalLocale
       * @param  {String} lang i18n language code
       * @return {Object} The internal locale
       */
      this.getInternalLocale = function(lang) {
        lang = lang || this.language;
        var internalLocale = {
          en: {
            LOG_IN: 'Log In',
            REGISTER: 'Register',
            LOG_IN_FIND_A_MED_SERVICE_LINK: 'Find a Doctor, Drug or Facility',
            MENU_FIND_A_MED_SERVICE_LINK: 'Find a Doctor | Drug | Facility',
            DISTANCE_AND_ZIP_CODE: 'Distance and ZIP Code',
            DISTANCE: 'Distance',
            FIND_CARE_NAME: 'Name',
            FIND_CARE_ADDRESS: 'Address',
            FROM_ZIP_CODE: 'From ZIP Code',
            FROM_CITY_COUNTY_OR_ZIP_CODE: 'From City, County, or ZIP Code',
            ERROR_MUST_BE_NC_ZIP_CODE: 'Must be NC ZIP Code',
            ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE: 'Must be a NC City, County, or ZIP Code',
            ERROR_ZIP_CODE_MUST_BE_5_DIGITS: 'ZIP Code must be 5 digits',
            ERROR_REQUIRED: 'Required',
            ERROR_LOCATION_NOT_FOUND: 'Location not found. Please try again.',
            ERROR_ENTER_ZIP_CODE: 'Your current location cannot be found. Please enter a ZIP Code.',
            ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE: 'Your current location cannot be found. Please enter a City, County or ZIP Code.',
            SHARE: 'Share',
            HEALTH_PLAN: 'Health Plan:',
            MILES: 'Miles',
            ENGLISH: 'English',
            ESPANOL: 'Español',
            USER_ID: 'User ID',
            REMEMBER: 'Remember?',
            PASSWORD: 'Password',
            FORGOT: 'Forgot?',
            FORGOT_PASSWORD: 'Forgot your password?',
            STAY_LOGGED_IN: 'Keep me logged in for 75 days',
            OK: 'OK',
            CANCEL: 'Cancel',
            CONTINUE: 'Continue',
            EXTERNAL_LINK: 'Open Web Link',
            EXTERNAL_LINK_WARNING: 'You are leaving Blue Connect Mobile. Would you like to continue?',
            LOGIN_INVALID: 'Please enter a valid user ID and Password',
            NETWORK_ERROR: 'Network Error',
            ERROR_NETWORK_BADCONNECTION: 'No Network Connection',
            NETWORK_ERROR_MESSAGE: 'We\'re experiencing technical difficulties. Please check your internet connection and try again.',
            SERVICE_ERROR_MESSAGE: 'Sorry, we\'re experiencing technical difficulties. Would you like to go back to your Home Page?',
            HELP: 'Help',
            CONFIRM_FINGERPRINT: 'Confirm Your Fingerprint',
            ENABLE_TOUCH_ID: 'Enable Touch ID',
            ENABLE_FACE_ID: 'Enable Face ID',
            ENABLE_FINGERPRINT_AUTH: 'Enable Fingerprint ID',
            SETTINGS_LOGIN_KEY_TOUCH_ID: 'Touch ID',
            SETTINGS_LOGIN_KEY_FACE_ID: 'Face ID',
            FINGERPRINT_AUTH: 'Fingerprint ID',
            ERROR_NOT_ACCESSIBLE: 'Blue Connect Mobile is not accessible at this time. We apologize for the inconvenience.',
            ERROR_CAN_LOGIN_NO_CLAIMS_BENEFITS: 'Some areas of Blue Connect Mobile are unavailable due to technical issues. Thank you for your patience.',
            ERROR_MAINTENANCE: 'Blue Connect Mobile is scheduled for maintenance ',
            ERROR_MAINTENANCE_LINE2: ' and may be unavailable during that time. We apologize for the inconvenience.',
            ERROR_SELECT_FROM_DROPDOWN_LIST: 'You must select a location from the drop-down list.',
          }, es: {
            LOG_IN: 'Ingresar',
            REGISTER: 'Registrarse',
            LOG_IN_FIND_A_MED_SERVICE_LINK: 'Encuentre un médico,medicamento o establecimiento',
            MENU_FIND_A_MED_SERVICE_LINK: 'Encuentre un médico | medicamento | establecimiento médico',
            DISTANCE_AND_ZIP_CODE: 'Distancia y código postal',
            DISTANCE: 'Distancia',
            FIND_CARE_NAME: 'Nombre',
            FIND_CARE_ADDRESS: 'Dirección',
            FROM_ZIP_CODE: 'Desde el código postal',
            FROM_CITY_COUNTY_OR_ZIP_CODE: 'De ciudad, condado o código postal',
            ERROR_MUST_BE_NC_ZIP_CODE: 'Debe ser un código postal de Carolina del Norte',
            ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE: 'Debe ser una ciudad, condado o código postal de Carolina del Norte',
            ERROR_ZIP_CODE_MUST_BE_5_DIGITS: 'El código postal debe tener cinco dígitos',
            ERROR_REQUIRED: ' Información requerida',
            ERROR_LOCATION_NOT_FOUND: 'Ubicación no encontrada. Inténtalo de nuevo por favor.',
            ERROR_ENTER_ZIP_CODE: 'Your current location cannot be found. Please enter a ZIP Code.',
            ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE: 'No se puede encontrar su ubicación actual. Introduzca una ciudad, condado o código postal.',
            SHARE: 'Compartir',
            HEALTH_PLAN: 'Seguro médico:',
            MILES: 'Millas',
            ENGLISH: 'English',
            ESPANOL: 'Español',
            USER_ID: 'Identificación del usuario:',
            REMEMBER: '¿Recuerda?',
            PASSWORD: 'Contraseña',
            FORGOT: '¿La olvidó?',
            FORGOT_PASSWORD: '¿Olvidaste tu contraseña?',
            STAY_LOGGED_IN: 'Mantener mi sesión iniciada durante 75 días',
            OK: 'Aprobado',
            CANCEL: 'Cancelar',
            CONTINUE: 'Continuar',
            ID_CARD_VIEWING_CARD: 'Vea tarjeta',
            EXTERNAL_LINK: 'Abrir enlace de la red',
            EXTERNAL_LINK_WARNING: 'Usted está saliendo de Blue Connect Mobile. ¿Le gustaría continuar?',
            LOGIN_INVALID: 'Introduzca un ID y una contraseña válidos',
            NETWORK_ERROR: 'Error de Red',
            ERROR_NETWORK_BADCONNECTION: 'No hay conexión con la red',
            NETWORK_ERROR_MESSAGE: 'Estamos experimentando dificultades técnicas. Comprueba tu conexión a Internet y vuelve a intentarlo.',
            HELP: 'Ayuda',
            CONFIRM_FINGERPRINT: 'Confirmar su huella digital',
            ENABLE_TOUCH_ID: 'Activar Touch ID',
            ENABLE_FACE_ID: 'Activar Face ID',
            ENABLE_FINGERPRINT_AUTH: 'Activar indentificación de huella digital',
            SETTINGS_LOGIN_KEY_TOUCH_ID: 'Touch ID',
            SETTINGS_LOGIN_KEY_FACE_ID: 'Face ID',
            FINGERPRINT_AUTH: 'ID de huella digital',
            ERROR_NOT_ACCESSIBLE: 'Blue Connect móvil no está disponible en este momento. Lamentamos la inconveniencia que esto pueda causar.',
            ERROR_CAN_LOGIN_NO_CLAIMS_BENEFITS: 'Algunas áreas de la aplicación Blue Connect Mobile no están disponibles debido a problemas técnicos. Gracias por su paciencia.',
            ERROR_MAINTENANCE: 'Blue Connect Mobile tiene programado mantenimiento para el ',
            ERROR_MAINTENANCE_LINE2: ' y es posible que no esté disponible durante esas horas. Nos disculpamos por los inconvenientes que esta situación pueda causar.',
            ERROR_SELECT_FROM_DROPDOWN_LIST: 'Usted debe seleccionar una ubicación de la lista desplegable.',
          }
        };

        return internalLocale[lang.toLowerCase()];
      };
    }
  ]);
}());

/**
 * @description Service for live chat data.
 * @namespace Services
 * @class livechatService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.livechat', [])
    .factory('livechatService', [
      '$window',
      'config',
      'languageService',
      'policyService',
      '$rootScope',
      'alertService',
      function($window, config, languageService, policyService, $rootScope, alertService) {
        var chatMemberIdentifier = getChatMemberIdentifier();
        var memberInitializedLiveChat = false;
        var chatButtons = config.liveagent.authButtons;
        var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

        return {
          memberHasLiveChat: memberHasLiveChat,
          getChatMemberIdentifier: getChatMemberIdentifier,
          getChatButtons: getChatButtons,
          alert: alert,
          openChat: openChat,
          removeLivechat: removeLivechat,
          reloadLivechat: reloadLivechat,
          disconnectLiveChat: disconnectLiveChat,
          registerButton: registerButton,
        };

        function disconnectLiveChat() {
          window.liveagent.disconnect();
          removeLivechat();
        }

        /*remove live agent*/
        function removeLivechat() {
          var scripts = document.getElementsByTagName('script');
          for (var i = 0; i < scripts.length; i++) {
            var src = scripts[i].getAttribute('src');
            if (src && src.includes('livechatDeployment.js')) {
              scripts[i].remove();
            }
          }

          delete window.liveagent;
          delete window.liveAgentDeployment;
        }

        /* reload the script for live chat*/
        function reloadLivechat() {
          var script= document.createElement('script');
          script.type = 'text/javascript';
          script.src= 'js/livechatDeployment.js';
          $("head").append(script);
        }

        function registerButton(button, index){
          if (index === 1){
            $window.liveagent.showWhenOnline($(button).attr('token'), button, false);
          } else {
            $window.liveagent.showWhenOffline($(button).attr('token'), button, false);
          }
        }

        function openChat(buttonToken) {
          var TIPData = $rootScope.getTIPData();
         
          TIPData.ruid = $rootScope.analyticsInfo.info2;
          TIPData.userId = $rootScope.analyticsInfo.info3;

          $window.liveagent.startChat(buttonToken);
          $.post(url + '/livechatstarted', TIPData);
        };

        function alert(){
          

          var confirm;
          alertService.showAlert(
            $rootScope.loc.LIVE_CHAT_CHAT_NOT_AVAILABLE,
            '<div class="home-card-chat-dialog"><p class="home-card-chat-dialog-heading">' + $rootScope.loc.LIVE_CHAT_CHAT_CURRENTLY_NOT_AVAILABLE + '</p>' + $rootScope.loc.LIVE_CHAT_CHAT_NOT_AVAILABLE_PROMPT + '</div>',
            {
              title: $rootScope.loc.OK
            }, confirm, "dark"
          );
        }

        function memberHasLiveChat() {
          return Boolean(getChatMemberIdentifier());
        }

        function getChatButtons() {
          var language = languageService.getDefaultLanguage();
          if (getChatMemberIdentifier()){
            return chatButtons[getChatMemberIdentifier()][language];
          } else {
            return {};
          }
        }

        function getChatMemberIdentifier() {
          var selectedPolicy = policyService.getSelectedPolicy();
          if (!selectedPolicy) {
            return false;
          }
          if (selectedPolicy.individual && selectedPolicy.sourceSystem.toLowerCase() === 'facets') {
            chatMemberIdentifier = 'iu65';
          }
          if (selectedPolicy.state) {
            chatMemberIdentifier = 'shp';
          }
          if (selectedPolicy.sourceSystem === 'Amisys') {
            chatMemberIdentifier = 'medicare';
          }
          if (
            $rootScope.signature &&
            $rootScope.signature.get($rootScope.policyIndex).isSignatureService
          ) {
            chatMemberIdentifier = 'signature';
          }
          return chatMemberIdentifier;
        }
      }
    ]);
}());
(function() {
    function Ba(a) {
        switch (a) {
            case "'":
                return "\x26#39;";
            case "\x26":
                return "\x26amp;";
            case "\x3c":
                return "\x26lt;";
            case "\x3e":
                return "\x26gt;";
            case '"':
                return "\x26quot;";
            case "\u00a9":
                return "\x26copy;";
            case "\u2028":
                return "\x3cbr\x3e";
            case "\u2029":
                return "\x3cp\x3e";
            default:
                return a
        }
    }

    function l() {}

    function t() {}

    function la(a) {
        l.prototype.init.call(this, a, l.TYPE.STANDARD)
    }

    function ma(a) {
        k[a] || (k[a] = new la(a));
        return k[a]
    }

    function S(a, b) {
        l.prototype.init.call(this, b + "_" + a, l.TYPE.AGENT)
    }

    function L(a,
        b) {
        var c = b + "_" + a;
        if (!k[c]) {
            var e = new S(a, b),
                d;
            k[a] && (d = k[a], d.endpoint && e.setEndpoint(d.endpoint), d.prechat && e.setPrechat(d.prechat), d.language && e.setLanguage(d.language), e.setOnlineState(d.onlineState));
            k[c] = e
        }
        return k[c]
    }

    function T(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function U(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function n(a) {
        l.prototype.init.call(this, a, l.TYPE.INVITE);
        this.active = !1;
        this.filterLogic = null;
        this.rules = {};
        this.autoRejectTimeout = this.inviteTimeout = this.inviteDelay = this.ruleTree =
            null
    }

    function u(a) {
        k[a] || (k[a] = new n(a));
        return k[a]
    }

    function A(a, b, c, e, d, g, C, y) {
        t.prototype.init.call(this, a, b);
        this.hasInviteAfterAccept = g;
        this.hasInviteAfterReject = C;
        this.rejectTime = y;
        null !== f.getCssAnimation(b) || "Custom" == c ? this.renderer = new n.RENDERER[c].renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d]) : this.renderer = new n.RENDERER.Appear.renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d])
    }

    function D(a) {
        return u(a) ? u(a).getTracker() : null
    }

    function r() {}

    function J(a, b, c, e) {
        r.prototype.init.call(this,
            a, b, c, e)
    }

    function K(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function M(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function E(a, b, c, e) {
        E.prototype.init.call(this, a, b, null, null)
    }

    function h() {}

    function N(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function O(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function V(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function F(a) {
        na++;
        if (1E3 < na) throw Error("Error processing rule filter logic, preventing recursion");
        for (var b = 0, c = 0, e =
                0; e < a.length; e++) "(" == a.charAt(e) ? c++ : ")" == a.charAt(e) && c--, "," == a.charAt(e) && 1 == c && (b = e);
        if (0 == a.indexOf("AND(")) return c = F(a.substring(4, b)), a = F(a.substring(b + 1, a.length - 1)), new W(c, a);
        if (0 == a.indexOf("OR(")) return c = F(a.substring(3, b)), a = F(a.substring(b + 1, a.length - 1)), new X(c, a);
        if (0 == a.indexOf("NOT(")) return c = F(a.substring(4, a.length - 1)), new Y(c);
        if (!isNaN(parseInt(a, 10))) return new Z(parseInt(a, 10));
        throw Error("Encountered unexpected character in filter logic");
    }

    function z() {}

    function Z(a) {
        this.ruleId =
            a;
        z.prototype.init.call(this, null, null)
    }

    function W(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function X(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function Y(a) {
        z.prototype.init.call(this, a, null)
    }

    function Ca(a, b, c, e) {
        var d = document.createElement("div");
        d.id = "liveagent_invite_button_" + a;
        var g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.position = "absolute";
        g.style.right = "-20px";
        g.style.top = "-20px";
        g.src = f.addPrefixToURL(m.contentServerUrl, m.urlPrefix, !0) + "/images/x.png";
        f.addEventListener(g,
            "click",
            function() {
                p.rejectChat(a)
            });
        d.appendChild(g);
        g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.clear = "right";
        g.src = b;
        g.width = c;
        g.height = e;
        f.addEventListener(g, "click", function() {
            p.startChat(a)
        });
        d.appendChild(g);
        document.body.appendChild(d);
        return d
    }

    function oa(a, b, c) {
        "undefined" == typeof c && (c = !0);
        this.getLabel = function() {
            return a
        };
        this.getValue = function() {
            return b
        };
        this.getDisplayToAgent = function() {
            return c
        };
        var e = new aa;
        this.getMapper = function() {
            return e
        };
        this.doKnowledgeSearch = !1;
        this.getDoKnowledgeSearch = function() {
            return this.doKnowledgeSearch
        };
        this.setDoKnowledgeSearch = function() {
            this.doKnowledgeSearch = !0
        }
    }

    function aa() {
        var a = [],
            b = [];
        this.getEntityMaps = function() {
            return a
        };
        this.getTranscriptFields = function() {
            return b
        }
    }

    function pa(a, b, c, e, d) {
        this.getEntityName = function() {
            return a
        };
        this.getFieldName = function() {
            return b
        };
        this.getFastFill = function() {
            return c
        };
        this.getAutoQuery = function() {
            return e
        };
        this.getExactMatch = function() {
            return d
        }
    }

    function qa(a) {
        this.saveToTranscript =
            "";
        this.showOnCreate = !1;
        this.linkToEntityField = this.linkToEntityName = "";
        var b = new ra;
        this.getEntityName = function() {
            return a
        };
        this.getSaveTranscript = function() {
            return this.saveTranscript
        };
        this.getShowOnCreate = function() {
            return this.showOnCreate
        };
        this.getLinkToEntityName = function() {
            return this.linkToEntityName
        };
        this.getLinkToEntityField = function() {
            return this.linkToEntityField
        };
        this.getEntityMapper = function() {
            return b
        };
        this.setSaveTranscript = function(a) {
            this.saveTranscript = a
        };
        this.setShowOnCreate = function(a) {
            this.showOnCreate =
                a
        };
        this.setLinkToEntityName = function(a) {
            this.linkToEntityName = a
        };
        this.setLinkToEntityField = function(a) {
            this.linkToEntityField = a
        }
    }

    function ra() {
        var a = [];
        this.getEntityFieldsMaps = function() {
            return a
        }
    }

    function sa(a, b, c, e, d) {
        this.getFieldName = function() {
            return a
        };
        this.getLabel = function() {
            return b
        };
        this.getDoFind = function() {
            return c
        };
        this.getIsExactMatch = function() {
            return e
        };
        this.getDoCreate = function() {
            return d
        }
    }

    function P() {
        if (!ta) {
            ta = !0;
            f.log("DOM is ready. Setting up environment.");
            null == v.getOref() &&
                v.setOref(document.referrer);
            null == v.getVisitCount() && v.setVisitCount(1);
            if (window._laq)
                for (var a = 0; a < window._laq.length; a++) window._laq[a].call(window);
            q.connection.setCallback("liveagent._.handlePing");
            ua()
        }
    }

    function ua() {
        var a = [],
            b = {};
        ba && (b.chatted = 1);
        x ? (b.sid = x, f.log("Reusing existing session.")) : (a.push(new q.Noun("VisitorId")), f.log("Requesting new session."));
        a.push(new q.Noun("Settings", {
            buttonIds: "[" + va() + "]",
            updateBreadcrumb: 1,
            urlPrefix: m.urlPrefix
        }));
        q.connection.send(a, b)
    }

    function wa(a,
        b) {
        b.endpointUrl && a.setEndpoint(b.endpointUrl);
        b.prechatUrl && a.setPrechat(b.prechatUrl);
        b.language && a.setLanguage(b.language);
        a.setOnlineState(b.isAvailable)
    }

    function Da() {
        if (q.connection.isRunning())
            if (null == x || ca) ca = !1, ua();
            else {
                f.log("Pinging server to keep presence");
                Q = null;
                var a = {};
                a.sid = x;
                ba && (a.chatted = 1);
                a.r = (new Date).getMilliseconds();
                var b = [new q.Noun("Availability", {
                    ids: "[" + va() + "]"
                })];
                q.connection.send(b, a)
            }
    }

    function da() {
        f.log("Disconnecting from Live Agent");
        q.connection.setIsRunning(!1);
        for (var a in k) k.hasOwnProperty(a) && k[a].setOnlineState(!1)
    }

    function va() {
        var a = [],
            b = {},
            c;
        for (c in k) k.hasOwnProperty(c) && k[c].getType() == l.TYPE.STANDARD && (b[c] = k[c]);
        for (var e in b) a.push(e);
        var b = {},
            d;
        for (d in k) k.hasOwnProperty(d) && k[d].getType() == l.TYPE.AGENT && (b[d] = k[d]);
        for (e in b) a.push(e);
        d = {};
        for (var g in k) k.hasOwnProperty(g) && k[g].getType() == l.TYPE.INVITE && (d[g] = k[g]);
        for (e in d) a.push(e);
        e = "";
        for (g = 0; g < a.length; g++) e += a[g], g < a.length - 1 && (e += ",");
        return e
    }

    function xa(a, b, c, e) {
        document.cookie =
            "liveagent_chatted\x3d1;path\x3d/;";
        ba = !0;
        var d;
        d = "deployment_id\x3d" + m.deploymentId;
        d = d + "\x26org_id\x3d" + m.orgId;
        d += "\x26button_id\x3d";
        d += a;
        c && (d += "\x26agent_id\x3d", d += c);
        e && (d += "\x26do_fallback\x3d1");
        d += "\x26session_id\x3d";
        d += x;
        a = c ? k[c + "_" + a].getEndpoint(d) : k[a].getEndpoint(d);
        c = "height\x3d" + m.chatWindowHeight;
        c = c + ",width\x3d" + m.chatWindowWidth;
        c += ",menubar\x3dno";
        c += ",toolbar\x3dno";
        c += ",location\x3dno";
        c += ",personalbar\x3dno";
        Ea(b, a)
    }
    
    function Ea(a, b) {
        function c(a, b, c) {
            var input =
                document.createElement("input");
                input.name = b;
                input.setAttribute('value', c);
                input.id = b;
            a.appendChild(input);
        }
        var e = v.getVisitCount();
        // null == e && (e = "0");
        e = e || '0';
        var d = document.createElement("form");
        d.style.display = "none";
        c(d, "deploymentId", m.deploymentId);
        c(d, "orgId", m.orgId);
        c(d, "vc", e);
        c(d, "sid", x);
        c(d, "ptid", v.getPermanentId());
        c(d, "det", f.jsonEncode(ya));
        c(d, "oref", v.getOref());
        c(d, "pages", f.jsonEncode(B.getPages()));
        c(d, "sessionStart", (new Date).getTime() - B.getSessionStart());
        c(d, "ent", f.jsonEncode(za));
        ea && c(d, "visitorName", ea);
        d.method = "POST";
        d.setAttribute('id', 'livechat-form');
        d.action = b;
        d.target = a;

        var pageContent = '<html><head></head><body>' + d.outerHTML +
        '</body></html>';
        var pageContentUrl = 'data:text/html;base64,' + btoa(pageContent);

        var ref = cordova.InAppBrowser.open(       
            pageContentUrl,
            "_blank",
            "location=yes,hidenavigationbuttons=yes"
        );

        function eventCallBackFunction(){
            ref.executeScript({code: "document.getElementById('livechat-form').submit()"}, executecallback());
        }

        ref.addEventListener('loadstop', eventCallBackFunction, true);


        function executecallback() {
            ref.removeEventListener('loadstop', eventCallBackFunction, true);    
        }

            
    }

    function fa(a) {
        a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
    }

    function Aa(a) {
        a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
        da()
    }
    if (!window.liveAgentDeployment) {
        window.liveAgentDeployment = !0;
        var p = {};
        window.liveagent && (p = window.liveagent);
        window.liveagent = p;
        var f = {
                getCookie: function(a) {
                    var b = document.cookie,
                        c = b.indexOf(a + "\x3d");
                    if (-1 == c) return null;
                    c += (a + "\x3d").length;
                    a = b.indexOf(";", c); -
                    1 == a && (a = b.length);
                    return b.substring(c, a)
                },
                setCookie: function(a, b, c) {
                    a = a + "\x3d" + b + ";";
                    c && (c = new Date, c.setFullYear(c.getFullYear() + 10), a += "expires\x3d" + c.toGMTString() + ";");
                    document.cookie = a + "path\x3d/;"
                },
                addEventListener: function(a, b, c) {
                    if (a.addEventListener) a.addEventListener(b, c, !1);
                    else if (a.attachEvent) a.attachEvent("on" + b, c, !1);
                    else throw Error("Could not add event listener");
                },
                log: function(a) {
                    R && window.console && window.console.log && window.console.log("LIVE AGENT: " + a)
                },
                logGroupStart: function(a) {
                    R &&
                        window.console && (window.console.group ? window.console.groupCollapsed("LIVE AGENT: " + a) : f.log(a))
                },
                logGroupEnd: function() {
                    R && window.console && window.console.group && window.console.groupEnd()
                },
                getLanguage: function() {
                    return "undefined" != typeof window.navigator.language ? window.navigator.language : "undefined" != typeof window.navigator.userLanguage ? window.navigator.userLanguage : ""
                },
                arrayHasItem: function(a, b) {
                    if (Array.prototype.indexOf) return -1 < a.indexOf(b);
                    for (var c = 0; c < a.length; c++)
                        if (a[c] == b) return !0
                },
                jsonEncode: function(a,
                    b, c) {
                    function e(a) {
                        g.lastIndex = 0;
                        return g.test(a) ? '"' + a.replace(g, function(a) {
                            var b = f[a];
                            return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                        }) + '"' : '"' + a + '"'
                    }

                    function d(a, b) {
                        var c, g, f, C, y = w,
                            k, h = b[a];
                        h && "object" === typeof h && "function" === typeof h.toJSON && (h = h.toJSON(a));
                        "function" === typeof m && (h = m.call(b, a, h));
                        switch (typeof h) {
                            case "string":
                                return e(h);
                            case "number":
                                return isFinite(h) ? String(h) : "null";
                            case "boolean":
                            case "null":
                                return String(h);
                            case "object":
                                if (!h) return "null";
                                w += l;
                                k = [];
                                if ("[object Array]" === Object.prototype.toString.apply(h)) {
                                    C = h.length;
                                    for (c = 0; c < C; c += 1) k[c] = d(c, h) || "null";
                                    f = 0 === k.length ? "[]" : w ? "[\n" + w + k.join(",\n" + w) + "\n" + y + "]" : "[" + k.join(",") + "]";
                                    w = y;
                                    return f
                                }
                                if (m && "object" === typeof m)
                                    for (C = m.length, c = 0; c < C; c += 1) "string" === typeof m[c] && (g = m[c], (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f));
                                else
                                    for (g in h) Object.prototype.hasOwnProperty.call(Object(h), g) && (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f);
                                f = 0 === k.length ? "{}" : w ? "{\n" + w + k.join(",\n" + w) + "\n" + y + "}" : "{" +
                                    k.join(",") + "}";
                                w = y;
                                return f
                        }
                    }
                    if ("undefined" !== typeof window.JSON) return window.JSON.stringify(a, b, c);
                    if (void 0 === a || null === a) return "null";
                    var g = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                        f = {
                            "\b": "\\b",
                            "\t": "\\t",
                            "\n": "\\n",
                            "\f": "\\f",
                            "\r": "\\r",
                            '"': '\\"',
                            "\\": "\\\\"
                        },
                        y, w = "",
                        l = "",
                        m = b;
                    if ("number" === typeof c)
                        for (y = 0; y < c; y += 1) l += " ";
                    else "string" === typeof c && (l = c);
                    if (b && "function" !== typeof b && ("object" !== typeof b || "number" !==
                            typeof b.length)) throw Error("Error during JSON.stringify");
                    return d("", {
                        "": a
                    })
                },
                jsonDecode: function(a) {
                    a = String(a);
                    if ("undefined" !== typeof window.JSON) return window.JSON.parse(a);
                    var b = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                    b.lastIndex = 0;
                    b.test(a) && (a = a.replace(b, function(a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    }));
                    if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
                            "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return eval("(" + a + ")");
                    throw Error("Error during JSON.parse");
                },
                getCssAnimation: function(a) {
                    var b = ["Webkit", "Moz", "O", "ms", "Khtml"];
                    if (void 0 !== a.style.animationName) return "";
                    for (var c = 0; c < b.length; c++)
                        if (void 0 !== a.style[b[c] + "AnimationName"]) return b[c].toLowerCase();
                    return null
                },
                addPrefixToURL: function(a, b, c) {
                    if (!f.isEmpty(a) && !f.isEmpty(b) && 0 !== a.indexOf(b)) {
                        c && (b = f.escapeToHtml(b));
                        var e = /(https?:\/\/)(.*)/i;
                        c = a.replace(e, "$1");
                        a = a.replace(e, "$2");
                        b = b.replace(e,
                            "$2");
                        a = c + b + "/" + a
                    }
                    return a
                },
                getDomainFromUrl: function(a) {
                    if (f.isEmpty(a)) return "";
                    var b;
                    ga || (ga = document.createElement("a"));
                    b = ga;
                    b.href = a;
                    a = a.match(/:(\d+)/g);
                    b = b.protocol + "//" + b.hostname || window.location.protocol + "//" + window.location.hostname;
                    return a ? b + a[0] : b
                },
                isEmpty: function(a) {
                    return null === a || void 0 === a || "" === a
                },
                escapeToHtml: function(a) {
                    return null === a || void 0 === a || "" === a ? "" : a = a.replace(/[&<>"'\u00a9\u2028\u2029]/g, Ba)
                },
                isValidEntityId: function(a) {
                    return a && "string" === typeof a && (18 === a.length ||
                        15 === a.length)
                },
                getKeyPrefix: function(a) {
                    return this.isValidEntityId(a) ? a.substr(0, 3) : null
                },
                isOrganizationId: function(a) {
                    return "00D" === this.getKeyPrefix(a)
                },
                isDeploymentId: function(a) {
                    return "572" === this.getKeyPrefix(a)
                },
                trim: function(a) {
                    return a && a.replace(/^[\s\u0000-\u0020]*|[\s\u0000-\u0020]*$/g, "") || ""
                }
            },
            ga, v = {
                getVisitCount: function() {
                    var a = parseInt(f.getCookie("liveagent_vc"), 10);
                    return isNaN(a) ? null : a
                },
                getOref: function() {
                    return f.getCookie("liveagent_oref")
                },
                getPermanentId: function() {
                    var a =
                        f.getCookie("liveagent_ptid");
                    return null != a ? a : ""
                },
                setVisitCount: function(a) {
                    f.setCookie("liveagent_vc", a, !0)
                },
                setOref: function(a) {
                    return f.setCookie("liveagent_oref", a, !0)
                },
                setPermanentId: function(a) {
                    f.setCookie("liveagent_ptid", a, !0)
                }
            },
            B = new function() {
                function a() {
                    return window.localStorage ? window.localStorage : window.sessionStorage
                }

                function b() {
                    var a = document.createElement("div");
                    a.style.display = "none";
                    document.body.appendChild(a);
                    a.id = "liveagent_userdata_provider";
                    a.addBehavior("#default#userData");
                    a.load("liveagent");
                    return {
                        getItem: function(b) {
                            return a.getAttribute(b)
                        },
                        setItem: function(b, c) {
                            a.setAttribute(b, c);
                            a.save("liveagent")
                        },
                        removeItem: function(b) {
                            a.removeAttribute(b);
                            a.save("liveagent")
                        }
                    }
                }

                function c() {
                    var a = {};
                    return {
                        getItem: function(b) {
                            return a[b]
                        },
                        setItem: function(b, c) {
                            a[b] = c
                        },
                        removeItem: function(b) {
                            delete a[b]
                        }
                    }
                }

                function e() {
                    g.setItem(d.SESSION_ID, x);
                    g.setItem(d.PAGE_COUNT, "0");
                    g.setItem(d.SESSION_START, (new Date).getTime().toString())
                }
                var d = {
                    SESSION_ID: "liveAgentSid",
                    PAGE_COUNT: "liveAgentPc",
                    SESSION_START: "liveAgentStart",
                    PAGE: "liveAgentPage_",
                    PAGE_TIME: "liveAgentPageTime_"
                };
                a.isSupported = function() {
                    try {
                        if (window.localStorage || window.sessionStorage) {
                            var a = window.localStorage ? window.localStorage : window.sessionStorage;
                            a.setItem("liveAgentTestKey", "1");
                            a.removeItem("liveAgentTestKey");
                            return !0
                        }
                        return !1
                    } catch (b) {
                        return !1
                    }
                };
                b.isSupported = function() {
                    return document.createElement("div").addBehavior
                };
                var g;
                g = a.isSupported() ? a() : b.isSupported() ? b() : c();
                this.init = function() {
                    if (g.getItem(d.SESSION_ID)) {
                        if (g.getItem(d.SESSION_ID) !=
                            x) {
                            g.removeItem(d.SESSION_START);
                            for (var a = g.getItem(d.PAGE_COUNT), b = 25 > a ? 0 : a - 25; b < a; b++) g.removeItem(d.PAGE + b), g.removeItem(d.PAGE_TIME + b);
                            e()
                        }
                    } else e();
                    a = parseInt(g.getItem(d.PAGE_COUNT), 10);
                    25 <= a && (g.removeItem(d.PAGE + (a - 25)), g.removeItem(d.PAGE_TIME + (a - 25)));
                    g.setItem(d.PAGE_COUNT, (a + 1).toString());
                    g.setItem(d.PAGE + a.toString(), window.location.href);
                    g.setItem(d.PAGE_TIME + a.toString(), (new Date).getTime())
                };
                this.getPageCount = function() {
                    return parseInt(g.getItem(d.PAGE_COUNT), 10)
                };
                this.getSessionStart =
                    function() {
                        return g.getItem(d.SESSION_START)
                    };
                this.getPages = function() {
                    for (var a = [], b = this.getPageCount(), c = 25 > b ? 0 : b - 25; c < b; c++) a.unshift({
                        location: g.getItem(d.PAGE + c.toString()),
                        time: ((new Date).getTime() - parseInt(g.getItem(d.PAGE_TIME + c.toString()), 10)).toString()
                    });
                    return a
                };
                this.getCurrentPage = function() {
                    return g.getItem(d.PAGE + (this.getPageCount() - 1).toString())
                };
                this.clear = function() {
                    g.clear()
                }
            };
        l.TYPE = {
            STANDARD: "STANDARD",
            INVITE: "INVITE",
            AGENT: "AGENT"
        };
        l.EVENT = {
            BUTTON_AVAILABLE: "BUTTON_AVAILABLE",
            BUTTON_UNAVAILABLE: "BUTTON_UNAVAILABLE",
            BUTTON_ACCEPTED: "BUTTON_ACCEPTED",
            BUTTON_REJECTED: "BUTTON_REJECTED"
        };
        l.prototype.init = function(a, b) {
            this.buttonId = a;
            this.type = b;
            this.onlineState = null;
            this.trackers = [];
            this.language = this.prechat = this.endpoint = null
        };
        l.prototype.getType = function() {
            return this.type
        };
        l.prototype.getOnlineState = function() {
            return this.onlineState
        };
        l.prototype.setOnlineState = function(a) {
            this.onlineState = a;
            for (var b = 0; b < this.trackers.length; b++) this.trackers[b].setState(a)
        };
        l.prototype.addTracker =
            function(a) {
                this.trackers.push(a)
            };
        l.prototype.setPrechat = function(a) {
            this.prechat = a
        };
        l.prototype.setEndpoint = function(a) {
            this.endpoint = a
        };
        l.prototype.getEndpoint = function(a) {
            function b() {
                var b = m.contentServerUrl,
                    c = m.urlPrefix;
                if (null == b) throw Error("You cannot call liveagent.startChat until the asynchronous call to liveagent.init has completed!");
                m.contentServerUrl = f.addPrefixToURL(b, c, !0);
                b = this.endpoint;
                b = !f.isEmpty(b) && -1 < f.getDomainFromUrl(b).indexOf("force") ? f.addPrefixToURL(b, c, !0) : b;
                this.endpoint =
                    b;
                b = (null != this.endpoint ? this.endpoint : m.contentServerUrl + m.chatPage) + "?language\x3d" + (this.language ? this.language : "");
                f.isEmpty(c) || (b += "\x26proxy\x3d" + c + "\x26proxyKey\x3d" + m.prefixKey + "\x26org_id\x3d" + m.orgId + "\x26deployment_id\x3d" + m.deploymentId);
                return b += "#" + a
            }
            var c = null,
                c = null == this.prechat ? b.call(this) : this.prechat + "?endpoint\x3d" + encodeURIComponent(b.call(this));
            return m.contentServerUrl + m.prechatHandler + "?endpoint\x3d" + encodeURIComponent(c)
        };
        l.prototype.setLanguage = function(a) {
            this.language =
                a
        };
        l.prototype.startChat = function(a) {
            return this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED) ? (xa(this.buttonId, a), !0) : !1
        };
        l.prototype.rejectChat = function() {
            return this.dispatchEvent(l.EVENT.BUTTON_REJECTED) ? !0 : !1
        };
        l.prototype.dispatchEvent = function(a) {
            return ha.hasOwnProperty(this.buttonId) ? !1 === ha[this.buttonId].call(this, a) ? !1 : !0 : !0
        };
        t.prototype.init = function(a, b) {
            this.buttonId = a;
            this.element = b
        };
        t.prototype.getId = function() {
            return this.buttonId
        };
        t.prototype.setState = function(a) {
            f.log("Setting state for button " +
                this.buttonId + " to " + (a ? "online" : "offline"));
            return k[this.buttonId].dispatchEvent(a ? l.EVENT.BUTTON_AVAILABLE : l.EVENT.BUTTON_UNAVAILABLE) ? !0 : !1
        };
        la.prototype = new l;
        S.prototype = new l;
        S.prototype.startChat = function(a, b) {
            if (this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED)) {
                var c = this.buttonId.split("_");
                xa(c[1], a, c[0], b);
                return !0
            }
            return !1
        };
        T.prototype = new t;
        T.prototype.setState = function(a) {
            t.prototype.setState.call(this, a) && (this.element.style.display = a ? "" : "none")
        };
        U.prototype = new t;
        U.prototype.setState =
            function(a) {
                t.prototype.setState.call(this, a) && (this.element.style.display = a ? "none" : "")
            };
        var ia = !1,
            G = null,
            ja = {},
            H = {};
        n.prototype = new l;
        n.RENDERER = {
            Slide: {
                renderClass: J
            },
            Fade: {
                renderClass: K
            },
            Appear: {
                renderClass: M
            },
            Custom: {
                renderClass: E
            }
        };
        n.START_POSITION = {
            TopLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopLeftTop: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            Top: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightTop: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            },
            Right: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            BottomRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomRightBottom: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            Bottom: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftBottom: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            Left: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            TopLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            }
        };
        n.END_POSITION = {
            TopLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 0,
                yOffset: 1
            },
            Top: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 0,
                yOffset: 1
            },
            TopRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 0,
                yOffset: 1
            },
            Left: {
                xPercent: 0,
                xOffset: 1,
                yPercent: .5,
                yOffset: 0
            },
            Center: {
                xPercent: .5,
                xOffset: 0,
                yPercent: .5,
                yOffset: 0
            },
            Right: {
                xPercent: 1,
                xOffset: -1,
                yPercent: .5,
                yOffset: 0
            },
            BottomLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 1,
                yOffset: -1
            },
            Bottom: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 1,
                yOffset: -1
            }
        };
        n.prototype.setRules = function(a, b) {
            if (a && b) {
                for (var c in a) {
                    var e = a[c],
                        d = null;
                    switch (e.type) {
                        case h.TYPE.NUMBER_OF_PAGE_VIEWS:
                            d = new N(e.order, this.buttonId, B.getPageCount(), e.operator, parseInt(e.value, 10));
                            break;
                        case h.TYPE.URL_MATCH:
                            d = new N(e.order, this.buttonId, B.getCurrentPage(), e.operator, e.value);
                            break;
                        case h.TYPE.SECONDS_ON_PAGE:
                            d = new O(e.order, this.buttonId, (new Date).getTime(), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.SECONDS_ON_SITE:
                            d = new O(e.order, this.buttonId,
                                parseInt(B.getSessionStart(), 10), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.CUSTOM_VARIABLE:
                            d = new V(e.order, this.buttonId, e.name, e.operator, e.value), H.hasOwnProperty(e.name) || (H[e.name] = []), H[e.name].push(this.buttonId)
                    }
                    null != d && this.addRule(d)
                }
                this.filterLogic = b;
                this.ruleTree = F(b)
            }
        };
        n.prototype.setOnlineState = function(a) {
            a || null === this.inviteTimeout || (clearTimeout(this.inviteTimeout), this.inviteTimeout = null);
            a || null === this.autoRejectTimeout || (clearTimeout(this.autoRejectTimeout), this.autoRejectTimeout =
                null);
            l.prototype.setOnlineState.call(this, a)
        };
        n.prototype.isActive = function() {
            return this.active
        };
        n.prototype.setActive = function(a) {
            this.active = a
        };
        n.prototype.addTracker = function(a) {
            this.trackers = [];
            l.prototype.addTracker.call(this, a)
        };
        n.prototype.getTracker = function() {
            if (1 != this.trackers.length) throw Error("InviteButtons should have exactly 1 tracker");
            return this.trackers[0]
        };
        n.prototype.startChat = function(a) {
            return this.active && l.prototype.startChat.call(this, a) ? (this.getTracker().accept(), !0) :
                !1
        };
        n.prototype.rejectChat = function() {
            return this.active && l.prototype.rejectChat.call(this) ? (this.getTracker().reject(), !0) : !1
        };
        n.prototype.trigger = function() {
            if (f.getCookie("liveagent_invite_rejected_" + this.buttonId)) return !1;
            var a = !0;
            null != this.ruleTree && (f.logGroupStart("Invite " + this.buttonId + " Rule Evaluation"), f.log("Filter Logic: " + this.filterLogic), a = this.ruleTree.evaluate(this), f.logGroupEnd());
            if (!a && null != this.inviteDelay) {
                var b = this;
                this.inviteTimeout = window.setTimeout(function() {
                        b.setOnlineState(!0)
                    },
                    this.inviteDelay);
                this.inviteDelay = null
            }
            return a
        };
        n.prototype.addRule = function(a) {
            this.rules[a.getId()] = a
        };
        n.prototype.getRule = function(a) {
            return this.rules[a]
        };
        n.prototype.getInviteDelay = function() {
            return this.inviteDelay
        };
        n.prototype.setInviteDelay = function(a) {
            f.log("Setting invite delay to: " + a);
            this.inviteDelay = a
        };
        n.prototype.setAutoRejectTimeout = function(a) {
            this.autoRejectTimeout = a
        };
        A.prototype = new t;
        A.prototype.setState = function(a) {
            a && !ia && u(this.buttonId).trigger() && t.prototype.setState.call(this,
                !0) ? (ia = !0, G = this.buttonId, this.renderer.render()) : !a && u(this.buttonId).isActive() && t.prototype.setState.call(this, !1) && (ia = !1, this.remove(!0))
        };
        A.prototype.renderFinish = function() {
            u(this.buttonId).setActive(!0);
            if (-1 != this.rejectTime) {
                var a = this.buttonId;
                u(this.buttonId).setAutoRejectTimeout(window.setTimeout(function() {
                    u(a).rejectChat()
                }, 1E3 * this.rejectTime))
            }
            this.renderer.renderFinish()
        };
        A.prototype.accept = function() {
            this.hasInviteAfterAccept || f.setCookie("liveagent_invite_rejected_" + this.buttonId,
                !0, !1);
            this.remove(!1)
        };
        A.prototype.reject = function() {
            this.hasInviteAfterReject || f.setCookie("liveagent_invite_rejected_" + this.buttonId, !0, !1);
            this.remove(!0)
        };
        A.prototype.remove = function(a) {
            u(this.buttonId).setActive(!1);
            this.renderer.remove(a)
        };
        A.prototype.removeFinish = function() {
            this.renderer.remove(!1)
        };
        r.prototype.init = function(a, b, c, e) {
            window.innerWidth ? this.realWidth = window.innerWidth : document.documentElement && document.documentElement.clientWidth ? this.realWidth = document.documentElement.clientWidth :
                document.body && (this.realWidth = document.body.clientWidth);
            window.innerHeight ? this.realHeight = window.innerHeight : document.documentElement && document.documentElement.clientHeight ? this.realHeight = document.documentElement.clientHeight : document.body && (this.realHeight = document.body.clientHeight);
            this.offset = 25;
            this.buttonId = a;
            this.animationPrefix = f.getCssAnimation(b);
            this.element = b;
            this.element.style.position = null !== this.animationPrefix ? "fixed" : "absolute";
            this.element.style.left = "-1000px";
            this.element.style.top =
                "-1000px";
            this.element.style.zIndex = "10000";
            this.element.style.display = "";
            this.width = this.element.offsetWidth;
            this.height = this.element.offsetHeight;
            this.startPosition = c;
            this.endPosition = e
        };
        r.prototype.render = function() {
            this.element.style.display = ""
        };
        r.prototype.renderFinish = function() {};
        r.prototype.remove = function(a) {
            this.element.style.left = "-1000px";
            this.element.style.top = "-1000px"
        };
        r.prototype.addRenderListeners = function() {
            var a = this.buttonId,
                b = "AnimationIteration",
                c = "AnimationEnd";
            "" == this.animationPrefix ?
                (b = b.toLowerCase(), c = c.toLowerCase()) : (b = this.animationPrefix + b, c = this.animationPrefix + c);
            f.addEventListener(this.element, b, function() {
                D(a).renderFinish()
            });
            f.addEventListener(this.element, c, function() {
                D(a).removeFinish()
            })
        };
        J.prototype = new r;
        J.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = this.width * this.startPosition.xPosition + this.offset * this.startPosition.xOffset,
                b = this.height * this.startPosition.yPosition + this.offset * this.startPosition.yOffset,
                c = this.width * this.endPosition.xPercent *
                -1 + this.offset * this.endPosition.xOffset,
                e = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset,
                d = "";
            "" !== this.animationPrefix && (d = "-" + this.animationPrefix + "-");
            var g = document.createElement("style");
            g.innerHTML = "@" + d + "keyframes slide" + this.buttonId + "{from { margin-left: " + a + "px; margin-top: " + b + "px; left: " + 100 * this.startPosition.xPercent + "%; top: " + 100 * this.startPosition.yPercent + "%; }to { margin-left: " + c + "px; margin-top: " + e + "px; left: " + 100 * this.endPosition.xPercent + "%; top: " +
                100 * this.endPosition.yPercent + "%; }}";
            document.getElementsByTagName("head")[0].appendChild(g);
            this.element.style[d + "animation-name"] = "slide" + this.buttonId;
            this.element.style[d + "animation-duration"] = "1s";
            this.element.style[d + "animation-iteration-count"] = "2";
            this.element.style[d + "animation-direction"] = "alternate";
            this.element.style[d + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(d + "animation-name", "slide" + this.buttonId, "");
            this.element.style.setProperty(d + "animation-duration",
                "1s", "");
            this.element.style.setProperty(d + "animation-iteration-count", "2", "");
            this.element.style.setProperty(d + "animation-direction", "alternate", "");
            this.element.style.setProperty(d + "animation-timing-function", "ease-in-out", "");
            r.prototype.render.call(this)
        };
        J.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        J.prototype.remove =
            function(a) {
                var b = "";
                "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
                a ? (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", "")) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
            };
        K.prototype = new r;
        K.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            var b = document.createElement("style");
            b.innerHTML = "@" + a + "keyframes fade" + this.buttonId + "{from { opacity: 0; }to { opacity: 1; }}";
            document.getElementsByTagName("head")[0].appendChild(b);
            this.element.style[a + "animation-name"] = "fade" + this.buttonId;
            this.element.style[a + "animation-duration"] = "1s";
            this.element.style[a + "animation-iteration-count"] = "2";
            this.element.style[a + "animation-direction"] = "alternate";
            this.element.style[a + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(a +
                "animation-name", "fade" + this.buttonId, "");
            this.element.style.setProperty(a + "animation-duration", "1s", "");
            this.element.style.setProperty(a + "animation-iteration-count", "2", "");
            this.element.style.setProperty(a + "animation-direction", "alternate", "");
            this.element.style.setProperty(a + "animation-timing-function", "ease-in-out", "");
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent + "%";
            this.element.style.marginTop =
                this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this)
        };
        K.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        K.prototype.remove = function(a) {
            var b = "";
            "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
            a ?
                (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", ""), this.element.style.opacity = 0) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
        };
        M.prototype = new r;
        M.prototype.render = function() {
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent +
                "%";
            this.element.style.marginTop = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this);
            D(this.buttonId).renderFinish()
        };
        M.prototype.remove = function(a) {
            a ? D(this.buttonId).removeFinish() : r.prototype.remove.call(this, a)
        };
        E.prototype = new r;
        E.prototype.render = function() {
            D(this.buttonId).renderFinish()
        };
        E.prototype.renderFinish = function() {};
        E.prototype.remove = function(a) {
            a && D(this.buttonId).removeFinish()
        };
        h.TYPE = {
            NUMBER_OF_PAGE_VIEWS: "NUMBER_OF_PAGE_VIEWS",
            URL_MATCH: "URL_MATCH",
            SECONDS_ON_PAGE: "SECONDS_ON_PAGE",
            SECONDS_ON_SITE: "SECONDS_ON_SITE",
            CUSTOM_VARIABLE: "CUSTOM_VARIABLE"
        };
        h.OPERATOR = {
            EQUALS: "EQUALS",
            NOT_EQUAL: "NOT_EQUAL",
            START_WITH: "START_WITH",
            CONTAINS: "CONTAINS",
            NOT_CONTAIN: "NOT_CONTAIN",
            LESS_THAN: "LESS_THAN",
            GREATER_THAN: "GREATER_THAN",
            LESS_OR_EQUAL: "LESS_OR_EQUAL",
            GREATER_OR_EQUAL: "GREATER_OR_EQUAL"
        };
        h.prototype.init = function(a, b, c, e, d) {
            this.ruleId = a;
            this.buttonId = b;
            this.compareFrom = c;
            this.operator =
                e;
            this.compareTo = d
        };
        h.prototype.getId = function() {
            return this.ruleId
        };
        h.prototype.evaluate = function(a, b) {
            switch (this.operator) {
                case h.OPERATOR.EQUALS:
                    return f.log("Evaluate: " + a + " \x3d\x3d " + b), a == b;
                case h.OPERATOR.NOT_EQUAL:
                    return f.log("Evaluate: " + a + " !\x3d " + b), a != b;
                case h.OPERATOR.START_WITH:
                    return f.log("Evaluate: " + a + " indexOf " + b + " \x3d\x3d 0"), 0 == a.indexOf(b);
                case h.OPERATOR.CONTAINS:
                    return f.log("Evaluate: " + a + " indexOf " + b + " !\x3d -1"), -1 != a.indexOf(b);
                case h.OPERATOR.NOT_CONTAIN:
                    return f.log("Evaluate: " +
                        a + " indexOf " + b + " \x3d\x3d -1"), -1 == a.indexOf(b);
                case h.OPERATOR.LESS_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c " + parseFloat(b)), parseFloat(a) < parseFloat(b);
                case h.OPERATOR.GREATER_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e " + parseFloat(b)), parseFloat(a) > parseFloat(b);
                case h.OPERATOR.LESS_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c\x3d " + parseFloat(b)), parseFloat(a) <= parseFloat(b);
                case h.OPERATOR.GREATER_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e\x3d " +
                        parseFloat(b)), parseFloat(a) >= parseFloat(b)
            }
        };
        N.prototype = new h;
        N.prototype.evaluate = function() {
            f.log("Evaluating StandardInviteRule");
            return h.prototype.evaluate.call(this, this.compareFrom, this.compareTo)
        };
        O.prototype = new h;
        O.prototype.evaluate = function() {
            f.log("Evaluating TimerInviteRule");
            var a = (new Date).getTime() - this.compareFrom,
                b = h.prototype.evaluate.call(this, a, this.compareTo);
            !b && a <= this.compareTo && (a = this.compareTo - a, (null == u(this.buttonId).getInviteDelay() || a < u(this.buttonId).getInviteDelay()) &&
                u(this.buttonId).setInviteDelay(a));
            return b
        };
        V.prototype = new h;
        V.prototype.evaluate = function() {
            if (ja.hasOwnProperty(this.compareFrom)) return f.log("Evaluating CustomInviteRule"), h.prototype.evaluate.call(this, ja[this.compareFrom].toString(), this.compareTo);
            f.log("CustomInviteRule evaluation failed due to missing custom variable");
            return !1
        };
        var na = 0;
        z.prototype.init = function(a, b) {
            this.left = a;
            this.right = b
        };
        z.prototype.evaluate = function(a) {
            return !1
        };
        Z.prototype = new z;
        Z.prototype.evaluate = function(a) {
            f.log("Evaluating Atom Node: " +
                this.ruleId);
            return a.getRule(this.ruleId).evaluate()
        };
        W.prototype = new z;
        W.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating And Node");
            a = this.left.evaluate(a) && this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        X.prototype = new z;
        X.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Or Node");
            a = this.left.evaluate(a) || this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        Y.prototype = new z;
        Y.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Not Node");
            a = !this.left.evaluate(a);
            f.logGroupEnd();
            return a
        };
        oa.prototype.toJSON = function() {
            return {
                label: this.getLabel(),
                value: this.getValue(),
                displayToAgent: this.getDisplayToAgent(),
                entityMaps: this.getMapper().getEntityMaps(),
                transcriptFields: this.getMapper().getTranscriptFields(),
                doKnowledgeSearch: this.getDoKnowledgeSearch()
            }
        };
        aa.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityMaps().push(new pa(a, b, c, e, d))
        };
        aa.prototype.saveToTranscript = function(a) {
            this.getTranscriptFields().push(a)
        };
        pa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                fieldName: this.getFieldName(),
                fastFill: this.getFastFill(),
                autoQuery: this.getAutoQuery(),
                exactMatch: this.getExactMatch()
            }
        };
        var I = {};
        p._ = I;
        I.handlePing = function(a) {
            q.connection.handlePing(a)
        };
        I.error = function(a) {
            a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
            da()
        };
        I.warning = function(a) {
            a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
        };
        I.setNewPtid = function(a) {
            v.setPermanentId(a)
        };
        I.clearStorage =
            function() {
                B.clear()
            };
        p.init = function(a, b, c) {
            if ("string" != typeof a) throw Error("The url to init must be strings");
            if (!f.isOrganizationId(c)) throw Error("Invalid OrganizationId Parameter Value: " + c);
            if (!f.isDeploymentId(b)) throw Error("Invalid DeploymentId Parameter Value: " + b);
            m.url = a;
            m.deploymentId = b;
            m.orgId = c;
            f.log("System Initialized. Waiting for the DOM to be ready");
            "complete" === document.readyState ? setTimeout(P, 1) : document.addEventListener ? (document.addEventListener("DOMContentLoaded", P, !1),
                window.addEventListener("load", P, !1)) : window.attachEvent ? window.attachEvent("onload", P) : f.log("No available event model. Exiting.")
        };
        p.getSid = function() {
            return x
        };
        p.enableLogging = function() {
            R = !0
        };
        p.setLocation = function(a) {};
        p.setChatWindowWidth = function(a) {
            m.chatWindowWidth = a
        };
        p.setChatWindowHeight = function(a) {
            m.chatWindowHeight = a
        };
        p.disconnect = function() {
            da()
        };
        p.startChat = function(a, b, c) {
            (b ? L(a, b) : k[a]).startChat("liveagent" + Math.round(1E5 * Math.random()) + (new Date).getTime(), c)
        };
        p.startChatWithWindow =
            function(a, b, c, e) {
                (c ? L(a, c) : k[a]).startChat(b, e)
            };
        p.rejectChat = function(a) {
            k[a].rejectChat()
        };
        p.showWhenOnline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new T(a.buttonId, b))
        };
        p.showWhenOffline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new U(a.buttonId, b))
        };
        p.addCustomDetail = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a detail after page initialization.");
            if ("undefined" == typeof a || "undefined" == typeof b || null === a || null === b) throw Error("CustomDetail contains null value");
            var e = new oa(a, b, c);
            ya.push(e);
            var d = {
                map: function(a, b, c, f, h) {
                    if ("undefined" == typeof a || null === a || "undefined" == typeof b || null === b || null === c || null === f || null === h) throw Error("CustomDetail.map contains null value");
                    e.getMapper().map(a, b, c, f, h);
                    return d
                },
                saveToTranscript: function(a) {
                    if ("undefined" == typeof a || null === a) throw Error("CustomDetail.saveToTranscript contains null value");
                    e.getMapper().saveToTranscript(a);
                    return d
                },
                doKnowledgeSearch: function() {
                    e.setDoKnowledgeSearch();
                    return d
                }
            };
            return d
        };
        p.setName = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set the name after page initialization.");
            ea = a
        };
        p.addButtonEventHandler = function(a, b) {
            "function" == typeof b && (ha[a] = b)
        };
        p.BUTTON_EVENT = l.EVENT;
        p.setCustomVariable = function(a, b) {
            ja[a] = b;
            if (H.hasOwnProperty(a))
                for (var c = 0; c < H[a].length; c++) {
                    var e = u(H[a][c]);
                    e.getOnlineState() && e.setOnlineState(!0)
                }
        };
        p.findOrCreate = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot find or create after page initialization.");
            var b = new qa(a);
            za.push(b);
            var c = {
                map: function(a, d, g, f, h) {
                    b.getEntityMapper().map(a, d, g, f, h);
                    return c
                },
                saveToTranscript: function(a) {
                    b.setSaveTranscript(a);
                    return c
                },
                showOnCreate: function() {
                    b.setShowOnCreate(!0);
                    return c
                },
                linkToEntity: function(a, d) {
                    if (ka.hasOwnProperty(a) && ka[a] == b.getEntityName()) return fa("Warning: Recursive links detected, skip link " + b.getEntityName() + " to " + a), c;
                    b.setLinkToEntityName(a);
                    b.setLinkToEntityField(d);
                    ka[b.getEntityName()] = a;
                    return c
                }
            };
            return c
        };
        p.addURLPrefix = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set a URL Prefix after page initialization.");
            if ("string" != typeof a) throw Error("The parameter to addURLPrefix must be a string");
            m.url = f.addPrefixToURL(m.url, a, !0);
            m.urlPrefix = a
        };
        var q = {
            VisitorMessage: {
                ERROR: "Error",
                WARNING: "Warning"
            },
            SystemMessage: {
                ASYNC_RESULT: "AsyncResult",
                SWITCH_SERVER: "SwitchServer"
            }
        };
        (function() {
            var a = null,
                b = !1,
                c = null,
                e = null,
                d = {};
            (function() {
                d.send = function(b, f) {
                    if (null !== c) d.onError.call(window, "Did not handle response before sending another message");
                    else {
                        "undefined" == typeof f && (f = {});
                        var h = "Visitor",
                            k = "",
                            l = !1;
                        1 < b.length ?
                            (h = "System", k = "MultiNoun", f.nouns = "", l = !0) : k = b[0].getName();
                        h = m.url + "/rest/" + h + "/" + k + ".jsonp?";
                        for (k = 0; k < b.length; k++) {
                            l && (f.nouns += b[k].getName() + ",");
                            f[b[k].getName() + ".prefix"] = "Visitor";
                            for (var n in b[k].getData()) b[k].getData().hasOwnProperty(n) && (f[b[k].getName() + "." + n] = b[k].getData()[n])
                        }
                        l && (f.nouns = f.nouns.substr(0, f.nouns.length - 1));
                        for (var p in f) f.hasOwnProperty(p) && (h += p + "\x3d" + f[p] + "\x26");
                        h += "callback\x3d" + a;
                        h += "\x26deployment_id\x3d" + m.deploymentId;
                        h += "\x26org_id\x3d" + m.orgId;
                        h += "\x26version\x3d36";
                        l = document.createElement("script");
                        l.type = "text/javascript";
                        l.src = h;
                        c = document.body.appendChild(l);
                        e = window.setTimeout(function() {
                            d.onError.call(window, "Server failed to respond.")
                        }, m.pingTimeout)
                    }
                };
                d.handlePing = function(a) {
                    e && (clearTimeout(e), e = null);
                    b = !0;
                    a = a.messages;
                    for (var f = 0; f < a.length; f++) d.messageHandler.call(window, a[f].type, a[f].message);
                    d.onSuccess.call(window);
                    null !== c && (document.body.removeChild(c), c = null)
                };
                d.messageHandler = function(a, b) {};
                d.onSuccess = function() {};
                d.onError = function(a) {};
                d.isRunning = function() {
                    return b
                };
                d.setIsRunning = function(a) {
                    b = a
                };
                d.setCallback = function(b) {
                    a = b
                }
            })();
            q.connection = d;
            q.Noun = function(a, b) {
                this.getName = function() {
                    return a
                };
                this.getData = function() {
                    return b
                }
            }
        })();
        qa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                saveToTranscript: this.getSaveTranscript(),
                showOnCreate: this.getShowOnCreate(),
                linkToEntityName: this.getLinkToEntityName(),
                linkToEntityField: this.getLinkToEntityField(),
                entityFieldsMaps: this.getEntityMapper().getEntityFieldsMaps()
            }
        };
        ra.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityFieldsMaps().push(new sa(a, b, c, e, d))
        };
        sa.prototype.toJSON = function() {
            return {
                fieldName: this.getFieldName(),
                label: this.getLabel(),
                doFind: this.getDoFind(),
                isExactMatch: this.getIsExactMatch(),
                doCreate: this.getDoCreate()
            }
        };
        var x = f.getCookie("liveagent_sid"),
            ba = f.getCookie("liveagent_chatted"),
            ta = !1,
            R = !1,
            k = {},
            ya = [],
            za = [],
            ea = null,
            ha = {},
            Q = null,
            ka = {},
            ca = !1,
            m = {
                url: null,
                deploymentId: null,
                orgId: null,
                pingRate: null,
                pingTimeout: 5E3,
                chatWindowWidth: 482,
                chatWindowHeight: 450,
                contentServerUrl: null,
                chatPage: "/s/chat",
                prechatHandler: "/s/prechatVisitor"
            };
        q.connection.messageHandler = function(a, b) {
            switch (a) {
                case "VisitorId":
                    b.sessionId && (f.log("Received new session ID"), x = b.sessionId, document.cookie = "liveagent_sid\x3d" + encodeURIComponent(x) + ";path\x3d/;", null != v.getVisitCount() && v.setVisitCount(v.getVisitCount() + 1), v.getPermanentId() || v.setPermanentId(x));
                    break;
                case "Settings":
                    B.init();
                    f.log("Ping rate set to " + b.pingRate + "ms");
                    m.pingRate = b.pingRate;
                    m.contentServerUrl = b.contentServerUrl;
                    m.prefixKey = b.prefixKey;
                    for (var c = 0; c < b.buttons.length; c++) switch (b.buttons[c].type) {
                        case "ToAgent":
                        case "Standard":
                            var e = b.buttons[c],
                                d = k[e.id];
                            d && wa(d, e);
                            break;
                        case "Invite":
                            var e = b.buttons[c],
                                g = null,
                                g = e.inviteImageUrl ? Ca(e.id, e.inviteImageUrl, e.inviteImageWidth, e.inviteImageHeight) : document.getElementById("liveagent_invite_button_" + e.id);
                            null == g ? fa("Warning: Button " + e.id + " disabled because HTML element was not found") :
                                (d = u(e.id), d.addTracker(new A(e.id, g, e.inviteRenderer, e.inviteStartPosition, e.inviteEndPosition, e.hasInviteAfterAccept, e.hasInviteAfterReject, e.inviteRejectTime)), g = f.jsonDecode(e.inviteRules), d.setRules(g.rules, g.filter), wa(d, e))
                    }
                    break;
                case "Availability":
                    c = {};
                    for (e = 0; e < b.results.length; e++)(d = k[b.results[e].id]) && (c[b.results[e].id] = {
                        button: d,
                        isAvailable: b.results[e].isAvailable
                    });
                    null != G && c.hasOwnProperty(G) && (c[G].button.setOnlineState(c[G].isAvailable), delete c[G]);
                    for (g in c) c.hasOwnProperty(g) &&
                        c[g].button.setOnlineState(c[g].isAvailable);
                    break;
                case q.VisitorMessage.WARNING:
                    fa(b.text);
                    break;
                case q.VisitorMessage.ERROR:
                    Aa(b.text);
                    break;
                case q.SystemMessage.SWITCH_SERVER:
                    c = b.newUrl;
                    if ("string" === typeof c) m.url = c, f.log("Received updated LiveAgent server url: " + c + "! Consider updating this site's deployment code.");
                    else throw Error("Trying to set invalid LiveAgent server url: " + c);
                    ca = !0
            }
        };
        q.connection.onSuccess = function() {
            null !== Q && clearTimeout(Q);
            Q = window.setTimeout(Da, m.pingRate)
        };
        q.connection.onError =
            function(a) {
                Aa(a)
            }
    }
})();
/**
 * Service for logging members in.
 *
 * @namespace Services
 * @class loginService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.login', [])
    .service('loginService', [
      '$q',
      '$rootScope',
      '$http',
      'config',
      'storageService',
      function($q, $rootScope, $http, config, storageService) {
        var userLoggedOutFlag = false;
        var loginUrl = config.loginUrl || 'https://mobileps.bcbsnc.com/mga/sps/oauth/oauth20/token';
        this.setUserLoggedOutFlag = function(boolVal) {
          userLoggedOutFlag = boolVal;
        };
        this.getUserLoggedOutFlag = function() {
          return userLoggedOutFlag;
        };
        this.getUserId = function() {
          return this
            .getAuthorization()
            .then(function(authValue) {
              if (!authValue) {
                return null;
              }
              return authValue.userId;
            });
        };
        this.setBiometricEnabled = function(bioBoolean) {
          if (typeof bioBoolean !== 'boolean') {
            console.warn('Attempted to set a non-boolean as biometricEnabled', bioBoolean);
            return $q.reject('setting biometric boolean no es available');
          }
          return storageService.set('biometricEnabled', {biometricEnabled: bioBoolean});
        };
        this.getBiometricEnabled = function() {
          return storageService
            .get('biometricEnabled')
            .then(function(biometricObject) {
              if (biometricObject && biometricObject.biometricEnabled) {
                return biometricObject.biometricEnabled;
              }
              return false;
            })
            .catch(function(retrievalError) {
              console.warn('Error fetching biometric boolean', retrievalError);
            });
        };
        this.setAuthorization = function(newAuthObj) {
          return storageService.set('authorization', newAuthObj);
        };
        this.getAuthorization = function() {
          return storageService
            .get('authorization')
            .catch(function(retrievalError) {
              console.warn('Error getting authorization value', retrievalError);
            });
        };
        this.clearAuthorization = function() {
          return storageService.set('authorization', null);
        };

        /**
         * @description Attempts to log in with ISAM.
         * @memberof loginService
         * @method attemptLogin
         */
        this.attemptLogin = function(userId, password, clientId, clientSecret) {
          var self = this;
          return $q(function(resolve, reject) {
            $http.defaults.headers.common['Authorization'] = null;

            if (typeof cordova !== 'undefined') {
              window.cookies.clear(function() {
                $http({
                  method: 'POST',
                  url: loginUrl,
                  headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                  transformRequest: encodeForm,
                  data: {
                    grant_type: 'password',
                    client_id: clientId,
                    client_secret: clientSecret,
                    username: userId,
                    password: password
                  }
                })
                  .success(function(result) {
                    $http.defaults.headers.common = {
                      'Authorization': 'Bearer ' + result.access_token
                    };
                    var authorization = {
                      accessToken: result.access_token,
                      refreshToken: result.refresh_token,
                      expires: self.getTokenExpiryDate(result.expires_in),
                      logInDate: new Date()
                    };
                    // TODO: use login settings to determine whether to save userId.
                    authorization.userId = userId;
                    resolve(authorization);
                  })
                  .error(function(error) {
                    console.log(error);
                    reject(error);
                  });
              });
            }
          });
        };

        /**
         * @description Attempts to refresh the session with ISAM.
         * @memberof loginService
         * @method attemptLogin
         */
        this.attemptRefreshLogin = function(authorization, clientId, clientSecret) {
          var self = this;
          return $q(function(resolve, reject) {
            $http.defaults.headers.common['Authorization'] = null;

            if (typeof cordova !== 'undefined') {
              window.cookies.clear(function() {
                $http({
                  method: 'POST',
                  url: loginUrl,
                  headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                  transformRequest: encodeForm,
                  data: {
                    grant_type: 'refresh_token',
                    client_id: clientId,
                    client_secret: clientSecret,
                    refresh_token: authorization.refreshToken
                  }
                })
                  .success(function(result) {
                    $http.defaults.headers.common = {
                      'Authorization': 'Bearer ' + result.access_token
                    };

                    var newAuthorization = {
                      accessToken: result.access_token,
                      refreshToken: result.refresh_token,
                      expires: self.getTokenExpiryDate(result.expires_in),
                      logInDate: authorization.logInDate,
                      userId: authorization.userId
                    };
                    resolve(newAuthorization);
                  })
                  .error(reject);
              });
            }
          });
        };

        /**
         * @description Returns the date that the current token will expire.
         * @memberof loginService
         * @method getTokenExpiryDate
         * @param  {Number} expiresSeconds The number in seconds that the token will expire.
         * @return {Date} The date of expiration.
         */
        this.getTokenExpiryDate = function(expiresSeconds) {
          var now = new Date();
          return moment(now.getTime() + expiresSeconds * 1000).toDate();
        };

        /**
         * @description Decrypts OAuth credentials.
         * @memberof loginService
         * @method getDecryptedCredentials
         * @param  {Object} credentials The encrypted credentials.
         * @return {Object} The decrypted credentials.
         */
        this.getDecryptedCredentials = function(credentials) {
          return {
            clientId: CryptoJS.AES.decrypt(credentials.clientId, config.key).toString(CryptoJS.enc.Utf8),
            clientSecret: CryptoJS.AES.decrypt(credentials.clientSecret, config.key).toString(CryptoJS.enc.Utf8)
          };
        };

        /**
          * @description Encrypts OAuth credentials.
          * @memberof loginService
          * @method getEncryptedCredentials
          * @return {Object} The encrypted credentials.
          */
        this.getEncryptedCredentials = function(credentials) {
          return {
            clientId: CryptoJS.AES.encrypt(credentials.clientId, config.key).toString(),
            clientSecret: CryptoJS.AES.encrypt(credentials.clientSecret, config.key).toString()
          };
        };

        /**
         * @description Returns whether a member is currently logged in.
         * @memberof loginService
         * @method isLoggedIn
         * @return {Boolean} Whether a member is logged in.
         */
        this.isLoggedIn = function() {
          if ($rootScope.appSettings && $rootScope.appSettings.authorization) {
            if (typeof $rootScope.appSettings.authorization.expires === 'string') {
              $rootScope.appSettings.authorization.expires = moment($rootScope.appSettings.authorization.expires).toDate();
            }
            var now = new Date();
            return $rootScope.appSettings.authorization.expires <= now;
          }

          return false;
        };

        function encodeForm(obj) {
          var str = [];
          for (var p in obj) {
            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
          }
          return str.join('&');
        }
      }
    ]);
}());

/**
 * Services for the parsing and formatting of messages.
 *
 * @namespace Services
 * @class messageService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.message', [])
  .service('messageService', [
    '$q',
    '$http',
    '$sce',
    '$filter',
    'config',
    'inquiryService',
    function($q, $http, $sce, $filter, config, inquiryService) {
      var apiUrl = config.apiUrl || 'https://api.bcbsnc.com';
      var capraApiUrl = config.capraApiUrl || 'https://capra.bcbsnc.com';

      /**
      * Returns a 125 character, HTML trusted snippet of the message body.
      *
      * @memberof messageService
      * @method getMessageBodySnippet
      * @param  {Object} message The message to get the snippet from.
      * @return {Object} The trusted HTML.
      */
      this.getMessageBodySnippet = function(message) {
        if(message.body.length > 125) {
          return $sce.trustAsHtml(message.body.substr(0, 125) + '...');
        }

        return $sce.trustAsHtml(message.body);
      };

      /**
      * Returns a 15 character, HTML trusted snippet of the message subject.
      *
      * @memberof messageService
      * @method getMessageSubjectSnippet
      * @param  {Object} message The message to get the snippet from.
      * @return {Object} The trusted HTML.
      */
      this.getMessageSubjectSnippet = function(message) {
        if(message.subject.length > 15) {
          return $sce.trustAsHtml(message.subject.substr(0, 15) + '...');
        }

        return $sce.trustAsHtml(message.subject);
      };

      /**
      * Returns a message body as trusted HTML.
      *
      * @memberof messageService
      * @method getMessageBodyHTML
      * @param  {Object} message The message to get content from.
      * @return {Object} The trusted HTML.
      */
      this.getMessageBodyHtml = function(message) {
        return $sce.trustAsHtml(message.body);
      };

      /**
      * Returns a message display date, filtered based on how old the message is.
      *
      * @memberof messageService
      * @method getMessageDisplayDate
      * @param  {Object}  message The message to get the date from.
      * @param  {Boolean} [full]  Whether to override filtering and return a full date.
      * @return {String} The display date.
      */
      this.getMessageDisplayDate = function(message, full) {
        var now = new Date();
        var nowTime = now.getTime();
        var date = moment(message.createdDate).toDate();
        var dateTime = date.getTime();

        var oneDay = 1000 * 60 * 60 * 24;

        if(full) {
          return $filter('date')(date, 'M/d/yy h:mm a');
        }
        else if(now.getFullYear() !== date.getFullYear()) {
          return $filter('date')(date, 'M/d/yy');
        }
        else if(nowTime - dateTime < oneDay && now.getDate() === date.getDate()) {
          return $filter('date')(date, 'h:mm a');
        }

        return $filter('date')(date, 'MMM d');
      };

      /**
      * Retrieves the total and unread message counts.
      *
      * @memberof messageService
      * @method getMessageCounts
      * @return {Promise} A promise that resolves to function(counts).
      */
      this.getCounts = function() {
        var deferred = $q.defer();

        $http.get(apiUrl + '/messages/count').success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Creates a new message.
      *
      * @memberof messageService
      * @method composeMessage
      * @param  {Object} message The message content.
      * @return {Promise} A promise that resolves to function(result).
      */
      this.composeMessage = function(message) {
        var deferred = $q.defer();

        message.inquiryType = inquiryService.getSalesforceInquiryType(message.inquiryType);

        $http.post(apiUrl + '/messages', message).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Creates a new email, the email would be sent via capra's email service.
      *
      * @memberof messageService
      * @method sendEmail
      * @param  {Object} message The message content with subject and text
      * @return {Promise} A promise that resolves to function(result).
      */
      this.composeEmail = function(message) {
        var deferred = $q.defer();

        $http.post(capraApiUrl + '/email', message).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Deletes a message.
      *
      * @memberof messageService
      * @method deleteMessage
      * @param  {String} messageId The unique ID of the message.
      * @return {Promise} A promise that resolves to function(result).
      */
      this.deleteMessage = function(messageId) {
        var deferred = $q.defer();

        $http.put(apiUrl + '/messages', {
          operation: 'DELETE',
          messageIds: messageId
        }).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Updates a message.
      *
      * @memberof messageService
      * @method updateMessage
      * @param  {String} messageId The unique ID of the message.
      * @param  {String} operation The update to perform (READ, UNREAD, OPENED).
      * @return {Promise} A promise that resolves to function(result).
      */
      this.updateMessage = function(messageId, operation) {
        var deferred = $q.defer();

        $http.put(apiUrl + '/messages', {
          operation: operation.toUpperCase(),
          messageIds: messageId
        }).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Bookmarks or unbookmarks a message.
      *
      * @memberof messageService
      * @method bookmarkMessage
      * @param  {String}  messageId  The unique ID of the message.
      * @param  {Boolean} bookmarkOn Whether to bookmark or unbookmark.
      * @return {Promise} A promise that resolves to function(result).
      */
      this.bookmarkMessage = function(messageId, bookmarkOn) {
        var deferred = $q.defer();

        if(bookmarkOn) {
          $http.post(apiUrl + '/bookmarks', {
            type: 'MESSAGE',
            id: messageId
          }).success(function(result) {
            deferred.resolve(result);
          }).error(function(error, status) {
            deferred.reject(error, status);
          });
        }
        else {
          $http.delete(apiUrl + '/bookmarks/MESSAGE/' + messageId).success(function(result) {
            deferred.resolve(result);
          }).error(function(error, status) {
            deferred.reject(error, status);
          });
        }

        return deferred.promise;
      };
    }
  ]);
}());

(function() {
  /**
   * @typedef {Object} MailingAddress
   * @property {string} addressLine1
   * @property {string} addressLine2
   * @property {string} cityName
   * @property {string} stateCode
   * @property {string} postalCode
   *
   */
  angular
    .module('blueconnect.mobile.services.paymentFlowFactory', [])
    .factory('PaymentFlowFactory', [function() {
      var userSetData = {
        accountHolderName: null,
        accountNumber: null,
        accountType: null,
        bankName: null,
        billingMethod: null,
        confirmedAccountNumber: null,
        paymentAmount: null,
        paymentFrequency: null,
        paymentMethod: null,
        routingNumber:null,
        preferences: {
          emailAddress: null,
          mailingAddress: {
            addressLine1: null,
            addressLine2: null,
            cityName: null,
            stateCode: null,
            postalCode: null
          }
        },
        creditCardDetails: {
          lastFour: null,
          expiration: null,
          type: null,
          firstName: null,
          lastName: null,
          billToAddressLine1: null,
          billToAddressLine2: null,
          billToCity: null,
          billToState: null,
          billToZipCode: null,
          cvn: null
        },
        successConfirmationCode: null,
        signature: null,
        merchantReferenceCode: null,
        enrollmentProcessNumber: null,
        paymentBlob: null,
        paymentErrorCode: null,
        encryptedPaymentData: null
      };
      var paymentFlow = null;
      document.addEventListener("resume", onResumeClearPaymentInfo, false);
      /**
       * @namespace EventListeners
       * @name onResumeClearPaymentInfo
       * @description This method will clear the payment flow when the user backgrounds the app.
       * @function
       */
      function onResumeClearPaymentInfo() {
        reset();
      }
      return {
        setPaymentFlow: setPaymentFlow,
        getPaymentFlow: getPaymentFlow,
        setPaymentFrequency: setPaymentFrequency,
        getPaymentFrequency: getPaymentFrequency,
        setPaymentAmount: setPaymentAmount,
        getPaymentAmount: getPaymentAmount,
        setPaymentMethod: setPaymentMethod,
        getPaymentMethod: getPaymentMethod,
        setBillingMethod: setBillingMethod,
        getBillingMethod: getBillingMethod,
        getUserSetData: getUserSetData,
        getConfirmationCode: getConfirmationCode,
        getSignature: getSignature,
        setSignature: setSignature,
        getMerchantReferenceCode: getMerchantReferenceCode,
        setMerchantReferenceCode: setMerchantReferenceCode,
        getEnrollmentProcessNumber: getEnrollmentProcessNumber,
        setEnrollmentProcessNumber: setEnrollmentProcessNumber,
        getEmailAddress: getEmailAddress,
        setEmailAddress: setEmailAddress,
        getMailingAddress: getMailingAddress,
        getAccountHolderName: getAccountHolderName,
        setAccountHolderName: setAccountHolderName,
        getAccountNumber: getAccountNumber,
        setAccountNumber: setAccountNumber,
        getRoutingNumber: getRoutingNumber,
        setRoutingNumber: setRoutingNumber,
        getBankName: getBankName,
        setBankName: setBankName,
        getAccountType: getAccountType,
        setAccountType: setAccountType,
        getConfirmedAccountNumber: getConfirmedAccountNumber,
        setConfirmedAccountNumber: setConfirmedAccountNumber,
        resetCreditCardDetails: resetCreditCardDetails,
        reset: reset
      };
      function getSignature() {
        return userSetData.signature;
      }
      function setSignature(signature) {
        userSetData.signature = signature;
        return this;
      }
      function getMerchantReferenceCode() {
        return userSetData.merchantReferenceCode;
      }
      function setMerchantReferenceCode(merchantReferenceCode) {
        userSetData.merchantReferenceCode = merchantReferenceCode;
        return this;
      }
      function getEnrollmentProcessNumber() {
        return userSetData.enrollmentProcessNumber;
      }
      function setEnrollmentProcessNumber(enrollmentProcessNumber) {
        userSetData.enrollmentProcessNumber = enrollmentProcessNumber;
        return this;
      }
      function getEmailAddress() {
        return userSetData.preferences.emailAddress;
      }
      function setEmailAddress(emailAddress) {
        userSetData.preferences.emailAddress = emailAddress;
        return this;
      }
      function getConfirmationCode() {
        return userSetData.successConfirmationCode;
      }
      function setPaymentFlow(desiredPaymentFlow) {
        paymentFlow = desiredPaymentFlow;
        return this;
      }
      function getPaymentFlow() {
        return paymentFlow;
      }
      function setPaymentFrequency(frequency) {
        userSetData.paymentFrequency = frequency;
        return this;
      }
      function getPaymentFrequency() {
        return userSetData.paymentFrequency;
      }
      function setPaymentAmount(amount) {
        userSetData.paymentAmount = amount;
        return this;
      }
      function getPaymentAmount() {
        return userSetData.paymentAmount;
      }
      function setPaymentMethod(method) {
        userSetData.paymentMethod = method;
        return this;
      }
      function getPaymentMethod() {
        return userSetData.paymentMethod;
      }
      function setBillingMethod(method) {
        userSetData.billingMethod = method;
        return this;
      }
      function getBillingMethod() {
        return userSetData.billingMethod;
      }
      function getUserSetData() {
        return userSetData;
      }
      /**
       * return {MailingAddress}
       */
      function getMailingAddress() {
        return userSetData.preferences.mailingAddress;
      }
      function getAccountHolderName() {
        if (!userSetData.accountHolderName) {
          if (userSetData.creditCardDetails.firstName && userSetData.creditCardDetails.lastName) {
            return userSetData.creditCardDetails.firstName + ' ' + userSetData.creditCardDetails.lastName;
          }
        }
        return userSetData.accountHolderName;
      }
      function setAccountHolderName(accountHolderName) {
        userSetData.accountHolderName = accountHolderName;
        return this;
      }
      function getAccountType(accountType) {
        return userSetData.accountType;
      }
      function setAccountType(accountType) {
        userSetData.accountType = accountType;
        return this;
      }
      function getRoutingNumber() {
        return userSetData.routingNumber;
      }
      function setRoutingNumber(routingNumber) {
        userSetData.routingNumber = routingNumber;
        return this;
      }
      function getBankName() {
        return userSetData.bankName;
      }
      function setBankName(bankName) {
        userSetData.bankName = bankName;
        return this;
      }
      function getAccountNumber() {
        return userSetData.accountNumber;
      }
      function setAccountNumber(accountNumber) {
        userSetData.accountNumber = accountNumber;
        return this;
      }
      function getConfirmedAccountNumber() {
        return userSetData.confirmedAccountNumber;
      }
      function setConfirmedAccountNumber(confirmedAccountNumber) {
        userSetData.confirmedAccountNumber = confirmedAccountNumber;
        return this;
      }

      function resetCreditCardDetails() {
        userSetData.creditCardDetails.lastFour = null;
        userSetData.creditCardDetails.firstName = null;
        userSetData.creditCardDetails.month = null;
        userSetData.creditCardDetails.year = null;
        userSetData.creditCardDetails.cvn = null;
      }
      /**
       * Recuresively sets the factory object and it's sub-object values to null without
       * flattening the structure.
       */
      function reset() {
        setPropertiesToNull(userSetData);
        function setPropertiesToNull(obj) {
          Object.keys(obj).forEach(function(key) {
            if (obj[key] !== null && key !== 'paymentMethod' && key !== 'mailingAddress') {

              if (typeof obj[key] === 'object' && !$.isEmptyObject(obj[key])) {
                setPropertiesToNull(obj[key]);
              } else {
                obj[key] = null;
              }
            }
          });
        }
      }
    }])
})();

/**
 * @description Service for managing member policy data as a logged in Member.
 * @namespace Services
 * @class policyService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.policy', [])
    .factory('policyService', [
      '$rootScope',
      function($rootScope) {
        return {
          getSelectedPolicy: function() {
            return $rootScope.selectedPolicy;
          }
        };
      }
    ]);
}());

/**
 * Service for showing an alert modal.
 *
 * @namespace Services
 * @class alertService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.quickAlert', [])
  .service('quickAlertService', [
    '$q',
    '$rootScope',
    '$timeout',
    function($q, $rootScope, $timeout) {
      /**
       * Shows an quick alert modal. It shows a message on an event that just occured
       *
       * @memberof quickAlertService
       * @method showQuickAlert
       * @param  {Object} [alert] Alert settings. It has thre variables, string, color ('blue', 'green', 'red') and alertBottom.
       * @param  {Boolean} bookmark Whether to bookmark or unbookmark.
       */
      this.showQuickAlert = function(alert, bookmark) {

        $rootScope.quickAlertModal = {
          alert: alert,
          bookmark: bookmark
        };

        angular.element('.quick-alert-modal').show();
      };
    }
  ]);
}());

/**
 * Service for encrypted local storage on mobile devices.
 *
 * @namespace Services
 * @class storageService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.storage', [])
    .service('storageService', [
      '$q',
      'config',
      function($q, config) {

        /**
        * Retrieves a stored object.
        *
        * @memberof storageService
        * @method get
        * @param  {String} key The unique ID the object is stored under.
        * @return {Promise} A promise that resolves to function(storedObject).
        */
        this.get = function(key) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (typeof NativeStorage === 'undefined') {
              return reject('Storage plugin unavailable.');
            }


            NativeStorage.getItem(key, function(encryptedValue) {
              var decryptedValue = CryptoJS.AES.decrypt(encryptedValue, config.key).toString(CryptoJS.enc.Utf8);
              var value = JSON.parse(decryptedValue);
              console.log(key, value);
              if (typeof value !== 'string') {
                return resolve(value);
              }

              try {
                var objectValue = JSON.parse(value);
                resolve(objectValue);
              }
              catch(error) {
                console.warn('Error in native storage getting key %s', key, error);
                resolve(value);
              }
            },reject);
          });

        };

        /**
        * Stores an object.
        *
        * @memberof storageService
        * @method set
        * @param  {String} key   The unique ID to store the object under
        * @param  {Object} value The value to store.
        * @return {Promise} A promise that resolves to function().
        */
        this.set = function(key, value) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (typeof NativeStorage === 'undefined') {
              return reject('Storage plugin unavailable.');
            }

            if (typeof value === 'object') {
              value = JSON.stringify(value);
            }
            console.log('Attempting to set object %s:', key, value);
            try {
              var encryptedValue = CryptoJS.AES.encrypt(value, config.key).toString();
              NativeStorage.setItem(key, encryptedValue, resolve, reject);
            } catch(error) {
              console.warn('Error setting app setting %s', key, value);
              reject(error);
            }
          });
        };

        /**
        * Removes a stored object.
        *
        * @memberof storageService
        * @method remove
        * @param  {String} key The unique ID the object is stored under.
        * @return {Promise} A promise that resolves to function().
        */
        this.remove = function(key) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (typeof NativeStorage === 'undefined') {
              return reject('Storage plugin unavailable.');
            }

            NativeStorage.remove(key, resolve, reject);
          });
        };
      }
    ]);
}());

/**
 * Service for showing a share modal.
 *
 * @namespace Services
 * @class shareService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.share', [])
  .service('shareService', [
    '$q',
    '$rootScope',
    '$window',
    'cordovaService',
    'adobeService',
    function($q, $rootScope, $window, cordovaService, adobeService) {
      /**
      * Sharing content types (TEXT|URL|FILES).
      *
      * @memberof shareService
      * @member {Object} contentType
      */
      this.contentType = {
        TEXT: 'TEXT',
        URL: 'URL',
        FILES: 'FILES'
      };

      /**
       * Activates native sharing modal.
       *
       * @memberof shareService
       * @method showSharing
       * @param  {String}       type    The type of content to share (TEXT|URL|FILES).
       * @param  {String|Array} content The content to share.
       * @return {Promise} A promise that resolves or rejects, based on whether the share was performed or cancelled.
       */
      this.showSharing = function(type, content) {
        var deferred = $q.defer();

        if(typeof cordova === 'undefined') {
          deferred.resolve();
          return deferred.promise;
        }

        var options = {};

        switch(type) {
          case 'URL':
            options.url = content;
            break;
          case 'FILES':
            if(typeof content === 'string') {
              options.files = [content];
              break;
            }
            options.files = content;
            break;
          default:
            options.message = content;
            break;
        }

        $rootScope.pausedForShare = true;
        $window.plugins.socialsharing.shareWithOptions(options, function(result) {
          deferred.resolve(result);
        }, function(err) {
          deferred.reject(err);
        });


        return deferred.promise;
      };
    }
  ]);
}());

/**
 * Service for communication with Apple's TouchID SDK.
 *
 * @namespace Services
 * @class touchIdService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.touchId', [])
    .factory('touchIdService', [
      '$q',
      '$window',
      '$rootScope',
      'analyticConstants',
      'adobeService',
      'cordovaService',
      function($q, $window, $rootScope, analyticConstants, adobeService, cordovaService) {
        if (isUndefined($window.cordova)) {
          document.addEventListener('deviceready', function() {
            cordova.addConstructor(install);
          });
        }

        var deviceType = cordovaService.checkDeviceType();
        var androidFingerprintObject = {
          clientId: 'bcm',
          username: 'defaultUser',
          password: 'x(L>JKY5Y8_Sbz'
        };

        return {
          install: install,
          isAvailable: isAvailable,
          verifyFingerprint: verifyFingerprint,
          verifyFingerprintWithCustomPasswordFallback: verifyFingerprintWithCustomPasswordFallback,
          verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel: verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel,
        };

        /**
        * Returns a promise containing whether TouchID is available.
        *
        * @memberof touchIdService
        * @method isAvailable
        * @return {Promise} A promise that resolves to function(isAvailable).
        */
        function isAvailable() {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova base framework not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova touchId plugin not present.');
            }

            if (deviceType.android === true) {
              return FingerprintAuth.isAvailable(
                function(result) {
                  if (!result || !result.isAvailable) {
                    return reject('Unable to get result from Android Cordova fingerprint plugin');
                  }
                  resolve(result.isAvailable);
                  adobeService.trackAction('settings:update:touchIdOn', analyticConstants.SETTINGS_SECTION);
                },
                reject
              );
            } else {
              return $window.plugins.touchid.isAvailable(resolve, reject);
            }

          });
        }

        /**
        * Opens the verify fingerprint modal with a message.
        *
        * @memberof touchIdService
        * @method verifyFingerprint
        * @param  {String} message The message to display in the modal.
        * @return {Promise} A promise that resolves to function(), when fingerprint authentication was successful.
        */
        function verifyFingerprint(message) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova library not present.');
            }

            message = message || $rootScope.loc.CONFIRM_FINGERPRINT;
            if (deviceType.android === true) {
              return FingerprintAuth.encrypt(androidFingerprintObject, resolve, reject);
            } else {
              return $window.plugins.touchid.verifyFingerprint(message, resolve, reject);
            }
          });
        }

        /**
        * Opens the verify fingerprint or password modal with a message.
        *
        * @memberof touchIdService
        * @method verifyFingerprintWithCustomPasswordFallback
        * @param  {String} message The message to display in the modal.
        * @return {Promise} A promise that resolves to function(), when fingerprint authentication was successful.
        */
        function verifyFingerprintWithCustomPasswordFallback(message) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova library not present.');
            }

            message = message || $rootScope.loc.CONFIRM_FINGERPRINT;

            if (deviceType.android === true) {
              return FingerprintAuth.encrypt(androidFingerprintObject, resolve, reject);
            } else {
              return $window.plugins.touchid
                .verifyFingerprintWithCustomPasswordFallback(message, resolve, reject);
            }
          });
        }

        /**
        * Opens the verify fingerprint or password modal with a message and custom input label.
        *
        * @memberof touchIdService
        * @method verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel
        * @param  {String} message The message to display in the modal.
        * @param  {String} label   The text of the custom label.
        * @return {Promise} A promise that resolves to function(), when fingerprint authentication was successful.
        */
        function verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message, label) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova library not present.');
            }

            message = message || $rootScope.loc.CONFIRM_FINGERPRINT;
            label = label || '';
            if (deviceType.android === true) {
              return FingerprintAuth.encrypt(androidFingerprintObject, resolve, reject);
            } else {
              return $window.plugins.touchid
                .verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message, label, resolve, reject);
            }
          });
        }

        function install() {
          return this;
        }

        function touchIdPluginUnavailable() {
          return touchIdPluginAvailable() == false;
        }

        function touchIdPluginAvailable() {
          return isDefined($window.plugins) && isDefined($window.plugins.touchid);
        }

        function isDefined(potentialVal) {
          return isUndefined(potentialVal) === false;
        }

        function isUndefined(potentialVal) {
          return typeof potentialVal === 'undefined';
        }
      }
    ]);
}());
(function() {
  angular
    .module('blueconnect.mobile.services.transparencyFactory', [])
    .factory('TransparencyFactory', [
      '$rootScope',
      'languageService',
      function($rootScope, languageService) {
        if (!$rootScope.loggedIn) {
          $rootScope.loc = languageService.getInternalLocale($rootScope.language || 'en');
        }

        var userSetData = {
          zipCode: null,
          currentLocationZipCode: null,
          city: null,
          distance: 25,
          selectedPlan: {},
          searchTerm: null,
          browseTerm: null,
          resultsTerm: null,
          resultsDetailsTerm: null,
          resultsDetailsIndex: null,
          resultsDetailsItemLabel: null,
          resultsDetailsItem: null,
          resultsDetailsNetworksAccepted: null,
          resultsDetailsSpecialties: null,
          resultsDetailsCredentials: null,
          resultsDetailsAwards: null,
          resultsDetailsLanguages: null,
          resultsDetailsAmenities: null,
          resultsDetailsAffiliations: null,
          resultsDetailsLimitations: null,
          resultsDetailsIdentifiers: null,
          geoLocationStatus: false,
          zipRangeNC: null,
          resultsToShare: null,
          existingSearchResults: null,
          isLocationBlocked: false,
          locationMsg: null,
          filterTier: '',
          filterSpecialty: '',
          filterGender: '',
          currentPolicyMembers: null,
          selectedMember: null,
          procedureId: null,
          filtersData: null,
          filterDistance: null,
          filterZipCode: null,
          filterCityname: null,
          displaySmartShopper: null,
          smartShopperTerm: null,
          smartShopperFilter: null,
          selectedRecommendedPcpData: null,
        };

        return {
          getUserSetData: getUserSetData,
          getZipCode: getZipCode,
          setZipCode: setZipCode,
          setCity: setCity,
          getCity: getCity,
          resetCity: resetCity,
          getCurrentLocationZipCode: getCurrentLocationZipCode,
          setCurrentLocationZipCode: setCurrentLocationZipCode,
          getDistance: getDistance,
          setDistance: setDistance,
          getSelectedPlan: getSelectedPlan,
          setSelectedPlan: setSelectedPlan,
          getSearchTerm: getSearchTerm,
          setSearchTerm: setSearchTerm,
          setResultsProcedureId: setResultsProcedureId,
          getResultsProcedureId: getResultsProcedureId,
          getBrowseTerm: getBrowseTerm,
          setBrowseTerm: setBrowseTerm,
          setBrowseLevelTwoTerm: setBrowseLevelTwoTerm,
          getBrowseLevelTwoTerm: getBrowseLevelTwoTerm,
          resetSearchCriteria: resetSearchCriteria,
          resetSearchTerms: resetSearchTerms,
          getGeoLocationStatus: getGeoLocationStatus,
          setGeoLocationStatus: setGeoLocationStatus,
          validateZipCode: validateZipCode,
          validateCity: validateCity,
          getZipRangeNC: getZipRangeNC,
          setZipRangeNC: setZipRangeNC,
          getResultsToShare: getResultsToShare,
          setResultsToShare: setResultsToShare,
          getExistingSearchResults: getExistingSearchResults,
          setExistingSearchResults: setExistingSearchResults,
          setLocationBlocked: setLocationBlocked,
          getLocationBlocked: getLocationBlocked,
          setLocationMsg: setLocationMsg,
          getLocationMsg: getLocationMsg,
          setResultsTerm: setResultsTerm,
          getResultsTerm: getResultsTerm,
          setResultsDetailsTerm: setResultsDetailsTerm,
          getResultsDetailsTerm: getResultsDetailsTerm,
          setResultsDetailsItemLabel: setResultsDetailsItemLabel,
          getResultsDetailsItemLabel: getResultsDetailsItemLabel,
          setResultDetailsItem: setResultDetailsItem,
          getResultsDetailsItem: getResultsDetailsItem,
          setResultsDetailsIndex: setResultsDetailsIndex,
          getResultsDetailsIndex: getResultsDetailsIndex,
          setResultsDetailsNetworksAccepted: setResultsDetailsNetworksAccepted,
          getResultsDetailsNetworksAccepted: getResultsDetailsNetworksAccepted,
          setResultsDetailsSpecialties: setResultsDetailsSpecialties,
          getResultsDetailsSpecialties: getResultsDetailsSpecialties,
          setResultsDetailsCredentials: setResultsDetailsCredentials,
          getResultsDetailsCredentials: getResultsDetailsCredentials,
          setResultsDetailsAwards: setResultsDetailsAwards,
          getResultsDetailsAwards: getResultsDetailsAwards,
          getResultsDetailsLanguages: getResultsDetailsLanguages,
          hasResultsDetailsLanguages: hasResultsDetailsLanguages,
          setResultsDetailsLanguages: setResultsDetailsLanguages,
          getResultsDetailsAmenities: getResultsDetailsAmenities,
          hasResultsDetailsAmenities: hasResultsDetailsAmenities,
          setResultsDetailsAmenities: setResultsDetailsAmenities,
          getResultsDetailsAffiliations: getResultsDetailsAffiliations,
          hasResultsDetailsAffiliations: hasResultsDetailsAffiliations,
          setResultsDetailsAffiliations: setResultsDetailsAffiliations,
          getResultsDetailsLimitations: getResultsDetailsLimitations,
          hasResultsDetailsLimitations: hasResultsDetailsLimitations,
          setResultsDetailsLimitations: setResultsDetailsLimitations,
          getResultsDetailsIdentifiers: getResultsDetailsIdentifiers,
          hasResultsDetailsIdentifiers: hasResultsDetailsIdentifiers,
          setResultsDetailsIdentifiers: setResultsDetailsIdentifiers,
          setFilterTierSelectedTerm: setFilterTierSelectedTerm,
          getFilterTierSelectedTerm: getFilterTierSelectedTerm,
          setFilterSpecialtySelectedTerm: setFilterSpecialtySelectedTerm,
          getFilterSpecialtySelectedTerm: getFilterSpecialtySelectedTerm,
          setFilterGenderSelectedTerm: setFilterGenderSelectedTerm,
          getFilterGenderSelectedTerm: getFilterGenderSelectedTerm,
          setSearchSpecialtyId: setSearchSpecialtyId,
          getSearchSpecialtyId: getSearchSpecialtyId,
          setCurrentPolicyMembers: setCurrentPolicyMembers,
          getCurrentPolicyMembers: getCurrentPolicyMembers,
          setSelectedMember: setSelectedMember,
          getSelectedMember: getSelectedMember,
          resetResultsDetails: resetResultsDetails,
          resetFilterData: resetFilterData,
          setFiltersData: setFiltersData,
          getFiltersData: getFiltersData,
          setFilterDistance: setFilterDistance,
          getFilterDistance: getFilterDistance,
          setFilterZipCode: setFilterZipCode,
          getFilterZipCode: getFilterZipCode,
          setFilterCityName: setFilterCityName,
          getFilterCityName: getFilterCityName,
          setSmartShopperResultItem: setSmartShopperResultItem,
          getSmartShopperResultItem: getSmartShopperResultItem,
          setSmartShopperTerm: setSmartShopperTerm,
          getSmartShopperTerm: getSmartShopperTerm,
          setSmartShopperFilter: setSmartShopperFilter,
          getSmartShopperFilter: getSmartShopperFilter,
          setRecommendedPcpData: setRecommendedPcpData,
          getRecommendedPcpData: getRecommendedPcpData,
        };

        function getUserSetData() {
          return userSetData;
        }
        function getZipCode() {
          return userSetData.zipCode;
        }
        function setZipCode(zipCode) {
          userSetData.zipCode = zipCode;
          return this;
        }
        function getCity() {
          return userSetData.city;
        }
        function setCity(cityObj) {
          userSetData.city = cityObj;
          return this;
        }
        function resetCity(cityFullName) {
          console.log('called reset city!');
          userSetData.city = null;
          userSetData.city = { cityFullName: cityFullName };
          return this;
        }
        function getCurrentLocationZipCode() {
          return userSetData.currentLocationZipCode;
        }
        function setCurrentLocationZipCode(zipCode) {
          userSetData.currentLocationZipCode = zipCode;
          return this;
        }
        function getDistance() {
          return userSetData.distance;
        }
        function setDistance(distance) {
          userSetData.distance = distance;
          return this;
        }
        function getSelectedPlan() {
          return userSetData.selectedPlan;
        }
        function setSelectedPlan(plan) {
          userSetData.selectedPlan = plan;
          return this;
        }
        function setResultsProcedureId(procedureId) {
          userSetData.procedureId = procedureId;
          return this;
        }
        function getResultsProcedureId() {
          return userSetData.procedureId;
        }
        function getSearchTerm() {
          return userSetData.searchTerm;
        }
        function setSearchTerm(term) {
          // Set.
          userSetData.searchTerm = term;

          // Reset index if there is one.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }
        function getBrowseTerm() {
          return userSetData.browseTerm;
        }
        function setBrowseTerm(term) {
          // Set.
          userSetData.browseTerm = term;

          // Reset index if there is one.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }

        function getBrowseLevelTwoTerm() {
          return userSetData.browseLevelTwoTerm;
        }
        function setBrowseLevelTwoTerm(term) {
          // Set.
          userSetData.browseLevelTwoTerm = term;

          // Reset index if there is one.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }
        function getGeoLocationStatus() {
          return userSetData.geoLocationStatus;
        }
        function setGeoLocationStatus(status) {
          userSetData.geoLocationStatus = status;
          return this;
        }

        function getZipRangeNC() {
          return userSetData.zipRangeNC;
        }
        function setZipRangeNC(zipMin, zipMax) {
          userSetData.zipRangeNC = { min: zipMin, max: zipMax };
          return this;
        }

        function resetSearchTerms() {
          setSearchTerm(null);
          setBrowseTerm(null);
          setResultsTerm(null);
        }

        function resetSearchCriteria() {
          setZipCode(null);
          setDistance(25);
        }

        function validateZipCode(zipCode) {
          const isNorthCarolinaPlan =
            userSetData.selectedPlan.isNorthCarolinaPlan;
          var retVal = { status: true, message: null };

          if (!zipCode || zipCode.toString().length <= 0) {
            retVal.message = $rootScope.loc.ERROR_REQUIRED;
            retVal.status = false;
            return retVal;
          }
          if (!/^[0-9]{5}(?:-[0-9]{4})?$/.test(zipCode.toString())) {
            retVal.message = $rootScope.loc.ERROR_ZIP_CODE_MUST_BE_5_DIGITS;
            retVal.status = false;
            return retVal;
          }
          if (!/^(?!0{3})[0-9]{3,5}$/.test(zipCode.toString())) {
            retVal.message = $rootScope.loc.ERROR_LOCATION_NOT_FOUND;
            retVal.status = false;
            return retVal;
          }
          if (
            isNorthCarolinaPlan &&
            (zipCode < userSetData.zipRangeNC.min ||
              zipCode > userSetData.zipRangeNC.max)
          ) {
            retVal.message = $rootScope.loc.ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE;
            retVal.status = false;
            return retVal;
          } else {
            return retVal;
          }
        }

        function validateCity(cityObj) {
          const isNorthCarolinaPlan =
            userSetData.selectedPlan.isNorthCarolinaPlan;

          var retVal = { status: true, message: null };

          if (!cityObj || !cityObj.cityFullName || typeof cityObj.cityFullName === 'undefined' || cityObj.cityFullName.length <= 0) {
            retVal.message = $rootScope.loc.ERROR_REQUIRED;
            retVal.status = false;
            return retVal;
          }
          if (cityObj && (!cityObj.zip || typeof cityObj.zip === 'undefined')) {
            retVal.message = $rootScope.loc.ERROR_SELECT_FROM_DROPDOWN_LIST;
            retVal.status = false;
            return retVal;
          }
          if (
            cityObj &&
            cityObj.zip &&
            isNorthCarolinaPlan &&
            (cityObj.zip < userSetData.zipRangeNC.min ||
              cityObj.zip > userSetData.zipRangeNC.max)
          ) {
            retVal.message = $rootScope.loc.ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE;
            retVal.status = false;
            return retVal;
          } else {
            return retVal;
          }
        }

        function getResultsToShare() {
          return userSetData.resultsToShare;
        }

        function setResultsToShare(resultsToShare) {
          userSetData.resultsToShare = resultsToShare;
          return this;
        }

        function getExistingSearchResults() {
          return userSetData.existingSearchResults;
        }

        function setExistingSearchResults(searchResults) {
          userSetData.existingSearchResults = searchResults;
          return this;
        }

        function setLocationBlocked(isBlocked) {
          userSetData.isLocationBlocked = isBlocked;
          return this;
        }

        function getLocationBlocked() {
          return userSetData.isLocationBlocked;
        }

        function setLocationMsg(blockedMsg) {
          userSetData.locationMsg = blockedMsg;
          return this;
        }

        function getLocationMsg() {
          return userSetData.locationMsg;
        }

        function setResultsTerm(resultsTerm) {
          // Set.
          userSetData.resultsTerm = resultsTerm;

          // Reset index, if there is one, due to new results term.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }

        function getResultsTerm() {
          return userSetData.resultsTerm;
        }

        function setResultsDetailsTerm(resultsDetailsTerm) {
          userSetData.resultsDetailsTerm = resultsDetailsTerm;
          return this;
        }

        function getResultsDetailsTerm() {
          return userSetData.resultsDetailsTerm;
        }

        function setResultsDetailsItemLabel(resultsDetailsItemLabel) {
          userSetData.resultsDetailsItemLabel = resultsDetailsItemLabel;
          return this;
        }

        function getResultsDetailsItemLabel() {
          return userSetData.resultsDetailsItemLabel;
        }

        function setResultsDetailsIndex(resultsDetailsIndex) {
          userSetData.resultsDetailsIndex = resultsDetailsIndex;
          return this;
        }

        function getResultsDetailsIndex() {
          return userSetData.resultsDetailsIndex;
        }

        function getResultsDetailsItem() {
          return userSetData.resultsDetailsItem;
        }

        function setResultDetailsItem(resultsDetailsItem) {
          userSetData.resultsDetailsItem = resultsDetailsItem;
          return this;
        }

        function setResultsDetailsNetworksAccepted(networksAccepted) {
          userSetData.resultsDetailsNetworksAccepted = networksAccepted;
          return this;
        }

        function getResultsDetailsNetworksAccepted() {
          return userSetData.resultsDetailsNetworksAccepted;
        }

        function setResultsDetailsSpecialties(specialties) {
          userSetData.resultsDetailsSpecialties = specialties;
          return this;
        }

        function getResultsDetailsSpecialties() {
          return userSetData.resultsDetailsSpecialties;
        }

        function setResultsDetailsCredentials(credentials) {
          userSetData.resultsDetailsCredentials = credentials;
          return this;
        }

        function getResultsDetailsCredentials() {
          return userSetData.resultsDetailsCredentials;
        }

        function setResultsDetailsAwards(awards) {
          userSetData.resultsDetailsAwards = awards;
          return this;
        }

        function getResultsDetailsAwards() {
          return userSetData.resultsDetailsAwards;
        }

        function setFilterTierSelectedTerm(tierItem) {
          userSetData.filterTier = tierItem;
          return this;
        }
        function getFilterTierSelectedTerm() {
          return userSetData.filterTier;
        }

        function setFilterSpecialtySelectedTerm(specialtyItem) {
          userSetData.filterSpecialty = specialtyItem;
          return this;
        }
        function getFilterSpecialtySelectedTerm() {
          return userSetData.filterSpecialty;
        }

        function setFilterGenderSelectedTerm(genderItem) {
          userSetData.filterGender = genderItem;
          return this;
        }

        function getFilterGenderSelectedTerm() {
          return userSetData.filterGender;
        }

        function setSearchSpecialtyId(searchId) {
          userSetData.searchSpecialtyId = searchId;
          return this;
        }

        function getSearchSpecialtyId() {
          return userSetData.searchSpecialtyId;
        }

        function setCurrentPolicyMembers(members) {
          userSetData.currentPolicyMembers = members;
          return this;
        }

        function getCurrentPolicyMembers() {
          return userSetData.currentPolicyMembers;
        }

        function setSelectedMember(member) {
          userSetData.selectedMember = member;
          return this;
        }

        function getSelectedMember() {
          return userSetData.selectedMember;
        }

        function hasResultsDetailsLanguages() {
          return !!userSetData.resultsDetailsLanguages;
        }

        function getResultsDetailsLanguages() {
          return userSetData.resultsDetailsLanguages;
        }

        function setResultsDetailsLanguages(languages) {
          userSetData.resultsDetailsLanguages = languages;
          return this;
        }

        function hasResultsDetailsAmenities() {
          return !!userSetData.resultsDetailsAmenities;
        }

        function getResultsDetailsAmenities() {
          return userSetData.resultsDetailsAmenities;
        }

        function setResultsDetailsAmenities(amenities) {
          userSetData.resultsDetailsAmenities = amenities;
          return this;
        }

        function hasResultsDetailsAffiliations() {
          return !!userSetData.resultsDetailsAffiliations;
        }

        function getResultsDetailsAffiliations() {
          return userSetData.resultsDetailsAffiliations;
        }

        function setResultsDetailsAffiliations(affiliations) {
          userSetData.resultsDetailsAffiliations = affiliations;
          return this;
        }

        function hasResultsDetailsLimitations() {
          return !!userSetData.resultsDetailsLimitations;
        }

        function getResultsDetailsLimitations() {
          return userSetData.resultsDetailsLimitations;
        }

        function setResultsDetailsLimitations(limitations) {
          userSetData.resultsDetailsLimitations = limitations;
          return this;
        }

        function hasResultsDetailsIdentifiers() {
          return !!userSetData.resultsDetailsIdentifiers;
        }

        function getResultsDetailsIdentifiers() {
          return userSetData.resultsDetailsIdentifiers;
        }

        function setResultsDetailsIdentifiers(identifiers) {
          userSetData.resultsDetailsIdentifiers = identifiers;
          return this;
        }

        function resetResultsDetails() {
          // Reset values.
          userSetData.resultsDetailsAffiliations = null;
          userSetData.resultsDetailsAmenities = null;
          userSetData.resultsDetailsAwards = null;
          userSetData.resultsDetailsCredentials = null;
          userSetData.resultsDetailsIdentifiers = null;
          userSetData.resultsDetailsLanguages = null;
          userSetData.resultsDetailsLimitations = null;
          userSetData.resultsDetailsNetworksAccepted = null;
          userSetData.resultsDetailsSpecialties = null;

          // Return.
          return this;
        }

        function resetFilterData() {
          setFilterSpecialtySelectedTerm('');
          setFilterTierSelectedTerm('');
          setFilterGenderSelectedTerm('');
          return this;
        }

        function setFiltersData(filtersData) {
          userSetData.filtersData = filtersData;
        }

        function getFiltersData() {
          return userSetData.filtersData;
        }

        function setFilterDistance(filterDistance) {
          userSetData.filterDistance = filterDistance;
        }

        function getFilterDistance() {
          return userSetData.filterDistance;
        }

        function setFilterZipCode(filterZipCode) {
          userSetData.filterZipCode = filterZipCode;
        }

        function getFilterZipCode() {
          return userSetData.filterZipCode;
        }

        function setFilterCityName(filterCityname) {
          userSetData.filterCityname = filterCityname;
        }

        function getFilterCityName() {
          return userSetData.filterCityname;
        }

        function setSmartShopperResultItem(smartShopperValue) {
          userSetData.displaySmartShopper = ($rootScope.isSmartShopperEligible && smartShopperValue) ? true : false;
        }

        function getSmartShopperResultItem() {
          return userSetData.displaySmartShopper;
        }
        function setSmartShopperTerm(searchTerm, preposition) {
          userSetData.smartShopperTerm = {
            searchTerm: searchTerm,
            preposition: preposition || ''
          };
        }

        function getSmartShopperTerm() {
          return userSetData.smartShopperTerm;
        }
        function setSmartShopperFilter(value) {
          userSetData.smartShopperFilter = value;
        }

        function getSmartShopperFilter() {
          return userSetData.smartShopperFilter;
        }
        function setRecommendedPcpData(providerData) {
          userSetData.selectedRecommendedPcpData = providerData;
        }

        function getRecommendedPcpData() {
          return userSetData.selectedRecommendedPcpData;
        }
      },
    ]);
})();

/**
 * Controller for the about view.
 *
 * @namespace Controllers
 * @class AboutController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.about', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('AboutController', [
            '$scope',
            '$rootScope',
            '$timeout',
            '$window',
            'config',
            'adobeService',
            'pageService',
            'analyticConstants',
            function($scope, $rootScope, $timeout, $window, config, adobeService, pageService, analyticConstants) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;
                $scope.alertModal = $rootScope.alertModal;

                /**
                 *Display the alert window for external link to open the url in browser
                 **/
                $scope.openInBrowser = $rootScope.openInBrowser;
                /**
                 * Toggles the expansion of an accordion item.
                 *
                 * @memberof aboutDetails
                 * @method toggleItem
                 */
                $scope.toggleItem = function(item, id) {
                    for (var i = 0; i < $scope.aboutDetails.content.length; i++) {
                        if (i != id) {
                            $scope.aboutDetails.content[i].expandedDiv = false;
                        }
                    }
                    item.expandedDiv = !item.expandedDiv;
                };

                /**
                 * Opens the default mail application
                 */
                $scope.openMail = $rootScope.openMail;

                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof aboutDetails
                 * @method getEnvironment
                 * @return {String} The environment name.
                 */
                $scope.getEnvironment = function() {
                  if (config.env === 'PROD') {
                    return '';
                  }

                  return config.env;
                };

                var languageAttempts = 0;

                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof AboutController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof AboutController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    /**
                     * For basicNavbar, we have to pass this function
                     * to handle the left click
                     */
                    $scope.basicNavbarLeftClick = function() {
                        $rootScope.fromBackButton = true;
                        $rootScope.detailsFromBackButton = true;
                        $window.history.back();
                    };

                    if (!$rootScope.loc) {
                        languageAttempts++;
                        if (languageAttempts > 5) {
                            $rootScope.$emit('pageLoaded');
                            $rootScope.showNetworkErrorAlert();
                            return;
                        }

                        $timeout($scope.getPage, 100);
                        return;
                    }

                    var pageName = 'about';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, {loggedIn : $rootScope.loggedIn}).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                        adobeService.trackState(pageName, analyticConstants.HELP_SECTION);
                    }, function() {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };

                $rootScope.verifyLocaleRetrieved();
                $scope.getPage();
            }
        ]);
}());

/**
 * Controller for the Autopay Method flow view.
 *
 * @namespace Controllers
 * @class AutopayMethodController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.autopay.method', [

  ])
  .controller('AutopayMethodController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc ? $rootScope.loc.BP_HEADER_AUTOPAY_METHOD : '';
      $scope.getPage = getPage;
      $scope.getPage();

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof AutopayMethodController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof AutopayMethodController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        $rootScope.$emit('pageLoading');

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };
        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId,
        }

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'autopay-method',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

/**
* Controller for the benefits page view.
*
* @namespace Controllers
* @class BenefitsController
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.benefits', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('BenefitsController', [
    '$scope',
    '$rootScope',
    '$location',
    'coachmarkService',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, coachmarkService, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = true;
      $rootScope.showPolicySelect = true;
      $rootScope.pageTitle = $rootScope.loc.BENEFITS;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

      $scope.getPage = function() {
        $scope.pageHtml = '';
        var pageName = 'benefits-main';
        var cachePage = true;

        /**
        * The directive HTML for the page.
        *
        * @memberof BenefitsController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';
        var query = $location.search();
        query.benefitPage = '';

        // check current page url
        var currentUrl = $location.url();
        // when toggle language in settings page, check previous url
        var previousUrl = $location.url().indexOf('/settings') > -1 ? $rootScope.routes.previous : '';

        //Tiered plan
        if (currentUrl.indexOf('/benefits/tier1') > -1)
        {
          query.benefitPage = 'tier1network';
        }

        if (currentUrl.indexOf('/benefits/tier2') > -1)
        {
          query.benefitPage = 'tier2network';
        }

        if (currentUrl.indexOf('/benefits/tieroon') > -1)
        {
          query.benefitPage = 'tieroonetwork';
        }

        if (currentUrl.indexOf('/benefits/out-of-network') > -1)
        {
          query.benefitPage = 'outnetwork';
        }

        if (currentUrl.indexOf('/benefits/preferinnetwork') > -1)
        {
          query.benefitPage = 'preferinnetwork';
        }

        if (currentUrl.indexOf('/benefits/otherinnetwork') > -1)
        {
          query.benefitPage = 'otherinnetwork';
        }

        if (currentUrl.indexOf('/benefits/otheroutofnetwork') > -1)
        {
          query.benefitPage = 'otheroutofnetwork';
        }

        //
        if (currentUrl.indexOf('/benefits/benefitsselectinnetwork') > -1)
        {
          query.benefitPage = 'planselectinnetwork';
        }

        if (currentUrl.indexOf('/benefits/benefitsselectoutnetwork') > -1)
        {
          query.benefitPage = 'planselectoutnetwork';
        }

        if (currentUrl.indexOf('/medicare-benefits') > -1) {
          pageName = "medicare-benefits";
        }

        if (currentUrl.indexOf('/benefits/viewcoverage') > -1 || previousUrl.indexOf('/benefits/viewcoverage') > -1) {
          $rootScope.showNav = true;
          $rootScope.showPolicySelect = false;

          $rootScope.pageTitle = $rootScope.loc.BENEFITS_COVERAGE_DETAILS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          pageName = "benefits-coverage";
        }

        if (currentUrl.indexOf('/benefits/dental-only') > -1 || previousUrl.indexOf('/benefits/dental-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          pageName = "benefits-dental-only";
        }

        if (currentUrl.indexOf('/benefits/low-cost-dental-only') > -1 || previousUrl.indexOf('/benefits/low-cost-dental-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-low-cost-dental-only";
        }

        if (currentUrl.indexOf('/benefits/bbt-only') > -1 || previousUrl.indexOf('/benefits/bbt-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-bbt-only";
        }

        if (currentUrl.indexOf('/benefits/vision-only') > -1 || previousUrl.indexOf('/benefits/vision-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-vision-only";
        }
        
        if (currentUrl.indexOf('/benefits/contraceptive-only') > -1 || previousUrl.indexOf('/benefits/contraceptive-only') > -1) {
          $rootScope.showPolicySelect = true;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-contraceptive-only";
        }

        query.policyIndex = $rootScope.policyIndex;
        query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
        query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
        query.policyExternalId = $rootScope.selectedPolicy.externalId;
        query.url = $location.path();
        query.deviceType = $rootScope.device;
        if ($rootScope.selectedPolicy.isVision) {
          query.visionPlan = $rootScope.selectedPolicy.visionPlan;
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query, cachePage).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          console.log(pageHtml)
            $scope.pageHtml = pageHtml;
            adobeService.trackState(query.url.substring(1), analyticConstants.BENEFITS_SECTION);
            return coachmarkService.showCoachmarks('benefits');
        }, function() {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      // once Member logs out, unregister the event listener for refreshing benefits page;
      $rootScope.$on(
        'LOGOUT',
        $rootScope.$on('policySelected', function() {
          $scope.getPage();
        })
      );

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the Billing History Filter.
 *
 * @namespace Controllers
 * @class BillingHistoryFilter
 */
(function () {
  'use strict';
  angular
      .module('blueconnect.mobile.controllers.billingHistoryFilter', [
        'bcbsnc.cloud.services.page'
      ])
      .controller('BillingHistoryFilter',
          [
            'BillingInvoiceHistoryFactory',
            '$rootScope',
            '$window',
            '$scope',
            'adobeService',
            'analyticConstants',
            function (BillingInvoiceHistoryFactory, $rootScope, $window, $scope, adobeService, analyticConstants) {

              $scope.isMedicareSSA = BillingInvoiceHistoryFactory.getMedicareSSAValue();
              // hide the navbar
              $rootScope.showNav = false;

              // hide the policy select dropdown
              $rootScope.showPolicySelect = false;

              // default the loc object to avoid ReferenceErrors later
              $scope.loc = $rootScope.loc || {};

              // default the navbar details to avoid unref
              $scope.navbarDetails = {};

              $scope.navbarDetails = {
                display: {
                  title: $rootScope.loc.BP_FILTER_BILLING_HISTORY,
                  leftNavButton: {
                    icon: 'close'
                  }
                },
                onLeftClick: function () {
                  $window.history.back();
                }
              };

              $rootScope.pageTitle = $rootScope.loc.BP_FILTER_BILLING_HISTORY;
              $scope.startDateSelected = BillingInvoiceHistoryFactory.getStartIndex() || 24;
              $scope.endDateSelected = BillingInvoiceHistoryFactory.getEndIndex() || 0;
              var dateFormat = 'MMMM YYYY';
              var startDates = [];
              var start = moment().format(dateFormat);

              var index = 1;
              while (index <= 25) {
                startDates.push({value: index, label: start});
                start = moment().subtract(index, 'month').format(dateFormat);
                index++;
              }

              $scope.startDates = startDates;
              $scope.endDates = startDates;
              BillingInvoiceHistoryFactory.setDateList(startDates);
              $scope.historyTypeSelected = BillingInvoiceHistoryFactory.getHistoryType() || 'A';
              $scope.dateRangeSelected = BillingInvoiceHistoryFactory.getTimeSpan() || '3';

              $scope.validateDateRange = function(fromDate, toDate) {
                if (fromDate && toDate && moment(fromDate.label, dateFormat).isAfter(moment(toDate.label, dateFormat))) {
                  $scope.billingHistoryFilterForm.$invalid = true;
                }
              };

              $scope.selectButton = function () {
                $scope.dateRangeSelected = "99";
              };

              $scope.validateBillingHistory = function(formObj) {

                (!$scope.isMedicareSSA) ? BillingInvoiceHistoryFactory.setHistoryType(formObj.$$parentForm.billingHistoryFilterForm.historyTypeSelected.$modelValue) : BillingInvoiceHistoryFactory.setHistoryType('A');

                var timeSpan = (formObj.$$parentForm.billingHistoryFilterForm.dateRangeSelected.$modelValue).toString();

                if (timeSpan === '0' || timeSpan === '99') {
                  var lastYear = moment().subtract(1, 'year').format('YYYY');
                  var lastJan = moment(lastYear, 'YYYY').month(0);
                  var lastDec = moment(lastYear, 'YYYY').month(11);

                  if (timeSpan === '99' && (!formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue || !formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue)){
                    return console.warn('form is invalid, cannot proceed');
                  }

                  if (timeSpan === '0'){
                    //This is last years plan
                    BillingInvoiceHistoryFactory.setSearchFromDate(lastJan);
                    BillingInvoiceHistoryFactory.setSearchToDate(lastDec);
                  } else {
                    //This is the custom date range
                    timeSpan = (moment(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.label)).diff(moment(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.label), 'months');
                    BillingInvoiceHistoryFactory.setStartIndex(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.value);
                    BillingInvoiceHistoryFactory.setStartDate(moment(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.label));
                    BillingInvoiceHistoryFactory.setEndIndex(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.value);
                    BillingInvoiceHistoryFactory.setEndDate(moment(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.label));
                    BillingInvoiceHistoryFactory.setSearchFromDate(moment(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.label));
                    BillingInvoiceHistoryFactory.setSearchToDate(moment(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.label));
                  }//end timeSpan === 0

                } else {
                  //This is 3, 6, 12, or 24 selected
                  BillingInvoiceHistoryFactory.setSearchFromDate(moment().subtract(timeSpan, 'month'));
                  BillingInvoiceHistoryFactory.setSearchToDate(moment());
                }//end timeSpan 0 or 99

                BillingInvoiceHistoryFactory.setTimeSpan(timeSpan);
                $rootScope.gotoView('billing-invoice-history?search=true');
              };

              adobeService.trackState('billingInvoiceHistoryFilter', analyticConstants.BILLING_SECTION);
            }]);
})();

/**
 * Controller for the billingHistoryUnderstandInvoice.
 *
 * @namespace Controllers
 * @class billingHistoryUnderstandInvoice
 */
(function () {
  'use strict';

  angular
      .module('blueconnect.mobile.controllers.billingHistoryUnderstandInvoice', [
        'bcbsnc.cloud.services.page'
      ])
      .controller('BillingHistoryUnderstandInvoice', [
            '$rootScope',
            '$scope',
            '$location',
            '$anchorScroll',
            'adobeService', 
            'analyticConstants',
            function ($rootScope, $scope, $location, $anchorScroll, adobeService, analyticConstants) {

              // hide the navbar
              $rootScope.showNav = false;
              $scope.gotoView = $rootScope.gotoView;

              // hide the policy select dropdown
              $rootScope.showPolicySelect = false;

              // default the loc object to avoid ReferenceErrors later
              $scope.loc = $rootScope.loc || {};

              // default the navbar details to avoid unref
              $scope.navbarDetails = {};

              $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

              $scope.navbarDetails = {
                display: {
                  title: $rootScope.loc.BP_TITLE_UNDERSTANDING_INVOICE,
                  leftNavButton: {
                    icon: 'close'
                  }
                },
                onLeftClick: function () {
                  $scope.$broadcast('PAGE_BACK');
                }
              };

              $scope.gotoAnchor = function (divName) {
                // set the location.hash to the id of the element you wish to scroll to.
                $location.hash(divName);
                // call $anchorScroll()
                $anchorScroll();
              };

              adobeService.trackState('billingUnderstandingInvoice', analyticConstants.BILLING_SECTION);
            }]);
})();

/**
 * Controller for the about view.
 *
 * @namespace Controllers
 * @class AboutController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.billinghistory', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('BillingHistoryController', [
        '$scope',
        '$rootScope',
        '$location',
        '$timeout',
        '$window',
        'pageService',
        'adobeService',
        function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
        $rootScope.showNav = true;
        $rootScope.showPolicySelect = false;

        /**
         * Retrieves the page HTML from the page service. Called on view load.
         *
         * @memberof HelpController
         * @method getPage
         */
        $scope.getPage = function() {
            /**
            * The directive HTML for the page.
            *
            * @memberof HelpController
            * @member {String} pageHtml
            */
           
            $scope.pageHtml = '';
            
            var pageName      = 'billing-history';
        
            $rootScope.pageTitle = $rootScope.loc.BP_VIEW_BILLING_HISTORY;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

            var query         = $location.search();
           
            $rootScope.$emit('pageLoading');
            pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language).then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
            }, function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            });
        };

        $rootScope.verifyLocaleRetrieved();
        $scope.getPage();
        }
    ]);
}());

(function () {
  angular
    .module('blueconnect.mobile.controllers.billingInvoiceHistory', [])
    .controller('BillingInvoiceHistory', ['BillingInvoiceHistoryFactory', 'restService', '$rootScope', '$scope', 'adobeService', 'analyticConstants',
      function (BillingInvoiceHistoryFactory, restService, $rootScope, $scope, adobeService, analyticConstants) {
        $scope.loc = $rootScope.loc;

        $rootScope.showNav = true;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK_TO_BILLING;
        $rootScope.pageTitle = $rootScope.loc.BP_TITLE_BILLING_HISTORY;
        $rootScope.showPolicySelect = true;

        $scope.filterSpan = BillingInvoiceHistoryFactory.getTimeSpan();

        $rootScope.$emit('pageLoading');
        restService.getPageData(
          restService.devices.MOBILE,
          'billing-invoice-history',
          $rootScope.language,
          {
            policyIndex: $rootScope.policyIndex,
            policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
            policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
            policyExternalId : $rootScope.selectedPolicy.externalId,
            searchFromDate: BillingInvoiceHistoryFactory.serviceFormattedSearchFromDate(),
            searchToDate: BillingInvoiceHistoryFactory.serviceFormattedSearchToDate(),
            transactionType: BillingInvoiceHistoryFactory.getHistoryType()
          })
          .then(function (response) {
            $rootScope.$emit('pageLoaded');
            if (response.account.accounts.length){
              BillingInvoiceHistoryFactory.setAccountToken(response.account.accounts[0].token);
              (response.policy.sourceSystem.toLowerCase() === 'amisys' && response.account.accounts[0].payIneligibleCode === 'S') ? BillingInvoiceHistoryFactory.setMedicareSSAValue(true) : BillingInvoiceHistoryFactory.setMedicareSSAValue(false);
            }
            $scope.serviceResponse = response;
            adobeService.trackState('billingInvoiceHistory', analyticConstants.BILLING_SECTION);
          }).catch(function (error) {
            $rootScope.$emit('pageLoaded');
            console.warn(error);
          });


      }]);
})();

/**
 * Controller for the about view.
 *
 * @namespace Controllers
 * @class AboutController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.billingpaperless', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('BillingPaperlessController', [
        '$scope',
        '$rootScope',
        '$location',
        '$timeout',
        '$window',
        'pageService',
        'adobeService',
        function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
        $rootScope.showNav = true;
        $rootScope.showPolicySelect = false;

        /**
         * Retrieves the page HTML from the page service. Called on view load.
         *
         * @memberof HelpController
         * @method getPage
         */
        $scope.getPage = function() {
            /**
            * The directive HTML for the page.
            *
            * @memberof HelpController
            * @member {String} pageHtml
            */
           
            $scope.pageHtml = '';
            
            var pageName      = 'billing-paperless';
            $rootScope.pageTitle = $rootScope.loc.BP_SETUP_PAPERLESS_BILLING;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

            var query         = $location.search();
           
            $rootScope.$emit('pageLoading');
            pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language).then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
            }, function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            });
        };

        $rootScope.verifyLocaleRetrieved();
        $scope.getPage();
        }
    ]);
}());

/**
 * Controller for the Billing Preferences view.
 *
 * @namespace Controllers
 * @class BillingPreferencesController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.billing.preferences', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('BillingPreferencesController', [
          '$scope',
          '$rootScope',
          '$window',
          'adobeService',
          'pageService',
          'analyticConstants',
          function($scope, $rootScope, $window, adobeService, pageService, analyticConstants) {
            $rootScope.showNav = true;
            $rootScope.showPolicySelect = true;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
            $rootScope.pageTitle = $rootScope.loc.BP_HEADER_BILLING_PREFERENCES;
            $scope.loc = $rootScope.loc;

            getPage();

            /**
             * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
             *
             * @memberof PaymentDetailsController
             * @method getPage
             */
            function getPage() {
              /**
               * The directive HTML for the page.
               *
               * @memberof BillingPreferencesController
               * @member {String} pageHtml
               */
              $scope.pageHtml = '';

              /**
               * For basicNavbar, we have to pass this function
               * to handle the left click
               */
              $scope.basicNavbarLeftClick = function() {
                $window.history.back();
              };

              $rootScope.$emit('pageLoading');
              var query = {
                policyIndex: $rootScope.policyIndex,
                policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                policyExternalId : $rootScope.selectedPolicy.externalId
              };

              pageService
                  .getPage(
                      pageService.devices.MOBILE,
                      'billing-preferences',
                      $rootScope.language,
                      query
                  )
                  .then(function(pageHtml) {
                    $scope.pageHtml = pageHtml;
                    $rootScope.$emit('pageLoaded');
                    adobeService.trackState('billingPreferences', analyticConstants.BILLING_SECTION);
                  })
                  .catch(function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
            }
          }
        ]);
}());

/**
 * Controller for the billing & payments page view.
 *
 * @namespace Controllers
 * @class BillingController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.billing', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('BillingController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
      $rootScope.showNav = true;
      $scope.loc = $rootScope.loc;
      $scope.showNav = $rootScope.showNav;
      $rootScope.showPolicySelect = true;
      var languageAttempts = 0;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof BillingController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof BillingController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        if(!$rootScope.loc) {
          languageAttempts++;
          if(languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        var pageName = 'billing';
        $rootScope.pageTitle = $rootScope.loc.BILLING_PAYMENTS;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

          var query = $location.search();
          query.policyIndex = $rootScope.policyIndex;
          query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
          query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
          query.policyExternalId = $rootScope.selectedPolicy.externalId;


        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      var billingUnregisterFunc = $rootScope.$on('policySelected', function() {
          $scope.getPage();
      });

      $rootScope.$on('LOGOUT', billingUnregisterFunc);

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the claims page view.
 *
 * @namespace Controllers
 * @class ClaimsController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.claims', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('ClaimsController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$routeParams',
    '$window',
    'adobeService',
    'coachmarkService',
    'pageService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $routeParams, $window, adobeService, coachmarkService, pageService, analyticConstants) {
      $rootScope.showNav = true;
      $rootScope.showPolicySelect = true;

      var languageAttempts = 0;
      var section = 'claimsOverview';
      var cachePage = true;

      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof ClaimsController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        $scope.basicNavbarLeftClick = function() {
          $window.history.back();
        };

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          return $timeout($scope.getPage, 100);
        }

        $rootScope.pageTitle = $rootScope.loc.CLAIMS;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

        var pageName = 'claims';
        var query = $location.search();
        query.policyIndex = $rootScope.policyIndex;

        if ($routeParams.id) {
          $rootScope.showPolicySelect = false;
          $rootScope.pageTitle = $rootScope.loc.CLAIM_DETAILS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          pageName = 'claim-details';
          section = 'claimDetails';

          query.id = $routeParams.id;
          query.dependentNo = $routeParams.dependentNo;

        }
        else if ($location.url().indexOf('/claims/search') > -1) {
          pageName = 'claims-search';
          section = 'claimsSearch';

        }
        else if ($location.url().indexOf('/claims/filter') > -1) {
          $scope.keyword = query.keyword;
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;

          if (query.keyword) {
            pageName = 'claims-filter/?keyword=' + query.keyword;
          }
          else {
            pageName = 'claims-filter';
          }

          section = 'claimsSearchFilter';
          
        }
        else { //On claims page setting query data to blank or default.
          query.keyword = "";
          query.claimsStatus = "";
          query.fromDate = "";
          query.toDate = "";
          query.dependentNo = "";
        }

        $rootScope.startingView = section;
        query.url = $location.path();
        query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
        query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
        query.policyExternalId = $rootScope.selectedPolicy.externalId;

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query, cachePage).then(function(pageHtml) {
            $scope.noTabsVisible = pageHtml.indexOf('tab-select') === -1;
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
            adobeService.trackState(section, analyticConstants.CLAIMS_SECTION);
            return coachmarkService.showCoachmarks('claims');
          }, function() {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      };

      /**
       * Turns off the policy select listener when called.
       *
       * @memberof ClaimsController
       * @method policyListenerOff
       */
      $scope.policyListenerOff = $rootScope.$on('policySelected', function() {
        if ($location.path() == '/claims/search') { //We want to force the app back to the claims view page if the policy is changed while on search page.
          $location.path('/claims');
        }

        if ($location.path() !== '/claims') {
          $scope.policyListenerOff();
          return;
        }

        $scope.getPage();
      });

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the compose page view.
 *
 * @namespace Controllers
 * @class ComposeController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.compose', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('ComposeController', [
    '$scope',
    '$rootScope',
    '$location',
    '$routeParams',
    '$timeout',
    '$window',
    'pageService',
    'alertService',
    'adobeService',
    function($scope, $rootScope, $location, $routeParams, $timeout, $window, pageService, alertService, adobeService) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      var languageAttempts = 0;
      var identifier = "secureInboxMessageDetailsCompose";
      var section = "Secure Inbox";
      $rootScope.startingView = section;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof ComposeController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof ComposeController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
        * For basicNavbar, we have to pass these two functions
        * to handle the left and right button clicks
        */
        $scope.basicNavbarLeftClick = function() {
            $rootScope.deleteMessage();
        };

        $scope.basicNavbarRightClick = function() {
          /**
          * Since the function exists of outside of scope,
          * we need to include validation function in rootScope
          */
          $rootScope.onSendValidation();
        };

        if(!$rootScope.loc) {
          languageAttempts++;
          if(languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        var pageName = 'inbox-compose';

        var query = {};

        /* detect if option variable is set for compose page*/
        var parameters = $location.search();
        query.policyIndex = $rootScope.policyIndex;
        query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
        query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
        query.policyExternalId = $rootScope.selectedPolicy.externalId;
        query.option = parameters.option;
        query.claim = parameters.claim;

        if($routeParams.id) {
          query.replyId = $routeParams.id;
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/*
* Controller for the customer service view.
*
* @namespace Controllers
* @class CustomerServiceController
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.customerService', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('CustomerServiceController', [
    '$scope',
    '$rootScope',
    'pageService',
    '$window',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, pageService, $window, adobeService, analyticConstants) {
      if ($rootScope.loggedIn) {
        $rootScope.showNav = true;
        $rootScope.showPolicySelect = true;
      } else {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
      }
      $rootScope.pageTitle = $rootScope.loc.CALL_CUSTOMER_SERVICE;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof CustomerServiceController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof CustomerServiceController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
        * For basicNavbar, we have to pass this function
        * to handle the left click
        */
        $scope.basicNavbarLeftClick = function() {
          $window.history.back();
        };

        var pageName = 'customer-service';
        var query;
        //based on the $rootScope.loggedIn we are passing the query to pageService to get the page
        if ($rootScope.loggedIn) {
          query = {
            policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
            policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
            policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
            policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null,
            loggedIn : $rootScope.loggedIn
          };
        } else {
          query = {
            loggedIn : $rootScope.loggedIn
          };
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState('customerService', analyticConstants.HELP_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };
      if ($rootScope.loggedIn) {
        var customerServiceUnsubscribeFunc = $rootScope.$on('policySelected', function() {
          $scope.getPage();
        });
        $rootScope.$on('LOGOUT', customerServiceUnsubscribeFunc);
      }

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.controllers.editAutopayFlowPage', [])
    .controller('editAutopayFlow', ['restService', '$rootScope', '$window', '$routeParams', '$scope',
      function(restService, $rootScope, $window, $routeParams, $scope) {

        // hide the navbar
        $rootScope.showNav = false;

        // hide the policy select dropdown
        $rootScope.showPolicySelect = false;

        // default the loc object to avoid ReferenceErrors later
        $scope.loc = $rootScope.loc || {};

        // default the navbar details to avoid unref
        $scope.navbarDetails = {};

        // show the back button
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

        $scope.flowStep = $routeParams.step;

        if ($scope.flowStep === 'confirmation') {
          $rootScope.showNav = true;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          $rootScope.pageTitle = $rootScope.loc.BP_HEADER_AUTOPAY_CONFIRMATION;
        } else {
          // hide the navbar
          $rootScope.showNav = false;
          $scope.navbarDetails = {
            display: {
              title: getNavbarHeader($routeParams.step),
              leftNavButton: {
                icon: 'back'
              }
            },
            onLeftClick: function() {
              $scope.$broadcast('PAGE_BACK');
            }
          };

        }


        /**
         *
         * @param {string} routeParam
         * @return {string}
         */
        function getNavbarHeader(routeParam) {
          if (!$rootScope.loc) {
            $rootScope.$emit('pageNeedsLocale');
            return '';
          }
          if (routeParam === 'method') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_METHOD;
          }
          if (routeParam === 'details') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_DETAILS;
          }
          if (routeParam === 'review') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_REVIEW;
          }
          if (routeParam === 'confirmation') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_CONFIRMATION;
          }
        }

      var query = {
        policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
        policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
        policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
        policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null
      };

      $rootScope.$emit('pageLoading');
      restService.getPageData(
        restService.devices.MOBILE,
        'edit-autopay-flow',
        $rootScope.language,
        query
      )
      .then(function(response) {
        $rootScope.$emit('pageLoaded');
        if (response && response[0]) {
          $scope.serviceResponse = response[0].values;
          $rootScope.billingTrackStates($scope.flowStep, $scope.serviceResponse.account);
        }
      }).catch(function(error) {
        $rootScope.$emit('pageLoaded');
        console.warn(error);
      });
    }]);
})();
/**
 * The controller used for transitioning page views and retrieving data for the
 * edit-billing-methdo page
 */
(function() {
  angular
    .module('blueconnect.mobile.controllers.editBillingMethodPage', [])
    .controller('EditBillingMethodPage', ['$rootScope',
      '$scope', 'restService', 'adobeService', 'analyticConstants',
      function($rootScope, $scope, restService, adobeService, analyticConstants) {

      $rootScope.showPolicySelect = false;
      $rootScope.$emit('pageLoading');
      var query = {
        policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
        policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
        policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
        policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null
      };
      restService.getPageData(
        restService.devices.MOBILE,
        'edit-billing-method',
        $rootScope.language,
        query
      )
      .then(function(prefResponse) {
        $scope.preferences = prefResponse[0];

        // To be available to policy-header-gray
        $scope.selectedPolicy = prefResponse[0].values.policyInfo;
        $scope.token = prefResponse[0].values.token;

        $rootScope.$emit('pageLoaded');
        adobeService.trackState('editBillingMethod', analyticConstants.BILLING_SECTION);
      })
      .catch(function(errorReturned) {
        $rootScope.$emit('pageLoaded');
        $rootScope.showNetworkErrorAlert();
        console.warn('Failed to load data for edit-billing-method\t' + errorReturned.error.code + '\t' + errorReturned.error.message);
      });

    }]);
})();

/**
 * Controller for the faq view.
 *
 * @namespace Controllers
 * @class FAQController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.faq', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('FAQController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $scope.alertModal = $rootScope.alertModal;

      var languageAttempts = 0;

      /**
       *Display the alert window for external link to open the url in browser
       **/
      $scope.openInBrowser = $rootScope.openInBrowser;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof FAQController
       * @method getPage
       */
       $scope.getPage = function() {
         /**
         * The directive HTML for the page.
         *
         * @memberof AboutController
         * @member {String} pageHtml
         */
         $scope.pageHtml = '';

         /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
         $scope.basicNavbarLeftClick = function() {
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $window.history.back();
         };

         if (!$rootScope.loc) {
           languageAttempts++;
           if (languageAttempts > 5) {
             $rootScope.$emit('pageLoaded');
             $rootScope.showNetworkErrorAlert();
             return;
           }

           $timeout($scope.getPage, 100);
           return;
         }
         var query = {};

         if ($rootScope.loggedIn) {
           query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
           query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
           query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
           query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
         }
         query.loggedIn = $rootScope.loggedIn;
         query.deviceType = $rootScope.device;


        var pageName = 'faq';
        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(pageName, analyticConstants.FAQ_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the feedback view.
 *
 * @namespace Controllers
 * @class FeedbackController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.feedback', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('FeedbackController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      var languageAttempts = 0;
      var section = 'Feedback';
      $rootScope.startingView = section;

      // if(!$rootScope.loc){
        // $rootScope.getInternalLocale();
      // }
      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof FAQController
       * @method getPage
       */
       $scope.getPage = function() {
         /**
         * The directive HTML for the page.
         *
         * @memberof AboutController
         * @member {String} pageHtml
         */
         $scope.pageHtml = '';

         /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
         $scope.basicNavbarLeftClick = function() {
           $window.history.back();
         };

         if(!$rootScope.loc) {
           languageAttempts++;
           if(languageAttempts > 5) {
             $rootScope.$emit('pageLoaded');
             $rootScope.showNetworkErrorAlert();
             return;
           }

           $timeout($scope.getPage, 100);
           return;
         }

        var pageName = 'feedback';
        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, {loggedIn : $rootScope.loggedIn}).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the Find care view.
 *
 * @namespace Controllers
 * @class Find Care
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findCare', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindCareController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            '$window',
            function($scope, $rootScope, $location, pageService, $window) {
                if ($rootScope.loggedIn) {
                    $rootScope.pageTitle = $rootScope.loc.FIND_CARE;
                    $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
                    $rootScope.showNav = true;
                    $rootScope.showPolicySelect = false;
                  }
                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof findCareDetails
                 * @return {String} The environment name.
                 */
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindCareController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindCareController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    $scope.basicNavbarLeftClick = function() {
                        $window.history.back();
                    };

                    var query = {};
                    query.loggedIn = $rootScope.loggedIn;
                    query.deviceType = $rootScope.device;
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;

                    var pageName = 'find-care';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };
                $rootScope.$emit('pageNeedsLocale');
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the Find A Doctor view for authenticated members.
 *
 * @namespace Controllers
 * @class Find A Doctor Authenticated
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorAuthenticated', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('FindDoctorAuthenticatedController', [
      '$scope',
      '$rootScope',
      '$location',
      'pageService',
      function($scope, $rootScope, $location, pageService) {
        $rootScope.openMapView = false;
        var pageName = 'find-doctor-authenticated';
        $scope.selectedPolicy = $rootScope.selectedPolicy;
        $scope.pageHtml = '';
        $rootScope.$emit('pageLoading');
        $rootScope.$emit('pageNeedsLocale');

        pageService
          .getPage(
            pageService.devices.MOBILE,
            pageName,
            $rootScope.language,
            {
              loggedIn : $rootScope.loggedIn,
              deviceType : $rootScope.device,
              planName: $scope.selectedPolicy.lobDesc,
              externalId: $scope.selectedPolicy.externalId,
              internalId: $scope.selectedPolicy.internalId,
              alphaPrefix: $scope.selectedPolicy.alphaPrefix,
              lobCode: $scope.selectedPolicy.lobCode
            }
          )
          .then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
          })
          .catch(function(error) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }
    ]);
}());

/**
 * Controller for the Find A Doctor Browser view.
 *
 * @namespace Controllers
 * @class FindDoctorBrowserController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorBrowser', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('FindDoctorBrowserController', [
      '$scope',
      '$rootScope',
      '$location',
      'pageService',
      'TransparencyFactory',
      'analyticConstants',
      function ($scope, $rootScope, $location, pageService, TransparencyFactory, analyticConstants) {
        var pageName = 'find-doctor-browser';
        $rootScope.$emit('pageLoading');
        if ($rootScope.loggedIn) {
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;
        }

        $rootScope.filterText = '';

        /**
         * The directive HTML for the page.
         *
         * @memberof FindDoctorBrowserController
         * @member {String} pageHtml
         */
        $scope.pageHtml = '';

        var query = $location.search();
        query.loggedIn = $rootScope.loggedIn;
        query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
        query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
        query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
        query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
        query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;

        if (query.browseTerm) { // encoding this browseTerm - if the query string contains ampersand(&) its spliting up the string.
          query.browseTerm = encodeURIComponent(TransparencyFactory.getBrowseTerm());
        }
        if (query.browseLevel == '2') {
          query.browseLevelTwoTerm = encodeURIComponent(TransparencyFactory.getBrowseLevelTwoTerm());
        }
        if ($rootScope.vitalsJWT && $rootScope.vitalsSignature && !$rootScope.noMatchPlanFound) {
          query.jwt = $rootScope.vitalsJWT;
          query.signature = $rootScope.vitalsSignature.signature;
        }
        query.deviceType = $rootScope.device;                    

        pageService
          .getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query)
          .then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $rootScope.healthNavTrackStates(4, query, analyticConstants.HEALTHNAV_SECTION);
            $scope.pageHtml = pageHtml;
          })
          .catch(function() {
            $rootScope.$emit('pageLoaded');
            if ($rootScope.loggedIn) {
              $rootScope.showNetworkErrorAlert();
            } else {
              $rootScope.showNetworkErrorUnautenticated();
            }
          });
      }
    ]);
}());

/**
 * Controller for the Find A Doctor filter view.
 *
 * @namespace Controllers
 * @class FindDoctorFilterController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findDoctorFilter', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindDoctorFilterController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            '$window',
            'TransparencyFactory',
            function($scope, $rootScope, $location, pageService, $window, TransparencyFactory) {
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindDoctorFilterController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindDoctorFilterController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    /**
                    * For basicNavbar, we have to pass this function
                    * to handle the left click
                    */
                    $scope.basicNavbarLeftClick = function() {

                      $rootScope.fromBackButton = true;

                      // use the first element from filtersData array to set transparency factory
                      var filtersData = $rootScope.filtersDataArr[0] || '';
                      TransparencyFactory.setFilterTierSelectedTerm(filtersData.tierData || '');
                      TransparencyFactory.setFilterSpecialtySelectedTerm(filtersData.specialty || '');
                      TransparencyFactory.setFilterGenderSelectedTerm(filtersData.gender || '');

                      $window.history.back();
                    };

                    var query = $location.search();
                    query.loggedIn = $rootScope.loggedIn;
                    if (!query.zipCode) {
                        query.zipCode = TransparencyFactory.getCity().zip;
                    }
                    if (!query.distance) {
                        query.distance = TransparencyFactory.getDistance();
                    }
                    
                    query.planName = ($rootScope.loggedIn) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
                    query.accountId = TransparencyFactory.getSelectedPlan().accountId;
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
                    query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
                    query.deviceType = $rootScope.device;                    

                    if ($rootScope.loggedIn) {
                      $rootScope.showNav = false;
                      query.jwt = $rootScope.vitalsJWT;
                    }

                    var pageName = 'find-doctor-filter';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the Find A Doctor Results Details view.
 *
 * @namespace Controllers
 * @class FindDoctorResultsDetailsController
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorResultsDetails', [
      'bcbsnc.cloud.services.page',
    ])
    .controller('FindDoctorResultsDetailsController', [
      '$scope',
      '$rootScope',
      '$location',
      'pageService',
      'TransparencyFactory',
      function(
        $scope,
        $rootScope,
        $location,
        pageService,
        TransparencyFactory
      ) {
        var pageName = 'find-doctor-results-details';
        var query = $location.search();
 
        query.loggedIn = $rootScope.loggedIn;
        query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
        query.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
        query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
        query.statePlan = ($rootScope.loggedIn) ? $rootScope.selectedPlan.state : null;
        query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
        query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
        query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
        query.deviceType = $rootScope.device;                    

        query.network_id =
          $rootScope.selectedPlan && $rootScope.selectedPlan.id;
        query.accountId =
          $rootScope.selectedPlan && $rootScope.selectedPlan.accountId;
        if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
          query.jwt = $rootScope.vitalsJWT;
          query.member_number = $rootScope.selectedPlan.alphaPrefix + $rootScope.selectedPlan.externalId;
          query.externalSourceId = $rootScope.selectedPlan.externalId;
          query.internalId = $rootScope.selectedPlan.internalId;
          query.groupId = $rootScope.selectedPlan.groupNumber;
          query.sourceSystem = $rootScope.selectedPlan.sourceSystem;
          query.fundingAccountTypeCode = $rootScope.selectedPlan.attributes
            .filter(function(attributeObject){
              return attributeObject.paymentPortalFundType !== null;
            })
            .map(function(attributeObject) {
              return attributeObject.paymentPortalFundType;
            })[0];
        }

        if (!query.viewPcpDetails) {
          query.zipCode = TransparencyFactory.getCity().zip;
          query.distance = TransparencyFactory.getDistance();
          // Adding selected provider_id and location_id to the query
          var resultDetailsItemToFetch = TransparencyFactory.getResultsDetailsItem();
        }
        
        query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();


        // Check existing query for provider/location.
        query.location_id = query.location || resultDetailsItemToFetch.location_id;
        query.provider_id = query.provider || resultDetailsItemToFetch.provider_id;

        // Adding the card name 'default' for the main details view
        query.card = 'default';

        if ($rootScope.loggedIn) {
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;
        }

        $rootScope.$emit('pageLoading');
        pageService
          .getPage(
            pageService.devices.MOBILE,
            pageName,
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $rootScope.healthNavTrackStates(2, query);
            $scope.pageHtml = pageHtml;
          })
          .catch(function(error) {
            $rootScope.$emit('pageLoaded');
            if ($rootScope.loggedIn) {
              $rootScope.showNetworkErrorAlert();
            } else {
              $rootScope.showNetworkErrorUnautenticated();
            }
          });
      },
    ]);
})();

/**
 * Controller for the Find A Doctor Search Results view.
 *
 * @namespace Controllers
 * @class FindDoctorSearchResultsController
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorSearchResults', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('FindDoctorSearchResultsController', [
      '$scope',
      '$rootScope',
      '$location',
      '$anchorScroll',
      '$timeout',
      'pageService',
      'TransparencyFactory',
      function($scope, $rootScope, $location, $anchorScroll, $timeout, pageService, TransparencyFactory) {
        var pageName = 'find-doctor-search-results';
        $rootScope.$emit('pageLoading');

        // Record the path upon entering the controller
        $scope.controllerLocation = $location.path();
        $scope.pageHtml = '';

        var query = $location.search();
        query.loggedIn = $rootScope.loggedIn;
        
        query.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
        query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPlan.vitalsMatchedPlanName : '';

        
        if (TransparencyFactory.getCity().geo) {
          query.geo_location = TransparencyFactory.getCity().geo;
        } else {
          query.geo_location = $rootScope.vitalsGeoCoords;
        }

        if (!query.latlon) {
          $rootScope.searchAreaNearestCity = null;
        }
        
        if (!query.zipCode) {
          query.zipCode = TransparencyFactory.getCity().zip;
        }
        if (!query.distance) {
          query.distance = TransparencyFactory.getDistance();
        }
        query.accountId = TransparencyFactory.getSelectedPlan().accountId;
        query.resultsTerm = encodeURIComponent(TransparencyFactory.getResultsTerm() ? TransparencyFactory.getResultsTerm() : $rootScope.resultsTermsArr[0]);

        if ($rootScope.loggedIn) {
          $rootScope.pageTitle = $rootScope.loc.FIND_CARE;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;
          query.vitalsMatchedPlanName = $rootScope.selectedPolicy.vitalsMatchedPlanName;
          query.policyIndex = $rootScope.policyIndex;
          query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
          query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
          query.policyExternalId = $rootScope.selectedPolicy.externalId;
        }

        if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
        query.jwt = $rootScope.vitalsJWT;
        query.signature = $rootScope.vitalsSignature && $rootScope.vitalsSignature.signature;
        }

        if (query.filters) {
          var tierData = TransparencyFactory.getFilterTierSelectedTerm();
          query.tierDataType = tierData.type || '';
          query.tierDataValue = tierData.value || '';
          query.specialty = TransparencyFactory.getFilterSpecialtySelectedTerm() || '';
          query.gender = TransparencyFactory.getFilterGenderSelectedTerm() || '';
          query.smartShopperRewardsFilter = TransparencyFactory.getSmartShopperFilter() || '';
        }

        // If returning from the results details view, skip Vitals call on backend
        if (TransparencyFactory.getResultsDetailsIndex() !== null) {
          query.callVitals = false;
        }

        // Set query in $scope, as it's needed inside the associated directive.
        $scope.query = query;
        query.deviceType = $rootScope.device;                            

        pageService
          .getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query)
          .then(function(pageHtml) {
            // If returning from the results details view, update pageHtml with existing results
            if (TransparencyFactory.getResultsDetailsIndex() !== null) {
              // Replace " with ' in the existing results string
              var existingResults = JSON.stringify(TransparencyFactory.getExistingSearchResults()).replace(/(\")/g, '\'');

              // Create updated <find-doctor-search-results> HTML element
              var updatedResultsElem = '<find-doctor-search-results search-results-details=\"' +  existingResults + '\"></find-doctor-search-results>';

              // Regular expression to match the <find-doctor-search-results> element
              var replaceExpr = /<find-doctor-search-results\ssearch-results-details=\"(.*)\"><\/find-doctor-search-results>/g;

              // Update the received pageHtml with existing results
              var newHtml = pageHtml.replace(replaceExpr, updatedResultsElem);

              $rootScope.$emit('pageLoaded');
              $rootScope.healthNavTrackStates(1, query);

              // Update the pageHtml with existing results
              $scope.pageHtml = newHtml;

              // Go to the results card the user had previously clicked
              $scope.gotoAnchor('search-results-card-' + TransparencyFactory.getResultsDetailsIndex());

              // Reset the result details index clicked back to null
              TransparencyFactory.setResultsDetailsIndex(null);
            } else {
              $rootScope.$emit('pageLoaded');
              $rootScope.healthNavTrackStates(1, query);
              $scope.pageHtml = pageHtml;
            }
          })
          .catch(function(error) {
            $rootScope.$emit('pageLoaded');
            if ($rootScope.loggedIn) {
              $rootScope.showNetworkErrorAlert();
            } else {
              $rootScope.showNetworkErrorUnautenticated();
            }
          });

        // Function used to pin the results card previously clicked to the top of the view
        $scope.gotoAnchor = function(resultId) {
          $timeout(function() {
            $location.hash(resultId);
            $anchorScroll();
          }, 100);
        };

        // If we are just moving between tags on the same page, supress the $locationChangeStart event
        $scope.$on('$locationChangeStart', function(event, newUrl, oldUrl) {
          // Suppress event only if the URL path is remaining the same and the new hash is non-empty
          // The new hash being non-empty imlies that we are moving to an actual achor on the page
          if (($scope.controllerLocation === $location.path()) && ($location.hash() !== '')) {
            event.preventDefault();
          }
        });
      }
    ]);
}());

/**
 * Controller for the Find A Doctor Search view.
 *
 * @namespace Controllers
 * @class FindDoctorSearchController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findDoctorSearch', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindDoctorSearchController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            'TransparencyFactory',
            function($scope, $rootScope, $location, pageService, TransparencyFactory) {
              if ($rootScope.loggedIn) {
                $rootScope.pageTitle = $rootScope.loc.FIND_CARE;
                $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
                $rootScope.showNav = true;
                $rootScope.showPolicySelect = (!$rootScope.noMatchPlanFound) ? true : false;
              }
                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof findDoctorSearchDetails
                 * @return {String} The environment name.
                 */
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindDoctorSearchController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindDoctorSearchController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    var query = {};
                    query.loggedIn = $rootScope.loggedIn;
                    query.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
                    query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
                    query.planId = $rootScope.selectedPlan && $rootScope.selectedPlan.id;
                    if (query.planName !== 'Medicare Supplement') {
                      query.geo_location = TransparencyFactory.getCity() && TransparencyFactory.getCity().geo ? TransparencyFactory.getCity().geo : $rootScope.vitalsGeoCoords;
                      query.zipCode = TransparencyFactory.getCity().zip;
                    }
                    query.distance = TransparencyFactory.getDistance();
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
                    query.deviceType = $rootScope.device;                    

                    if ($rootScope.vitalsJWT && $rootScope.vitalsSignature && !$rootScope.noMatchPlanFound) {
                      query.jwt = $rootScope.vitalsJWT;
                      query.signature = $rootScope.vitalsSignature.signature;
                    }

                    var pageName = 'find-doctor-search';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };

              $rootScope.$on('policySelected', function() {
                $scope.getPage();
              });

                var findDoctorUnregisterFunc = $rootScope.$on('selectsPlan', function() {
                  if ($location.path() == '/find-doctor-search') { //We want to force the app back to the find-doctor-search view page if the plan is changed while on search page.
                    $location.path('/find-doctor-search');
                  }

                  $scope.getPage();
                });
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the Find A Doctor view.
 *
 * @namespace Controllers
 * @class Find A Doctor
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findDoctor', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindDoctorController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            function($scope, $rootScope, $location, pageService) {
                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof findDoctorDetails
                 * @return {String} The environment name.
                 */
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindDoctorController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindDoctorController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';
                    var query = {};
                    query.loggedIn = $rootScope.loggedIn;
                    query.deviceType = $rootScope.device;
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;


                    var pageName = 'find-doctor';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, {loggedIn : $rootScope.loggedIn, deviceType : $rootScope.device}).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                        $rootScope.healthNavTrackStates(0, {title:'select network'});
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };
                $rootScope.$emit('pageNeedsLocale');
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the healthNav view.
 *
 * @namespace Controllers
 * @class HealthNavController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.healthNav', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('HealthNavController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $window, pageService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $scope.alertModal = $rootScope.alertModal;

      var languageAttempts = 0;
      
      $rootScope.startingView = analyticConstants.HEALTHNAV_SECTION;

      /**
       *Display the alert window for external link to open the url in browser
       **/
      $scope.openInBrowser = $rootScope.openInBrowser;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof HealthNavController
       * @method getPage
       */
       $scope.getPage = function() {
         /**
         * The directive HTML for the page.
         *
         * @memberof HealthNavController
         * @member {String} pageHtml
         */
         $scope.pageHtml = '';

         /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
          if($rootScope.loggedIn) {
            $window.history.back();
          } else {
            $timeout($location.path('/login'), 100);
          }
        };

        if(!$rootScope.loc) {
          languageAttempts++;
          if(languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }
        $rootScope.selectedPolicy = $rootScope.selectedPolicy || {};
        var query = {
          policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
          policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
          policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
          policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null,
          loggedIn : $rootScope.loggedIn
        };

        var pageName = 'health-nav';
        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the help page view.
 *
 * @namespace Controllers
 * @class HelpController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.help', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('HelpController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService, analyticConstants) {
      if ($rootScope.loggedIn) {
        $rootScope.showNav = true;
      }
      $rootScope.showPolicySelect = false;
      $scope.alertModal = $rootScope.alertModal;

      var languageAttempts = 0;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof HelpController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof HelpController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $window.history.back();
        };

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        var pageName = 'help';
        $rootScope.pageTitle = $rootScope.loc.CUSTOMER_SERVICE_AND_HELP_PAGE;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
        var query = {
          loggedIn : $rootScope.loggedIn, 
          policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null, 
          deviceType : $rootScope.device, 
          planId : ($rootScope.loggedIn)? $rootScope.selectedPolicy.id : null, 
          vitalsMatchedPlanName : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : null,
          policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
          policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
          policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null
        };


        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(pageName, analyticConstants.HELP_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller to refresh the home page.
 *
 * @namespace Controllers
 * @class HomeRefreshController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.homeRefresh', [])
  .controller('HomeRefreshController', [
    '$scope',
    '$rootScope',
    function($scope, $rootScope) {
      $rootScope.gotoView('/home');
    }
  ]);
}());

/**
 * Controller for the home page view.
 *
 * @namespace Controllers
 * @class HomeController
 */
(function() {
  "use strict";

  angular
    .module("blueconnect.mobile.controllers.home", [
      "bcbsnc.cloud.services.page"
    ])
    .controller("HomeController", [
      '$scope',
      '$rootScope',
      '$timeout',
      '$location',
      'pageService',
      'adobeService',
      'coachmarkService',
      'analyticConstants',
      '$anchorScroll',
      'livechatService',
      function($scope, $rootScope, $timeout, $location, pageService, adobeService, coachmarkService, analyticConstants, $anchorScroll, livechatService) {
        $rootScope.showNav = true;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HELP;
        $rootScope.showPolicySelect = true;

        var languageAttempts = 0;
        var section = "Home";

        $rootScope.startingView = section;

        if ($rootScope.selectedPolicy) {
          $rootScope.pageTitle =
          $rootScope.selectedPolicy.state === true
            ? '<div style="margin-top: -.5rem"><img src="images/shp-logo.svg" style="max-width: 11rem"></img></div>'
            : '<div style="margin-top: -.5rem"><img src="images/logo.svg" style="max-width: 11rem"></img></div>';

          if (
            $rootScope.signature &&
            $rootScope.signature.get($rootScope.policyIndex).isSignatureService
          ) {
            $rootScope.pageTitle =
              '<div style="margin-top: -.5rem"><img src="images/logo-signature-services.svg" style="max-width: 11rem"></img></div>';
          } else if ($rootScope.selectedPolicy.state === true) {
            //state with signature will have signature logo
            $rootScope.pageTitle =
              '<div style="margin-top: -.5rem"><img src="images/shp-logo.svg" style="max-width: 11rem"></img></div>';
          } else {
            $rootScope.pageTitle =
              '<div style="margin-top: -.5rem"><img src="images/logo.svg" style="max-width: 11rem"></img></div>';
          }
        }

        /**
         * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
         *
         * @memberof HomeController
         * @method getPage
         */
        $scope.getPage = function() {
          if (!$rootScope.selectedPolicy && !!$rootScope.loggedIn === false) {
            return $rootScope.gotoView('/login');
          }
          $scope.pageHtml = '';

          $rootScope.$emit("pageLoading");

          if (!$rootScope.loc || !$rootScope.policies) {
            languageAttempts++;
            if (languageAttempts > 5) {
              $rootScope.$emit("pageLoaded");
              $rootScope.showNetworkErrorAlert();
              return;
            }

            $timeout($scope.getPage, 100);
            return;
          }

          var query = {
            policyIndex: $rootScope.loggedIn ? $rootScope.policyIndex : null,
            policyEffectiveDate: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.effectiveDate
              : null,
            policyExpirationDate: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.expirationDate
              : null,
            policyExternalId: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.externalId
              : null,
            planId: $rootScope.loggedIn ? $rootScope.selectedPolicy.id : null,
            vitalsMatchedPlanName: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.vitalsMatchedPlanName
              : null,
            deviceType: $rootScope.device
          };

          pageService
            .getPage(
              pageService.devices.MOBILE,
              "home",
              $rootScope.language,
              query
            )
            .then(
              function(pageHtml) {
                $rootScope.$emit("pageLoaded");
                if ($rootScope.liveChatIntialized && window.liveagent){
                  livechatService.disconnectLiveChat();
                }
                $scope.pageHtml = pageHtml;
                coachmarkService.showCoachmarks("home");
                if ($location.url().indexOf('/home') > -1) {
                  if ($rootScope.elapsedTimeNeeded) {
                    var timeElapsed = (Date.now() - $rootScope.timeElapsed) / 1000; // in seconds
                    adobeService.trackAction('homeCardLoaded', analyticConstants.HOME_SECTION, {homeCardElapsedTime: timeElapsed});
                    $rootScope.elapsedTimeNeeded = false;
                  }
                  adobeService.trackState('members:app:home', analyticConstants.HOME_SECTION);
                }
              },
              function() {
                $rootScope.$emit("pageLoaded");
                $rootScope.showNetworkErrorAlert();
              }
            );
        };

        var homeCardUnregisterFunc = $rootScope.$on(
          "policySelected",
          function() {
            $scope.getPage();
          }
        );
        $rootScope.$on("LOGOUT", homeCardUnregisterFunc);
        $rootScope.verifyLocaleRetrieved();
        $rootScope.refreshNavbar();
        $scope.getPage();
      }
    ]);
})();

/*
 * Controller for the id card view.
 *
 * @namespace Controllers
 * @class IdCardController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.idCard', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('IdCardController', [
            '$scope',
            '$rootScope',
            'pageService',
            'adobeService',
            '$location',
            'analyticConstants',
            function($scope, $rootScope, pageService, adobeService, $location, analyticConstants) {
                $rootScope.showNav = true;
                $rootScope.showPolicySelect = true;
                $rootScope.pageTitle = $rootScope.loc.ID_CARD;
                $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof IdCardController
                 * @method getPage
                 */
                $scope.getPage = function() {
                  /**
                  * The directive HTML for the page.
                  *
                  * @memberof IdCardController
                  * @member {String} pageHtml
                  */
                  $scope.pageHtml = '';

                  var pageName = 'id-card';
                  var query = {
                    policyIndex: $rootScope.policyIndex,
                    url: $location.path(),
                    policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                    policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                    policyExternalId : $rootScope.selectedPolicy.externalId,
                  };

                  $rootScope.$emit('pageLoading');
                  pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                    $rootScope.$emit('pageLoaded');
                    $scope.pageHtml = pageHtml;
                    adobeService.trackState(pageName, analyticConstants.IDCARD_SECTION);
                    adobeService.trackAction(pageName, analyticConstants.IDCARD_SECTION); // custom metrics requires action
                  }, function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
                };

                var idCardUnregisterFunc = $rootScope.$on('policySelected', function() {
                  $scope.getPage();
                });

                $rootScope.$on('LOGOUT', idCardUnregisterFunc);

                $rootScope.verifyLocaleRetrieved();
                $scope.getPage();
              }
            ]);
          }());

/**
 * Controller for the inbox search page view.
 *
 * @namespace Controllers
 * @class InboxSearchController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.inboxSearch', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('InboxSearchController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      var languageAttempts = 0;
      var identifier = 'inbox:search';

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof InboxSearchController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof InboxSearchController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        $scope.pageHtml = '';

        $scope.basicNavbarLeftClick = function() {
          $rootScope.gotoView('/inbox');
        };

        var query = {};
        if ($location.search().q) {
          query.q = $location.search().q;
          identifier = 'inbox:search:results';
        }
        if ($location.url().indexOf('/inbox/search/sent') > -1) {
          query.sent = true;
          identifier = 'inbox:search:sent';
        }
        else if ($location.url().indexOf('/inbox/search/bookmarked') > -1) {
          query.bookmarked = true;
          identifier = 'inbox:search:bookmarked';
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, 'inbox-search', $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(identifier, analyticConstants.INBOX_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the inbox page view.
 *
 * @namespace Controllers
 * @class InboxController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.inbox', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('InboxController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$routeParams',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $routeParams, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = true;
      $rootScope.showPolicySelect = false;

      var languageAttempts = 0;
      var identifier = "inbox";
  
      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof InboxController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof InboxController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        $rootScope.pageTitle = $rootScope.loc.SECURE_INBOX;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

        var query = {};
        query.getEmailFromCpcFailed = $rootScope.getEmailFromCpcFailed || '';
        var pageName = 'inbox';
        if ($location.url().indexOf('/inbox/sent') > -1) {
          pageName = 'inbox-sent';
          identifier = 'inbox:sent';
        }
        else if ($location.url().indexOf('/inbox/bookmarked') > -1) {
          pageName = 'inbox-bookmarked';
          identifier = 'inbox:bookmarked';
        }
        if ($routeParams.id) {
          pageName = 'inbox-message/' + $routeParams.id;
          $rootScope.pageTitle = $rootScope.loc.MESSAGE_DETAILS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.INBOX;
          identifier = 'inbox:messageDetails';
        }

        if (pageName === 'inbox') {
          Object.assign(query, $rootScope.getTIPData());
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(identifier, analyticConstants.INBOX_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * @description Controller for the landing page view.
 * @namespace Controllers
 * @class LandingController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.landing', [])
    .controller('LandingController', [
      '$rootScope',
      'cordovaService',
      function ($rootScope, cordovaService) {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $rootScope.loggedIn = false;

        if (typeof cordova === 'undefined') {
          return $rootScope.gotoView('/login');
        }

        $rootScope.checkNetwork();
        $rootScope.verifyLocaleRetrieved();

        document.addEventListener('deviceready', checkSecuritySettings, false);
        document.addEventListener('pause', inactivityListener);

        function checkSecuritySettings() {
          // Check inactive period.
          var inactiveWindow = $rootScope.pauseTime ? new Date(
            $rootScope.pauseTime.getTime() + 72 * 1000 * 60
          ): 0;

          if (!$rootScope.pausedForShare && inactiveWindow < new Date()) {
            $rootScope
              .checkNetwork()
              .then(function(networkObj) {
                if (networkObj.offline && !networkObj.online) {
                  angular.element('.page-no-connection').hide();
                  $rootScope.gotoView('/network-landing-local');
                  throw new Error('Device is offline');
                }
              })
              .then(function() {
                return cordovaService.checkDeviceType();
              })
              .then(function() {
                return cordovaService.verifyMinAppVersion();
              })
              .then(function () {
                $rootScope.gotoView('/login');
              })
              .catch(function(error) {
                console.error(error);
              });
          }
        }

        function inactivityListener() {
          $rootScope.pauseTime = new Date();
        }
    }]);
})();

/**
 * Controller for the login page view.
 *
 * @namespace Controllers
 * @class LoginController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.login', [
      'blueconnect.mobile.services.touchId',
    ])
    .controller('LoginController', [
      '$scope',
      '$rootScope',
      '$http',
      '$q',
      'languageService',
      'loginService',
      'cordovaService',
      'touchIdService',
      'adobeService',
      'analyticConstants',
      'config',
      'alertService',
      'CacheFactory',
      'restService',
      function (
        $scope,
        $rootScope,
        $http,
        $q,
        languageService,
        loginService,
        cordovaService,
        touchIdService,
        adobeService,
        analyticConstants,
        config,
        alertService,
        CacheFactory,
        restService
      ) {
        // calls closeAlert method if any alert modal is present before displaying login page
        alertService.closeAlert();

        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $rootScope.loggedIn = false;

        restService
          .getData('login', $rootScope.language || 'en', { loggedIn: false })
          .then(function (result) {
            $scope.messageEods = result.messageEods;
            $scope.messageDate = result.messageDate;
            if (result.messageEods === 1) {
              $rootScope.logOut();
            }
          });

        $rootScope.$on('languageChanged', function () {
          $scope.loc = languageService.getInternalLocale($rootScope.language);
        });

        $rootScope.startingView = analyticConstants.LOGIN_SECTION;
        adobeService.trackState('login', analyticConstants.LOGIN_SECTION);

        var clientId = null;
        var clientSecret = null;

        var tphSourceSytem = 'BCBSNCMbrPrtlLgn';

        var deviceType = cordovaService.checkDeviceType();

        $scope.biometric = {
          isAndroid: deviceType.android,
          isAvailable: null,
          desireToEnroll: null,
          alreadyEnrolled: null,
          faceId: deviceType.android ? false : null,
          biometricType: null,
          enableText: null,
        };

        if ($rootScope.loc && numberOfKeys($rootScope.loc) > 0) {
          $scope.loc = $rootScope.loc;
        }

        if (
          !$rootScope.language ||
          !$scope.loc ||
          numberOfKeys($scope.loc) === 0
        ) {
          $scope.loc = languageService.getInternalLocale();
          $scope.biometric.biometricType = deviceType.android
            ? 'FINGERPRINT_AUTH'
            : 'SETTINGS_LOGIN_KEY_TOUCH_ID';
          $scope.biometric.enableText = deviceType.android
            ? 'ENABLE_FINGERPRINT_AUTH'
            : 'ENABLE_TOUCH_ID';
          setupCredentials();
          $rootScope.setLanguage(languageService.getDefaultLanguage());
        }

        // if we're on the login page but not using the internal locale
        if (
          numberOfKeys($scope.loc) !==
          numberOfKeys(languageService.getInternalLocale())
        ) {
          $scope.loc = languageService.getInternalLocale();
        }

        document.addEventListener('offline', function () {
          $scope.$apply(function () {
            $scope.password = '';
          });
        });

        $scope.password = '';
        $scope.userId = null;
        var previousUserId = null;

        loginService
          .getUserId()
          .then(function (userId) {
            if (!userId) {
              $scope.biometric.alreadyEnrolled = false;
            }
            previousUserId = userId;
            if (previousUserId) {
              $scope.userId = previousUserId;
            }

            return touchIdService.isAvailable();
          })
          .then(function (result) {
            if (!result) {
              $scope.biometric.isAvailable = false;
              return false;
            }

            $scope.biometric.isAvailable = true;

            if (result === 'face') {
              $scope.biometric.faceId = true;
              $scope.biometric.biometricType = 'SETTINGS_LOGIN_KEY_FACE_ID';
              $scope.biometric.enableText = 'ENABLE_FACE_ID';
            } else {
              if (!$scope.biometric.enableText) {
                $scope.biometric.enableText = deviceType.android
                  ? 'ENABLE_FINGERPRINT_AUTH'
                  : 'ENABLE_TOUCH_ID';
              }
              if (!$scope.biometric.biometricType) {
                $scope.biometric.biometricType = deviceType.android
                  ? 'FINGERPRINT_AUTH'
                  : 'SETTINGS_LOGIN_KEY_TOUCH_ID';
              }
            }

            if (result === 'touch') {
              $scope.biometric.faceId = false;
            }

            return loginService.getBiometricEnabled();
          })
          .then(function (bioBoolean) {
            // eslint-disable-next-line no-undefined
            if (bioBoolean === null || bioBoolean === undefined) {
              console.warn(
                'Biometric bool is falsy, but not false, setting it to strictly false'
              );
              bioBoolean = false;
            }

            $scope.biometric.alreadyEnrolled = bioBoolean;
            if (bioBoolean === false) {
              $scope.biometric.desireToEnroll = bioBoolean;
            }

            if (bioBoolean === true && !$scope.userId) {
              $scope.biometric.alreadyEnrolled = false;
              $scope.biometric.desireToEnroll = true;
              return console.warn(
                'Had to leave auto-sign-in early due to mismatch in auth settings'
              );
            }
            if (
              bioBoolean === true &&
              loginService.getUserLoggedOutFlag() === false
            ) {
              return $scope.loginWithBiometric();
            }
          })
          .catch(function (loginPreferencesError) {
            console.error('Had an error in pre-login', loginPreferencesError);
            if (loginPreferencesError.code === -7) {
              console.log('no fingerprints enrolled');
              $scope.biometric.isAvailable = false;
              $scope.biometric.desireToEnroll = false;
            }
            $scope.biometric.alreadyEnrolled = false;
          });

        $scope.userIdChangedFromPrevious = function (newUserId) {
          if (!previousUserId) {
            return false;
          }
          console.log('Comparing %s to %s', previousUserId, newUserId);
          return previousUserId !== newUserId;
        };

        $scope.toggleBiometricDesireToEnroll = function () {
          $scope.biometric.desireToEnroll = !$scope.biometric.desireToEnroll;
        };

        /**
         * @description Kicks off the login process.
         * @memberof LoginController
         * @method logIn
         */
        $scope.logIn = function () {
          $scope.loginAttempted = true;

          $rootScope.credentials = loginService.getEncryptedCredentials({
            clientId: $scope.userId,
            clientSecret: $scope.password,
          });

          if (!$scope.loginForm.$valid) {
            $scope.password = '';
            $scope.loginFailed = true;
            $scope.loginInvalidMessage = $scope.loc.LOGIN_INVALID;
            if ($scope.loginForm.$error.required) {
              var fieldName = $scope.loginForm.userId.$error.required
                ? 'username'
                : 'password';
              $scope.trackLoginAction(false, 'Missing ' + fieldName + '.');
            }
            return;
          }

          $scope.hideKeyboard();
          $scope.loginInvalidMessage = null;

          $rootScope.$emit('pageLoading');

          if (
            $scope.biometric.alreadyEnrolled === true &&
            $scope.userIdChangedFromPrevious() === false
          ) {
            return $scope.loginWithBiometric();
          }

          console.log('biometric enabled %s', $scope.biometric.desireToEnroll);
          return ($scope.biometric.desireToEnroll
            ? touchIdService.isAvailable().then(function (biometric) {
                console.log(biometric);
                return touchIdService.verifyFingerprint(
                  'Sign into your Member Profile'
                );
              })
            : $q.resolve(false)
          )
            .then(function () {
              loginService.setBiometricEnabled(
                !!$scope.biometric.desireToEnroll
              );

              if (!clientId || !clientSecret) {
                console.log('setting up credentials for the re-log in');
                setupCredentials();
              }

              return loginService.attemptLogin(
                $scope.userId,
                $scope.password,
                clientId,
                clientSecret
              );
            })
            .then(function (authorization) {
              $scope.loginFailed = false;
              $rootScope.loggedIn = true;

              var cache = CacheFactory.get('defaultCache'); //defined in AngularJS-Services-Cloud
              if (cache) {
                CacheFactory.clearAll();
              }
              if (
                $scope.biometric.alreadyEnrolled ||
                $scope.biometric.desireToEnroll
              ) {
                authorization.rememberUserId = true;
              }
              loginService.setAuthorization(authorization);
              $scope.trackLoginAction(true);
              loadNextPage();
            })
            .catch(function (error) {
              console.warn('Error in biometric', error);
              loginService.setBiometricEnabled(false);
              $scope.trackLoginAction(false, 'Biometrics error.');
              $rootScope.$emit('pageLoaded');
              $scope.loginFailed = true;
              $scope.loginInvalidMessage = $scope.loc.LOGIN_INVALID;
              $scope.password = '';
              $scope.tphLoginFail();
            });
        };

        $scope.trackLoginAction = function (successful, reason) {
          if (successful) {
            adobeService.trackAction(
              'loginSuccessfulLogin',
              analyticConstants.LOGIN_SECTION,
              { biometrics: $scope.biometric }
            );
            $rootScope.elapsedTimeNeeded = true;
            $rootScope.timeElapsed = Date.now();
          } else {
            adobeService.trackAction(
              'loginFailedLogin',
              analyticConstants.LOGIN_SECTION,
              { reason: reason }
            );
          }
        };

        $scope.attemptTestLogin = function () {
          if (config.env === 'LOCAL') {
            $rootScope.loggedIn = true;
            $scope.trackLoginAction(true);
            loadNextPage();
          }
        };

        $scope.loginWithBiometric = function () {
          if (!clientId || !clientSecret) {
            console.log('setting up credentials for the re-log in');
            setupCredentials();
          }
          $rootScope.$emit('pageLoading');
          touchIdService
            .isAvailable()
            .then(function () {
              return touchIdService.verifyFingerprint(
                'Sign into your Member Profile'
              );
            })
            .then(function () {
              return loginService.getAuthorization();
            })
            .then(function (authorization) {
              return loginService.attemptRefreshLogin(
                authorization,
                clientId,
                clientSecret
              );
            })
            .then(function (newAuthObj) {
              newAuthObj.rememberUserId = true;
              loginService.setAuthorization(newAuthObj);
              $rootScope.loggedIn = true;
              //  $scope.trackLoginAction(true);
              loadNextPage();
            })
            .catch(function () {
              $rootScope.$emit('pageLoaded');
            });
        };

        /**
         * Retrieves locale and sends the user to the next page.
         *
         * @memberof LoginController
         * @method loadNextPage
         */
        function loadNextPage() {
          $rootScope.getLocale().then(function () {
            $scope.getPolicies().then(
              function () {
                // Make request to touch point.
                $http.post(config.apiUrl + '/touch-point', {
                  policyindex: $rootScope.policyIndex,
                  originatingUrl: '/login',
                  lobCode: $rootScope.selectedPolicy.lobCode,
                  groupId: $rootScope.selectedPolicy.groupNumber,
                  pageTph: tphSourceSytem,
                  policyMemberId:
                    $rootScope.selectedPolicy.alphaPrefix +
                    $rootScope.selectedPolicy.externalId,
                });

                $scope.getNavbar();

                $scope.saveLoginSettings();

                // Go to homepage.
                $rootScope.gotoView('/home');
              },
              function () {
                alertService.showAlert(
                  $scope.loc.NETWORK_ERROR,
                  $scope.loc.NETWORK_ERROR_MESSAGE,
                  { title: $scope.loc.OK, color: 'blue' }
                );
                $scope.password = '';
                $scope.trackLoginAction(false, 'Network error.');
                $scope.tphLoginFail();
                $rootScope.$emit('pageLoaded');
              }
            );
          });
          $scope.getSignature();
        } // end loadnext page

        /**
         * @description Sets up app credentials for login.
         * @memberof LoginController
         * @method setupCredentials
         */
        function setupCredentials() {
          if (!clientId || !clientSecret) {
            var credentials = loginService.getDecryptedCredentials(
              config.credentials
            );
            clientId = credentials.clientId;
            clientSecret = credentials.clientSecret;
          }
        }

        $scope.gotoForgotUsername = function () {
          return $rootScope.openInBrowser(
            config.bcbsWebUrl + '/members/public/register/forgotusername.htm'
          );
        };

        $scope.gotoForgotPassword = function () {
          return $rootScope.openInBrowser(
            config.bcbsWebUrl +
              '/members/public/register/forgotpassword.htm?closeOnComplete=true'
          );
        };

        $scope.gotoRegistration = function () {
          // return $rootScope.openInBrowser(config.bcbsWebUrl+'/members/public/register');
          $rootScope.gotoView('/registration');
        };

        /**
         * @description TPH login fail
         * @memberof LoginController
         * @method tphLoginFail
         */
        $scope.tphLoginFail = function () {
          // TPH Logging - unsuccessfull login
          const data = {
            pageTph: tphSourceSytem,
            errorCode: '401',
            errorDescription: 'Failed Login',
            originatingUrl: '/login',
          };
          // Hit touchpoint
          $http.post(config.apiUrl + '/touch-point', data);
        };

        /**
         * @description Saves the login settings.
         * @memberof SetupController
         * @method saveLoginSettings
         */
        $scope.saveLoginSettings = function () {
          if (!$rootScope.appSettings) {
            $rootScope.appSettings = {};
          }

          var loginSettings = {
            rememberUserId:
              ($rootScope.appSettings.login &&
                $rootScope.appSettings.login.useTouchId) ||
              false,
            useTouchId:
              ($rootScope.appSettings.login &&
                $rootScope.appSettings.login.useTouchId) ||
              false,
          };

          $rootScope.appSettings.login = loginSettings;
        };

        function numberOfKeys(obj) {
          if (typeof obj !== 'object') {
            console.warn('Tried to get number of keys for non-object', obj);
            return 0;
          }

          return Object.keys(obj).length;
        }
      },
    ]);
})();

/**
 * Logs a member out of the app.
 *
 * @namespace Controllers
 * @class LogoutController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.logout', [])
  .controller('LogoutController', [
    '$scope',
    '$rootScope',
    function($scope, $rootScope) {
      $rootScope.logOut();
    }
  ]);
}());

/**
 * The main controller of the application.
 *
 * @namespace Controllers
 * @class MainController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.main', [
      'bcbsnc.cloud.services.component',
      'bcbsnc.cloud.services.rest',
    ])
    .controller('MainController', [
      '$scope',
      '$rootScope',
      '$location',
      '$q',
      '$http',
      'config',
      'cordovaService',
      'languageService',
      'componentService',
      'restService',
      'alertService',
      'adobeService',
      'PaymentFlowFactory',
      'CacheFactory',
      'TransparencyFactory',
      'backButtonService',
      'loginService',
      'analyticConstants',
      'googleMapsService',
      function (
        $scope,
        $rootScope,
        $location,
        $q,
        $http,
        config,
        cordovaService,
        languageService,
        componentService,
        restService,
        alertService,
        adobeService,
        PaymentFlowFactory,
        CacheFactory,
        TransparencyFactory,
        backButtonService,
        loginService,
        analyticConstants,
        googleMapsService
      ) {
        // load Google Maps Api
        $rootScope.mapsReady = false;
        if (window.google && google.maps) {
          $rootScope.mapsReady = true;
        } else {
          googleMapsService.getGoogleMapsApi();
        }
        backButtonService.backButtonFunction();
        angular.element('.page-no-connection').hide();
        /**
         * ($rootScope) Toggles display of the navbar. Set by individual views, on load.
         *
         * @memberof MainController
         * @member {Boolean} showNav
         */
        $rootScope.showNav = false;
        $rootScope.loggedIn = false;

        // intializing live chat

        $rootScope.livechat = { value: false };

        /**
         * ($rootScope) Button types for the left side of the navbar
         *
         * @memberof MainController
         * @member {Object} leftNavButtonType
         */
        $rootScope.leftNavButtonType = {
          HOME: 'HOME',
          HELP: 'HELP',
          BACK: 'BACK',
          INBOX: 'INBOX',
          BACK_TO_BILLING: 'BACK_TO_BILLING',
        };

        /**
         * ($rootScope) Display setting for the left navbar button.
         *
         * @memberof MainController
         * @member {String} leftNavButton
         */
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HELP;

        /**
         * ($rootScope) The page title content of the navbar. Can be text or an image.
         *
         * @memberof MainController
         * @member {Object} pageTitle
         */
        $rootScope.pageTitle = null;

        /**
         * ($rootScope) Toggles display of the policy select element. Set by individual views, on load.
         *
         * @memberof MainController
         * @member {Boolean} showPolicySelect
         */
        $rootScope.showPolicySelect = false;

        /**
         * ($rootScope) The currently selected policy index.
         *
         * @memberof MainController
         * @member {Number} policyIndex
         */
        $rootScope.policyIndex = 0;

        /**
         * ($rootScope) The member's policies, loaded from the data service.
         *
         * @memberof MainController
         * @member {Array} policies
         */
        $rootScope.policies = null;

        $rootScope.selectedPolicy = null;

        $rootScope.getSelectedPolicy = function () {
          return $rootScope.selectedPolicy;
        };

        /**
         * ($rootScope) Wrapper around local method so to expose to other directives.
         *
         * @memberof MainController
         */
        $rootScope.refreshNavbar = function () {
          $scope.getNavbar();
        };

        // Show page load spinner
        $rootScope.$on('pageLoading', function () {
          angular.element('.page-loading-spinner').show();
        });

        // Hide page load spinner
        $rootScope.$on('pageLoaded', function () {
          angular.element('.page-loading-spinner').hide();
        });

        /**
         * ($rootScope) Displays a network connection error alert.
         *
         * @memberof MainController
         * @method showNetworkErrorAlert
         */
        $rootScope.showNetworkErrorAlert = function () {
          if (!$rootScope.loc) {
            $rootScope.getInternalLocale();
          }

          var okTitle = $rootScope.loc.HOME_PAGE;
          if ($location.url() === '/home') {
            okTitle = $rootScope.loc.RETRY;
          }
          alertService
            .showAlert(
              $rootScope.loc.NETWORK_ERROR,
              $rootScope.loc.SERVICE_ERROR_MESSAGE,
              { title: $rootScope.loc.LOG_OUT, color: 'red' },
              { title: okTitle, color: 'blue' }
            )
            .then(
              function () {
                $rootScope.gotoView('/logout');
              },
              function () {
                if ($location.url() === '/home') {
                  $rootScope.gotoView('/home-refresh');
                  return;
                }
                $rootScope.gotoView('/home');
              }
            );
        };

        /**
         * ($rootScope) Displays a network connection error alert for unauthenticated pages.
         *
         * @memberof MainController
         * @method showNetworkErrorUnautenticated
         */
        $rootScope.showNetworkErrorUnautenticated = function () {
          if (!$rootScope.loc) {
            $rootScope.getInternalLocale();
          }

          var okTitle = $rootScope.loc.OK;
          alertService
            .showAlert(
              $rootScope.loc.NETWORK_ERROR,
              $rootScope.loc.NETWORK_ERROR_MESSAGE,
              {
                title: okTitle,
                color: 'blue',
              }
            )
            .then(
              function () {
                angular.element('.page-no-connection').hide();
                $rootScope.gotoView('/network-landing-local');
              },
              function () {
                angular.element('.page-no-connection').hide();
                $rootScope.gotoView('/network-landing-local');
              }
            );
        };

        /**
         * Opens the default mail application
         *
         * @memberof aboutDetails
         * @method openMail
         */
        $rootScope.openMail = function (address, subject) {
          address = address || '';
          subject = subject ? '?subject=' + subject : '';
          $rootScope.pausedForShare = true;
          window.open('mailto:' + address + subject, '_system');
        };

        /**
         * ($rootScope) Sets the policy index.
         *
         * @memberof MainController
         * @method selectPolicy
         * @param  {Number} index The desired policy index
         */
        $rootScope.selectPolicy = function (index) {
          $rootScope.indexOfSelectedMember = 0;
          if (!$rootScope.policies[index]) {
            $rootScope.policyIndex = $rootScope.policies[0].index;
            $rootScope.selectedPolicy = $rootScope.policies[0];
            $rootScope.noMatchPlanFound =
              $rootScope.selectedPolicy.vitalsMatchedPlanName === 'no match'
                ? true
                : false;
            TransparencyFactory.setSelectedPlan($rootScope.selectedPolicy);
            TransparencyFactory.setCurrentPolicyMembers(
              $rootScope.selectedPolicy.policyMembers
            );
            return;
          }
          $rootScope.policyIndex = $rootScope.policies[index].index;
          $rootScope.selectedPolicy = $rootScope.policies[index];
          $rootScope.noMatchPlanFound =
            $rootScope.selectedPolicy.vitalsMatchedPlanName === 'no match'
              ? true
              : false;
          TransparencyFactory.setSelectedPlan($rootScope.selectedPolicy);
          TransparencyFactory.setCurrentPolicyMembers(
            $rootScope.selectedPolicy.policyMembers
          );
          $rootScope.$emit('policySelected');
        };

        /**
         * ($rootScope) Gets TIP data object based on selectedPolicy
         *
         * @memberof MainController
         * @method getTIPData
         * @param  {String} transactionCode The transaction code
         * @param  {String} originatingURL The originating URL
         */
        $rootScope.getTIPData = function (transactionCode, originatingURL) {
          var localTime = new Date().toISOString().split('.')[0] + 'Z';
          var TIPData = { currentTime: localTime };

          if (transactionCode) {
            TIPData.transactionCode = transactionCode;
          }

          if (originatingURL) {
            TIPData.originatingURL = originatingURL;
          }

          if ($rootScope.selectPolicy) {
            TIPData.memberId =
              $rootScope.selectedPolicy.alphaPrefix +
              $rootScope.selectedPolicy.externalId;
            TIPData.lobCode = $rootScope.selectedPolicy.lobCode;
            TIPData.groupId = $rootScope.selectedPolicy.groupNumber;
            TIPData.sourceSystem = $rootScope.selectedPolicy.sourceSystem;
          } else {
            TIPData.error = 'No selected policy';
          }

          return TIPData;
        };

        /**
         *
         * @memberof MainController
         * @method selectsPlan
         *
         */
        $rootScope.selectsPlan = function () {
          $rootScope.$emit('selectsPlan');
        };

        /**
         * ($rootScope) Returns is a basic navbar is present to toggle the margin-top on the ng-view.
         *
         * @memberof MainController
         * @method hasBasicNavbar
         */
        $rootScope.hasBasicNavbar = function () {
          var basicNavbar = angular.element('.basic-navbar');
          return basicNavbar.length > 0;
        };

        /**
         * ($rootScope) Loads an app view.
         *
         * @memberof MainController
         * @method gotoView
         * @param  {String} url The view URL
         */
        $rootScope.gotoView = function (url) {
          if ($rootScope.closePolicySelect) {
            $rootScope.closePolicySelect();
          }

          if (url === '/logout') {
            return alertService
              .showAlert(
                $rootScope.loc.LOG_OUT_CONFIRM,
                null,
                { title: $rootScope.loc.LOG_OUT, color: 'red' },
                { title: $rootScope.loc.CANCEL }
              )
              .then(function () {
                $rootScope.logOut();
              });
          }
          $location.url(url);
        };

        /**
         * ($rootScope) Enters the payment flow, sets a variable in the Payment Flow Factory.
         *
         * @memberof MainController
         * @method enterPaymentFlow
         * @param  {String} desiredPaymentFlow Whether the user wants to setup a OTP or AutoPay
         */
        $rootScope.enterPaymentFlow = function (desiredPaymentFlow) {
          PaymentFlowFactory.setPaymentFlow(desiredPaymentFlow);

          if (desiredPaymentFlow === 'autopay-no-balance') {
            $location.url('/edit-autopay-flow/method');
          }
          if (
            desiredPaymentFlow === 'otp' ||
            desiredPaymentFlow === 'autopay'
          ) {
            $location.url('/payment/method');
          }
        };

        /**
         * ($rootScope) Passthrough to the cordovaService's openInBrowser function.
         *
         * @memberof MainController
         * @method openInBrowser
         * @param  {String} url       The URL to open.
         * @param  {String} [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object} [options] cordova-plugin-inappbrower options.
         */
        $rootScope.openInBrowser = function (url, target, options) {
          cordovaService.openInBrowser(url, target, options);
        };

        /* SSO option 1
        /**
         * ($rootScope) Passthrough to the cordovaService's openInBrowser function to handle Authenticated and/or SSO calls.
         *
         * @memberof MainController
         * @method openInBrowser
         * @param  {String} url       The URL to open or "sso:{vendor}" (i.e. "sso:vitals").
         * @param  {String} [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object} [options] cordova-plugin-inappbrower options.
         */
        $rootScope.openInSecureBrowser = function (url, target, options) {
          cordovaService.openInBrowser(url, target, options, true);
          loginService.getUserId().then(function (userId) {
            return $http.post(config.apiUrl + '/data/logging', {
              memberId: userId,
              url: url,
            });
          });
        };

        /**
         * ($rootScope) Passthrough to the cordovaService's openInBrowser function to handle SSO calls.
         *
         * @memberof MainController
         * @method openInBrowser
         * @param  {String} url       The URL to open.
         * @param  {String} [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object} [options] cordova-plugin-inappbrower options.
         *
        $rootScope.openSSOInBrowser = function(url, target, options) {
            var credentials = [];
            credentials.push(loginService.getEncryptedCredentials($rootScope.userNameIn, $rootScope.passwordIn));
            cordovaService.openInBrowser(url, target, options, credentials);
        };*/

        /**
         * ($rootScope) Returns the current view URL.
         *
         * @memberof MainController
         * @method getViewUrl
         * @return {String} The current view URL
         */
        $rootScope.getViewUrl = function () {
          return $location.url();
        };

        /**
         * ($rootScope) Sets the application language.
         *
         * @memberof MainController
         * @method setLanguage
         * @param  {String} [lang] i18n language code
         * @return {Promise} A promise that resolves to function(language)
         */
        $rootScope.setLanguage = function (lang) {
          return languageService.setLanguage(lang).then(function (language) {
            $rootScope.language = language;
            return language;
          });
        };

        /**
         * ($rootScope) Retrieves the locale from the server.
         *
         * @memberof MainController
         * @method getLocale
         */
        $rootScope.getLocale = function () {
          return languageService
            .getLocale($rootScope.language)
            .then(function (locale) {
              $rootScope.loc = locale;
              $rootScope.$emit('localeRetrieved');
              return locale;
            });
        };

        $rootScope.$on('pageNeedsLocale', $rootScope.getLocale);

        $rootScope.billingTrackStates = function (step, billingInfo) {
          var userData = PaymentFlowFactory.getUserSetData();
          var billingMethod = userData.billingMethod;
          var trackingDetails = {};
          var pageName = 'billing' + step[0].toUpperCase() + step.slice(1);

          if (billingInfo && billingInfo.currentInvoice && userData) {
            var frequency =
              PaymentFlowFactory.getPaymentFlow() || userData.paymentFrequency;
            var pastDue = billingInfo.currentInvoice.balanceForwardAmount;

            if (billingInfo.paymentOverdue && pastDue == 0) {
              pastDue = billingInfo.currentInvoice.totalDueAmount;
            }

            if (frequency) {
              frequency = /auto/.test(frequency) ? 'autopay' : 'onetime';
            }

            if (!billingMethod && frequency == 'onetime') {
              billingMethod = billingInfo.isMedicare ? 'postal' : 'email';
            }

            setPropertyValue(
              trackingDetails,
              'isMedicare',
              billingInfo.isMedicare
            );
            setPropertyValue(trackingDetails, 'billingMethod', billingMethod);
            setPropertyValue(
              trackingDetails,
              'paymentMethod',
              userData.paymentMethod
            );
            setPropertyValue(
              trackingDetails,
              'amount',
              userData.paymentAmount,
              true
            );
            setPropertyValue(
              trackingDetails,
              'currentAmountDue',
              billingInfo.currentInvoice.billedAmount,
              true
            );
            setPropertyValue(
              trackingDetails,
              'balance',
              billingInfo.currentInvoice.totalDueAmount || '0',
              true
            );
            setPropertyValue(trackingDetails, 'pastDue', pastDue, true);
            setPropertyValue(
              trackingDetails,
              'frequency',
              billingInfo.autoPay ? 'autopay' : frequency
            );
            setPropertyValue(
              trackingDetails,
              'misc',
              billingInfo.processingPay ? 'processing' : false
            );

            adobeService.trackState(
              pageName,
              analyticConstants.BILLING_SECTION,
              trackingDetails
            );

            if (pageName == 'billingConfirmation') {
              adobeService.trackAction(
                pageName,
                analyticConstants.BILLING_SECTION,
                trackingDetails
              ); // custom metrics requires action
            }
          } else {
            console.warn(
              'Required data not available in billingTrackStates for page:' +
                pageName
            );
          }
        };

        $rootScope.healthNavTrackActions = function (
          type,
          transparencyInfo,
          section
        ) {
          healthNavTracking(true, type, transparencyInfo, section);
        };

        $rootScope.healthNavTrackStates = function (
          type,
          transparencyInfo,
          section
        ) {
          healthNavTracking(false, type, transparencyInfo, section);
        };

        $rootScope.healthNavTrackToggleActions = function (
          prefix,
          name,
          toggle
        ) {
          $rootScope.healthNavTrackActions(0, {
            title: prefix + ': ' + name + ':' + (toggle ? 'open' : 'close'),
          });
        };

        function healthNavTracking(isAction, type, transparencyInfo, section) {
          var userData = TransparencyFactory.getUserSetData();
          var trackingDetails = {};
          var pageName = 'provider search: ';
          var filters = {};

          section = section || analyticConstants.HEALTHNAV_SECTION;

          if (transparencyInfo && userData) {
            // searchTerm / searchCategory / pageName properties
            var searchTerm;
            var searchCategory = $location.search().searchTerm;

            switch (type) {
              case 0:
                searchTerm = transparencyInfo.searchTerm;
                pageName += transparencyInfo.title;
                break;
              case 1:
                searchTerm = userData.resultsTerm;
                pageName += 'search results: ' + searchTerm;
                setPropertyValue(
                  trackingDetails,
                  'providerResultsPage',
                  transparencyInfo.page || 1
                );
                break;
              case 2:
                searchTerm = userData.resultsDetailsTerm;
                pageName += 'profile: ' + searchTerm;
                break;
              case 3:
                searchTerm = transparencyInfo.searchTerm;
                pageName += 'search results: ' + searchTerm;
                setPropertyValue(
                  trackingDetails,
                  'providerEmptySearchTerm',
                  searchTerm
                );
                break;
              case 4:
                searchTerm = transparencyInfo.searchTerm;
                pageName += 'guided search: ' + searchTerm;
                break;
            }

            // create comma delimitted filter string
            setPropertyValue(filters, 'radius', userData.distance);
            setPropertyValue(
              filters,
              'zipCode',
              userData.city ? userData.city.zip : ''
            );
            setPropertyValue(
              filters,
              'professional_gender',
              userData.filterGender
            );
            setPropertyValue(
              filters,
              'field_specialty_ids',
              userData.filterSpecialty
            );
            setPropertyValue(
              filters,
              'smartShopperOnly',
              userData.smartShopperFilter
            );

            if (userData.filterTier) {
              setPropertyValue(
                filters,
                userData.filterTier.type,
                userData.filterTier.value
              );
            }

            filters = JSON.stringify(filters)
              .replace(/"/g, '')
              .substr(1)
              .slice(0, -1);

            setPropertyValue(trackingDetails, 'providerFilters', filters);
            setPropertyValue(trackingDetails, 'providerSearchTerm', searchTerm);
            setPropertyValue(
              trackingDetails,
              'providerSearchCategory',
              searchCategory
            );
            setPropertyValue(
              trackingDetails,
              'geoLocation',
              $rootScope.vitalsGeoCoords
            );
            setPropertyValue(
              trackingDetails,
              'geoLocationAllowed',
              userData.geoLocationStatus
            );
            setPropertyValue(
              trackingDetails,
              'providerView',
              $rootScope.openMapView ? 'map' : 'list'
            );

            if ($rootScope.selectedPlan) {
              setPropertyValue(
                trackingDetails,
                'providerNetworkId',
                $rootScope.selectedPlan.id
              );
              setPropertyValue(
                trackingDetails,
                'providerNetworkName',
                $rootScope.selectedPlan.name
              );
            }

            if (isAction) {
              adobeService.trackAction(
                pageName.toLowerCase(),
                section,
                trackingDetails
              );
            } else {
              adobeService.trackState(
                pageName.toLowerCase(),
                section,
                trackingDetails
              );
            }
          } else {
            console.warn(
              'Required data not available in transparencyTracking for page:' +
                pageName
            );
          }
        }

        function setPropertyValue(
          details,
          propertyName,
          propertyValue,
          isNumber
        ) {
          if (propertyValue || propertyValue === false) {
            if (isNumber) {
              propertyValue = parseFloat(propertyValue.toString())
                .toFixed(2)
                .toString();
            }
            details[propertyName] = propertyValue;
          }
        }

        /**
         * ($rootScope) Retrieves the internal locale for offline use.
         *
         * @memberof MainController
         * @method getInternalLocale
         */
        $rootScope.getInternalLocale = function () {
          $rootScope.loc = languageService.getInternalLocale(
            $rootScope.language
          );
          return $rootScope.loc;
        };

        /**
         * ($rootScope) Checks to make sure language is set and retrieves it and locale if not.
         *
         * @memberof MainController
         * @method verifyLocaleRetrieved
         */
        $rootScope.verifyLocaleRetrieved = function () {
          if (!$rootScope.language) {
            $rootScope.setLanguage().then(function () {
              $rootScope.getLocale();
            });
          }
        };

        /**
         * ($rootScope) Logs a member out of the app by removing their stored authorization.
         *
         * @memberof MainController
         * @method logOut
         */
        $rootScope.logOut = function () {
          $rootScope.checkNetwork();
          loginService
            .getAuthorization()
            .then(function (authObj) {
              if (authObj && Object.keys(authObj).length) {
                if (authObj.rememberUserId === true) {
                  return $q.resolve(true);
                }
                return loginService.setAuthorization({});
              } else {
                return $q.resolve(true);
              }
            })
            .then(function () {
              // defined in AngularJS-Services-Cloud
              var cache = CacheFactory.get('defaultCache');
              loginService.setUserLoggedOutFlag(true);
              if (cache) {
                CacheFactory.clearAll();
              }
              $rootScope.loggedIn = false;
              $rootScope.selectedPolicy = null;
              $rootScope.$emit('LOGOUT');

              if ($rootScope.offline && !$rootScope.online) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;
                angular.element('.page-no-connection').hide();
                $rootScope.gotoView('/network-landing-local');
              } else {
                return cordovaService.verifyMinAppVersion().then(function () {
                  $rootScope.gotoView('/login');
                  return true;
                });
              }
            });
        };

        /**
         * Retrieves the navbar component from the component service.
         *
         * @memberof MainController
         * @method getNavbar
         */
        $scope.getNavbar = function () {
          $scope.navbarHtml = '<navbar-loading></navbar-loading>';

          if (!!$rootScope.loggedIn === false) {
            return $q.reject('User is not logged in');
          }
          return componentService
            .getComponent(
              componentService.devices.MOBILE,
              'navbar',
              $rootScope.language || 'en',
              {
                policyIndex: $rootScope.policyIndex,
                deviceType: $rootScope.device,
                planId: $rootScope.selectedPolicy.id,
                vitalsMatchedPlanName:
                  $rootScope.selectedPolicy.vitalsMatchedPlanName,
                unreadMessages: $rootScope.unreadMessages,
              }
            )
            .then(function (navbarHtml) {
              $scope.navbarHtml = navbarHtml;
              return navbarHtml;
            });
        };

        /**
         * Retrieves the member's policies from the data service.
         *
         * @memberof MainController
         * @method getSignature
         */
        $scope.getSignature = function () {
          return restService
            .getData('signature', $rootScope.language || 'en')
            .then(function (indicators) {
              $rootScope.signature = new Map(indicators);
              console.log($rootScope.policyIndex);
              console.log($rootScope.signature.get($rootScope.policyIndex));
            })
            .catch(function (err) {
              console.log(err);
            });
        };

        /**
         * @description Retrieves the member's policies from the data service.
         * @memberof MainController
         * @method getPolicies
         */
        $scope.getPolicies = function () {
          var deferred = $q.defer();

          restService.getData('policies', $rootScope.language || 'en').then(
            function (policies) {
              $rootScope.policies = policies;
              for (var i = 0; i < policies.length; i++) {
                if (policies[i].defaultPolicy) {
                  $rootScope.selectPolicy(i);
                  break;
                }
              }

              $scope.getAnalyticsInfo().then(
                function () {
                  deferred.resolve(policies);
                },
                function () {
                  deferred.resolve(policies);
                }
              );
            },
            function (err) {
              deferred.reject(err);
            }
          );

          return deferred.promise;
        };

        /**
         * Retrieves the analytics info from the data service.
         *
         * @memberof MainController
         * @method getAnalyticsInfo
         */
        $scope.getAnalyticsInfo = function () {
          var deferred = $q.defer();

          restService
            .getData('analytics-info', $rootScope.language || 'en')
            .then(
              function (analyticsInfo) {
                $rootScope.analyticsInfo = analyticsInfo;
                deferred.resolve(analyticsInfo);
              },
              function (err) {
                deferred.reject(err);
              }
            );

          return deferred.promise;
        };

        /**
         * Returns whether or not the background image should display.
         *
         * @memberof MainController
         * @method showBackgroundImage
         */
        $scope.showBackgroundImage = function () {
          var activeUrls = [
            '/',
            '/home',
            '/login',
            '/network-landing-local',
            '/upgrade',
          ];
          var location = $location.url();

          for (var i = 0; i < activeUrls.length; i++) {
            if (location === activeUrls[i]) {
              return true;
            }
          }

          return false;
        };

        /** Blur the activeElement
         *
         * @method hideKeybaord
         */
        $rootScope.hideKeyboard = function () {
          document.activeElement.blur();
        };

        /**
         * (eventListener) listens for device to be ready.
         *
         * @memberof MainController
         * @callback onDeviceReady
         * @event deviceready
         */
        $rootScope.checkNetwork = function () {
          return $q(function (resolve) {
            document.addEventListener(
              'deviceready',
              checkNetworkConnection,
              false
            );

            function checkNetworkConnection() {
              if (navigator.connection.type !== Connection.NONE) {
                $rootScope.offline = false;
                $rootScope.online = true;
              } else {
                $rootScope.offline = true;
                $rootScope.online = false;
              }
              resolve({
                offline: $rootScope.offline,
                online: $rootScope.online,
              });
            }
          });
        };

        /**
         * (eventListener) listens for Internet and data connection.
         *
         * @memberof onDeviceReady
         * @event offline
         */
        document.addEventListener('deviceready', onDeviceReady, false);
        function onDeviceReady() {
          document.addEventListener('offline', onOffline, false);
          function onOffline() {
            if (!$rootScope.loc || Object.keys($rootScope.loc).length === 0) {
              var locale = languageService.getInternalLocale();
              navigator.notification.alert(
                locale.NETWORK_ERROR_MESSAGE,
                onDismissed,
                locale.NETWORK_ERROR,
                locale.OK
              );
            } else {
              navigator.notification.alert(
                $rootScope.loc.NETWORK_ERROR_MESSAGE,
                onDismissed,
                $rootScope.loc.NETWORK_ERROR,
                $rootScope.loc.OK
              );
            }
            function onDismissed() {
              angular.element('.page-no-connection').show();
              angular.element('.navbar-menu-list').css('height', 54 + '%');
              angular.element('.login-bottom-bar').css('margin-bottom', 28);
              angular.element('.navbar-menu-bottom').css('margin-bottom', 28);
            }

            navigator.notification.alert(
              $rootScope.loc.NETWORK_ERROR_MESSAGE,
              onDismissed,
              $rootScope.loc.NETWORK_ERROR,
              $rootScope.loc.OK
            );
          }

          document.addEventListener('online', onOnline, false);

          function onOnline() {
            var networkState = navigator.connection.type;
            if (networkState !== Connection.NONE) {
              angular.element('.page-no-connection').hide();
              angular.element('.login-bottom-bar').css('margin-bottom', 0);
              angular.element('.navbar-menu-bottom').css('margin-bottom', 0);
            }
          }
        }

        /**
         * (eventListener) listens for Android back button.
         *
         * @memberof onDeviceReady
         * @event backbutton
         * @param browserEvent
         **/
        document.addEventListener(
          'deviceready',
          function () {
            document.addEventListener(
              'backbutton',
              function (browserEvent) {
                var currentLocation = $location.path();
                browserEvent.preventDefault();
                $rootScope.blurContent = false;

                if (
                  angular.element('.alert-modal').is(':visible') ||
                  angular.element('.help-modal').is(':visible') ||
                  angular.element('.terms-modal').is(':visible') ||
                  angular.element('.quick-alert-modal').is(':visible') ||
                  angular.element('.full-screen-modal').is(':visible')
                ) {
                  browserEvent.preventDefault();
                  angular.element('.alert-modal').modal('hide');
                  angular.element('.help-modal').modal('hide');
                  angular.element('.terms-modal').modal('hide');
                  angular.element('.full-screen-modal').modal('hide');
                  angular.element('.quick-alert-modal').modal('hide');
                  angular.element('#app-container').removeClass('no-scroll');
                  angular.element('.main-wrapper').removeClass('blur');
                  angular.element('.policy-select').removeClass('blur');
                  angular.element('.claims-container').removeClass('blur');
                  angular.element('.modal-backdrop.in').remove();
                  angular.element('.navbar').toggleClass('blur', false);
                  $rootScope.blurContent = false;
                  browserEvent.preventDefault();
                } else if (
                  currentLocation === '/home' ||
                  currentLocation === '/login'
                ) {
                  browserEvent.preventDefault();
                  angular.element('.policy-select').removeClass('blur');
                  navigator.app.exitApp();
                } else if (
                  $rootScope.sentMessage ||
                  $rootScope.cliamSendMessage
                ) {
                  browserEvent.preventDefault();
                  angular.element('.policy-select').removeClass('blur');
                  history.go(-3);
                  navigator.app.backHistory();
                  $rootScope.sentMessage = false;
                  $rootScope.cliamSendMessage = false;
                } else if (currentLocation === '/network-landing-local') {
                  browserEvent.preventDefault();
                } else {
                  browserEvent.preventDefault();
                  angular.element('.policy-select').removeClass('blur');
                  navigator.app.backHistory();
                }
              },
              false
            );
          },
          false
        );
      },
    ]);
})();

/**
 * Controller for the network Landing Local page view.
 *
 * @namespace Controllers
 * @class NetworkLandingLocalController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.networkLandingLocal', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('NetworkLandingLocalController', [
            '$scope',
            '$rootScope',
            '$window',
            function($scope, $rootScope, $window) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;

                document.addEventListener("deviceready", onDeviceReady, false);
                function onDeviceReady() {

                  document.addEventListener("online", onOnline, false);

                  function onOnline(){
                      angular.element('.page-no-connection').hide();
                      angular.element('.login-bottom-bar').css('margin-bottom', 0);
                      angular.element('.navbar-menu-bottom').css('margin-bottom', 0);
                    $window.history.go(-2);
                  }
                }
            }
        ]);
}());

/**
 * @description Controller for payment confirmation in payment flow
 * @namespace Controllers
 * @class PaymentConfirmationController
 */
(function() {
  angular
    .module('blueconnect.mobile.controllers.payment.confirmation', [])
    .controller('PaymentConfirmationController', [
      '$rootScope',
      '$scope',
      '$window',
      'adobeService',
      'pageService',
      'paymentFlowFactory',
      function($rootScope, $scope, $window, adobeService, pageService, paymentFlowFactory) {
        var vm = this;

        $rootScope.showNav = true;
        $rootScope.showPolicySelect = false;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
        $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_CONFIRMATION;

        $scope.getPage = getPage;
        $scope.getPage();
        $scope.loc = $rootScope.loc;

         /**
         * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
         *
         * @memberof PaymentConfirmationController
         * @method getPage
         */
        function getPage() {
          /**
          * The directive HTML for the page.
          *
          * @memberof PaymentConfirmationController
          * @member {String} pageHtml
          */
          $scope.pageHtml = '';

          $rootScope.$emit('pageLoading');

          var query = {
            policyIndex: $rootScope.policyIndex,
            policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
            policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
            policyExternalId : $rootScope.selectedPolicy.externalId
          };

          pageService
            .getPage(
              pageService.devices.MOBILE,
              'payment-confirmation',
              $rootScope.language,
              query
            )
            .then(function(pageHtml) {
              $scope.pageHtml = pageHtml;
              $rootScope.$emit('pageLoaded');
            })
            .catch(function(error) {
              $rootScope.$emit('pageLoaded');
              $rootScope.showNetworkErrorAlert();
            });
        }
      }
    ]);

})();

/**
 * Controller for the payment details page view.
 *
 * @namespace Controllers
 * @class PaymentDetailsController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.payment.details', [

  ])
  .controller('PaymentDetailsController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_DETAILS;

      $scope.getPage = getPage;
      $scope.getPage();
      $scope.loc = $rootScope.loc;

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof PaymentDetailsController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof PaymentDetailsController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };

        $rootScope.$emit('pageLoading');

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'payment-details',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.controllers.paymentFlow', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('PaymentFlowController', [
      '$http',
      '$location',
      '$rootScope',
      '$routeParams',
      '$scope',
      '$timeout',
      '$window',
      'config',
      'restService',
      'PaymentFlowFactory',
      function($http, $location, $rootScope, $routeParams, $scope, $timeout, $window, config, restService, PaymentFlowFactory) {
        // controls the current loaded page
        $scope.step = $routeParams.step;

        // hide the navbar
        $rootScope.showNav = false;

        // hide the policy select dropdown
        $rootScope.showPolicySelect = false;

        // default the loc object to avoid ReferenceErrors later
        $scope.loc = $rootScope.loc || {};

        // default the navbar details to avoid unref
        $scope.navbarDetails = {};

        // show the back button
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

        $scope.userData = PaymentFlowFactory.getUserSetData();

        // loading / processing
        $scope.paymentInProgress = false;

        var routingPages = [
          '/billing',
          '/payment/method',
          '/payment/details',
          '/payment/review',
          '/payment/confirmation'
        ];

        // if the user loads the review page but already has a confirmation code
        // android fix for users hitting android back button from confirmation
        if ($scope.step === 'review' && PaymentFlowFactory.getConfirmationCode()) {
          PaymentFlowFactory.reset();
          $rootScope.gotoView('/billing');
        }

        // confirmation page-specific logic
        if ($scope.step === 'confirmation') {
          $rootScope.showNav = true;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          $rootScope.pageTitle = PaymentFlowFactory.getUserSetData().paymentErrorCode > 100 ? $scope.loc.BP_UNSUCCESSFUL : $scope.loc.BP_HEADER_PAYMENT_CONFIRMATION;

          // hitting back from exit of payment flow to another page after data has been cleared
          if (PaymentFlowFactory.getPaymentFrequency() === null) {
            $rootScope.gotoView('/billing');
          }

        }
        // all other pages (method, details, review)
        else {
          $scope.navbarDetails = {
            leftNavButton: {
              icon: 'back'
            },
            onLeftClick: goToPreviousPage,
            title: getNavbarHeader(),
            openClearCardModal: null,
            cancelModalObj: {
              title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
              body: $scope.loc.BP_EDIT_PAYMENT_REENTER_DETAILS,
              cancelButton: {
                title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
              },
              confirmButton: {
                color: 'blue',
                title: $scope.loc.BP_EDIT_PAYMENT_INFO
              }
            },
            // passed into cancel modal for the nav bar back button
            confirmCancelModal: function() {
              PaymentFlowFactory.resetCreditCardDetails();
              $rootScope.gotoView('/payment/details');
            }
          };

        }
        if (!$rootScope.loc || !Object.keys($scope.loc).length) {
          $rootScope.loc = {};
          $rootScope.$emit('pageNeedsLocale');
          $rootScope.$on('localeRetrieved', function(ev, data) {
            $scope.loc = $rootScope.loc;
            $scope.navbarDetails.title = getNavbarHeader()
          });
        }

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        // start loading the page
        $rootScope.$emit('pageLoading');
        restService
          .getPageData(
            restService.devices.MOBILE,
            'payment-flow',
            $rootScope.language,
            query
          )
          .then(function(paymentFlowResponse) {
            $rootScope.$emit('pageLoaded');
            $scope.billingInfo = paymentFlowResponse;
            $rootScope.billingTrackStates($scope.step, $scope.billingInfo);
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });

        $scope.methodValidateForm = function(formObj) {
          // if billing method is present, will not be present once
          // user has already signed up for paperless billing
          if (formObj.paymentFlowBillingMethodForm) {
            formObj.paymentFlowBillingMethodForm.$setDirty();

            // user has selected email billing (paperless)
            if (formObj.paymentFlowBillingMethodForm.memberEmail) {
              formObj.paymentFlowBillingMethodForm.memberEmail.$setDirty();
            }

            // user has selected postal billing
            if (formObj.paymentFlowBillingMethodForm.billingMethodSelected.$modelValue === 'postal') {
              [
                formObj.paymentFlowBillingMethodForm.streetAddress,
                formObj.paymentFlowBillingMethodForm.city,
                formObj.paymentFlowBillingMethodForm.state,
                formObj.paymentFlowBillingMethodForm.zipcode
              ].map(function(input) {
                input.$setDirty();
              });
            }
          }

          // paperless agreement input logic
          if (formObj.paymentFlowPaperlessAgreement && formObj.paymentFlowPaperlessAgreement.acceptedAgreement) {
            formObj.paymentFlowPaperlessAgreement.acceptedAgreement.$setDirty();
          }

          formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$setDirty();

          // payment amount input logic
          if (formObj.paymentFlowPaymentAmountForm) {
            formObj.paymentFlowPaymentAmountForm.desiredPaymentAmount.$setDirty();
          }

          // payment frequency input logic
          if (formObj.paymentFlowPaymentFrequencyForm) {
            formObj.paymentFlowPaymentFrequencyForm.frequencySelected.$setDirty();
          }

          // if the form is invalid, do not proceed
          if (formObj.$invalid) {
            //console.log(formObj);
            return console.warn('form is invalid, cannot proceed');
          }

          methodFormSetters(formObj);

          $rootScope.gotoView('/payment/details');
          $scope.navbarDetails.title = getNavbarHeader();
        };

        function methodFormSetters(formObj) {
          // set the payment amount
          if (formObj.paymentFlowPaymentAmountForm) {
            PaymentFlowFactory
              .setPaymentAmount(formObj.paymentFlowPaymentAmountForm.desiredPaymentAmount.$modelValue);
          }

          // set the payment frequency, also the flow
          if (formObj.paymentFlowPaymentFrequencyForm) {
            PaymentFlowFactory.setPaymentFrequency(formObj.paymentFlowPaymentFrequencyForm.frequencySelected.$modelValue);
            PaymentFlowFactory.setPaymentFlow(formObj.paymentFlowPaymentFrequencyForm.frequencySelected.$modelValue);
          }


          // error checking for if ng-if removed this form
          if (formObj.paymentFlowBillingMethodForm) {
            // set the billing method
            PaymentFlowFactory
              .setBillingMethod(formObj.paymentFlowBillingMethodForm.billingMethodSelected.$modelValue);
          } else {
              //if medicare then we wont have a paymentFlowBillingMethodForm
              PaymentFlowFactory.setBillingMethod('postal');
          }

          // set the payment method
          PaymentFlowFactory
            .setPaymentMethod(formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$modelValue);

        }

        $scope.detailsValidateForm = function(detailsFormObj) {
          var bankDraftForm = detailsFormObj.bankDraftForm;
          var creditCardDetailsForm = detailsFormObj.creditCardDetailsForm;

          if (bankDraftForm) {
            [
              bankDraftForm.accountOwnersName,
              bankDraftForm.bankRoutingNumber,
              bankDraftForm.accountType,
              bankDraftForm.bankAccountNumber,
              bankDraftForm.confirmAccountNumber,
            ]
              .forEach(function(ctrl) {
                if (!ctrl) {
                  return console.warn('That control does not exist!');
                }
                ctrl.$setDirty();
              });
            if (detailsFormObj.$valid) {
              $rootScope.gotoView('/payment/review');
            } else {
              detailsFormObj.$setDirty();
            }
          }
          if (creditCardDetailsForm) {
            [
              creditCardDetailsForm.firstName,
              creditCardDetailsForm.creditCardNumber,
              creditCardDetailsForm.month,
              creditCardDetailsForm.year,
              creditCardDetailsForm.cvn,
            ]
              .forEach(function(ctrl) {
                if (!ctrl) {
                  return console.warn('That control does not exist!');
                }
                ctrl.$setDirty();
              });

            var userPaymentData = PaymentFlowFactory.getUserSetData();
            var userIdentity = $scope.billingInfo.userIdentity;
            var data = {
              account: {
                token: $scope.billingInfo.token
              },
              paymentFrequency: userPaymentData.paymentFrequency === 'autopay' ? 'RCC' : 'DIRECTBILL',
              authAmount: 2, // this does not matter because they are not using this in the hashed signature
              firstName: userIdentity.givenName,
              lastName: userIdentity.familyName
            };
            if (userIdentity.email) {
              data.emailAddress = userIdentity.email;
            }
            //console.log('data:: ' + JSON.stringify(data));
            var sig = $http.post(config.apiUrl + '/signature', data)
              .then(function(response) {
                //console.log('signature response:: ' + JSON.stringify(response));
                userPaymentData.signature = response.data.signature;
                userPaymentData.merchantReferenceCode = response.data.merchantReferenceCode;
                userPaymentData.enrollmentProcessNumber = response.data.enrollmentProcessNumber;
                if (detailsFormObj.$valid) {
                  $rootScope.gotoView('/payment/review');
                }
              })
              .catch(function(error) {
                detailsFormObj.paymentError.$setDirty();
                $scope.$digest();
                //console.log('Error getting signature', JSON.stringify(error));
              });
          }

          detailsFormObj.paymentFlowTermsConditions.acceptedAgreement.$setDirty();

        };

        /**
         * @description This posts to the endpoint in the Node billing service that
         */
        $scope.reviewValidateForm = function(paymentFlowReviewForm) {
          var userPaymentData = PaymentFlowFactory.getUserSetData();
          var userIdentity = $scope.billingInfo.userIdentity;
          var paymentError = false;
          $scope.paymentInProgress = true;
          //console.log('userPaymentData::: ' + JSON.stringify(userPaymentData));

          if (userPaymentData.paymentMethod === 'bankdraft') {
            var data = {
              account: {
                token: $scope.billingInfo.token
              },
              paymentAmount: PaymentFlowFactory.getPaymentAmount().toString(),
              accountHolderName: userPaymentData.accountHolderName,
              paymentFrequency: userPaymentData.paymentFrequency === 'autopay' ? 'RBD' : 'DIRECTBILL',
              billingMethod: userPaymentData.billingMethod && userPaymentData.billingMethod.toUpperCase(),
              preferences: {
                mailingAddress: userPaymentData.preferences.mailingAddress,
                priorBillingNotifPrefCode: $scope.billingInfo.preferences.priorBillingNotifPrefCode,
                payment: {
                  bankDraftDetails: {
                    bankName: userPaymentData.bankName,
                    accountNumber: userPaymentData.accountNumber,
                    routingNumber: userPaymentData.routingNumber,
                    accountType: userPaymentData.accountType,
                  }
                }
              },
              TIPData: $rootScope.getTIPData('OneTimeBankDraft', '/bankdraft')
            };
            if (userPaymentData.preferences.emailAddress) {
              data.preferences.emailAddress = userPaymentData.preferences.emailAddress;
            }
            $http.post(config.apiUrl + '/bankdraft', data)
              .then(function(response) {
                $scope.paymentInProgress = false;
                if (response.data.confirmationCode == null) {
                  paymentFlowReviewForm.$setDirty();
                  $scope.$digest();
                } else {
                  userPaymentData.paymentErrorCode = 100;
                  userPaymentData.successConfirmationCode = response.data.confirmationCode;
                  $rootScope.gotoView('/payment/confirmation');
                }
              })
              .catch(function() {
                //console.warn('Error posting payment', error)
                paymentFlowReviewForm.$setDirty();
                $scope.paymentInProgress = false;
                $scope.$digest();
                paymentError = true;
              });
          } else {
            //It is credit card
            //console.log('userpayment::: ' + JSON.stringify(userPaymentData));
            var cardRequest = {
              environment: config.env == 'PROD' ? config.env.toLowerCase() : 'test',
              merchantId: config.merchantId,
              transaction: {
                merchantReferenceCode: userPaymentData.merchantReferenceCode.toString()
              },
              card: {
                accountNumber: userPaymentData.creditCardDetails.lastFour.toString(),
                expirationMonth: userPaymentData.creditCardDetails.month.toString(),
                expirationYear: '20' + userPaymentData.creditCardDetails.year.toString(),
                cvNumber: userPaymentData.creditCardDetails.cvn.toString()
              },
              billing: {
                firstName: userIdentity.givenName,
                lastName: userIdentity.familyName,
                postalCode: "94043"
              },
              signature: userPaymentData.signature
            };

            var cc = cybersource
              .processCard(
                cardRequest,
                function(result) {
                  paymentError = false;
                  doStk2(result);
                },
                function() {
                  paymentFlowReviewForm.$setDirty();
                  $scope.paymentInProgress = false;
                  $scope.$digest();
                }
              );

            // eslint-disable-next-line no-inner-declarations
            function doStk2(result) {
              var data = {
                account: {
                  token: $scope.billingInfo.token
                },
                paymentFrequency: userPaymentData.paymentFrequency === 'autopay' ? 'RCC' : 'DIRECTBILL',
                paymentAmount: Number(PaymentFlowFactory.getPaymentAmount()),
                merchantReferenceCode: userPaymentData.merchantReferenceCode,
                encryptedPaymentData: result.encryptedPaymentData,
                enrollmentProcessNumber: userPaymentData.enrollmentProcessNumber,
                ccFirstName: userPaymentData.creditCardDetails.firstName,
                ccLastName: userPaymentData.creditCardDetails.lastName,

                accountHolderName: userPaymentData.accountHolderName,
                billingMethod: userPaymentData.billingMethod && userPaymentData.billingMethod.toUpperCase(),
                preferences: {
                  mailingAddress: userPaymentData.preferences.mailingAddress,
                  priorBillingNotifPrefCode: $scope.billingInfo.preferences.priorBillingNotifPrefCode,
                  payment: {
                    bankDraftDetails: {
                      bankName: null,
                      accountNumber: null,
                      routingNumber: null,
                      accountType: null,
                      bankAccountHolderName: userPaymentData.accountHolderName ||
                      ( userPaymentData.creditCardDetails.firstName + ' ' + userPaymentData.creditCardDetails.lastName )
                    }
                  }
                },
                TIPData: $rootScope.getTIPData('OneTimeCreditCardPmt', '/sale')
              };

              if (userIdentity.email) {
                data.preferences.emailAddress= userIdentity.email;
              }

              // then do stk2
              $http
                .post(config.apiUrl + '/sale', data)
                .then(function(response) {
                  userPaymentData.paymentErrorCode = response.data.statusCode;
                  userPaymentData.successConfirmationCode = response.data.merchantReferenceCode;
                  $scope.paymentInProgress = false;
                  $rootScope.gotoView('/payment/confirmation');
                })
                .catch(function() {
                  paymentFlowReviewForm.$setDirty();
                  $scope.paymentInProgress = false;
                  $scope.$digest();
                });
            }
          }
        };

        //TODO rename function to something more apt
        $scope.confirmationValidateForm = function() {
          PaymentFlowFactory.reset();
          $rootScope.gotoView('/billing');
        };

        function goToPreviousPage() {
          if ($location.$$url === '/payment/review' && PaymentFlowFactory.getUserSetData().paymentMethod === 'creditcard') {
            return $scope.navbarDetails.openClearCardModal();
          }
          var paymentMethod = PaymentFlowFactory.getPaymentMethod();
          var currentViewIndex = routingPages.indexOf($location.$$url);
          var previousView = routingPages[currentViewIndex - 1];
          var nextView = routingPages[currentViewIndex + 1];
          if (paymentMethod === 'creditcard') {
            $rootScope.$emit('openPaymentFlowModal:previousPageCreditCardConfirm');
            $rootScope.gotoView(previousView);
          } else {
            $rootScope.gotoView(previousView);
          }
          // on exit of payment flow from method page
          if (previousView === routingPages[0]) {
            //console.log('resetting payment info');
            PaymentFlowFactory.reset();
          }
        }

        function getNavbarHeader() {
          if (!$rootScope.loc || !Object.keys($rootScope.loc).length) {
            return '';
          }
          var headers = {
            method: $rootScope.loc.BP_HEADER_PAYMENT_METHOD,
            details: $rootScope.loc.BP_HEADER_PAYMENT_DETAILS,
            review: $rootScope.loc.BP_HEADER_PAYMENT_REVIEW,
            confirmation: PaymentFlowFactory.getUserSetData().paymentErrorCode ? $rootScope.loc.BP_UNSUCCESSFUL : $rootScope.loc.BP_HEADER_PAYMENT_CONFIRMATION
          };
          return headers[$scope.step];
        }
      }])
})();
/**
 * Controller for the login page view.
 *
 * @namespace Controllers
 * @class LoginController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.payment.method', [

  ])
  .controller('PaymentMethodController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc ? $rootScope.loc.BP_HEADER_PAYMENT_METHOD : '';
      $scope.getPage = getPage;
      $scope.getPage();

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof HomeController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof HomeController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        $rootScope.$emit('pageLoading');

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'payment-method',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

/**
 * Controller for the payment details page view.
 *
 * @namespace Controllers
 * @class PaymentReviewController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.payment.review', [

  ])
  .controller('PaymentReviewController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_REVIEW;

      $scope.getPage = getPage;
      $scope.getPage();
      $scope.loc = $rootScope.loc;

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof PaymentReviewController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof PaymentReviewController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };

        $rootScope.$emit('pageLoading');

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'payment-review',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

/**
 * Controller for the managing the Member's dependent(s)' PCP
 *
 * @namespace Controllers
 * @class ManageDependentsPcpController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.pcp.ManageDependentsPcpController', [

  ])
    .controller('ManageDependentsPcpController', [
      '$scope',
      '$rootScope',
      '$window',
      'pageService',
      function($scope, $rootScope, $window, pageService) {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
        $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_REVIEW;

        getPage();
        $scope.loc = $rootScope.loc;

        /**
         * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
         *
         * @memberof ManageDependentsPcpController
         * @method getPage
         */
        function getPage() {
          /**
          * The directive HTML for the page.
          *
          * @memberof ManageDependentsPcpController
          * @member {String} pageHtml
          */
          $scope.pageHtml = '';

          $rootScope.showNav = true;
          $rootScope.showPolicySelect = false;
          $rootScope.pageTitle = $rootScope.loc.PCP_COMMERCIAL_MY_DEPENDENT_PCPS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

          $rootScope.$emit('pageLoading');

          var query = {
            policyIndex: $rootScope.policyIndex,
            policyEffectiveDate: $rootScope.selectedPolicy.effectiveDate,
            policyExpirationDate: $rootScope.selectedPolicy.expirationDate,
            policyExternalId: $rootScope.selectedPolicy.externalId
          };

          pageService
            .getPage(
              pageService.devices.MOBILE,
              'pcp-manage-dependents-pcp',
              $rootScope.language,
              query
            )
            .then(function(pageHtml) {
              $scope.pageHtml = pageHtml;
              $rootScope.$emit('pageLoaded');
            })
            .catch(function(error, status) {
              $rootScope.$emit('pageLoaded');
              $rootScope.showNetworkErrorAlert();
            });
        }

      }
    ]);
}());

/**
 * Controller for the application settings view
 *
 * @namespace Controllers
 * @class SettingsController
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.controllers.settings', ['bcbsnc.cloud.services.page'])
    .controller('SettingsController', [
      '$scope',
      '$rootScope',
      '$timeout',
      '$window',
      'pageService',
      'adobeService',
      'analyticConstants',
      function($scope, $rootScope, $timeout, $window, pageService, adobeService, analyticConstants) {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $scope.loc = $rootScope.loc;

        /**
         * Retrieves the page HTML from the page service. Called on view load.
         *
         * @memberof SettingsController
         * @method getPage
         */
        $scope.getPage = function() {
          /**
           * The directive HTML for the page.
           *
           * @memberof SettingsController
           * @member {String} pageHtml
           */
          $scope.pageHtml = '';

        if (!$rootScope.language) {
          $timeout($scope.getPage, 100);
          return;
        }


          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

          /**
           * For basicNavbar, we have to pass this function
           * to handle the left click
           */
          $scope.basicNavbarLeftClick = function() {
            $rootScope.fromBackButton = true;
            $rootScope.detailsFromBackButton = true;
            $window.history.back();
          };

          var pageName = 'Settings';

          $rootScope.$emit('pageLoading');
          pageService
            .getPage(
              pageService.devices.MOBILE,
              pageName,
              $rootScope.language,
              $rootScope.touchIdAvailable
                ? {
                    biometricType: $rootScope.touchIdAvailable,
                  }
                : {}
            )
            .then(function(pageHtml) {
              $rootScope.$emit('pageLoaded');
              $scope.pageHtml = pageHtml;
              adobeService.trackState('settings', analyticConstants.SETTINGS_SECTION);
            });
        };

        $rootScope.verifyLocaleRetrieved();
        $scope.getPage();
      },
    ]);
})();

/**
 * Controller for the setup page view.
 *
 * @namespace Controllers
 * @class SetupController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.setup', [
    'blueconnect.mobile.services.touchId',
    'blueconnect.mobile.services.androidFingerprintAuth'
  ])
  .controller('SetupController', [
    '$scope',
    '$rootScope',
    '$location',
    'cordovaService',
    'touchIdService',
    'androidFingerprintAuthService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, cordovaService, touchIdService, androidFingerprintAuthService, adobeService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      $scope.itemIndex = 0;

      // CRIT [runs in order to check which type of device you are on during setup]
      if (typeof cordova !== 'undefined') {
        document.addEventListener('deviceready', function() {
          cordovaService.checkDeviceType();
        }, false);
      }


      /**
       * Navigates to a setup card/item.
       *
       * @memberof SetupController
       * @method gotoItem
       * @param {Number} index The item to go to.
       */
      $scope.gotoItem = function(index) {
        if (index < 0) {
          index = 0;
        }
        if (index > 2) {
          index = 2;
        }

        if (index === 1 && !$scope.hasPresetSecurity()) {
          $scope.securitySetting = {
            high: true,
            medium: false,
            standard: false
          };
          $scope.trackSettingAction($scope.securitySetting);
          $scope.setLoginSettingsToLevel('high');
        }

        if (index === 1 && !$scope.securitySetting.standard || (typeof cordova !== 'undefined' && !$rootScope.touchIdAvailable) ) {
          if (index < $scope.itemIndex) {
            index = 0;
          }
          else {
            index = 2;
            $scope.trackSettingAction($scope.securitySetting);
            $scope.saveLoginSettings();
          }
        }
        else if (index === 2) {
          $scope.saveLoginSettings();
        }
        else if (index === 1) {
          $scope.trackSettingAction($scope.securitySetting);
        }

        $scope.itemIndex = index;
        var left = index * -100 + (index + 1) * 5;
        angular.element('.setup-carousel').animate({left: left + '%'}, 125);
      };

      /**
       * Sets security settings to custom.
       *
       * @memberof SetupController
       * @method selectCustomSecurity
       */
      $scope.selectCustomSecurity = function() {
        $scope.securitySetting = {
          high: false,
          medium: false,
          standard: false
        };

        $scope.gotoItem(1);
      };

      $scope.trackSettingAction = function(settings) {
        var action = null;
        Object.keys(settings).forEach(function(element){
          if (settings[element]) {
            action = 'settings:update:'+ element;
            adobeService.trackAction(action, analyticConstants.SETTINGS_SECTION);
          }
        });
      };

      /**
       * Gets the localized description text of the security level.
       *
       * @memberof SetupController
       * @method getCustomSecurityText
       */
      $scope.getCustomSecurityText = function() {
        if (!$scope.securitySetting) {
          return '';
        }

        if ($scope.securitySetting.high) {
          return $rootScope.loc.HIGH;
        }
        else if ($scope.securitySetting.medium) {
          return $rootScope.loc.MEDIUM;
        }

        return $rootScope.loc.STANDARD;
      };

      /**
       * Verifies if the user has selected a security preset.
       *
       * @memberof SetupController
       * @method hasPresetSecurity
       * @return {Boolean} Whether a security preset was selected.
       */
      $scope.hasPresetSecurity = function() {
        for (var key in $scope.securitySetting) {
          if ($scope.securitySetting[key]) {
            return true;
          }
        }

        return false;
      };

      /**
       * Sets security settings to a preset.
       *
       * @memberof SetupController
       * @method setLoginSettingsToLevel
       * @param {String} level The preset level.
       */
      $scope.setLoginSettingsToLevel = function(level) {

        switch (level) {
          case 'high':
            $scope.lockApp = true;
            $scope.lockAfter = 0;
            $scope.stayLoggedIn = false;
            $scope.rememberUserId = false;
            $scope.useTouchId = false;
            break;
          case 'medium':
            $scope.lockApp = true;
            $scope.lockAfter = 20;
            $scope.stayLoggedIn = false;
            $scope.rememberUserId = true;
            $scope.useTouchId = false;
            break;
          case 'standard':
            $scope.lockApp = true;
            $scope.lockAfter = 30;
            $scope.stayLoggedIn = true;
            $scope.rememberUserId = true;
            break;
          default:
            break;
        }
      };

      /**
       * Saves the login settings.
       *
       * @memberof SetupController
       * @method saveLoginSettings
       */
      $scope.saveLoginSettings = function() {
        var loginSettings = {
          lockApp: $scope.lockApp || false,
          lockAfter: parseInt($scope.lockAfter, 10) || 0,
          stayLoggedIn: $scope.stayLoggedIn || false,
          rememberUserId: $scope.rememberUserId || false,
          useTouchId: $scope.useTouchId || false
        };

        if (!$rootScope.appSettings) {
          $rootScope.appSettings = {};
        }
        $rootScope.appSettings.login = loginSettings;
      };

      /**
       * Confirms the user's fingerprint if they have Touch ID.
       *
       * @memberof SetupController
       * @method confirmFingerprint
       */
      $scope.confirmFingerprint = function() {
        $scope.useTouchId = true;

        if ($rootScope.iphone == true) {
          touchIdService.verifyFingerprint().then(function() {
            // $scope.gotoItem($scope.itemIndex + 1);
            $rootScope.fingerprintOK();
          }, function() {
            // $scope.useTouchId = false;
            $rootScope.fingerprintNotOK();
          });
        }

        if ($rootScope.android === true) {
          FingerprintAuth.isAvailable(androidFingerprintAuthService.isAvailableSuccess,androidFingerprintAuthService.isAvailableError);
        }
      };

      $rootScope.fingerprintOK = function() {
        adobeService.trackAction('settings:update:touchIdOn', analyticConstants.SETTINGS_SECTION);
        $scope.gotoItem($scope.itemIndex + 1);
      };

      $rootScope.fingerprintNotOK = function() {
        adobeService.trackAction('settings:update:touchIdOff', analyticConstants.SETTINGS_SECTION);
        $scope.useTouchId = false;
      };



      /**
       * Disables the use of TouchID when it's available in the system.
       *
       * @memberof SetupController
       * @method disableTouchId
       */
      $scope.disableTouchId = function() {
        $scope.useTouchId = false;
        adobeService.trackAction('settings:update:touchIdOff', analyticConstants.SETTINGS_SECTION);
        $scope.gotoItem($scope.itemIndex + 1);
      };

      /**
       * Retrieves remote locale and loads the home page.
       *
       * @memberof SetupController
       * @method loadHomePage
       */
      $scope.loadHomePage = function() {
        $scope.getLocale().then(function() {
          $rootScope.gotoView('/home');
        });
      };

      $scope.settingsWatchOff = $scope.$watch('securitySetting', function(newVal, oldVal) {
        if ($location.url() !== '/setup') {
          $scope.settingsWatchOff();
          return;
        }

        var key;
        if (typeof oldVal === 'undefined') {
          for (key in newVal) {
            if (newVal[key] === true) {
              $scope.setLoginSettingsToLevel(key);
            }
          }
          return;
        }

        var onKey;
        for (key in newVal) {
          if (newVal[key] === true && (typeof oldVal[key] === 'undefined' || !oldVal[key])) {
            onKey = key;
            break;
          }
        }

        if (onKey) {
          for (key in newVal) {
            if (newVal[key] && key !== onKey) {
              newVal[key] = false;
            }
          }

          $scope.setLoginSettingsToLevel(onKey);
        }
      }, true);

      $rootScope.$emit('pageLoaded');
      adobeService.trackState('settings', analyticConstants.SETTINGS_SECTION);

      if (!$rootScope.language) {
        $scope.setLanguage().then(function() {
          $scope.getLocale();
        });
      }
      else {
        $scope.getLocale();
      }
    }
  ]);
}());

/**
 * Controller for the Update Auto Pay view.
 *
 * @namespace Controllers
 * @class stopAutoPayController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.stop.autopay', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('StopAutoPayController', [
          '$scope',
          '$rootScope',
          '$window',
          'adobeService',
          'pageService',
          function($scope, $rootScope, $window, adobeService, pageService) {
            var vm = this;

            $rootScope.showNav = true;
            $rootScope.showPolicySelect = false;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
            $rootScope.pageTitle = $rootScope.loc.BP_STOP_AUTOPAY;
            $scope.loc = $rootScope.loc;

            getPage();

            /**
             * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
             *
             * @memberof StopAutoPayController
             * @method getPage
             */
            function getPage() {
              /**
               * The directive HTML for the page.
               *
               * @memberof StopAutoPayController
               * @member {String} pageHtml
               */
              $scope.pageHtml = '';

              /**
               * For basicNavbar, we have to pass this function
               * to handle the left click
               */
              $scope.basicNavbarLeftClick = function() {
                $window.history.back();
              };

              $rootScope.$emit('pageLoading');

              var query = {
                policyIndex: $rootScope.policyIndex,
                policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                policyExternalId : $rootScope.selectedPolicy.externalId
              };

              pageService
                  .getPage(
                      pageService.devices.MOBILE,
                      'stop-autopay',
                      $rootScope.language,
                      query
                  )
                  .then(function(pageHtml) {
                    $scope.pageHtml = pageHtml;
                    $rootScope.$emit('pageLoaded');
                  })
                  .catch(function(error, status) {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
            }
          }
        ]);
}());

/**
 * Controller for the Update Auto Pay view.
 *
 * @namespace Controllers
 * @class UpdateAutoPayController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.update.autopay', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('UpdateAutoPayController', [
          '$scope',
          '$rootScope',
          '$window',
          'adobeService',
          'pageService',
          'analyticConstants',
          function($scope, $rootScope, $window, adobeService, pageService, analyticConstants) {
            $rootScope.showNav = true;
            $rootScope.showPolicySelect = false;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
            $rootScope.pageTitle = $rootScope.loc.BP_UPDATE_AUTOPAY_DETAILS;
            $scope.loc = $rootScope.loc;
            getPage();

            /**
             * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
             *
             * @memberof UpdateAutoPayController
             * @method getPage
             */
            function getPage() {
              /**
               * The directive HTML for the page.
               *
               * @memberof BillingPreferencesController
               * @member {String} pageHtml
               */
              $scope.pageHtml = '';

              /**
               * For basicNavbar, we have to pass this function
               * to handle the left click
               */
              $scope.basicNavbarLeftClick = function() {
                $window.history.back();
              };

              $rootScope.$emit('pageLoading');

              var query = {
                policyIndex: $rootScope.policyIndex,
                policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                policyExternalId : $rootScope.selectedPolicy.externalId
              };

              pageService
                  .getPage(
                      pageService.devices.MOBILE,
                      'update-autopay',
                      $rootScope.language,
                      query
                  )
                  .then(function(pageHtml) {
                    $scope.pageHtml = pageHtml;
                    $rootScope.$emit('pageLoaded');
                    adobeService.trackState('updateAutopay', analyticConstants.BILLING_SECTION);
                  })
                  .catch(function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
            }
          }
        ]);
}());

/**
 * Controller for the Upgrade page view.
 *
 * @namespace Controllers
 * @class UpgradeController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.upgrade', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('UpgradeController', [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;

                $rootScope.verifyLocaleRetrieved();

                /**
                 * Pass through method to external links for app upgrade
                 *
                 * @memberof UpgradeController
                 * @method gotoStore
                 */
                $scope.gotoStore = function(device) {
                    if (device === 'iOS') {
                        return $rootScope.openInBrowser('https://itunes.apple.com/us/app/healthnav/id392607223?mt=8');
                    } else {
                        return $rootScope.openInBrowser('https://play.google.com/store/apps/details?id=com.bcbsnc.healthnav','_system');
                    }
                };
            }
        ]);
}());

/**
 * Directive for the about page.
 *
 * @namespace Directives
 * @class about
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.about', [])
  .directive('about', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/about.html',
        scope: {
          /**
          * Display information for the about page.
          *
          * @memberof about
          * @member {Object} aboutDetails
          */
          aboutDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          'config',
          function($rootScope, $scope, adobeService, config) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.appVersion = $rootScope.appVersion;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Returns the current environment, if not PROD.
             *
             * @memberof aboutDetails
             * @method getEnvironment
             * @return {String} The environment name.
             */
            $scope.getEnvironment = function() {
              if(config.env === 'PROD') {
                return '';
              }

              return config.env;
            };

            /**
             * Toggles the expansion of an accordion item.
             *
             * @memberof about
             * @method toggleItem
             */

              $scope.toggleItem = function(item, id) {
                for(var i = 0; i < $scope.aboutDetails.content.length; i++) {
                  if (i != id) {
                    $scope.aboutDetails.content[i].expandedDiv = false;
                  }
                }
                item.expandedDiv = !item.expandedDiv;
              };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable alert modal.
 *
 * @namespace Directives
 * @class alertModal
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.alertModal', [])
    .directive('alertModal', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/alert-modal.html',
          scope: false,
          controller: [
            '$rootScope',
            function($rootScope) {
              $rootScope.$emit('onBackKeyDown');
            },
          ],
        };
      },
    ])
    /**
     *
     * @example
     * <extendableAlertModal
     *   modal-info="objectForModalContent"
     *   open-modal-fn-alias="nameInOuterScopeOfModalOpenFn"
     *   confirm-fn="functionCalledWhenModalConfirmed">
     * </extendableAlertModal>
     */
    .directive('extendableAlertModal', ['$rootScope', function($rootScope) {
      return {
        restrict: 'E',
        scope: {
          /**
           * @param {Object} modalInfo Properties to populate the modal with
           * @param {string} modalInfo.title
           * @param {string} modalInfo.body
           * @param {Function} modalInfo.result
           * @param {Object} modalInfo.confirmButton
           * @param {string} modalInfo.confirmButton.title
           * @param {string} modalInfo.confirmButton.color
           * @param {Object} modalInfo.cancelButton
           * @param {string} modalInfo.cancelButton.title
           * @param {string} modalInfo.cancelButton.color
           * @param {Function} openModalFn Used by the outer scope to have the modal open itself
           * @param {Function} confirmFunction Action to perform if the users selects the confirm button
           */
          alertModal: '<modalInfo',
          openModalFn: '=openModalFnAlias',
          confirmFn: '<',
        },
        templateUrl: 'partials/alert-modal.html',
        link: function(scope, elem, attr) {
          function toggleModalState(isModalOpen) {
            $rootScope.isModalOpen = isModalOpen;
          }

          scope.openModalFn = function() {
            elem.addClass('show');
            toggleModalState(true);
          };
          scope.alertModal.result = function(userAction) {
            if (!userAction) {
              elem.removeClass('show');
              return;
            }
            elem.removeClass('show');
            scope.confirmFn();
            scope.alertModal.values.city = { cityFullName: '' };
            toggleModalState(false);
          };
        },
      };
    }])

    /**
     *
     * @example
     * <findDoctorZipAlertModal
     *   modal-info="objectForModalContent"
     *   open-modal-fn-alias="nameInOuterScopeOfModalOpenFn"
     *   confirm-fn="functionCalledWhenModalConfirmed">
     * </findDoctorZipAlertModal>
     */
    .directive('findDoctorZipAlertModal', [
      '$rootScope',
      '$window',
      'TransparencyFactory',
      '$location',
      function($rootScope, $window, TransparencyFactory, $location) {
        return {
          restrict: 'E',
          scope: {
            /**
             * @param {Object} modalInfo Properties to populate the modal with
             * @param {Function} modalInfo.result
             * @param {Object} modalInfo.confirmButton
             * @param {string} modalInfo.confirmButton.title
             * @param {string} modalInfo.confirmButton.color
             * @param {Object} modalInfo.cancelButton
             * @param {string} modalInfo.cancelButton.title
             * @param {string} modalInfo.cancelButton.color
             * @param {Function} openModalFn Used by the outer scope to have the modal open itself
             * @param {Function} confirmFunction Action to perform if the users selects the confirm button
             */
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-zip-alert-modal.html',
          link: function(scope, elem, attr) {
            if (typeof scope.alertModal === "undefined") {
              return;
            }
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }


            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');

              scope.alertModal.locationBlocked = TransparencyFactory.getLocationBlocked();
              if (scope.alertModal.values.locationNotFound) {
                scope.isZipValid = false;
                scope.errorText = scope.loc.ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE;
              } else {
                scope.errorText = '';
              }
            };
            scope.alertModal.result = function(userAction) {
              // User selected cancel.
              if (!userAction) {
                // Try and set city name.
                scope.alertModal.values.city = { cityFullName: '' };
                scope.alertModal.values.distance = TransparencyFactory.getDistance()
                  ? TransparencyFactory.getDistance().toString()
                  : scope.alertModal.values.distanceDetails.distance;
                $rootScope.city = { cityFullName: '' };
                TransparencyFactory.setCity({ cityFullName: '' });
                // Valid and hide modal.
                scope.isZipValid = true;
                scope.isZipDirty = false;
                elem.removeClass('show');

                // If we are logged in, go back.
                if ($location.path() == '/fad-auth/find-doctor') {
                  $window.history.back();
                }

                // Reset modalOpen state.
                toggleModalState(false);

                // Return.
                return;
              }

              // User selected confirm.
              $rootScope.city = scope.alertModal.values.city;
              TransparencyFactory.setCity(scope.alertModal.values.city);
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn(scope.alertModal.values);
            };
          },
          controller: [
            '$rootScope',
            '$scope',
            '$timeout',
            'TransparencyFactory',
            function($rootScope, $scope, $timeout, TransparencyFactory) {
              if (typeof $scope.alertModal === "undefined") {
                return;
              }
              $scope.loc = $rootScope.loc;
              $scope.isZipValid = true;
              $scope.errorText = '';
              $scope.pcp = $scope.alertModal.pcp;

              $scope.$on('validate city input', function() {
                $timeout(function() {
                  $scope.validateCity();
                });
              });

              $scope.validateCity = function() {
                const resp = TransparencyFactory.validateCity(
                  $scope.alertModal.values.city
                );

                // Set error message.
                $scope.isZipValid = resp.status;
                $scope.errorText = resp.message;

                return $scope.isZipValid;
              };

              $scope.detectClickElement = function(event) {
                if (!event.target.id || typeof event.target.id === 'undefined') {
                  $('#_cities').addClass("hidden");
                  $scope.validateCity();
                } else if (event.target.id === 'cancelButton' || event.target.id === 'closeButton') {
                  $('#city-input')[0].value = '';
                  $('#_cities').addClass("hidden");
                }
              };
            },
          ],
        };
      },
    ])
    .directive('findDoctorUnavailableAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-unavailable-alert-modal.html',
          link: function(scope, elem, attr) {
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function() {
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
            };
          },
        };
      },
    ])
    .directive('findDoctorSelectPcpAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-select-pcp-alert-modal.html',
          link: function(scope, elem, attr) {
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function(userAction, members) {
              // User selected cancel.
              if (!userAction) {

                toggleModalState(false);
                elem.removeClass('show');

                return;
              }
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn(members);
            };

            scope.alertModal.toggleCheckbox = function(index) {
              scope.alertModal.members[index].SELECTED = !scope.alertModal.members[index].SELECTED;
            };
          },
        };
      },
    ])
    .directive('findDoctorChangePcpAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-change-pcp-alert-modal.html',
          link: function(scope, elem, attr) {
            if (typeof scope.alertModal === "undefined") {
              return;
            }
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function(userAction) {
              // User selected cancel.
              if (!userAction) {

                toggleModalState(false);
                elem.removeClass('show');

                return;
              }
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn();
            };
          },
        };
      },
    ])
    .directive('findDoctorRefineSearchModal', [
      'TransparencyFactory',
      '$rootScope',
      function(TransparencyFactory, $rootScope) {
        return {
          restrict: 'E',
          scope: {
            /**
             * @param {Object} modalInfo Properties to populate the modal with
             * @param {Function} modalInfo.result
             * @param {Object} modalInfo.confirmButton
             * @param {string} modalInfo.confirmButton.title
             * @param {string} modalInfo.confirmButton.color
             * @param {Object} modalInfo.cancelButton
             * @param {string} modalInfo.cancelButton.title
             * @param {string} modalInfo.cancelButton.color
             * @param {Function} openModalFn Used by the outer scope to have the modal open itself
             * @param {Function} confirmFunction Action to perform if the users selects the confirm button
             */
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-refine-search-modal.html',
          link: function(scope, elem, attr) {
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function(query) {
              scope.query = query;
              elem.addClass('show');

              // Toggle modal state.
              toggleModalState(true);
            };

            scope.alertModal.result = function(userAction) {
              elem.removeClass('show');
              if (userAction) {
                scope.confirmFn(scope.alertModal.values, userAction);
              }

              // Toggle modal state.
              toggleModalState(false);
            };
          },
          controller: [
            '$rootScope',
            '$scope',
            'TransparencyFactory',
            function($rootScope, $scope, TransparencyFactory) {
              $scope.loggedIn = $rootScope.loggedIn;
              $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
              $scope.loc = $rootScope.loc;
            },
          ],
        };
      },
    ])
    .directive('smartShopperConfirmTermsAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/smart-shopper-confirm-terms-alert-modal.html',
          link: function(scope, elem, attr) {
            if (typeof scope.alertModal === "undefined") {
              return;
            }
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {

              if ($rootScope.smartShopperTermsAccepted) {
                scope.confirmFn();
                return;
              }
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function(userAction) {
              // User selected cancel.
              if (!userAction) {

                toggleModalState(false);
                elem.removeClass('show');

                return;
              }
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn();
            };

          },
          controller: [
            '$rootScope',
            '$scope',
            'helpService',
            function($rootScope, $scope, helpService) {
              if (typeof $scope.alertModal === "undefined") {
                return;
              }
              $scope.loc = $rootScope.loc;
              $scope.alertModal.openTermsDetailsModal = function() {
                $rootScope.headerTerm = $scope.alertModal.termsDetailsModal.title;
                $scope.termsInfo = {
                  contents: {
                    content_1: $scope.alertModal.termsDetailsModal.content_1,
                    content_2: $scope.alertModal.termsDetailsModal.content_2,
                    content_3_1: $scope.alertModal.termsDetailsModal.content_3_1,
                    content_3_2: $scope.alertModal.termsDetailsModal.content_3_2,
                    content_4: $scope.alertModal.termsDetailsModal.content_4,
                    content_5: $scope.alertModal.termsDetailsModal.content_5,
                    content_6: $scope.alertModal.termsDetailsModal.content_6,
                    content_7: $scope.alertModal.termsDetailsModal.content_7,
                    content_8: $scope.alertModal.termsDetailsModal.content_8,
                    content_9: $scope.alertModal.termsDetailsModal.content_9,
                    content_10: $scope.alertModal.termsDetailsModal.content_10,
                    content_11: $scope.alertModal.termsDetailsModal.content_11,
                    content_12: $scope.alertModal.termsDetailsModal.content_12,
                    content_13: $scope.alertModal.termsDetailsModal.content_13,
                    content_14: $scope.alertModal.termsDetailsModal.content_14,
                    content_15: $scope.alertModal.termsDetailsModal.content_15,
                    content_16: $scope.alertModal.termsDetailsModal.content_16,
                    content_17: $scope.alertModal.termsDetailsModal.content_17,
                    content_18: $scope.alertModal.termsDetailsModal.content_18,
                    content_19: $scope.alertModal.termsDetailsModal.content_19,
                    content_20: $scope.alertModal.termsDetailsModal.content_20,
                    content_21: $scope.alertModal.termsDetailsModal.content_21,
                    content_22: $scope.alertModal.termsDetailsModal.content_22,
                    content_23: $scope.alertModal.termsDetailsModal.content_23,
                    content_24: $scope.alertModal.termsDetailsModal.content_24,
                    content_25: $scope.alertModal.termsDetailsModal.content_25,
                    content_26: $scope.alertModal.termsDetailsModal.content_26,
                    content_27: $scope.alertModal.termsDetailsModal.content_27,
                    content_28: $scope.alertModal.termsDetailsModal.content_28,
                    content_29: $scope.alertModal.termsDetailsModal.content_29,
                    content_30: $scope.alertModal.termsDetailsModal.content_30,
                    content_31: $scope.alertModal.termsDetailsModal.content_31,
                    content_32: $scope.alertModal.termsDetailsModal.content_32,
                    content_33: $scope.alertModal.termsDetailsModal.content_33,
                    content_34: $scope.alertModal.termsDetailsModal.content_34,
                    content_35: $scope.alertModal.termsDetailsModal.content_35,
                    content_36: $scope.alertModal.termsDetailsModal.content_36,
                    content_37: $scope.alertModal.termsDetailsModal.content_37,
                    content_38: $scope.alertModal.termsDetailsModal.content_38,
                    content_39: $scope.alertModal.termsDetailsModal.content_39,
                    content_40: $scope.alertModal.termsDetailsModal.content_40,
                    content_41: $scope.alertModal.termsDetailsModal.content_41,
                    content_42: $scope.alertModal.termsDetailsModal.content_42,
                    content_43: $scope.alertModal.termsDetailsModal.content_43,
                    content_44: $scope.alertModal.termsDetailsModal.content_44,
                    content_45: $scope.alertModal.termsDetailsModal.content_45,
                    content_46: $scope.alertModal.termsDetailsModal.content_46,
                    content_47: $scope.alertModal.termsDetailsModal.content_47,
                    content_48: $scope.alertModal.termsDetailsModal.content_48,
                    content_49: $scope.alertModal.termsDetailsModal.content_49,
                    content_50: $scope.alertModal.termsDetailsModal.content_50,
                    content_51: $scope.alertModal.termsDetailsModal.content_51,
                    content_52: $scope.alertModal.termsDetailsModal.content_52,
                    content_53: $scope.alertModal.termsDetailsModal.content_53,
                    content_54: $scope.alertModal.termsDetailsModal.content_54,
                    content_55: $scope.alertModal.termsDetailsModal.content_55,
                    content_56: $scope.alertModal.termsDetailsModal.content_56,
                    content_57: $scope.alertModal.termsDetailsModal.content_57,
                    content_58: $scope.alertModal.termsDetailsModal.content_58,
                    content_59: $scope.alertModal.termsDetailsModal.content_59,
                    content_60: $scope.alertModal.termsDetailsModal.content_60,
                    content_61: $scope.alertModal.termsDetailsModal.content_61,
                    content_62: $scope.alertModal.termsDetailsModal.content_62,
                    content_63: $scope.alertModal.termsDetailsModal.content_63,
                    content_64: $scope.alertModal.termsDetailsModal.content_64,
                    content_65: $scope.alertModal.termsDetailsModal.content_65,
                    content_66: $scope.alertModal.termsDetailsModal.content_66,
                    content_67: $scope.alertModal.termsDetailsModal.content_67,
                    content_68: $scope.alertModal.termsDetailsModal.content_68,
                    content_69: $scope.alertModal.termsDetailsModal.content_69,
                    content_70: $scope.alertModal.termsDetailsModal.content_70,
                    content_71: $scope.alertModal.termsDetailsModal.content_71,
                    content_72: $scope.alertModal.termsDetailsModal.content_72,
                    content_73: $scope.alertModal.termsDetailsModal.content_73,
                    content_74: $scope.alertModal.termsDetailsModal.content_74,
                    content_75: $scope.alertModal.termsDetailsModal.content_75,
                    content_76: $scope.alertModal.termsDetailsModal.content_76,
                    content_77: $scope.alertModal.termsDetailsModal.content_77,
                    content_78: $scope.alertModal.termsDetailsModal.content_78,
                    content_79: $scope.alertModal.termsDetailsModal.content_79,
                    content_80: $scope.alertModal.termsDetailsModal.content_80,
                    content_81: $scope.alertModal.termsDetailsModal.content_81,
                    content_82: $scope.alertModal.termsDetailsModal.content_82,
                    content_83: $scope.alertModal.termsDetailsModal.content_83,
                    content_84: $scope.alertModal.termsDetailsModal.content_84,
                    content_85: $scope.alertModal.termsDetailsModal.content_85,
                    content_86: $scope.alertModal.termsDetailsModal.content_86,
                    content_87: $scope.alertModal.termsDetailsModal.content_87,
                    content_88: $scope.alertModal.termsDetailsModal.content_88,
                    content_89: $scope.alertModal.termsDetailsModal.content_89,
                    content_90: $scope.alertModal.termsDetailsModal.content_90,
                    content_91: $scope.alertModal.termsDetailsModal.content_91,
                    content_92: $scope.alertModal.termsDetailsModal.content_92,
                    content_93: $scope.alertModal.termsDetailsModal.content_93,
                    content_94: $scope.alertModal.termsDetailsModal.content_94,
                    content_95: $scope.alertModal.termsDetailsModal.content_95,
                    content_96: $scope.alertModal.termsDetailsModal.content_96,
                    content_97: $scope.alertModal.termsDetailsModal.content_97,
                    content_98: $scope.alertModal.termsDetailsModal.content_98,
                    content_99: $scope.alertModal.termsDetailsModal.content_99,
                    content_100: $scope.alertModal.termsDetailsModal.content_100,
                    content_101: $scope.alertModal.termsDetailsModal.content_101,
                    content_102: $scope.alertModal.termsDetailsModal.content_102,
                    content_103: $scope.alertModal.termsDetailsModal.content_103,
                    content_104: $scope.alertModal.termsDetailsModal.content_104,
                    content_105: $scope.alertModal.termsDetailsModal.content_105,
                    content_106: $scope.alertModal.termsDetailsModal.content_106,
                    content_107: $scope.alertModal.termsDetailsModal.content_107,
                    content_108: $scope.alertModal.termsDetailsModal.content_108,
                    content_109: $scope.alertModal.termsDetailsModal.content_109,
                    content_110: $scope.alertModal.termsDetailsModal.content_110,
                    content_111: $scope.alertModal.termsDetailsModal.content_111,
                    content_112: $scope.alertModal.termsDetailsModal.content_112,
                    content_113: $scope.alertModal.termsDetailsModal.content_113,
                    content_114: $scope.alertModal.termsDetailsModal.content_114,
                  },
                };
                helpService.terms($scope.termsInfo);
              };
            },
          ],
        };
      },
    ]);
})();
/**
 * Directive for the payment flow billing method.
 *
 * @namespace Directives
 * @class autopayFlowBillingMethod
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.autopayFlowBillingMethod', [])
    .directive('autopayFlowBillingMethod', [
      function() {
        return {
          scope: {
            /**
             * @param {Object} userData
             * @param {Object} userData.preferences
             */
            balanceInfo: '=',
            userData: '='
          },
          restrict: 'E',
          templateUrl: 'partials/autopay-flow-billing-method.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            $scope.userData = PaymentFlowFactory.getUserSetData();
            $scope.paymentFlow = PaymentFlowFactory.getPaymentFlow();

            var billingMethodSelected = PaymentFlowFactory.getBillingMethod();
            if (billingMethodSelected) {
              $scope.billingMethodSelected = billingMethodSelected;
            }
            if (!billingMethodSelected) {
              if ($scope.balanceInfo.preferences.emailAddress) {
                $scope.userData.preferences.emailAddress = $scope.balanceInfo.preferences.emailAddress;
              }
              $scope.billingMethodSelected = 'email';
            }

          }]
        };
      }
    ]);
}());
/**
 * Directive for the basic-navbar.
 *
 * @namespace Directives
 * @class basicNavbar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.basicNavbar', [])
  .directive('basicNavbar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/basic-navbar.html',
        scope: {
          /**
          * Information for drawing the basic-navbar.
          *
          * @memberof basicNavbar
          * @member {Object} navbarDetails
          * @param {Object} navbarDetails
          * @param {string} navbarDetails.title
          * @param {Object} navbarDetails.leftNavButton
          * @param {string} navbarDetail.leftNavButton.icon ['back']
          * @param {function} leftClick
          * @param {function} rightClick
          */
          navbarDetails: '=',
          leftClick: '&',
          rightClick: '&'
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            /**
             * Passes left button click action to page scope.
             * We want to disable the buttons if a message is being sent from Inbox
             *
             * @memberof basicNavbar
             * @method onLeftClick
             */
            $scope.onLeftClick = function() {
              if ($rootScope.messageSending) {
                return;
              } else if ($rootScope.sendFaqMessage) {
                $rootScope.sendFaqMessage = false;
                $rootScope.gotoView('/help');
              }else if(!$rootScope.blurContent){
                $scope.leftClick();
              }
            };

            /**
             * Passes right button click action to page scope.
             * We want to disable the buttons if a message is being sent from Inbox
             *
             * @memberof basicNavbar
             * @method onRightClick
             */
            $scope.onRightClick = function() {
              if ($rootScope.messageSending) {
                return;
              } else {
                $scope.rightClick();
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for bottons that load documents.
 *
 * @namespace Directives
 * @class documentButtons
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsBookletsDetails', [])
  .directive('benefitsBookletsDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-booklets-details.html',
        scope: {
          /**
          * The buttons to display.
          *
          * @memberof documentButtons
          * @member {Array} buttons
          */
          benefitBooklets: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'TransparencyFactory',
          'geoLocationService',
          '$timeout',
          'analyticConstants',
          function($scope, $rootScope, TransparencyFactory, geoLocationService, $timeout, analyticConstants) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.trackAction = $rootScope.trackAction;
            $scope.analyticConstants = analyticConstants;

            $scope.navigatePageRequested = function (url, searchTerm) {

              if (!$rootScope.selectedPlan.active){
                $rootScope.gotoView('/fad-auth/find-doctor');
              } else {
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                  if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound){
                    return $rootScope.gotoView('/find-care');
                  } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                    $scope.gotoBrowseLevelPage(url, searchTerm);
                  } else {
                    TransparencyFactory.setZipRangeNC($scope.benefitBooklets.geoLocationDetails.distanceDetails.NCZipMin,$scope.benefitBooklets.geoLocationDetails.distanceDetails.NCZipMax);
                    if (navigator.geolocation) {
                      $rootScope.$emit('pageLoading');
                      $timeout(function () {
                        $rootScope.enableLocation = true;
                      }, 0)
                          .then(function () {
                            return geoLocationService.getLocation();
                          })
                          .then(function (response) {
                            $rootScope.$emit('pageLoaded');
                            if (response.data && response.data.zip) {
                              $rootScope.city = response.data;
                              $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                              $rootScope.currentCity = $rootScope.city;
                              $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                              $rootScope.vitalsGeoCoords = response.data.geo;
                              TransparencyFactory.setDistance($rootScope.distance);
                              TransparencyFactory.setCity($rootScope.city);
                              TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                              TransparencyFactory.setGeoLocationStatus(true);
                              TransparencyFactory.setLocationBlocked(false);
                              $rootScope.city.cityFullName = $scope.benefitBooklets.geoLocationDetails.distanceDetails.currentLocation;
                              if ($rootScope.noMatchPlanFound){
                                $rootScope.gotoView('/find-care');
                               } else {
                                 $scope.gotoBrowseLevelPage(url, searchTerm);
                               }
                            } else if (response === 'position not found') {
                              TransparencyFactory.setLocationBlocked(true);
                              TransparencyFactory.setGeoLocationStatus(false);
                              TransparencyFactory.setLocationMsg($scope.benefitBooklets.geoLocationDetails.locationMsg);
                              $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                              $scope.openModal();
                            } else {
                              TransparencyFactory.setLocationBlocked(false);
                              TransparencyFactory.setGeoLocationStatus(false);
                              $rootScope.$emit('pageLoaded');
                              $scope.modalObj.values.locationNotFound = true;
                              $scope.openModal();
                            }
                          })
                          .catch(function () {
                            TransparencyFactory.setLocationBlocked(false);
                            $rootScope.$emit('pageLoaded');
                            $scope.modalObj.values.locationNotFound = true;
                            $scope.openModal();
                          });
                    } else {
                      $rootScope.$emit('pageLoaded');
                      TransparencyFactory.setLocationBlocked(true);
                      TransparencyFactory.setLocationMsg($scope.benefitBooklets.geoLocationDetails.locationMsg);
                      $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                      $scope.openModal();
                    }
                  }
                }
              };

            /**
             * Based on the user selection, go to the url with planName, zipCode, distance and search term
             *
             * @memberof benefitsBookletsDetails
             * @method gotoBrowseLevelPage
             */
            $scope.gotoBrowseLevelPage = function(url, searchTerm) {
              $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                TransparencyFactory.setSearchTerm(searchTerm);
                $rootScope.gotoView(url + '?searchTerm='+ searchTerm + '&planName='+ $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
           };// end of gotoBrowseLevelPage function


           $scope.confirmFunc = function(data) {
             $rootScope.city = data.city;
             $rootScope.distance = data.distance;
             TransparencyFactory.setDistance($rootScope.distance);
             TransparencyFactory.setCity($rootScope.city);
             TransparencyFactory.setGeoLocationStatus(false);
             if ($rootScope.noMatchPlanFound){
              $rootScope.gotoView('/find-care');
             } else {
              $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
            }
           };

           $scope.modalObj = {
             locationMsg: $scope.benefitBooklets.geoLocationDetails.locationMsg,
             cancelButton: {
               title: $scope.loc.CANCEL
             },
             confirmButton: {
               title: $scope.loc.CONTINUE
             },
             values: {
               distanceDetails: $scope.benefitBooklets.geoLocationDetails.distanceDetails,
               distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.benefitBooklets.geoLocationDetails.distanceDetails.distance.toString(),
               city: TransparencyFactory.getCity(),
             }
           };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefits view coverage page.
 *
 * @namespace Directives
 * @class benefitsCoverageDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsCoverageDetails', [])
  .directive('benefitsCoverageDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-coverage-details.html',
        scope: {
          /**
          * Display information for the benefits coverage page.
          *
          * @memberof benefitsCoverageDetails
          * @member {Object} coverageData
          */
          coverageData: '=',
          policySelection: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            $scope.showFullFootnotes      = false;
            $scope.FootnotesDetailButton  = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
            $scope.footnotes              = $scope.coverageData.footnotes.content.substring(0,155)+'...';
            $scope.collapseExpandIcon     = 'plus-expand';

            /**
             * Pass through method to external links for state prescription drugs
             *
             * @memberof benefits-coverage-details
             * @method gotoSHR
             */
            $scope.gotoSHR = function() {
              return $rootScope.openInBrowser("https://shp.nctreasurer.com/ActiveEmployees/Pages/default.aspx");
            };

            /**
             * Pass through method to external links for dental benefits
             *
             * @memberof benefits-coverage-details
             * @method gotoDentalBenefits
             */
            $scope.gotoDentalBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug benefits
             *
             * @memberof benefits-coverage-details
             * @method gotoDrugBenefits
             */
            $scope.gotoDrugBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            $scope.toggleFootnotes = function(){
              $scope.showFullFootnotes = !$scope.showFullFootnotes;

              if($scope.showFullFootnotes)
                {
                  $scope.collapseExpandIcon = 'minus-collapse';
                  $scope.footnotes = $scope.coverageData.footnotes.content;
                  $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_HIDE_FULL_DETAILS;
                }
                else
                {
                  $scope.collapseExpandIcon = 'plus-expand';
                  $scope.footnotes = $scope.coverageData.footnotes.content.substring(0,155)+'...';
                  $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
                }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefits info page.
 *
 * @namespace Directives
 * @class benefitsInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsDetail', [])
  .directive('benefitsDetail', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-detail.html',
        scope: {
          /**
          * Display information for the benefits page.
          *
          * @memberof benefitsInfo
          * @member {Object} benefitsDetails
          */
          benefitsData: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          '$location', 
          '$anchorScroll',
          function ($rootScope, $scope, adobeService, $location, $anchorScroll) {
            $scope.loc = $rootScope.loc;
            $scope.showBenefitsTable = false;
            $scope.showFullFootnotes = false;
            $scope.trackAction = $rootScope.trackAction;

            $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
            $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
            $scope.helpButtonText = $rootScope.loc.HELP;
            $scope.collapseExpandIcon = 'plus-expand';

            $scope.toggleBenefitsTable = function(event, memberIndex) {
              //a Button click by default makes an attempt to submit, which reloads the page and we go from  out-of-network page to in-network, because in-network is the default page on load
              //the preventDefault and stopPropagation will stop an attempt to submit the form, so page won't reload
              event.preventDefault();
              event.stopPropagation();
              for (var i = 0; i < $scope.benefitsData.itemDTO.length; i++) {
                if (
                  $scope.benefitsData.itemDTO[i].memberIndex === memberIndex
                ) {
                  if ($scope.benefitsData.itemDTO[i].cardExpanded) {
                    var id = "bencardtop" + memberIndex;
                    $location.hash(id);
                    $anchorScroll(id);
                  }
                  $scope.benefitsData.itemDTO[i].cardExpanded = !$scope
                    .benefitsData.itemDTO[i].cardExpanded;
                }
              }
            };

            $scope.toggleFootnotes = function(){
              $scope.showFullFootnotes = !$scope.showFullFootnotes;

              if($scope.showFullFootnotes) {
                $scope.collapseExpandIcon = 'minus-collapse';
                $scope.footnotes = $scope.benefitsData.footnotes;
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_HIDE_FULL_DETAILS;
              } else {
                $scope.collapseExpandIcon = 'plus-expand';
                $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
              }
            };

            /**
             * Takes a member to the help view.
             *
             * @memberof benefitsInfo
             * @method gotoView
             */
            $scope.gotoView = function(view, title) {

              $rootScope.gotoView(view);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefitsNav page.
 *
 * @namespace Directives
 * @class benefitsNav
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsNav', [])
  .directive('benefitsNav', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-nav.html',
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.trackAction = $rootScope.trackAction;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefits select plans info page.
 *
 * @namespace Directives
 * @class benefitsInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsSelectDetail', [])
  .directive('benefitsSelectDetail', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-select-detail.html',
        scope: {
          /**
          * Display information for the benefits page.
          *
          * @memberof benefitsInfo
          * @member {Object} benefitsSelectDetail
          */
          benefitsData: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          '$location', 
          '$anchorScroll',          
          function($rootScope, $scope, adobeService, $location, $anchorScroll) {
            $scope.loc = $rootScope.loc;
            $scope.showBenefitsTable = false;
            $scope.showFullFootnotes = false;
            $scope.trackAction = $rootScope.trackAction;

            $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
            $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
            $scope.helpButtonText = $rootScope.loc.HELP;
            $scope.collapseExpandIcon = 'plus-expand';

            $scope.toggleBenefitsTable = function(event, memberIndex) {
              //a Button click by default makes an attempt to submit, which reloads the page and we go from  out-of-network page to in-network, because in-network is the default page on load
              //the preventDefault and stopPropagation will stop an attempt to submit the form, so page won't reload
              event.preventDefault();
              event.stopPropagation();
              for (var i = 0; i < $scope.benefitsData.itemDTO.length; i++) {
                if (
                  $scope.benefitsData.itemDTO[i].memberIndex === memberIndex
                ) {
                  if ($scope.benefitsData.itemDTO[i].cardExpanded) {
                    var id = "bencardtop" + memberIndex;
                    $location.hash(id);
                    $anchorScroll(id);
                  }
                  $scope.benefitsData.itemDTO[i].cardExpanded = !$scope
                    .benefitsData.itemDTO[i].cardExpanded;
                }
              }
            };

            $scope.toggleFootnotes = function(){
              $scope.showFullFootnotes = !$scope.showFullFootnotes;

              if($scope.showFullFootnotes) {
                $scope.collapseExpandIcon = 'minus-collapse';
                $scope.footnotes = $scope.benefitsData.footnotes;
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_HIDE_FULL_DETAILS;
              } else {
                $scope.collapseExpandIcon = 'plus-expand';
                $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
              }
            };

            /**
             * Takes a member to the help view.
             *
             * @memberof benefitsInfo
             * @method gotoView
             */
            $scope.gotoView = function(view, title) {

              $rootScope.gotoView(view);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the billing and payments coming soon.
 *
 * @namespace Directives
 * @class billingAndPaymentsComingSoon
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.billingAndPaymentsComingSoon', [])
    .directive('billingAndPaymentsComingSoon', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/billing-and-payments-coming-soon.html',
          scope: {
            /**
            *
            * @memberof billingAndPaymentsComingSoon
            * @member {String} title.
            */

          },
          controller: [
            '$scope',
            '$rootScope',
            function($scope, $rootScope) {
              $scope.loc = $rootScope.loc;
              $scope.goToDesktopBilling = function() {
                $rootScope.openInSecureBrowser('members/secure/account/billing/&qs=');
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the on billing buttons on billing landing page.
 *
 * @namespace Directives
 * @class billingButtons
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.billingButtons', [])
    .directive('billingButtons', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/billing-buttons.html',
          scope: {
            /**
            * The billing buttons information to display.
            *
            * @memberof billingButtons
            * @member {Object} billingButtonsInfo
            */
            billingButtonsInfo: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            function($scope, $rootScope) {
              $scope.loc = $rootScope.loc;
              $scope.selectedPolicy = $rootScope.selectedPolicy;
              $scope.gotoView = $rootScope.gotoView;
            }
          ]
        };
      }
    ]);
  }());
  
/**
 * Directive for the billingHistoryUnderstandInvoice.
 *
 * @namespace Directives
 * @class billingHistoryUnderstandInvoice
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.billingHistoryUnderstandInvoice', [])
      .directive('billingHistoryUnderstandInvoice', [
        function () {
          return {
            restrict: 'E',
            replace: true,
            templateUrl: 'partials/billing-history-understand-invoice.html',
            scope: {

            },
            controller: [
              '$scope',
              '$rootScope',
              'BillingInvoiceHistoryFactory', '$location', '$anchorScroll',
              function ($scope, $rootScope, BillingInvoiceHistoryFactory, $location, $anchorScroll) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;

                $scope.gotoAnchor = function(divName) {
                  // set the location.hash to the id of the element you wish to scroll to.
                  $location.hash(divName);
                  // call $anchorScroll()
                  $anchorScroll();
                };

              }
            ]
          };
        }
      ]);
}());

(function() {
  /**
   * @description
   * A directive that displays the next invoice date
   */
  angular
    .module('blueconnect.mobile.directives.billingNextInvoiceDate',[])
    .directive('billingNextInvoiceDate', [function() {
      return {
        scope: {
          /**
           * @param {string} nextInvoiceDate Takes a utc formatted string
           */
          nextInvoiceDate: '<'
        },
        template: '<hr class="width-100"><h4>{{::loc.BP_NEXT_INVOICE}}<span> {{::moment(nextInvoiceDate).format(\'MMMM D\')}}</span></h4>',
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }]
      };
    }]);
})();
/**
 * Directive for the billingPreferencesDetails in the payment flow.
 *
 * @namespace Directives
 * @class billingPreferencesDetails
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.billingPreferencesDetails', [])
        .directive('billingPreferencesDetails', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/billing-preferences-details.html',
                    scope: {
                        /**
                         * Display information for the billingPreferencesDetails.
                         *
                         * @memberof billingPreferencesDetails
                         * @member {Object} billingPreferencesData
                         */
                        billingPreferencesData: '=',
                        policy:'='
                    },
                    controller: [
                        '$routeParams',
                        '$rootScope',
                        '$scope',
                        '$timeout',
                        function ($routeParams, $rootScope, $scope, $timeout) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;
                            $scope.preferencesSaveSuccess =  $routeParams.success;
                            $scope.billedAmount = $scope.billingPreferencesData.billedAmount ? $scope.billingPreferencesData.billedAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';

                            $scope.getAmountDollars = function() {
                              return $scope.billedAmount.slice(1, $scope.billedAmount.indexOf('.') + 1) || 0;
                            };

                            $scope.getAmountCents = function() {
                              return $scope.billedAmount.slice($scope.billedAmount.indexOf('.') + 1);
                            };

                            if (
                              $scope.billingPreferencesData.payment.creditCardDetails &&
                              $scope.billingPreferencesData.payment.creditCardDetails.expiration
                            ) {
                              $timeout(function() {
                                $scope.billingPreferencesData.payment.creditCardDetails.expirationShortened = $scope.billingPreferencesData.payment.creditCardDetails.expiration
                                  .split('/')
                                  .map(function(str, index) {
                                    return index === 0 ? str : str.slice(2);
                                  })
                                  .join('/');
                              }, 0)
                            }
                        }
                    ]
                };
            }
        ])
        .directive('billingPreferencesSaveToast', function() {
            return {
                resrict: 'E',
                template: '<div class="content flex-row flex-center-center"><i class="fc-check dark-green mr2"></i><p class="mb0 dark-green" ng-bind="::loc.BP_BILLING_PREFERENCES_SAVED"></p></div>',
                controller: ['$rootScope', '$scope', '$timeout', function($rootScope, $scope, $timeout) {
                    $scope.loc = $rootScope.loc;
                    $scope.timeout = $timeout;
                }],
                link: function(scope, elem, attr, ctrl) {
                    scope.timeout(function() {
                        elem.addClass('hidden');
                    }, 2000)
                }
            };
        });
}());

/**
 * Directive for the billingPreferencesUpdate in the payment flow.
 *
 * @namespace Directives
 * @class billingPreferencesUpdate
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.billingPreferencesUpdate', [])
        .directive('billingPreferencesUpdate', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/billing-preferences-update.html',
                    scope: {
                        /**
                         * Display information for the billingPreferencesUpdate.
                         *
                         * @memberof billingPreferencesUpdate
                         * @member {Object} billingPreferencesUpdateData
                         */
                        billingPreferencesUpdateData: '=',
                        policy: '='
                    },
                    controller: [
                        '$rootScope',
                        '$scope',
                        function ($rootScope, $scope) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;
                        }
                    ]
                };
            }
        ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.reinstatementSummary', [])
    .directive('reinstatementSummary', function() {
      return {
        templateUrl: 'partials/billing-reinstatement-summary.html',
        scope: {
          reinstatementEligible: '<',
          reinstatementAmount: '<',
          onHomePage: '<',
          isPolicyTerminated: '<',
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          },
        ],
      };
    })
    .directive('reinstatementAmount', function() {
      return {
        restrict: 'E',
        template: [
          '<h4 ng-bind="::loc.BP_TOTAL_REINSTATEMENT_AMOUNT"></h4>',
          '<h4 class="amount" ng-bind="::reinstatementAmount | currency"></h4>',
        ].join(''),
        scope: {
          reinstatementAmount: '<',
          reinstatementEligible: '<',
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
          },
        ],
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.billingServiceDown', [])
    .directive('billingServiceDown', function() {
      return {
        template: '<p ng-bind="::loc.ERROR_HOME_BP"></p>',
        controller: ['$rootScope', '$scope', function() {
          $scope.loc = $rootScope.loc;
        }]
      };
    });
})();
/**
 * @description
 * Directive to show a Member that their policy is paid in full.
 *
 * @example
 * <billing-status-paid-in-full></billing-status-paid-in-full>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.billingStatusPaidInFull', [])
    .directive('billingStatusPaidInFull', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
            }
          ],
          templateUrl: 'partials/billing-status-paid-in-full.html'
        };
      }
    ]);
})();
(function() {
  angular.module('blueconnect.mobile.directives.billingSummaryError', [])
  .directive('billingSummaryError', function() {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: 'partials/billing-summary-error.html',
      controller: ['$rootScope', '$scope', function($rootScope, $scope) {
        $scope.loc = $rootScope.loc;
      }]
    };
  });
})();
/**
 * @description
 * Directive to show new Members appreciation for choosing BCBSNC as well as
 * information to show that no invoice has been generated for them.
 *
 * @example
 * <billing-summary-new-member></billing-summary-new-member>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.billingSummaryNewMember', [])
    .directive('billingSummaryNewMember', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          scope: {
            planName: '=planName'
          },
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
            }
          ],
          templateUrl: 'partials/billing-summary-new-member.html'
        };
      }
    ]);
})();
/**
 * Directive for the billing card on the home screen.
 *
 * @namespace Directives
 * @class billingSummary
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.billingSummary', [])
  .directive('billingSummary', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/billing-summary.html',
        scope: {
          /**
          * Display information for the payment.
          *
          * @memberof billingSummary
          * @member {Object} billingDetails
          */
          billingDetails: '=',
          policy:'='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.enterPaymentFlow = $rootScope.enterPaymentFlow;
            $rootScope.billingTrackStates('summary', $scope.billingDetails);

            $scope.currentAmtDue = $scope.billingDetails.currentAmtDue ? $scope.billingDetails.currentAmtDue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';
            $scope.billedAmount = $scope.billingDetails.billedAmount ? $scope.billingDetails.billedAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';
            $scope.balanceForwardAmount = $scope.billingDetails.balanceForwardAmount ? $scope.billingDetails.balanceForwardAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';
            $scope.currentInvoiceBalanceForwardAmount = $scope.billingDetails.currentInvoice.balanceForwardAmount ? $scope.billingDetails.currentInvoice.balanceForwardAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';

            /**
             * Retrieves the payment amount dollars for display.
             *
             * @memberof homeCardBilling
             * @method getAmountDollars
             * @return {String} The dollar amount
             */
            $scope.getAmountDollars = function() {
              return $scope.currentAmtDue.slice(1, $scope.currentAmtDue.indexOf('.') + 1) || 0;
            };

            /**
             * Retrieves the payment amount cents for display.
             *
             * @memberof homeCardBilling
             * @method getAmountCents
             * @return {String} The cents amount
             */
            $scope.getAmountCents = function() {
              return $scope.currentAmtDue.slice($scope.currentAmtDue.indexOf('.') + 1);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * @description
 * Directive for blocking an under click, ie when an element is on top of another
 * element with a ng-click directive underneath it still receiving the click.
 *
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.blockUnderClick', [])
    .directive('blockUnderClick', [
      function() {
        return {
          restrict: 'A',
          link: function($scope, $elem, $attrs) {
            $elem.on('click', function(ev) {
              return false;
            });
          }
        };
      }
    ]);
})();
/**
 * Directive for a blue bar label.
 *
 * @namespace Directives
 * @class blueBarLabel
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.blueBarLabel', [])
  .directive('blueBarLabel', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/blue-bar-label.html',
        scope: {
          /**
          * The title of the blue bar label.
          *
          * @memberof blueBarLabel
          * @member {String} title
          */
          title: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.trackAction = $rootScope.trackAction;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a bottom button.
 *
 * @namespace Directives
 * @class bottomButton
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.bottomButton', [])
  .directive('bottomButton', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/bottom-button.html',
        scope: {
          /**
          * Display information for the bottom button.
          *
          * @memberof bottomButton
          * @member {Object} buttonDetails
          */
          buttonDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the check box element.
 *
 * @namespace Directives
 * @class checkBox
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.checkBoxGroup', [])
  .directive('checkBoxGroup', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/check-box-group.html',
        scope: {
          /**
          *
          * @memberof checkBox
          * @member {Object} model Collection of items to iterate over to generate checkbox items
          * @member {Object} selection The array containing those selected checkboxs
          * @member {Method} action This is a method defined in the controlling object to perform tasks
          */
          model     : '=',
          selection : '=',
          action    : '&'
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the check box element.
 *
 * @namespace Directives
 * @class checkBox
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.checkBox', [])
  .directive('checkBox', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/check-box.html',
        scope: {
          /**
          *
          * @memberof checkBox
          * @member {boolean} model value to determine if checkbox is on or off.
          */
          model : '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the monetary amounts box box on the claim details page.
 *
 * @namespace Directives
 * @class claimAmounts
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimAmounts', [])
  .directive('claimAmounts', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-amounts.html',
        scope: {
          /**
          * The monetary amounts.
          *
          * @memberof claimAmounts
          * @member {Object} amounts
          */
          amounts: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
            $scope.loc      = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            var savingsPercent = $scope.amounts.savings > 0 ? $scope.amounts.savings / $scope.amounts.originalBilled * 100: 0;
            var upfrontPercent = $scope.amounts.upfrontCost.amount > 0 ? $scope.amounts.upfrontCost.amount / $scope.amounts.originalBilled * 100 + savingsPercent : savingsPercent;
            var remainingPercent = $scope.amounts.remainingCost > 0 ? $scope.amounts.remainingCost / $scope.amounts.originalBilled * 100 + upfrontPercent : upfrontPercent;

            $scope.percentages = {
              savings: savingsPercent,
              upfront: upfrontPercent,
              remaining: remainingPercent
            };

            var generateGraph = function() {
              var graphHeight = 10;

              //Sum up the three points
              var sum = $scope.amounts.savings + $scope.amounts.bcbsncPayment + $scope.amounts.remainingCost;

              //Calcuate each point's percentages
              var savingsPercentage       = ( ($scope.amounts.savings/sum) * 100 ).toFixed(2);
              var paymentAmountPercentage = ( ($scope.amounts.bcbsncPayment/sum) * 100).toFixed(2);
              var remainingCostPercentage = ( ($scope.amounts.remainingCost/sum) * 100 ).toFixed(2);

              //Finally calculate each point's percentage against graphHeight;
              var savingsPoint        = ( (savingsPercentage/100) * graphHeight ).toFixed(2);
              var paymentAmountPoint  = ( (paymentAmountPercentage/100) * graphHeight ).toFixed(2);
              var remainingCostPoint  = ( (remainingCostPercentage/100) * graphHeight ).toFixed(2);

              $scope.claimgraph = {
                outline: true,
                graphHeight: 10,
                bars:[
                  {color: '#79AD65', bottom: parseFloat(remainingCostPercentage) + parseFloat(paymentAmountPercentage), height: savingsPercentage, description: $rootScope.loc.MEMBER_SAVINGS},
                  {color: '#EBF3D8', bottom: remainingCostPercentage, height: paymentAmountPercentage, description: $rootScope.loc.PAID_BY_BCBSNC},
                  {color: '#0073AE', bottom: 0, height: remainingCostPercentage, description: $rootScope.loc.YOU_MAY_OWE}
                ],
                legendLines: [
                  {name: $rootScope.loc.ORIGINAL_BILL, value: '$' + $scope.amounts.originalBilled.toFixed(2), bottom: 50, height: .5, width: 1}
                ],
                leftSide: [
                  {name: $rootScope.loc.MEMBER_SAVINGS, value: '$' + $scope.amounts.savings.toFixed(2), bottom: 0, height: 50, color: '#79AD65'},
                  {name: $rootScope.loc.PAID_BY_BCBSNC, value: '$' + $scope.amounts.bcbsncPayment.toFixed(2), bottom: 0, height: 50, color: '#79AD65'},
                  {name: $rootScope.loc.YOU_MAY_OWE, value: '$' + $scope.amounts.remainingCost.toFixed(2), bottom: 0, height: 50, color: '#0073AE'}
                ]
              };
            };
            generateGraph();
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the claim details bottom bar.
 *
 * @namespace Directives
 * @class claimBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimBottomBar', [])
  .directive('claimBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-bottom-bar.html',
        scope: {
          /**
          * The claim details.
          *
          * @memberof claimBottomBar
          * @member {Object} claim
          */
          claim: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$filter',
          'shareService',
          'adobeService',
          function($scope, $rootScope, $location, $filter, shareService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            /**
             * Opens the sharing modal for the claim.
             *
             * @memberof inboxMessageBottomBar
             * @method shareClaim
             */
            $scope.shareClaim = function() {
              var shareContent;
              if($scope.claim.claimStatus == 'Processed'){
                shareContent = $rootScope.loc.CLAIM_NUMBER + ": " + $scope.claim.claimId + "\n" +
                               $rootScope.loc.MEMBER + ": " + $scope.claim.memberName + "\n" +
                               $rootScope.loc.ORIGINAL_BILL + ": $" + ($scope.claim.totalToPayAmount + $scope.claim.savings).toFixed(2) + "\n" +
                               //($scope.claim.savings > 0 ? $rootScope.loc.BCBSNC_SAVINGS + ": -$" + $scope.claim.savings.toFixed(2) + "\n" : "") +
                               //($scope.claim.upfrontCost.amount > 0 ? $rootScope.loc[$scope.claim.upfrontCost.type] + ": $" + $scope.claim.upfrontCost.amount.toFixed(2) + "\n" : "") +
                               (($scope.claim.processed && $scope.claim.totalToPayAmount > 0) ? $rootScope.loc.YOU_MAY_OWE + ": $" + $scope.claim.totalRemainingMemberExpenseAmount.toFixed(2) + "\n" : "") +
                               $rootScope.loc.MEMBER_SAVINGS + ": -$" + $scope.claim.savings.toFixed(2) + "\n" +
                               $rootScope.loc.PAID_BY_BCBSNC + ": $" + $scope.claim.bcbsncPayment.toFixed(2) + "\n" +
                               ($scope.claim.serviceType ? $rootScope.loc.SERVICE + ": " + $rootScope.loc.MEDICAL_SERVICE + "\n" : "") +
                               $rootScope.loc.PROVIDED_BY + ": " + $scope.claim.providerRecordName + "\n" +
                               $rootScope.loc.CURRENT_STATUS + ": " + $rootScope.loc.PROCESSED + "\n" +
                               $rootScope.loc.DATE_OF_SERVICE + ": " + $filter('date')($scope.claim.startServiceDate, 'M/d/yyyy');
              } else {
                shareContent = $rootScope.loc.CLAIM_NUMBER + ": " + $scope.claim.claimId + "\n" +
                               $rootScope.loc.MEMBER + ": " + $scope.claim.memberName + "\n" +
                               ($scope.claim.serviceType ? $rootScope.loc.SERVICE + ": " + $rootScope.loc.MEDICAL_SERVICE + "\n" : "") +
                               $rootScope.loc.PROVIDED_BY + ": " + $scope.claim.providerRecordName + "\n" +
                               $rootScope.loc.CURRENT_STATUS + ": " + $rootScope.loc.PENDING + "\n" +
                               $rootScope.loc.DATE_OF_SERVICE + ": " + $filter('date')($scope.claim.startServiceDate, 'M/d/yyyy');
                }

                shareService.showSharing(shareService.contentType.TEXT, shareContent);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the compose message box on the claim details page.
 *
 * @namespace Directives
 * @class claimCompose
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimCompose', [])
  .directive('claimCompose', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-compose.html',
        scope: {
          /**
          * The claim information to display.
          *
          * @memberof claimCompose
          * @member {Object} secureMessage
          */
          secureMessage: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          '$location',
          'quickAlertService',
          '$timeout',
          function($scope, $rootScope, adobeService, $location, quickAlertService, $timeout) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;


            if($location.search().messageSent) {
              $rootScope.cliamSendMessage = true;
              quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
              $timeout(function() {
                  angular.element('.quick-alert-modal').hide();
              }, 2000);
              var search = angular.copy($location.search());
              delete search.messageSent;
              $location.search(search);
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the info box on the claim details page.
 *
 * @namespace Directives
 * @class claimInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimInfo', [])
  .directive('claimInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-info.html',
        scope: {
          /**
          * The claim information to display.
          *
          * @memberof claimInfo
          * @member {Object} info
          */
          info: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          '$location',
          'quickAlertService',
          '$timeout',
          function($scope, $rootScope, adobeService, $location, quickAlertService, $timeout) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the member box on the claim details page.
 *
 * @namespace Directives
 * @class claimMember
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimMember', [])
  .directive('claimMember', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-member.html',
        scope: {
          /**
          * The name of the member.
          *
          * @memberof claimMember
          * @member {String} memberName
          */
          memberName: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for claims filter button
 *
 * @namespace Directives
 * @class claimsFilterButton
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimsFilterCriteria', [

  ])
  .directive('claimsFilterCriteria', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claims-filter-criteria.html',
        scope: {
          members: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          'claimsService',
          'adobeService',
          function($scope, $rootScope, $location, claimsService, adobeService) {
            $scope.claimsFilter = {
              'isSelected'  : 'false',
              'claimsStatus': '',
              'startMonth'  : '',
              'endMonth'    : ''
            };

            $scope.loc                = $rootScope.loc;
            $scope.gotoView           = $rootScope.gotoView;
            $scope.filteredDates      = claimsService.generateFilterDates($rootScope.selectedPolicy);
            $scope.selection          = claimsService.initializeMemberList($scope.members, true);
            $scope.claimStatusButtons = [];

            var button1 = {'name': 'claimstatusradio', 'label':$rootScope.loc.ANY_STATUS,'value':'ALL','status':true};
            var button2 = {'name': 'claimstatusradio', 'label':$rootScope.loc.PROCESSED_STATUS,'value':'PROCESSED','status':false};
            var button3 = {'name': 'claimstatusradio', 'label':$rootScope.loc.PENDING_STATUS,'value':'PROCESSING','status':false};

            $scope.claimStatusButtons.push(button1);
            $scope.claimStatusButtons.push(button2);
            $scope.claimStatusButtons.push(button3);

            $scope.keyword = $location.search().keyword || '';

            /**
            * This method toggles the member selection on/off. It is used by the checkbox directive.
            *
            * @memberof claimsFilterCriteria
            * @member {String} memberName  The name value for the member being chosen.
            */
            $scope.toggleSelection = function toggleSelection(memberName) {
               var index = $scope.selection.indexOf(memberName);
           
               // is currently selected
               if (index > -1) {
                 $scope.selection.splice(index, 1);
               }
           
               // is newly selected
               else {
                 $scope.selection.push(memberName);
               }
            };

          /**
           * This method is a pass through to the service method perfoming the filtering. See
           * claimsService.generateFilterQuery.
           *
           * @memberof claimsFilterCriteria
           * @method generateFilterQuery
           * @param  {Object}  selection         The holding area for those member's selected.
           * @param  {String}  claimsStatus      The selected status for the claim.
           * @param  {Date}    startMonth        The starting filter date.
           * @param  {Date}    endMonth          The ending filter date.
           * @param  {Date}    effectiveDate     The currently selected policy's start date.
           * @param  {Date}    expirationDate    The currently selected policy's end date.
           * @param  {String}  keyword           The user entered search term.
           */
            $scope.filterClaims = function() {
              var queryPath = claimsService.generateFilterQuery($scope.selection, $scope.claimsFilter.claimsStatus, $scope.claimsFilter.startMonth, $scope.claimsFilter.endMonth, $rootScope.selectedPolicy.effectiveDate, $rootScope.selectedPolicy.expirationDate, $scope.keyword);

              $rootScope.gotoView('/claims/search?' + queryPath);
            };


            /**
             * This method is called on the ng-change of the fitler dates. It is used to not allow the form
             * to be submitted if the date range is invalid.
             *
             * @memberof claimsFilterCriteria
             * @method validateDates
             */
            $scope.validateDates = function() {
              if ($scope.claimsFilter.endMonth < $scope.claimsFilter.startMonth) {
                $scope.claimsFilterForm.$invalid = true;
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a list of claims.
 *
 * @namespace Directives
 * @class claimsList
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimsList', [])
  .directive('claimsList', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claims-list.html',
        scope: {
          /**
          * The claims to display.
          *
          * @memberof claimsList
          * @member {Object} claims
          */
          claims: '=',
          showRibbon: '=',
          filterText: '=',
          policySelection: '=',
          hasCcr: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          'claimsService',
          'adobeService',
          'config',
          function($scope, $rootScope, claimsService, adobeService, config) {
            $scope.loc      = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            if ($scope.claims !== null) {
              $scope.claimsCountText  = claimsService.displayClaimsCount($scope.claims);
            }

            if ($scope.claims.length > 0) {
              $rootScope.hasClaims = true;
            }

            $scope.claimsFilterText = $scope.filterText;

            /**
             * Opens the individual claim view if no claim is swiped.
             *
             * @memberof claimsList
             * @method openClaim
             * @param  {Object} claim The claim to open.
             */
            $scope.openClaim = function(claim) {
              for(var i = 0; i < $scope.claims.length; i++) {
                if($scope.claims[i].swiped) {
                  $scope.claims[i].swiped = false;
                  return;
                }
              }

              $rootScope.gotoView('/claims/' + claim.claimId + '/' + claim.dependentNo);
            };

            /**
             * Opens the claim options when swiped left.
             *
             * @memberof claimsList
             * @method swipeClaim
             * @param  {Object} claim The claim swiped.
             */
            $scope.swipeClaim = function(claim) {
              for(var i = 0; i < $scope.claims.length; i++) {
                if($scope.claims[i].swiped) {
                  $scope.claims[i].swiped = false;
                }
              }
              claim.swiped = true;
            };

            /**
             * Closes the claim options when swiped right.
             *
             * @memberof claimsList
             * @method unswipeClaim
             * @param  {Object} claim The claim swiped.
             */
            $scope.unswipeClaim = function(claim) {
              if(claim.swiped) {
                claim.swiped = false;
              }
            };

            $scope.resetFilter = function() {
              $scope.claimsFilterText = claimsService.displayNoFilterText();
              $rootScope.gotoView('/claims/search');
            };

            /**
             * Generates the claim header string based on the policy type.
             *
             * @memberof claimsList
             * @method getClaimsTitle
             */
            $scope.getClaimsTitle = function() {
              var titleString = "";

              switch ($scope.policySelection.choice) {
                  case "RX_ONLY":
                    titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                    break;
                  case "BBTRX_ONLY":
                      titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                      break;
                  case "DENTAL_ONLY":
                    titleString = $rootScope.loc.DENTAL_CLAIMS;
                    break;
                  case "VISION_ONLY":
                    titleString = $rootScope.loc.BLUE2020_CLAIMS_VISION_CLAIMS;
                    break;
                  default:
                    break;
              }

              return titleString;
            };

            /**
             * Pass through method to external links for dental claims
             *
             * @memberof claimsList
             * @method gotoDentalClaims
             */
            $scope.gotoDentalClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for vision claims
             *
             * @memberof claimsList
             * @method gotoVisionClaims
             */
            $scope.gotoVisionClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug claims
             *
             * @memberof claimsList
             * @method gotoDrugClaims
             */
            $scope.gotoDrugClaims = function(ssoLink) {
              var data = {
                ssoLink : ssoLink,
                page : "RxClmDetl"
              };
              return $rootScope.openInSecureBrowser(data);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for claims search input.
 *
 * @namespace Directives
 * @class claimsSearchInput
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimsSearchInput', [])
  .directive('claimsSearchInput', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claims-search-input.html',
        scope: true,
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          'claimsService',
          'coachmarkService',
          function($scope, $rootScope, $location, claimsService, coachmarkService) {

            $scope.loc          = $rootScope.loc;
            $scope.policyIndex  = $rootScope.policyIndex;

            if ($rootScope.hasClaims) {
              coachmarkService.showCoachmarks('claims');
            }

            /**
            * The query string to search by.
            *
            * @memberof claimsSearchInput
            * @member {String} query
            */
            $scope.query        = $location.search().keyword || '';
            $scope.searchParams = $location.search() || '';

            /**
             * Focuses on the search input.
             *
             * @memberof claimsSearchInput
             * @method focusOnSearchInput
             */
            $scope.focusOnSearchInput = function() {
              angular.element('.search-input input').focus();
            };

            /**
             * Validates the query string.
             *
             * @memberof claimsSearchInput
             * @method queryIsValid
             */
            $scope.queryIsValid = function() {
              if($scope.query.length < 3) {
                return false;
              }
              if(($scope.query === $location.search().keyword) && ($scope.policyIndex === $rootScope.policyIndex)) {
                return false;
              }

              return true;
            };

            $scope.filterResults = function(query) {
              if (query) {
                $rootScope.gotoView('/claims/filter?keyword='+query);
              }
              else {
                $rootScope.gotoView('/claims/filter');
              }
            };

            /**
             * Performs the search.
             *
             * @memberof claimsSearchInput
             * @method search
             */
            $scope.search = function() {
              $scope.hideKeyboard();
              if(!$scope.queryIsValid()) {
                return;
              }

              var basicSearch = claimsService.generateFilterQuery($location.search().dependentNo, $scope.searchParams.claimsStatus, $scope.searchParams.startMonth, $scope.searchParams.endMonth, $scope.searchParams.effectiveDate, $scope.searchParams.expirationDate, $scope.query);

              $location.url($location.path() + '?' + basicSearch);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * @description Directive for the reusable coachmark.
 * @namespace Directives
 * @class coachmark
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.coachmark', [])
    .directive('coachmark', [
      '$q',
      '$rootScope',
      '$timeout',
      'cordovaService',
      'storageService',
      function($q, $rootScope, $timeout, cordovaService, storageService) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/coachmark.html',
          scope: false,
          link: function ($scope, $element, $attrs) {
            $scope.close = close;
            $scope.show = show;
            $scope.prevPage = prevPage;
            $scope.nextPage = nextPage;
            var localCoachmarksSettings = {};

            function show(coachmarksDataForPage) {
              console.log('coachmarks requested for page %s', coachmarksDataForPage.identifier);
              return getCoachmarksSettings()
                .then(function(coachmarksData) {
                  // if we've already shown the coachmarks to this Member
                  if (coachmarksData[coachmarksDataForPage.identifier] === coachmarksDataForPage.version) {
                    return false;
                  }

                  return showCoachmarksElement(coachmarksDataForPage);
                })
                .then(function(setCoachmarks) {

                })
                .catch(showCoachmarksErrorHandler);
            }

            function showCoachmarksErrorHandler(error) {
              // if we're in the browser, still show coachmarks
              if (error === 'Cordova library not present.') {
                return showCoachmarksElement();
              }

              // if there were no settings related to coachmarks,
              // set those and then show the coachmarks
              if (error.code === 2) {
                return setCoachmarksSettings({})
                  .then(function(setCoachmarksSettingsSuccess) {
                    return show();
                  });
              }
            }

            function showCoachmarksElement(coachmarksDataForPage) {
              $scope.coachmark = coachmarksDataForPage;

              // each valid page must have a highlight object with a property
              // named "target", so we'll filter out the pages w/o this property
              // at the time that this runs, we will check for the presence of the element on the page,
              // and if it doesn't exist at time of execution, we'll skip that specific coachmark.
              $scope.coachmark.pages = $scope.coachmark.pages.filter(function(currentPage) {
                return angular.element(currentPage.highlight.target).length > 0;
              });

              if ($scope.coachmark.pages.length > 0) {
                angular.element('.coachmark').show();
                angular.element('#app-container').addClass('no-scroll');
                postNavigate();
              } else {
                console.log('No coachmark pages to show for page %s', coachmarksDataForPage.identifier, coachmarksDataForPage);
              }
            }

            function nextPage() {
              preNavigate();
              if ($scope.coachmark.currentPage < $scope.coachmark.pages.length - 1) {
                $scope.coachmark.currentPage = $scope.coachmark.currentPage + 1;
                postNavigate();
              }
            };

            function prevPage() {
              if ($scope.coachmark.currentPage > 0) {
                preNavigate();
                $scope.coachmark.currentPage = $scope.coachmark.currentPage - 1;
                postNavigate();
              }
            }

            function preNavigate() {
              if ($scope.coachmark && typeof $scope.coachmark.currentPage === 'undefined') {
                console.warn('No current page but scope is here', $scope.coachmark);
              }
              var currentPage = $scope.coachmark.pages[$scope.coachmark.currentPage];

              // Undo any triggers
              if (currentPage && currentPage.trigger) {
                // Get out of $apply cycle conflicts
                $timeout(function () {
                  angular.element(currentPage.trigger).triggerHandler('click');
                });
              } else {
                console.warn('Current page but no trigger', $scope.coachmark);
              }
            }

            function postNavigate() {
              var currentPage = $scope.coachmark.pages[$scope.coachmark.currentPage];

              if (currentPage && currentPage.trigger) {
                // Get out of $apply cycle conflicts
                $timeout(function () {
                  angular.element(currentPage.trigger).triggerHandler('click');
                });
              } else {
                console.warn('Current page has no trigger', currentPage);
              }

              // Avoid race condition of any triggers
              $timeout(function () {
                if (!currentPage) {
                  return console.warn('No current page but inside of $timeout', $scope);
                }
                var toHighlight = angular.element(currentPage.highlight.target)[0];
                var backdrop = angular.element('.coachmark-backdrop');

                try {
                  toHighlight.scrollIntoView();

                  var position = toHighlight.getBoundingClientRect();

                  backdrop
                    .css('top', position.top)
                    .css('left', position.left)
                    .css('height', position.height)
                    .css('width', position.width)
                    .attr('class', 'coachmark-backdrop')
                    .addClass(currentPage.highlight.style);
                }
                catch (e) {
                  backdrop
                    .css('top', 0)
                    .css('left', 0)
                    .css('height', 0)
                    .css('width', 0)
                    .attr('class', 'coachmark-backdrop');
                }
              }, 50);
            };

            function close() {
              getCoachmarksSettings()
                .then(function(coachmarksData) {
                  // once user has closed coachmarks, save their version
                  coachmarksData[$scope.coachmark.identifier] = $scope.coachmark.version;
                  hideCoachmarksDisplay();
                  return setCoachmarksSettings(coachmarksData);
                })
                .then(function(coachmarksSaved) {

                })
                .catch(function(setCoachmarksSettingsError) {

                });
            };

            function getCoachmarksSettings() {
              if (cordovaService.deviceIsBrowser()) {
                console.log('coachmarks setting', localCoachmarksSettings);
                return $q.resolve(localCoachmarksSettings);
              }
              return storageService.get('coachmarks:' + $rootScope.selectedPolicy.externalId);
            }

            function setCoachmarksSettings(incomingObj) {
              if (cordovaService.deviceIsBrowser()) {
                localCoachmarksSettings = incomingObj;
                console.log('coachmarks setting', localCoachmarksSettings);
                return $q.resolve(localCoachmarksSettings);
              }
              return storageService.set('coachmarks:' + $rootScope.selectedPolicy.externalId, incomingObj);
            }

            function hideCoachmarksDisplay() {
              angular.element('.coachmark').hide();
              angular.element('#app-container').removeClass('no-scroll');
            }
          }
        };
      }
    ]);
 }());

/**
 * Directive for a contraceptive-only-info.
 *
 * @namespace Directives
 * @class contraceptiveOnlyInfo
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.contraceptiveOnlyInfo', [])
    .directive('contraceptiveOnlyInfo', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/contraceptive-only-info.html',
          scope: {
            /**
            * The title of the contraceptive-only-info.
            *
            * @memberof contraceptiveOnlyInfo
            * @member {String} title
            */
            data: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            'helpService',
            function($scope, $rootScope, helpService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;

              $scope.openModal = function() {
                  $rootScope.headerTerm = $scope.data.modalHeader;
                  $scope.helpInfo = {
                    benefitsModalText: $scope.data.modalText,
                    contraceptiveInfo : true
                  };
                  helpService.help($scope.helpInfo);
              };
            }
          ]
        };
      }
    ]);
  }());
  
/**
 * Directive for validating a credit card number based upon
 * specific rules related to length and format
 *
 * @namespace Directives
 * @class creditCardNumberValidation
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.creditCardNumberValidation', [])
  .directive('creditCardNumberValidation', [
    function() {
      return {
        restrict: 'A',
        link: function($scope, $elem, $attrs) {
          // var inputCloseToMax = false;
          // var maxLength = $attrs.maxLength;
          // $elem.find('input').on('keyDown', function(ev) {
          //   if ()
          // });
          // $attrs.$observe('creditCardNumberValidation', function(value) {
          //   console.log(arguments);
          //   if (value.length === (maxLength - 1)) {
          //     inputCloseToMax;
          //   }
          // });
        }
      };
    }
  ]);
}());

/**
 * Directive for the customer service cards.
 *
 * @namespace Directives
 * @class customerServiceCard
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.customerServiceCard', [])
    .directive('customerServiceCard', [
      function (customerServiceHoursServices) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/customer-service-card.html',
          scope: {
            /**
             * The customer service numbers details to display.
             *
             * @memberof customerServiceCard
             * @member {Object} customerServiceCardDetails
             */
            customerServiceCardDetails: '=',
            secureInbox: '=',
            localization: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'adobeService',
            function ($scope, $rootScope, adobeService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.customerServiceDetails = [];
              $scope.hideClosedNowHoursUnavailable = false;
              $scope.openRightNow = [];

              var section = 'Call Customer Service';
              $rootScope.startingView = section;
              var hoursForPDPTTY = null;
              var openSevenDaysPDPTTY = null;
              if ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem.toLowerCase() === 'amisys') {
                $scope.customerServiceCardDetails.forEach(function(element){
                  if (element.serviceTiltles.name === 'BlueMedicareRx(PDP)') {
                    hoursForPDPTTY = element.serviceHours.hours;
                    openSevenDaysPDPTTY = element.serviceHours.openSevenDays;
                  }
                  if (element.serviceTiltles.name === 'BlueMedicareRx(PDP)(TTY)') {
                  element.serviceHours.hours = hoursForPDPTTY ? hoursForPDPTTY : element.serviceHours.hours;
                  element.serviceHours.openSevenDays = openSevenDaysPDPTTY ? openSevenDaysPDPTTY : element.serviceHours.openSevenDays;
                  }
                });
              }

              for (var i = 0; i < $scope.customerServiceCardDetails.length; i++) {
                var singleServiceTitle = $scope.customerServiceCardDetails[i].serviceTiltles;
                var singleServiceHours = $scope.customerServiceCardDetails[i].serviceHours;

                var singleServiceDetails = {
                  title: singleServiceTitle.title,
                  phones: singleServiceHours.number,
                  icon: singleServiceTitle.icon,
                  class: singleServiceTitle.class,
                  openEveryday: singleServiceHours.openEveryday,
                  openSevenDays: singleServiceHours.openSevenDays,
                  twoOpenTimeTypes: singleServiceHours.twoOpenTimeTypes,
                  hours: singleServiceHours.hours,
                  url: singleServiceTitle.url,
                  mainContent: singleServiceTitle.mainContent,
                  questionTypes: singleServiceTitle.questionTypes,
                  // tty: (singleServiceTitle.name === 'ttytddnumber') ? true : false
                };

                if (singleServiceTitle.title.indexOf('TTY') >= 0) {
                  singleServiceDetails.tty = true;
                } else {
                  singleServiceDetails.tty = false;
                }

                $scope.customerServiceDetails.push(singleServiceDetails);
              }


              /**
               * Display information for the customer services cards
               *
               * @memberof customerServiceCard
               * @method convertDisplayTime
               */
              var convertDisplayTime = function (value) {
                var hoursH = null;
                var hoursM = null;
                var am = " a.m.";
                var pm = " p.m.";
                var colon = ":";
                if (value %100 === 0) {
                  hoursH = value / 100;
                  hoursM = "00";
                } else {
                  hoursH = Math.round(value / 100);
                  hoursM = value %100;
                }
                return hoursH > 11 ? (hoursH - 12 + colon + hoursM + pm) : 
                  (hoursH + colon + hoursM + am);
              };

              /**
               * Display information for the customer services cards
               *
               * @memberof customerServiceCard
               * @method mondayFridaySchedule
               */

              $scope.openHours = function(customerService, index) {
                var hours = customerService.hours;
                var openSevenDays = customerService.openSevenDays;
                var serviceHours = [];
                var hoursAvailableBoolean = [];
                var hoursNotAvailable;

                var openTimeType1 = null;
                var closeTimeType1 = null;
                var dayStringType1 = '';
                var timeStringType1 = '';
                var openTimeType2 = null;
                var closeTimeType2 = null;
                var dayStringType2 = '';
                var timeStringType2 = '';

                for (var i = 0; i < hours.length; i++) {

                  if (!openTimeType1 && !closeTimeType1 && !dayStringType1) {
                    openTimeType1 = hours[i].open;
                    closeTimeType1 = hours[i].close;
                    dayStringType1 = hours[i].day;
                    timeStringType1 = openTimeType1 + ' - ' + closeTimeType1;
                  } else if (hours[i].open === openTimeType1 && hours[i].close === closeTimeType1) {
                    if (dayStringType1.indexOf('-') > -1) {
                      dayStringType1 = dayStringType1.substring(0, dayStringType1.indexOf('-'));
                      dayStringType1 += ' - ' + hours[i].day;
                    } else {
                      dayStringType1 += ' - ' + hours[i].day;
                    }
                  } else if (hours[i].open !== openTimeType1 || hours[i].close !== closeTimeType1) {
                    if (!openTimeType2 && !closeTimeType2 && !dayStringType2) {
                      openTimeType2 = hours[i].open;
                      closeTimeType2 = hours[i].close;
                      dayStringType2 = hours[i].day;
                      timeStringType2 = openTimeType2 + ' - ' + closeTimeType2;
                    } else if (hours[i].open === openTimeType2 && hours[i].close === closeTimeType2) {
                      if (dayStringType2.indexOf('-') > -1) {
                        dayStringType2 = dayStringType2.substring(0, dayStringType2.indexOf('-'));
                        dayStringType2 += ' - ' + hours[i].day;
                      } else {
                        dayStringType2 += ' - ' + hours[i].day;
                      }
                    }
                  }
                }


                // if dayStringType1 exists
                if (!!dayStringType1 && dayStringType1.length > 0) {
                  // check if it's not closed(0000) and not notAvailable(9999) -> add timeString
                  if (timeStringType1.indexOf('0000') < 0 && timeStringType1.indexOf('9999') < 0) {
                    // only create a timeString when it's not closed and hours are available
                    timeStringType1 = convertDisplayTime(openTimeType1) + ' - ' + convertDisplayTime(closeTimeType1);
                    serviceHours.unshift(dayStringType1 + ': ' + timeStringType1);
                    hoursNotAvailable = false;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                    // check if it's notAvaileble(9999) -> show message
                  } else if (timeStringType1.indexOf('9999') > -1) {
                    timeStringType1 = $rootScope.loc.HOURS_NOT_AVAILABLE;
                    serviceHours.unshift(dayStringType1 + ': ' + timeStringType1);
                    hoursNotAvailable = true;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                  }
                }

                // if dayStringType2 exists
                if (!!dayStringType2 && dayStringType2.length > 0) {
                  // check if it's not closed(0000) and not notAvailable(9999) -> add timeString
                  if (timeStringType2.indexOf('0000') < 0 && timeStringType2.indexOf('9999') < 0) {
                    timeStringType2 = convertDisplayTime(openTimeType2) + ' - ' + convertDisplayTime(closeTimeType2);
                    serviceHours.unshift(dayStringType2 + ': ' + timeStringType2);
                    hoursNotAvailable = false;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                    // check if it's notAvaileble(9999) -> show message
                  } else if (timeStringType2.indexOf('9999') > -1) {
                    timeStringType2 = $rootScope.loc.HOURS_NOT_AVAILABLE;
                    serviceHours.unshift(dayStringType2 + ': ' + timeStringType2);
                    hoursNotAvailable = true;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                  }
                }

                if (openSevenDays) {
                  hoursNotAvailable = false;
                  hoursAvailableBoolean.push(hoursNotAvailable);
                }

                $scope.getOpenTimeToday(hours, index);

                return [
                    serviceHours,
                    hoursAvailableBoolean
                ];
              };

              $scope.getOpenTimeToday = function(hours, index) {
                var offset = -5.0;
                var whatDay = new Date();
                var utc = whatDay.getTime() + (whatDay.getTimezoneOffset() * 60000);
                var today = new Date(utc + (3600000 * offset));
                var day = today.getDay();
                var todayOPenTime = null;
                var todayCloseTime = null;

                todayOPenTime = hours[day].open;
                todayCloseTime = hours[day].close;

                /**
                 * Check if the services are opened now.
                 *
                 * @memberof mondayFridaySchedule
                 * @member {Boolean} openRightNow
                 */
                if (todayOPenTime != '9999' && todayCloseTime != '9999') {
                  if (today.getHours() >= todayOPenTime / 100 && today.getHours() < todayCloseTime / 100) {
                    $scope.openRightNow[index] = true;
                  } else {
                    $scope.openRightNow[index] = false;
                  }
                }
              };

            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for customer service phone card
 *
 * @namespace Directives
 * @class customerServicePhoneCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.customerServicePhoneCard', [])
  .directive('customerServicePhoneCard', [
    function() {
      return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/customer-service-phone-card.html',
        scope: {
          cardDetails: '=',
          localization: '=',
          policy: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.customerServiceDetails = $scope.cardDetails.map(function(element) {
              const singleServiceTitle = element.serviceTitles;
              const singleServiceHours = element.serviceHours;
              const singleServiceDetails = {
                title: singleServiceTitle.title,
                phones: singleServiceHours.number,
                icon: singleServiceTitle.icon,
                class: singleServiceTitle.class,
                openEveryday: singleServiceHours.openEveryday,
                openSevenDays: singleServiceHours.openSevenDays,
                hours: singleServiceHours.hours,
                url: singleServiceTitle.url,
              };

              singleServiceDetails.tty = singleServiceTitle.title.indexOf('TTY') >= 0;

              return singleServiceDetails;
            });


            /**
             * Display information for the customer services cards
             *
             * @memberof customerServiceCard
             * @method convertDisplayTime
             */
            var convertDisplayTime = function(value) {
              var hours = value/100;
              var timeValue = ((hours > 12) ? hours - 12 + " p.m." : hours + " a.m.");

              return timeValue;
            };

            $scope.formatTime = function(str, section) {
              return str.split(':')[section === 'days' ? 0: 1];
            };

            $scope.openTimeHours = function(){
              $scope.timeStringIn = '';
              $scope.customerServiceDetails.forEach(function(element) {
                if (element.openSevenDays) {
                element.hours.forEach(function(hoursElement) {
                  var openTimeIn = hoursElement.open;
                    var closeTimeIn = hoursElement.close;
                      $scope.timeStringIn = convertDisplayTime(openTimeIn) + ' - ' + convertDisplayTime(closeTimeIn);
                });
              }
              });
              return $scope.timeStringIn;
            };

            /**
             * Display information for the customer services cards
             *
             * @memberof customerServiceCard
             * @method mondayFridaySchedule
             */
            var mondayFridaySchedule = function() {
              var dayString = '';
              var timeString = '';
              var serviceHours = [];
              var hoursAvailableBoolean = [];
              var hoursNotAvailable;
              var openTime;
              var closeTime;
              var offset = -4.0;
              var whatDay = new Date();
              var utc = whatDay.getTime() + (whatDay.getTimezoneOffset() * 60000);
              var today = new Date(utc + (3600000*offset));
              $scope.openRightNow = [];
              for (var i = 0; i < $scope.cardDetails.length; i++) {
                for (var j = 0; j < $scope.cardDetails[i].serviceHours.hours.length; j++) {

                  if(!openTime && !closeTime && !dayString) {
                    dayString = $scope.cardDetails[i].serviceHours.hours[j].day;
                    openTime = $scope.cardDetails[i].serviceHours.hours[j].open;
                    closeTime = $scope.cardDetails[i].serviceHours.hours[j].close;
                    timeString = openTime + ' - ' + closeTime;
                  } else if(openTime == $scope.cardDetails[i].serviceHours.hours[j].open && closeTime == $scope.cardDetails[i].serviceHours.hours[j].close ) {
                    if(dayString.indexOf('-') > 0) {
                      dayString = dayString.substring(0, dayString.indexOf('-'));
                      dayString = dayString + ' - ' + $scope.cardDetails[i].serviceHours.hours[j].day;
                    } else {
                      dayString = dayString + ' - ' + $scope.cardDetails[i].serviceHours.hours[j].day;
                    }
                  } else {
                    if (dayString.length > 1 && timeString.indexOf('0') < 0) {
                      if(openTime == '9999' && closeTime == '9999') {

                        serviceHours.push(timeString);
                        hoursAvailableBoolean.push(hoursNotAvailable);
                      } else {
                        serviceHours.push(dayString + ': ' + timeString);
                        hoursAvailableBoolean.push(hoursNotAvailable);
                      }
                    }


                    dayString = $scope.cardDetails[i].serviceHours.hours[j].day;
                    openTime = $scope.cardDetails[i].serviceHours.hours[j].open;
                    closeTime = $scope.cardDetails[i].serviceHours.hours[j].close;

                    if(openTime == '9999' && closeTime == '9999') {
                      timeString = $rootScope.loc.HOURS_NOT_AVAILABLE;
                      hoursNotAvailable = true;
                    } else {
                      timeString = convertDisplayTime(openTime) + ' - ' + convertDisplayTime(closeTime);
                      hoursNotAvailable = false;
                    }
                  }
                }

                var day = today.getDay();
                var todayOPenTime = $scope.cardDetails[i].serviceHours.hours[day].open;
                var todayCloseTime = $scope.cardDetails[i].serviceHours.hours[day].close;

                /**
                * Check if the services are opened now.
                *
                * @memberof mondayFridaySchedule
                * @member {Boolean} openRightNow
                */
                if(todayOPenTime != '9999' && todayCloseTime != '9999') {
                  if(today.getHours() >= todayOPenTime/100 && today.getHours() < todayCloseTime/100) {
                    $scope.openRightNow[i] = true;
                  } else {
                    $scope.openRightNow[i] = false;
                  }
                }
              }

              return [
                serviceHours,
                hoursAvailableBoolean
              ];
            };
            $scope.openHours = mondayFridaySchedule();
          }
        ]
      };
    }
  ]);
}());
/**
 * Directive for the idCard Customer service tab on details page.
 *
 * @namespace Directives
 * @class idCardGroup
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.customerServiceSecureInbox', [])
  .directive('customerServiceSecureInbox', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/customer-service-secure-inbox.html',
        scope: {
          /**
          * The customer service tab to display.
          *
          * @memberof idCardCustomerService
          * @member {Object} contactDetails
          */
          customerServiceSecureInboxDetails: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          'quickAlertService',
          function($scope, $rootScope, $location, $timeout, quickAlertService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            if($location.search().messageSent) {
              $rootScope.sentMessage = true;
              quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
              $timeout(function() {
                  angular.element('.quick-alert-modal').hide();
              }, 2000);
              var search = angular.copy($location.search());
              delete search.messageSent;
              $location.search(search);
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for validating a CVN number for a credit card based upon
 * specific rules related to length and format
 *
 * @namespace Directives
 * @class cvnValidation
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.cvnValidation', [])
  .directive('cvnValidation', [
    function() {
      return {
        restrict: 'A',
        link: function($scope, $elem, $attrs) {
          $elem.find('input').on('keydown', function(ev) {
            if (ev.key === 'Backspace') {
              return true;
            }
            if (this.value.length >= 4) {
              return false;
            }
          });
        }
      };
    }
  ]);
}());

/**
 * Directive for a dental-only-info.
 *
 * @namespace Directives
 * @class dentalOnlyInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.dentalOnlyInfo', [])
  .directive('dentalOnlyInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/dental-only-info.html',
        scope: {
          /**
          * The title of the dental-only-info.
          *
          * @memberof dentalOnlyInfo
          * @member {String} title
          */
          data: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'shareService',
          'adobeService',
          function($scope, $rootScope, shareService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.trackAction = $rootScope.trackAction;


            document.addEventListener("deviceready", onDeviceReady, false);

            function onDeviceReady() {
              var devicePlatform = device.platform;
              $scope.openPDF = function(url){
                if (devicePlatform !== 'iOS') {
                  /**
                  * Android can not open PDF using openInBrowser
                  * Adding google drive prefix link to open PDF in browser
                  */
                  $rootScope.$emit('pageLoading');
                  DocumentViewer.previewFileFromUrlOrPath(
                        function (success) {
                          $rootScope.$emit('pageLoaded');
                      },
                        function (error) {
                          console.log(error);
                          $rootScope.$emit('pageLoaded');
                      },
                      url, 'benefits.pdf');
                  } else {
                    $scope.openInBrowser(url);
                  }
              }
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for bottons that load documents.
 *
 * @namespace Directives
 * @class documentButtons
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.documentButtons', [])
  .directive('documentButtons', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/document-buttons.html',
        scope: {
          /**
          * The buttons to display.
          *
          * @memberof documentButtons
          * @member {Array} buttons
          */
          buttons: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$window',
          'restService',
          'adobeService',
          function($scope, $rootScope, $location, $window, restService, adobeService) {
            var VIEWSTATE = {
              INITIAL   : 'INITIAL',
              PROCESSING: 'PROCESSING',
              FINAL     : 'FINAL',
              ERROR     : 'ERROR'
            };

            $scope.loc        = $rootScope.loc;
            $scope.gotoView   = $rootScope.gotoView;
            $scope.foundEOB   = null;
            $scope.EOBState   = VIEWSTATE.INITIAL; //Default value for the specific button

            /**
             * The onClick method for the Viewing benefits coverages and documents.
             *
             * @memberof documentButtons
             * @method viewCoverages
             * @param  {String} buttonId The button ID defined in station.
             */
            $scope.viewCoverages = function(buttonId) {
              $scope.trackButtonAction('benefitsViewCoverageDetails');
              $rootScope.gotoView('/benefits/viewcoverage');
            };

            /**
             * The onClick method for the View Total Benefits button.
             *
             * @memberof documentButtons
             * @method viewBenefits
             * @param  {String} buttonId The button ID defined in station.
             */
            $scope.viewBenefits = function(buttonId) {
              $rootScope.gotoView('/benefits');
            };

            $scope.trackButtonAction = function(action){
              adobeService.trackAction(action, $scope.buttons[0].section);
            }

            /**
             * The onClick method for the EOB button.
             *
             * @memberof documentButtons
             * @method viewEOB
             * @param  {String} buttonId The button ID defined in station.
             */
            $scope.viewEOB = function(buttonId) {
              if ($scope.EOBState === VIEWSTATE.INITIAL) {
                $rootScope.pausedForReadPDF = true;
                $scope.trackButtonAction('claimDetails:eob:load');
                loadEOBDocument(buttonId, $scope.EOBState);
              }
              else if ($scope.EOBState === VIEWSTATE.FINAL) {
                //User has pressed button to retrieve document
                displayEOBDocument();
              }
            };

            var loadEOBDocument = function(buttonId, currentState) {
              if (currentState === VIEWSTATE.INITIAL) {
                $scope.EOBState = VIEWSTATE.PROCESSING;

                angular.element('#'+buttonId + ' #span' + buttonId).html($rootScope.loc.LOADING_PLEASE_WAIT);
                angular.element('#'+buttonId + ' #icon' + buttonId).removeClass("fc-pdf").addClass("fa fa-2x fa-spinner fa-pulse");

                var query = $location.search();

                var queryData = "policyindex=" + $rootScope.policyIndex +
                "&policyExternalId=" + $rootScope.selectedPolicy.externalId +
                "&policyEffectiveDate=" + $rootScope.selectedPolicy.effectiveDate +
                "&policyExpirationDate=" + $rootScope.selectedPolicy.expirationDate +
                "&dependentNo=" + query.dependentNo +
                "&docType=EOB" + "&claimId="+ query.id +
                "&url="+ $location.path();

                //Grab the data from service
                restService.getData('documents?' + queryData, $rootScope.language || 'en').then(function(docBytes) {
                  return docBytes;
                }).then(function(docBytes) {
                  if (docBytes) {
                    angular.element('#'+buttonId).addClass("sync-benefits-pdf")
                    angular.element('#'+buttonId + ' #span' + buttonId).html($rootScope.loc.EOB_PDF + '<i class=\'fc-pdf fc-lg\' ng-click="trackButtonAction(\'readyViewEOB\', \'Claims-Details\')"></i>'+'<hr/>'+$rootScope.loc.READY_TO_VIEW);
                    angular.element('#'+buttonId + ' #icon' + buttonId).removeClass("fa fa-2x fa-spinner fa-pulse");

                    $scope.foundEOB = docBytes[0].documentImageBlob;

                    $scope.EOBState = VIEWSTATE.FINAL;
                  }
                },function(error) {
                  $scope.EOBState = VIEWSTATE.ERROR;

                  angular.element('#'+buttonId).addClass("error-benefits-pdf")
                  angular.element('#'+buttonId + ' #span' + buttonId).html($rootScope.loc.EOB_PDF + '<i class=\'fc-pdf fc-lg\'></i>'+'<hr/><span class="pdf-warn">'+$rootScope.loc.DOCUMENT_NOT_FOUND + '</span>');
                  angular.element('#'+buttonId + ' #icon' + buttonId).removeClass("fa fa-2x fa-spinner fa-pulse");
                });
              }
            };

            var displayEOBDocument = function() {
              $scope.trackButtonAction('claimDetails:eob:view');
              if(typeof cordova !== 'undefined') {
                DocumentViewer.saveAndPreviewBase64File(function(success) {}, function(err) {
                  console.log(err);
                }, $scope.foundEOB, 'application/pdf', cordova.file.cacheDirectory, 'preview.pdf');
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a clickable help icon that opens the help modal.
 *
 * @namespace Directives
 * @class dynamicHelpIcon
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.dynamicHelpIcon', [])
  .directive('dynamicHelpIcon', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/dynamic-help-icon.html',
        scope: {
          /**
          * The filename of the help content.
          *
          * @memberof helpIcon
          * @member {String} fileName
          */
          info : '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            /**
            * Call the helpService to display relative information
            * that might be helpful to the user
            *
            * @memberof helpIcon
            * @method showHelp
            * @param  {String} filename The name of the helpfile to load.
            */
            $scope.help = function(info) {
              helpService.help(info);
            };
          }
        ]
      };
    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageConfirmation', [])
    .directive('editAutopayFlowPageConfirmation', function() {
      return {
        scope: {
          serviceResponse: '<'
        },
        templateUrl: 'partials/edit-autopay-flow-page-confirmation.html',
        controller: ['PaymentFlowFactory', '$rootScope', '$scope', function(PaymentFlowFactory, $rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;
          $scope.userSetData = PaymentFlowFactory.getUserSetData();

          $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                  $scope.loc.BP_BANK_DRAFT :
                  $scope.loc.BP_CREDIT_CARD
          );

          $scope.returnToAccountSummary = function() {
            PaymentFlowFactory.reset();
            $rootScope.gotoView('/billing');
          };

          $scope.trackerInfo = {
            step: 'CONFIRMATION'
          };
        }]
      }
    });
})();
(function () {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageDetails', [])
    .directive('editAutopayFlowPageDetails', function () {
      return {
        scope: {
          serviceResponse: '<'
        },
        templateUrl: 'partials/edit-autopay-flow-page-details.html',
        controller: ['config', 'PaymentFlowFactory', '$http', '$q', '$rootScope', '$scope',
          function (config, PaymentFlowFactory, $http, $q, $rootScope, $scope) {
            $scope.userSetData = PaymentFlowFactory.getUserSetData();
            $scope.creditCardSignatureError = false;
            // Sets the scope variables and functions
            initializePage();

            /**
             * Initializing the page
             */
            function initializePage() {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;

              $scope.trackerInfo = {
                step: 'DETAILS'
              };

              // Defining page back behavior broadcasted from the header directive
              $scope.$on('PAGE_BACK', function () {
                if ($scope.editAutopayDetailsForm.bankDraftForm) {
                  saveBankDetails($scope.editAutopayDetailsForm);
                }
                $rootScope.gotoView('/edit-autopay-flow/method');
              });

              // Setting the localized string for the payment method
              $scope.localizedPaymentMethod = (
                PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                  $scope.loc.BP_BANK_DRAFT :
                  $scope.loc.BP_CREDIT_CARD
              );

              // Setting the localized string for the billing method to display
              var billingMethod = PaymentFlowFactory.getBillingMethod();
              if (billingMethod === 'none') {
                $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
              }
              if (billingMethod === 'email') {
                $scope.localizedBillingMethod = $scope.loc.EMAIL;
              }
            }
            // End of init function

            /**
             *
             * @param {*} formObj
             */
            $scope.validateEditAutopayDetails = function (formObj) {
              // Remove error message immediately after resubmission
              $scope.creditCardSignatureError = false;
              // Validate the form fields
              formObj.paymentFlowTermsConditions.acceptedAgreement.$setDirty();
              if (formObj.bankDraftForm) {
                setBankFormDirty(formObj);
              }
              if (formObj.creditCardDetailsForm) {
                setCreditFormDirty(formObj)
              }
              if (formObj.$invalid) {
                return;
              }

              // Save user inputs for bankdraft
              if ($scope.userSetData.paymentMethod === 'bankdraft') {
                saveBankDetails(formObj);
                $rootScope.gotoView('/edit-autopay-flow/review');
              }
              // Save user inputs for credit details
              if ($scope.userSetData.paymentMethod === 'creditcard') {
                postAndSaveCreditDetails(formObj)
                  .then(function () {
                    $rootScope.gotoView('/edit-autopay-flow/review');
                  })
                  .catch(function (error) {
                    $scope.creditCardSignatureError = true;
                    $rootScope.$emit('pageLoaded');
                  });
              }
            }

            /**
             *
             */
            function setBankFormDirty(formObj) {
              formObj.bankDraftForm.accountOwnersName.$setDirty();
              formObj.bankDraftForm.accountType.$setDirty();
              formObj.bankDraftForm.bankRoutingNumber.$setDirty();
              formObj.bankDraftForm.bankAccountNumber.$setDirty();
              formObj.bankDraftForm.confirmAccountNumber.$setDirty();
            }

            /**
             *
             */
            function setCreditFormDirty(formObj) {
              formObj.creditCardDetailsForm.creditCardNumber.$setDirty();
              formObj.creditCardDetailsForm.cvn.$setDirty();
              formObj.creditCardDetailsForm.firstName.$setDirty();
              formObj.creditCardDetailsForm.month.$setDirty();
              formObj.creditCardDetailsForm.year.$setDirty();
            }

            /**
             *
             * @param {Object} formObj
             * @return {Promise}
             */
            function postAndSaveCreditDetails(formObj) {
              $scope.creditCardSignatureError = false;
              $rootScope.$emit('pageLoading');
              var creditCardData = {
                account: {
                  token: $scope.serviceResponse.token
                },
                paymentFrequency: 'RCC',
                authAmount: 2, // this does not matter because they are not using this in the hashed signature
                emailAddress: $scope.serviceResponse.identity.email,
                firstName: $scope.serviceResponse.identity.givenName,
                lastName: $scope.serviceResponse.identity.familyName
              };
              return $q(function (resolve, reject) {
                $http.post(config.apiUrl + '/signature', creditCardData)
                  .then(function (response) {
                    PaymentFlowFactory.setSignature(response.data.signature);
                    PaymentFlowFactory.setMerchantReferenceCode(response.data.merchantReferenceCode);
                    PaymentFlowFactory.setEnrollmentProcessNumber(response.data.enrollmentProcessNumber);
                    resolve();
                  })
                  .catch(reject);
              });
            }

            /**
             *
             * @param {*} formObj
             */
            function saveBankDetails(formObj) {
              PaymentFlowFactory
                .setAccountHolderName(formObj.bankDraftForm.accountOwnersName.$modelValue)
                .setAccountType(formObj.bankDraftForm.accountType.$modelValue)
                .setRoutingNumber(formObj.bankDraftForm.bankRoutingNumber.$modelValue)
                .setAccountNumber(formObj.bankDraftForm.bankAccountNumber.$modelValue)
                .setConfirmedAccountNumber(formObj.bankDraftForm.confirmAccountNumber.$modelValue);
            }


          }]
      }
    });
})();

(function () {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageMethod', [])
    .directive('editAutopayFlowPageMethod', function () {
      return {
        scope: {
          serviceResponse: '=?'
        },
        templateUrl: 'partials/edit-autopay-flow-page-method.html',
        controller: ['PaymentFlowFactory', '$rootScope', '$scope', '$window', function (PaymentFlowFactory, $rootScope, $scope, $window) {
          // aliasing functions to user in scope
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;

          $scope.padAmt = function(amt) {
            var amount = amt.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return amount;
          };

          //setting intial values from preferences
          if (!PaymentFlowFactory.getBillingMethod()) {
            PaymentFlowFactory.setBillingMethod($scope.serviceResponse.preferences.billingMethod.toLowerCase());
          }
          if (!PaymentFlowFactory.getEmailAddress()) {
            PaymentFlowFactory.setEmailAddress($scope.serviceResponse.preferences.emailAddress);
          }

          $scope.trackerInfo = {
            step: 'METHOD'
          };
          // setting initial radio values
          $scope.paymentFrequency = 'RECURRING',
            $scope.premiumSelected = 'TRUE';

          $scope.$on('PAGE_BACK', function () {
            $window.history.back();
          });

          $scope.validateEditAutopayMethod = function (formObj) {
            // validating the form
            formObj.premiumRadioSelected.$setDirty();
            formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$setDirty();
            if (formObj.paymentFlowPaperlessAgreement) {
              formObj.paymentFlowPaperlessAgreement.acceptedAgreement.$setDirty();
            }

            if (formObj.$invalid) {
              return;
            }

            PaymentFlowFactory.setPaymentFrequency('autopay');

            // setting factory values
            PaymentFlowFactory.setPaymentMethod(formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$modelValue);
            if (formObj.autopayFlowBillingMethod) {
              PaymentFlowFactory
                .setBillingMethod(formObj.autopayFlowBillingMethod.billingMethodSelected.$modelValue);
            }

            var billingMethod = PaymentFlowFactory.getBillingMethod();
            if (billingMethod === 'none') {
              $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
            }
            if (billingMethod === 'email') {
              $scope.localizedBillingMethod = $scope.loc.EMAIL;
            }

            // redirecting view
            $rootScope.gotoView('/edit-autopay-flow/details');
          };

        }]
      }
    });
})();

(function () {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageReview', [])
    .directive('editAutopayFlowPageReview', function () {
      return {
        scope: {
          serviceResponse: '<'
        },
        templateUrl: 'partials/edit-autopay-flow-page-review.html',
        controller: ['config', 'PaymentFlowFactory', '$http', '$q', '$rootScope', '$scope',
          function (config, PaymentFlowFactory, $http, $q, $rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.submissionError = false;
            $scope.gotoView = $rootScope.gotoView;
            $scope.userSetData = PaymentFlowFactory.getUserSetData();

            $scope.trackerInfo = {
              step: 'REVIEW'
            };

            // goToPaymentDetails is used by the cancel modal
            $scope.goToPaymentDetails = function () {
              PaymentFlowFactory.resetCreditCardDetails();
              $rootScope.gotoView('edit-autopay-flow/details');
            };

            $scope.backModalObj = {
              title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
              body: $scope.loc.BP_EDIT_PAYMENT_REENTER_DETAILS,
              cancelButton: {
                title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
              },
              confirmButton: {
                color: 'blue',
                title: $scope.loc.BP_EDIT_PAYMENT_INFO
              }
            };

            $scope.$on('PAGE_BACK', function () {
              if (PaymentFlowFactory.getPaymentMethod() === 'creditcard') {
                //$scope.openModal is not defined because it's an alias passed into
                // the extendable-alert-modal directive
                return $scope.openBackModal();
                ;
              }
              $rootScope.gotoView('edit-autopay-flow/details');
            });

            $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                $scope.loc.BP_BANK_DRAFT :
                $scope.loc.BP_CREDIT_CARD
            );

            var billingMethod = PaymentFlowFactory.getBillingMethod();
            if (billingMethod === 'none') {
              $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
            }
            if (billingMethod === 'email') {
              $scope.localizedBillingMethod = $scope.loc.EMAIL;
            }


            $scope.submitPreferences = function () {
              $scope.submissionError = false;
              $rootScope.$emit('pageLoading');
              switch ($scope.userSetData.paymentMethod) {
                case 'bankdraft':
                  submitBankAutopayDetails()
                    .then(function () {
                      $scope.userSetData.paymentErrorCode = 100;
                      $scope.userSetData.successConfirmationCode = 123456789;
                      $rootScope.$emit('pageLoaded');

                      return $rootScope.gotoView('edit-autopay-flow/confirmation');
                    })
                    .catch(function (err) {
                      $scope.submissionError = true;
                      $rootScope.$emit('pageLoaded');
                    });
                  break;
                case 'creditcard':
                  submitCreditCardToCyberSource()
                    .then(function (encryptedPaymentData) {
                      $scope.userSetData.encryptedPaymentData = encryptedPaymentData;
                      return doStk2(encryptedPaymentData);
                    })
                    .then(function (response) {
                      $scope.userSetData.paymentErrorCode = response.data.statusCode;
                      $scope.userSetData.successConfirmationCode = response.data.merchantReferenceCode;
                      $rootScope.$emit('pageLoaded');
                      return $rootScope.gotoView('/payment/confirmation');
                    })
                    .catch(function (err) {
                      $scope.submissionError = true;
                      $rootScope.$emit('pageLoaded');
                    });
                  break;
              }
            };

            /**
             * @return {Promise}
             */
            function submitBankAutopayDetails() {
              var preferencesObj = {
                account: {
                  token: $scope.serviceResponse.token
                },
                preferences: {
                  mailingAddress: $scope.serviceResponse.preferences.mailingAddress,
                  emailAddress: PaymentFlowFactory.getEmailAddress(),
                  payment: {
                    bankDraftDetails: {
                      bankName: 'Bank of America', // Needed for service side validation that then discards this value
                      accountNumber: PaymentFlowFactory.getAccountNumber(),
                      routingNumber: PaymentFlowFactory.getRoutingNumber(),
                      accountType: PaymentFlowFactory.getAccountType(),
                      bankAccountHolderName: PaymentFlowFactory.getAccountHolderName()
                    }
                  },
                  updatedPreferences: {
                    paymentMethod: 'BANKDRAFT',
                    billingMethod: PaymentFlowFactory.getBillingMethod().toUpperCase(),
                    paymentFrequency: 'RECURRING'
                  },
                  priorBillingNotifPrefCode: $scope.serviceResponse.preferences.priorBillingNotifPrefCode
                },
                TIPData: $rootScope.getTIPData('SetupRcrBankDraft', '/setBillingPreferences')
              };

              return $http.post(config.apiUrl + '/setBillingPreferences', preferencesObj);
            }

            /**
             * @return {Promise}
             */
            function submitCreditCardToCyberSource() {
              return $q(function (resolve, reject) {
                if ($scope.userSetData.encryptedPaymentData) {
                  return resolve($scope.userSetData.encryptedPaymentData);
                }
                var cardRequest = {
                  environment: config.env == 'PROD' ? config.env.toLowerCase() : 'test',
                  merchantId: config.merchantId,
                  transaction: {
                    merchantReferenceCode: $scope.userSetData.merchantReferenceCode.toString()
                  },
                  card: {
                    accountNumber: $scope.userSetData.creditCardDetails.lastFour.toString(),
                    expirationMonth: $scope.userSetData.creditCardDetails.month.toString(),
                    expirationYear: '20' + $scope.userSetData.creditCardDetails.year.toString(),
                    cvNumber: $scope.userSetData.creditCardDetails.cvn.toString()
                  },
                  billing: {
                    firstName: $scope.serviceResponse.identity.givenName,
                    lastName: $scope.serviceResponse.identity.familyName,
                    postalCode: "94043"
                  },
                  signature: $scope.userSetData.signature
                };
                cybersource.processCard(cardRequest, function (result) {
                  resolve($scope.userSetData.encryptedPaymentData = result.encryptedPaymentData);
                }, reject);
              });
            }

            /**
             *
             * @param {*} result
             * @return {Promise}
             */
            function doStk2(encryptedPaymentData) {
              var data = {
                account: {
                  token: $scope.serviceResponse.token
                },
                paymentFrequency: 'RCC',
                paymentAmount: 0,
                merchantReferenceCode: $scope.userSetData.merchantReferenceCode,
                encryptedPaymentData: encryptedPaymentData,
                enrollmentProcessNumber: $scope.userSetData.enrollmentProcessNumber,
                ccFirstName: $scope.userSetData.creditCardDetails.firstName,
                ccLastName: $scope.userSetData.creditCardDetails.firstName,

                accountHolderName: $scope.userSetData.creditCardDetails.firstName,
                billingMethod: $scope.userSetData.billingMethod && $scope.userSetData.billingMethod.toUpperCase(),
                preferences: {
                  emailAddress: $scope.serviceResponse.identity.email,
                  mailingAddress: $scope.userSetData.preferences.mailingAddress,
                  priorBillingNotifPrefCode: $scope.serviceResponse.preferences.priorBillingNotifPrefCode,
                  payment: {
                    bankDraftDetails: {
                      bankName: null,
                      accountNumber: null,
                      routingNumber: null,
                      accountType: null,
                    }
                  }
                },
                TIPData: $rootScope.getTIPData('SetupRcrCreditCard', '/sale')
              };
              return $http.post(config.apiUrl + '/sale', data);
            }


          }] // End of controller declaration
      }; // End of directive return object
    }); // End of directive function call
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.editAutopayFlowPaymentReceipt', [])
    .directive('editAutopayFlowPaymentReceipt', function() {
      return {
        restrict: 'E',
        replace: false,
        scope: {
          serviceResponse: '='
        },
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.userSetData = PaymentFlowFactory.getUserSetData();
          $scope.paymentFrequencyDisplayValue = $scope.loc.BP_AUTOPAY;
          $scope.paymentMethodDisplayValue = /bank/.test($scope.userSetData.paymentMethod) ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD;
          $scope.accountTypeDisplayValue = $scope.userSetData.accountType === 'Checking' ? $scope.loc.BP_CHECKING : $scope.loc.SAVINGS;
          $scope.localizedBillingMethod = (
              PaymentFlowFactory.getBillingMethod() === 'none' ?
                  $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL :
                  $scope.loc.EMAIL
          );

        }],
        templateUrl: 'partials/edit-autopay-flow-payment-receipt.html'
      }
    })
})();
(function() {
  angular
  .module('blueconnect.mobile.directives.editBillingMethod', [])
  .directive('editBillingMethod', function() {
    return {
      restrict: 'E',
      scope: {
        preferences: '<',
        selectedPolicy: '<',
        billingToken: '<'
      },
      templateUrl: 'partials/edit-billing-method.html',
      controller: ['config', '$http', '$rootScope', '$scope', '$timeout', '$window', function(config, $http, $rootScope, $scope, $timeout, $window) {
        $scope.loc = $rootScope.loc;
        $scope.savePreferencesError = null;
        $scope.checkboxValue = false;

        // Object structure needed for address validation directive
        $scope.userData = {
          preferences: $scope.preferences.values.preferences
        };
        $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;


        // Sets the selected billing method defaulted to email
        $scope.userData.preferences.billingMethod ? $scope.billingMethodSelected = $scope.userData.preferences.billingMethod: $scope.billingMethodSelected = 'EMAIL'


        $scope.savePreferencesError = null;

        $scope.navDetails = {
          leftNavButton: {
            icon: 'back'
          },
          title: $rootScope.loc.BP_EDIT_BILLING_METHOD
        };
    
        $scope.historyBack = function() {
          $window.history.back();
        };

        $scope.acceptPaperlessFn = function() {
          $scope.checkboxValue = true;$scope.checkboxValue = true;
        };

        /**
         *
         * @param {Object} formObj
         */
        $scope.validateAndSubmitForm = function(formObj) {
          $scope.savePreferencesError = false;
          if (formObj.memberEmail) {
            formObj.memberEmail.$setDirty();
          }
          if (formObj.paperlessAgreement) {
            formObj.paperlessAgreement.$setDirty();
          }
          if ($scope.billingMethodSelected === 'POSTAL') {
            formObj.streetAddress.$setDirty();
            formObj.city.$setDirty();
            formObj.state.$setDirty();
            formObj.zipcode.$setDirty();
          }
          // return if the form is invalid
          if (formObj.$invalid) {
            return;
          }

          // post data if the form is valid
          $rootScope.$emit('pageLoading');

          $http.post(config.apiUrl + '/setBillingPreferences', {
            account: {
              token: $scope.billingToken
            },
            preferences: {
              mailingAddress: $scope.userData.preferences.mailingAddress,
              emailAddress: $scope.userData.preferences.emailAddress,
              payment: $scope.userData.preferences.payment,
              updatedPreferences: {
                paymentMethod: $scope.userData.preferences.paymentMethod,
                billingMethod: $scope.billingMethodSelected,
                paymentFrequency: $scope.userData.preferences.paymentFrequency
              },
              priorBillingNotifPrefCode: $scope.userData.preferences.priorBillingNotifPrefCode
            },
            TIPData: $rootScope.getTIPData('Chgbillstmtpref', '/setBillingPreferences')
          }).then(function(){
            $rootScope.$emit('pageLoaded');
            $rootScope.gotoView('/billing-preferences?success=true');
          }).catch(function() {
            $rootScope.$emit('pageLoaded');
            $scope.savePreferencesError = true;
          });
        };

      }]
    };

  });
})();
/**
 * Directive for display when failed to load a page.
 *
 * @namespace Directives
 * @class errorLoadingPage
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.errorLoadingPage', [])
  .directive('errorLoadingPage', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/error-loading-page.html',
        scope: {},
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.faq', [])
    .directive('faq', [
      function () {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/faq.html',
          scope: {
            /**
            * Display information for the faq page.
            *
            * @memberof about
            * @member {Object} faqDetails
            */
            faqDetails: '='
          },
          controller: [
            '$rootScope',
            '$scope',
            '$window',
            '$timeout',
            'adobeService',
            '$location',
            'quickAlertService',
            'TransparencyFactory',
            'geoLocationService',
            function ($rootScope, $scope, $window, $timeout, adobeService, $location, quickAlertService, TransparencyFactory, geoLocationService) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $scope.gotoView = $rootScope.gotoView;
              $scope.loc = $rootScope.loc;
              $scope.policy = ($rootScope.loggedIn) ? $rootScope.policies[$rootScope.selectedPolicy.index] : null;

              $scope.checkBenefitsLink = function() {
                if ($scope.policy.sourceSystem.toLowerCase() === 'amisys') {
                 return $scope.gotoView('/medicare-benefits');
                }
                return $scope.gotoView('/benefits');
              };

              $scope.gotoNavigatedPage = function(url, searchTerm, planDetails) {
                $rootScope.openMapView = false;
                if ($rootScope.vitalsError) {
                  $scope.openAlertModal();
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                $scope.planDetails = planDetails;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip) {
                  $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                } else {
                  TransparencyFactory.setZipRangeNC($scope.faqDetails.geoLocationDetails.distanceDetails.NCZipMin,$scope.faqDetails.geoLocationDetails.distanceDetails.NCZipMax);
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function(){
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function(val) {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName = $scope.faqDetails.geoLocationDetails.distanceDetails.currentLocation;
                          $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.faqDetails.geoLocationDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function(error) {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.faqDetails.geoLocationDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              }; 

              $scope.gotoBrowseLevelPage = function(url, searchTerm, planDetails) {
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                $scope.queryString = 'searchTerm='+ searchTerm + '&planName='+ planDetails.planName + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id;
                TransparencyFactory.setSearchTerm(searchTerm);
                (url !== '/find-doctor-browser') ? $rootScope.gotoView(url + '?' + $scope.queryString) : $rootScope.gotoView('/fad-auth/find-doctor');
              };

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound){
                  $rootScope.gotoView('/find-care');
                } else if ($scope.urltoNavigate !== 'find-doctor-browser') {
                  $rootScope.gotoView($scope.urltoNavigate);
                } else {
                  $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
                }
              };
   
              $scope.modalObj = {
                locationMsg: $scope.faqDetails.geoLocationDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE
                },
                values: {
                  distanceDetails: $scope.faqDetails.geoLocationDetails.distanceDetails,
                  distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.faqDetails.geoLocationDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity()
                }
              };
  
              /**
               * Expands the category by default based on the url params expand
               * $timeout helps to trigger after the document rendered.
               */
              $timeout(function () {
                var itemToExpand = $location.search().expand;
                if (itemToExpand) {
                  var categoryIndex = $scope.faqDetails.buttons[0].categories.findIndex(function(e) {
                    return e.categoryId === itemToExpand;
                  });
                  if (categoryIndex !== -1) {
                    $scope.faqDetails.buttons[0].categories[categoryIndex].expandedDiv = true;
                  }
                }
              }, 0);

              $scope.toggleItem = function (item, id, event) {
                if (!item.expandedDiv) {
                  for (var k = 0; k < $scope.faqDetails.buttons.length; k++) {
                    for (var i = 0; i < $scope.faqDetails.buttons[k].categories.length; i++) {
                      $scope.faqDetails.buttons[k].categories[i].expandedDiv = false;
                    }
                  }
                }
                item.expandedDiv = !item.expandedDiv;
              };

              $scope.toggleInnerItem = function (item, parentId, id, event) {
                if (!item.expandedDiv) {
                  for (var z = 0; z < $scope.faqDetails.buttons.length; z++) {
                    if ($scope.faqDetails.buttons[z].categories[parentId].questions) {
                      for (var w = 0; w < $scope.faqDetails.buttons[z].categories[parentId].questions.length; w++) {
                        $scope.faqDetails.buttons[z].categories[parentId].questions[w].expandedDiv = false;
                      }
                    }
                  }
                }
                item.expandedDiv = !item.expandedDiv;
              };

              $scope.alertModalObj = {
                title: $scope.faqDetails.alertModal && $scope.faqDetails.alertModal.title ? $scope.faqDetails.alertModal.title : '',
                message: $scope.faqDetails.alertModal && $scope.faqDetails.alertModal.message ? $scope.faqDetails.alertModal.message : '',
                confirmBtn: $scope.faqDetails.alertModal && $scope.faqDetails.alertModal.confirmBtn ? $scope.faqDetails.alertModal.confirmBtn : '',
              };

              /**
               * Toggles the quick-alert-modal for sent message if messageSent is true
               *
               * @memberof helpItemGroup
               */
              if ($location.search().messageSent) {
                $rootScope.sentMessage = true;
                $rootScope.sendFaqMessage = true;
                quickAlertService.showQuickAlert({ message: $rootScope.loc.MESSAGE_SENT, color: 'green' });
                $timeout(function () {
                  angular.element('.quick-alert-modal').hide();
                }, 2000);
                var search = angular.copy($location.search());
                delete search.messageSent;
                $location.search(search);
              }
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the details box on the id card details page.
 *
 * @namespace Directives
 * @class feedback
 */
(function() {
	'use strict';

	angular.module('blueconnect.mobile.directives.feedback', [])
		.directive('feedback', [
			'messageService',
			'$rootScope',
			function(messageService, $rootScope) {
				return {
					restrict: 'AE',
					replace: true,
					templateUrl: 'partials/feedback.html',
					scope: {
						/**
						 *
						 * @memberof feedback
						 * @member {Object} details
						 */
						data: '='
					},
					controller: [
						'$scope',
						'$rootScope',
						'$timeout',
						'adobeService',
						'quickAlertService',
						function($scope, $rootScope, $timeout, adobeService, quickAlertService) {
							$scope.loc = $rootScope.loc;
							$scope.gotoView = $rootScope.gotoView;
							$scope.device = $rootScope.device;

							$scope.setExperience = function( value ) {
								$scope.data.experience = value;
							};

							var setFeedback = function() {
								for(var i=0; i<$scope.data.questions.length; i++){
									var question = $('[data-question="'+i+'"]');
									var topic = question.find('select option:selected').text();
									var topicValue = question.find('select').val();
									var comment = question.find('textarea').val();
									$scope.data.questions[i].chosenTopic = topic;
									$scope.data.questions[i].chosenTopicValue = topicValue;
									$scope.data.questions[i].chosenComment = comment;
								}
							};

							var setEmailBody = function() {
								var body = 'Experience = ' + $scope.data.experience;
								for(var i=0; i<$scope.data.questions.length; i++){
									body += ', Topic: ' + $scope.data.questions[i].chosenTopic;
									body += ', Topic Value: ' + $scope.data.questions[i].chosenTopicValue;
									body += ', Comment: ' + $scope.data.questions[i].chosenComment;
								}
								$scope.data.body = body;
							};

							var showThankYou = function() {
								$('.feedback-form').hide();
								$('.feedback-thankyou').show();
							};

							$scope.submitFeedback = function(isValid) {
								setFeedback();

								if( isValid ){
									setEmailBody();

									var email ={};
									//email.to = $scope.data.email;
									email.from = $scope.data.yourEmailAddress;
									email.subject = $scope.data.subject;
									email.text = $scope.data.body;

									//hand off the email to message service for delivery
									messageService.composeEmail(angular.copy(email)).then(function(result) {
										$rootScope.messageSending = false;
									}, function(error, status) {
										$rootScope.$emit('pageLoaded');
										$rootScope.messageSending = false;

										quickAlertService.showQuickAlert({
											message: $rootScope.loc.SEND_ERROR,
											color: 'red',
											alertBottom: true
										});
										$timeout(function() {
											angular.element('.quick-alert-modal').hide();
										}, 2000);
									});
									//show thank you page after email sent to service
									showThankYou();
								}
							};

							$scope.formDone = function() {
								setTimeout(function(){
									$('#navbar-left-click').trigger('click');
								}, 300);
							};
						}
					]
				};
			}
		]);
}());

/**
 * Directive for find doctor filter
 *
 * @namespace Directives
 * @class filterDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.filterDetails', [

  ])
  .directive('filterDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/filter-details.html',
        scope: {
          findDoctorFilterDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'TransparencyFactory',
          'geoLocationService',
          '$timeout',
          'helpService',
          'languageService',
          function($scope, $rootScope, TransparencyFactory, geoLocationService, $timeout, helpService, languageService) {
            $scope.language = $rootScope.language || 'en';
            languageService.getLocale($scope.language).then(function(localeReturned) {
              $scope.loc = localeReturned;
            }).catch(console.warn);

            if ($rootScope.loggedIn) {
              $rootScope.showPolicySelect = false;
            }

            $scope.loc = $rootScope.loc;
            $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();

            $scope.currentLocationActive = (($rootScope.city.cityFullName === 'Current Location') || ($scope.findDoctorFilterDetails.filterCityName === 'Current Location')) ? true : false;
            $scope.selectedPlan = TransparencyFactory.getSelectedPlan(); // plan details the user has selected
            $scope.selectedBrowse = TransparencyFactory.getResultsTerm(); // browse icon the user has selected in find-doctor-search page
            // set initial filter value to TransparencyFactory
            $scope.specialtyIndex = $scope.findDoctorFilterDetails.listdetails.specialistDetails.defaultOptionIndex;
            $scope.initialSpecialty = $scope.findDoctorFilterDetails.listdetails.specialistDetails.values[$scope.specialtyIndex];
            TransparencyFactory.setFilterSpecialtySelectedTerm($scope.initialSpecialty.value !== -1 ? $scope.initialSpecialty.value : '');
            $scope.tierIndex = ($scope.findDoctorFilterDetails.listdetails.tierDetails) ? $scope.findDoctorFilterDetails.listdetails.tierDetails.defaultOptionIndex : null;
            $scope.initialTier = ($scope.findDoctorFilterDetails.listdetails.tierDetails) ? $scope.findDoctorFilterDetails.listdetails.tierDetails.values[$scope.tierIndex] : null;
            TransparencyFactory.setFilterTierSelectedTerm(($scope.initialTier && $scope.initialTier.value !== -1) ? {type: $scope.initialTier.type, value: $scope.initialTier.value} : {type: '', value: ''});
            $scope.genderIndex = $scope.findDoctorFilterDetails.listdetails.gender.defaultOptionIndex;
            $scope.initialGender = $scope.findDoctorFilterDetails.listdetails.gender.values[$scope.genderIndex];
            TransparencyFactory.setFilterGenderSelectedTerm($scope.initialGender.value !== -1 ? $scope.initialGender.value : '');
            TransparencyFactory.setSearchSpecialtyId($scope.findDoctorFilterDetails.filter_specialty_id);
            TransparencyFactory.setLocationMsg($scope.findDoctorFilterDetails.locationMsg);
            $scope.locationBlocked = TransparencyFactory.getLocationBlocked();
            $scope.locationMsg = TransparencyFactory.getLocationMsg();
            $scope.selectedSmartShopperFilter = ($scope.findDoctorFilterDetails.smartShopperFlow === 'true') ? TransparencyFactory.getSmartShopperFilter() : TransparencyFactory.setSmartShopperFilter(false);

            $scope.displayDistance = $rootScope.currentRadius ? $rootScope.currentRadius : TransparencyFactory.getDistance();
            $scope.isZipDirty = false;
            $scope.isZipValid = true;

            $scope.smartShopperToggleCheckBox = function () {
              $scope.selectedSmartShopperFilter = !$scope.selectedSmartShopperFilter;
            };


            $scope.$watch('data.city.cityFullName', function(newVal, oldVal) {
              if (newVal !== oldVal) {
                $scope.isZipDirty = true;
              }
            });

            $scope.data = {
              displayDistance: null,
              city: {
                cityFullName: ''
              }
            };

            $scope.$on('validate input', function() {
              $timeout(function () {
                $scope.validateCityInput();
              });
            });

            $scope.detectClickElement = function (event) {
              if (event.target.id !== 'city-input' && $scope.isZipDirty) {
                $('#_cities').addClass("hidden");
                $scope.validateCityInput();
              }
            };

            $scope.showGlossaryTerms = function(itemName) {
              $scope.fileName = 'partials/glossary-of-terms';
              $rootScope.headerTerm = $scope.findDoctorFilterDetails.glossaryHeader;
              if (itemName === $scope.loc.SPECIALITY) {
                helpService.showHelp($scope.fileName, $scope.findDoctorFilterDetails.specialtyTerms);
              } else if (itemName === $scope.loc.TIER_DESIGNATION) {
                helpService.showHelp($scope.fileName, $scope.findDoctorFilterDetails.tierTerms);
              } else if (itemName === $scope.loc.GENDER) {
                helpService.showHelp($scope.fileName, $scope.findDoctorFilterDetails.genderTerms);
              }
            };

            if ($scope.findDoctorFilterDetails.distanceDetails.defaultDistance && $scope.findDoctorFilterDetails.distanceDetails.cityFullName) {
               $scope.data.city.cityFullName = $scope.currentLocationActive === true ? $scope.findDoctorFilterDetails.distanceDetails.currentLocation : ($scope.findDoctorFilterDetails.filterCityName ? $scope.findDoctorFilterDetails.filterCityName : ((TransparencyFactory.getCity().cityFullName) ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorFilterDetails.distanceDetails.cityFullName));
            } else {
              $scope.data.city.cityFullName = $scope.filterCityName ? $scope.filterCityName : ((TransparencyFactory.getCity().cityFullName) ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorFilterDetails.distanceDetails.cityFullName);
            }

            $scope.data.city = ($scope.currentLocationActive) ?
              $rootScope.currentCity : $scope.findDoctorFilterDetails.filterCityName ?
              {
                cityFullName: $scope.findDoctorFilterDetails.filterCityName
              }
              : $rootScope.searchAreaNearestCity ?
              $rootScope.searchAreaNearestCity
              : TransparencyFactory.getCity();
            
            $scope.data.city = ($rootScope.city) ? $rootScope.city : $scope.data.city;

            $scope.data.displayDistance = $scope.findDoctorFilterDetails.filterDistance ? $scope.findDoctorFilterDetails.filterDistance.toString() : (($scope.displayDistance) ? $scope.displayDistance.toString() : $scope.findDoctorFilterDetails.distanceDetails.defaultDistance);

            /**
             * Validate city
             *
             * @memberof filterDetails
             * @method validateCityInput
             */
            $scope.validateCityInput = function () {
              if (!$scope.currentLocationActive) {
                const resp = TransparencyFactory.validateCity($scope.data.city);
                if (resp.status) {
                  TransparencyFactory.setFilterCityName($scope.data.city.cityFullName);
                }
                $scope.isZipValid = resp.status;
                $scope.errorText = resp.message;
              }
            };

            /**
             * Toggle Current location
             *
             * @memberof filterDetails
             * @method toggleCurrentLocation
             */
            $scope.toggleCurrentLocation = function () {
              $scope.currentLocationActive = !$scope.currentLocationActive;
              $rootScope.toggleOnOff = $scope.currentLocationActive;
              $rootScope.toggleIcon = $scope.currentLocationActive;
              if ($scope.currentLocation && $scope.currentLocationActive){
                $scope.data.city = $rootScope.currentCity;
                $scope.isZipDirty = false;
                $scope.isZipValid = true;
                $scope.errorText = '';
                $scope.validateCityInput();
                if ($scope.isZipValid) {
                  TransparencyFactory.setCity($scope.data.city);
                }
              } else if (!$scope.currentLocation && $scope.currentLocationActive) {
                if (navigator.geolocation) {
                  $timeout( function(){
                    $rootScope.enableLocation = true;
                  }, 300 );
                  $rootScope.$emit('pageLoading');
                  geoLocationService.getLocation().then(function(response){
                    $rootScope.$emit('pageLoaded');
                    if (response.data && response.data.zip) {
                      $scope.data.city = response.data;
                      $scope.isZipValid = true;
                      $scope.isZipDirty = false;
                      $scope.errorText = '';
                      TransparencyFactory.setGeoLocationStatus(true);
                      TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                      TransparencyFactory.setLocationBlocked(false);
                      $rootScope.vitalsGeoCoords = response.data.geo;
                      $scope.data.city.cityFullName = $scope.findDoctorFilterDetails.distanceDetails.currentLocation;
                      $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();
                      $scope.validateCityInput();
                        if ($scope.isZipValid) {
                          $rootScope.city = $scope.data.city;
                          $rootScope.currentCity = $rootScope.city;
                          TransparencyFactory.setCity($scope.data.city);
                        }
                      } else {
                        $scope.currentLocationFailed();
                      }
                  })
                  .catch(function (error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.currentLocationFailed();
                  });
                } else {
                  $rootScope.$emit('pageLoaded');
                  TransparencyFactory.setLocationBlocked(true);
                  $scope.currentLocationFailed();
                }
              } else {
                $scope.data.city = {cityFullName: ''};
              }
            };

            /**
            * if finding current location fails
            *
            * @memberof filterDetails
            * @method currentLocationFailed
            */

            $scope.currentLocationFailed = function() {
              $scope.isZipDirty = true;
              $scope.isZipValid = false;
              $scope.currentLocationActive = false;
              $scope.errorText = $rootScope.loc.ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE;
              $scope.data.city = {cityFullName: ''};
            };

            $scope.saveDistance = function() {
              TransparencyFactory.setFilterDistance($scope.data.displayDistance);
            };

            $scope.selectedFilterValue = function(selectedItem, item) {
              if (item.name === $scope.loc.TIER_DESIGNATION) {
                TransparencyFactory.setFilterTierSelectedTerm(selectedItem.value !== -1 ? {type: selectedItem.type, value: selectedItem.value} : {type: '', value: ''});
              } else if (item.name === $scope.loc.SPECIALITY) {
                TransparencyFactory.setFilterSpecialtySelectedTerm(selectedItem.value !== -1 ? selectedItem.value : '');
              } else if (item.name === $scope.loc.GENDER) {
                TransparencyFactory.setFilterGenderSelectedTerm(selectedItem.value !== -1 ? selectedItem.value : '');
              }
            };

            // Enable Zip Code input and turn of current location
            $scope.enableInputZipCode = function() {
              if ($scope.currentLocationActive === true) {
                  $scope.data.city = {cityFullName: ''};
                  $scope.currentLocationActive = false;
                  $scope.isZipValid = false;
                  $rootScope.toggleIcon = false;
              }
            };

            $scope.filterResults = function() {
              if (!$scope.isZipValid) {
                return;
              }

              //smart shopper check box selected set as true
              TransparencyFactory.setSmartShopperFilter($scope.selectedSmartShopperFilter);

              // not map search && data.city is updated
              if (!$scope.findDoctorFilterDetails.latlon && $scope.data.city.zip) {
                $rootScope.city = $scope.data.city;
                TransparencyFactory.setCity($scope.data.city);
              }

              var zipCode = $scope.data.city.cityFullName === $scope.findDoctorFilterDetails.distanceDetails.currentLocation ? $rootScope.currentCity.zip : $scope.data.city.zip ? $scope.data.city.zip : $scope.findDoctorFilterDetails.filterZipCode;

              $scope.filtersData = {
                tierData: {
                  type: TransparencyFactory.getFilterTierSelectedTerm().type || '',
                  value: TransparencyFactory.getFilterTierSelectedTerm().value || ''
                },
                specialty: TransparencyFactory.getFilterSpecialtySelectedTerm() || '',
                gender: TransparencyFactory.getFilterGenderSelectedTerm() || '',
                smartShopperRewardsFilter: TransparencyFactory.getSmartShopperFilter() || ''
              };

              TransparencyFactory.setFiltersData($scope.filtersData);
              $rootScope.filtersDataArr.unshift(TransparencyFactory.getFiltersData());

              $rootScope.currentRadius = $scope.data.displayDistance;
              var latlon = $scope.isZipDirty ? '' : typeof $scope.findDoctorFilterDetails.latlon === 'string' ? $scope.findDoctorFilterDetails.latlon.replace(/,/g, '%2C') : '';

              var cityFullName = $scope.data.city.cityFullName;

              if (TransparencyFactory.getSearchSpecialtyId()) {
                $rootScope.gotoView('/find-doctor-search-results?distance=' + $scope.data.displayDistance + '&latlon=' + latlon + '&cityFullName=' + cityFullName + '&zipCode=' + zipCode + '&searchTerm='+ $scope.selectedBrowse + '&planName='+ $scope.selectedPlan.name + '&network_id=' + $scope.selectedPlan.id + '&filters=' + true + '&id=' + TransparencyFactory.getSearchSpecialtyId() + '&smartShopperFlow=' + $scope.findDoctorFilterDetails.smartShopperFlow + '&isPcpFlow=' + $scope.findDoctorFilterDetails.isPcpFlow);
              } else {
                $rootScope.gotoView('/find-doctor-search-results?distance=' + $scope.data.displayDistance + '&latlon=' + latlon + '&cityFullName=' + cityFullName + '&zipCode=' + zipCode + '&name=' + $scope.selectedBrowse + '&network_id=' + $scope.selectedPlan.id + '&filters=' + true + '&planName=' + $scope.selectedPlan.name + '&smartShopperFlow=' + $scope.findDoctorFilterDetails.smartShopperFlow + '&isPcpFlow=' + $scope.findDoctorFilterDetails.isPcpFlow);
              }
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the findCare.
 *
 * @namespace Directives
 * @class findCare
 */
(function () {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.findCare', [])
        .directive('findCare', ['$http', 'config',
          function ($http, config) {
            return {
              restrict: 'E',
              replace: true,
              templateUrl: 'partials/find-care.html',
              scope: {
                findCareDetails: '=',
                plans: '=',
              },
              controller: [
                '$scope',
                '$rootScope',
                '$location',
                '$http',
                '$anchorScroll',
                'languageService',
                'TransparencyFactory',
                'config',
                'geoLocationService',
                '$timeout',
                function ($scope, $rootScope, $location, $http, $anchorScroll, languageService, TransparencyFactory, config, geoLocationService, $timeout) {
                  $scope.language = $rootScope.language || 'en';
                  languageService.getLocale($scope.language).then(function(localeReturned) {
                    $scope.loc = localeReturned;
                  }).catch(console.warn);

                  $scope.gotoPlanSearchDetails = function(plan) {
                    $rootScope.selectedPlan = plan;
                    TransparencyFactory.setSelectedPlan(plan);
                    $rootScope.selectedUnauthenticatedPlanName = plan.name;
                    $rootScope.gotoView('/find-doctor-search');
                  };
                }
              ]
            };
          }
        ]);
  }());
  
/**
 * Directive for the find a doctor authenticated navbar.
 *
 * @namespace Directives
 * @class navbar
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.directives.findDoctorAuthenticatedNavbar', [])
    .directive('findDoctorAuthenticatedNavbar', ['$http', 'config',
      function($http, config) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-authenticated-navbar.html',
          scope: {
            /**
            * Information for drawing the navbar.
            *
            * @memberof navbar
            * @member {Object} navbarDetails
            */
            navbarDetails: '=',
            findDoctorSearchDetails: '=',
            geoLocationDetails: '=',
            urgentCareDetails: '='
          },
          controller: [
            '$location',
            '$scope',
            '$http',
            '$rootScope',
            'languageService',
            'config',
            'TransparencyFactory',
            'geoLocationService',
            '$timeout',
            '$anchorScroll',
            'livechatService',
            function($location, $scope, $http, $rootScope, languageService, config, TransparencyFactory, geoLocationService, $timeout, $anchorScroll, livechatService) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.language = $rootScope.language || 'en';

              $scope.chatButtons = livechatService.getChatButtons();
              $scope.livechat = $rootScope.livechat;
            /*live chat functions*/

              $scope.liveChatUpdate = function() {

                $timeout(function(){

                  var chatAvailableBtns = document.getElementById("navbar-live-chat-available");
                  var chatNotAvailableBtns = document.getElementById("navbar-live-chat-not-available");
                    if ($rootScope.livechat && chatAvailableBtns && chatNotAvailableBtns) {
                      if (!$scope.livechat.value){
                        chatAvailableBtns.style.display='none';
                        chatNotAvailableBtns.style.display = '';
                      } else {
                        chatNotAvailableBtns.style.display = 'none';
                        chatAvailableBtns.style.display='';
                    }
                  }
                });
              };
              $scope.liveChatUpdate();

              $scope.startChat = function (buttonToken) {
                livechatService.openChat(buttonToken);
              };
              $scope.liveChatAlert = function () {
                livechatService.alert();
              };

              languageService.getLocale($scope.language).then(function(localeReturned) {
                $scope.loc = localeReturned;
              }).catch(console.warn);

              $scope.loggedIn = $rootScope.loggedIn;
              $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
              $scope.loc = $rootScope.loc;
              $scope.typeaheadInProgress = false;
              $scope.queryHasFocus = false;
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $scope.filterText = $scope.navbarDetails.searchTerm;

              $scope.clearQueryAndTypeaheadResults = function() {
                this.filterText = '';
                $scope.typeaheadResults = null;
                $scope.typeaheadError = false;
                $scope.showCommonSearch=true;
                $scope.highlightTextSpecialists=false;
                $scope.highlightTextProcedures=false;
                $scope.queryHasFocus = true;
                $scope.expandProceduresDiv = false;
                $scope.expandSpecialtiesDiv = false;
                angular.element('.input-search').focus();
              };

              if ($scope.navbarDetails){
                $scope.navbarDetails.searchTerm = TransparencyFactory.getSearchTerm();
              }

              $scope.anyCommonTerms = function() {
                return $scope.navbarDetails.commonSearchTerms? $scope.navbarDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToCommonDetails = function(commonTerm){
                $rootScope.openMapView = false;
                TransparencyFactory.setResultsTerm(commonTerm.commonSearchTerm);
                $rootScope.gotoView(commonTerm.browsePath);
              };

              /**
               * Returns whether or not to hide the right icon on the navigation.
               *
               * @memberof navbar
               * @method rightNavIconHidden
               * @return {Boolean} Whether or not the icon should be hidden.
               */
              $scope.rightNavIconHidden = function rightNavIconHidden() {
                return $rootScope.hideRightNavIcon;
              };

              /**
               * Returns whether the left nav button matches the provided type.
               *
               * @memberof navbar
               * @method leftNavButtonIs
               * @param  {String}  The button type to check for.
               * @return {Boolean} The left nav button matches the type.
               */
              $scope.leftNavButtonIs = function(type) {
                return $rootScope.leftNavButton === type;
              };
              /**
               * Toggles the menu drawer.
               *
               * @memberof navbar
               * @method toggleMenuOpen
               */
              $scope.toggleMenuOpen = function() {
                /**
                * Whether the menu is open.
                *
                * @memberof navbar
                * @member {Boolean} menuOpen
                */
               $scope.chatAvailableBtns = document.getElementById("navbar-live-chat-available");
               $scope.chatNotAvailableBtns = document.getElementById("navbar-live-chat-not-available");
               if ($rootScope.livechat && $scope.chatAvailableBtns && $scope.chatNotAvailableBtns) {
                 if (!$rootScope.livechat.value){
                   $scope.chatAvailableBtns.style.display='none';
                   $scope.chatNotAvailableBtns.style.display = '';
                 } else {
                   $scope.chatNotAvailableBtns.style.display = 'none';
                   $scope.chatAvailableBtns.style.display='';
                 }
               }
                $scope.menuOpen = !$scope.menuOpen;

              };
              /**
               * Takes a member to a view.
               *
               * @memberof navbar
               * @method gotoView
               */
              $scope.gotoView = function(view, i) {
                if (view === '/chatnow') {
                  var chatId = $scope.navbarDetails.menuItemsList.menuItems[i].index;
                  $scope.startChat($scope.chatButtons[chatId].token);
                } else if (view === '/chatalert') {
                  $scope.liveChatAlert();
                } else {
                  $rootScope.gotoView(view);
                }
              };



              $scope.gotoNavigatedPage = function(url, searchTerm) {
                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm);
               } else {
                 if (navigator.geolocation) {
                   $rootScope.$emit('pageLoading');
                   $timeout(function(){
                     $rootScope.enableLocation = true;
                   }, 0)
                     .then(function(val) {
                       return geoLocationService.getLocation();
                     })
                     .then(function(response) {
                       $rootScope.$emit('pageLoaded');
                       if (response.data && response.data.zip) {
                         $rootScope.city = response.data;
                         $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                         $rootScope.currentCity = $rootScope.city;
                         $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                         TransparencyFactory.setDistance($rootScope.distance);
                         TransparencyFactory.setCity($rootScope.city);
                         TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                         TransparencyFactory.setGeoLocationStatus(true);
                         TransparencyFactory.setLocationBlocked(false);
                         $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                         if($rootScope.noMatchPlanFound){
                          $rootScope.gotoView('/find-care');
                        } else {
                          $scope.gotoBrowseLevelPage(url, searchTerm);
                        }
                       } else if (response === 'position not found') {
                         TransparencyFactory.setLocationBlocked(true);
                         TransparencyFactory.setGeoLocationStatus(false);
                         TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                         $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                         $scope.openModal();
                       } else {
                         TransparencyFactory.setLocationBlocked(false);
                         TransparencyFactory.setGeoLocationStatus(false);
                         $rootScope.$emit('pageLoaded');
                         $scope.modalObj.values.locationNotFound = true;
                         $scope.openModal();
                       }
                     })
                     .catch(function(error) {
                       TransparencyFactory.setLocationBlocked(false);
                       $rootScope.$emit('pageLoaded');
                       $scope.modalObj.values.locationNotFound = true;
                       $scope.openModal();
                     });
                 } else {
                   $rootScope.$emit('pageLoaded');
                   TransparencyFactory.setLocationBlocked(true);
                   TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                   $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                   $scope.openModal();
                 }
               }
              };

              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm) {
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?id=' + $scope.urgentCareDetails[0].id + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + TransparencyFactory.getDistance() + '&searchTerm='+ searchTerm );
                } else {
                  TransparencyFactory.setSearchTerm(searchTerm);
                  $rootScope.gotoView(url + '?searchTerm='+ searchTerm + '&planName='+ $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
                }
              }; // end of gotoBrowseLevelPage function


             $scope.confirmFunc = function(data) {
               $rootScope.city = data.city;
               $rootScope.distance = data.distance;
               TransparencyFactory.setDistance($rootScope.distance);
               TransparencyFactory.setCity($rootScope.city);
               TransparencyFactory.setGeoLocationStatus(false);
               if ($rootScope.noMatchPlanFound){
                $rootScope.gotoView('/find-care');
              } else {
                $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
              }
             };

             $scope.modalObj = {
               locationMsg: $scope.geoLocationDetails.locationMsg,
               cancelButton: {
                 title: $scope.loc.CANCEL
               },
               confirmButton: {
                 title: $scope.loc.CONTINUE
               },
               values: {
                 distanceDetails: $scope.geoLocationDetails.distanceDetails,
                 distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                 city: TransparencyFactory.getCity()
               }
             };

              // If the inbox menu item is present, start the unread count update
              for(var i = 0; i < $scope.navbarDetails.menuItemsList.length; i++) {
                if($scope.navbarDetails.menuItemsList[i].link === '/inbox') {
                  $timeout($scope.getUnreadMessageCount, 120 * 1000);
                }
              }

              /**
               * Focuses on the search input.
               *
               * @memberof navbar
               * @method focusOnSearchInput
               */
              $scope.focusOnSearchInput = function() {
                angular.element('.input-search').focus();
              };

              $scope.toggleQueryHasFocus = function(booleanVal) {
                $scope.queryHasFocus = booleanVal;
                $scope.expandCommonDiv = false;
                $scope.expandSpecialtiesDiv = false;
                $scope.expandProceduresDiv = false;
              };

              // Type Ahead Functionality
              $scope.displayFlyout = function(query) {
                // reset scroll to top and highlight to false
                angular.element(".nav-bar-search-results-container")[0].scrollTop=0;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                if (!query) {
                  $scope.showTypeAhead = false;
                  $scope.showCommonSearch = true;
                  $scope.typeaheadError = false;
                  $scope.queryHasFocus = true;
                  return;
                }
                $scope.filterText = query;

                $scope.typeaheadInProgress = true;
                $scope.showTypeAhead = true;
                $scope.showCommonSearch = false;
                var endPoint = ($scope.loggedIn && !$rootScope.noMatchPlanFound) ? 'procedures?locale=en_us&search_term=' : '?locale=en_us&search_term=';
                endPoint = endPoint + query + '&member_number=' + $scope.selectedPlan.alphaPrefix + $scope.selectedPlan.externalId + '&network_id=' + $scope.selectedPlan.id +
                  (
                    $scope.selectedPlan.policyMembers ?
                      '&dob=' + $scope.selectedPlan.policyMembers[0].birthDate.slice(0, 10):
                      ''
                  );
                if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
                  $http.post(
                    config.typeaheadUrl + endPoint,
                    {
                      jwt: $rootScope.vitalsJWT,
                      signature: $rootScope.vitalsSignature,
                      geo_location: ($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip
                    }
                  ).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, {searchTerm: query});
                    }
                  })
                    .catch(function(error) {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                    });
                } else {
                  $http.get(config.typeaheadUrl + endPoint).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, {searchTerm: query});
                    }
                  })
                    .catch(function(error) {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                      $scope.typeaheadResults = null;
                      $scope.typeaheadError = true;
                    });
                }
              };

              $scope.expandCommonTerms = function() {
                $scope.expandCommonDiv = !$scope.expandCommonDiv;
              };

              $scope.expandSpecialties = function() {
                $scope.expandSpecialtiesDiv = !$scope.expandSpecialtiesDiv;
              };

              $scope.expandProcedures = function() {
                $scope.expandProceduresDiv = !$scope.expandProceduresDiv;
              };

              $scope.moreCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 3: false;
              };

              $scope.anyCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToDetails = function(result){
                if (result.id && !result.provider_id){
                  TransparencyFactory.setResultsTerm(result.name);
                  $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + result.name + '&id=' + result.id + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }else{
                  var searchTerm =  result.provider_id ? result.name : result;
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + searchTerm + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              $scope.launchRefineSearch = function(query){
                if ($scope.typeaheadResults && !$scope.typeaheadInProgress && !$scope.typeaheadError && query
                    && ($scope.typeaheadResults._meta.counts.total.providers!==0
                    || $scope.typeaheadResults._meta.counts.total.search_specialties!==0
                    || $scope.typeaheadResults._meta.counts.total.procedures!==0)){
                  $scope.modalObj.peoplePlacesLength = $scope.typeaheadResults.providers.length;
                  $scope.modalObj.specialistsWhoLength = $scope.typeaheadResults.search_specialties.length;
                  $scope.modalObj.providersPerformLength = $scope.typeaheadResults.procedures.length;
                  TransparencyFactory.setSearchTerm(query);
                  TransparencyFactory.setResultsTerm(query);
                  $scope.openModal(query);
                }
              };

              $scope.refineSearchClick = function(event, query){
                if(event.key === 'Enter'){
                  $scope.launchRefineSearch(query);
                }
              };

              $scope.confirmModal  = function(data, userAction) {
                if (userAction === 'specialistsWho') {
                  $scope.highlightTextSpecialists = true;
                  $scope.highlightTextProcedures = false;
                  $anchorScroll('search_specialties');
                } else if (userAction === 'providersPerform') {
                  $scope.highlightTextProcedures = true;
                  $scope.highlightTextSpecialists = false;
                  $anchorScroll('procedures');
                } else {
                  $rootScope.gotoView('/find-doctor-search-results?name=' + TransparencyFactory.getSearchTerm() + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };
              $scope.modalObj = {
                modalTitle: $scope.findDoctorSearchDetails.modalTitle,
                modalText: $scope.findDoctorSearchDetails.modalText,
                peoplePlacesButton: {
                  title: $scope.findDoctorSearchDetails.peoplePlacesButtonTitle
                },
                specialistButton: {
                  title: $scope.findDoctorSearchDetails.specialistButtonTitle
                },
                procedureButton: {
                  title: $scope.findDoctorSearchDetails.procedureButtonTitle
                },
                values: {
                },
                peoplePlacesLength: null,
                specialistsWhoLength: null,
                providersPerformLength: null
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the findDoctorBrowser.
 *
 * @namespace Directives
 * @class findDoctorBrowser
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.findDoctorBrowser', [])
        .directive('findDoctorBrowser', [
          function () {
            return {
              restrict: 'E',
              replace: true,
              templateUrl: 'partials/find-doctor-browser.html',
              scope: {
                findDoctorBrowserDetails: '=',
                smartShopperFlow: '='
              },
              controller: [
                '$scope',
                '$rootScope',
                '$location',
                'TransparencyFactory',
                function ($scope, $rootScope, $location, TransparencyFactory) {
                  $scope.loc = $rootScope.loc;
                  $scope.gotoView = $rootScope.gotoView;
                  $rootScope.openMapView = false; //this is for result page
                  $scope.distance = TransparencyFactory.getDistance();
                  $scope.selectedPlan = TransparencyFactory.getSelectedPlan(); // plan details the user has selected
                  $scope.selectedBrowse = TransparencyFactory.getSearchTerm(); // browse icon the user has selected in find-doctor-search page

                  $scope.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $scope.selectedPlan.lobDesc : $scope.selectedPlan.name;
                  /**
                   * Based on the user selection in browse level one page go to browse level 2 page
                   *
                   * @memberof findDoctorBrowser
                   * @method gotoBrowseNextLevelPage
                   */

                  $scope.gotoBrowseNextLevelPage = function(selectedTerm) {
                    $scope.pcpFlow = (selectedTerm.id == '260005172' || selectedTerm.id == '260005173') ? 'true' : '';
                    selectedTerm = selectedTerm || {};
                    $rootScope.healthNavTrackActions(4, {searchTerm: selectedTerm.name});
                    if (selectedTerm.id) { // if the selection in the browse level one have id go to reults page
                      TransparencyFactory.setSearchSpecialtyId(selectedTerm.id);
                      TransparencyFactory.setResultsTerm(selectedTerm.name);
                      $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + (selectedTerm.name || $scope.selectedBrowse) + '&planName=' + $scope.planName + '&network_id=' + $scope.selectedPlan.id + '&id=' + TransparencyFactory.getSearchSpecialtyId() + '&isPcpFlow=' + $scope.pcpFlow + '&smartShopperFlow=' + $scope.smartShopperFlow);
                    } else {
                      if (selectedTerm.browseLevel == '2') {
                         TransparencyFactory.setBrowseLevelTwoTerm(selectedTerm.name);
                       } else {
                         TransparencyFactory.setBrowseTerm(selectedTerm.name);
                       }
                      $rootScope.gotoView('/find-doctor-browser?searchTerm='+ $scope.selectedBrowse + '&planName='+ $scope.planName + '&planId=' + $scope.selectedPlan.id+'&browseTerm=true&browseLevel=' + selectedTerm.browseLevel + '&smartShopperFlow=' + $scope.smartShopperFlow);
                    }
                  };
                }
              ]
            };
          }
        ]);
  }());

/**
 * Directive for the find a doctor navbar.
 *
 * @namespace Directives
 * @class navbar
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.directives.findDoctorNavbar', [])
    .directive('findDoctorNavbar', ['$http', 'config',
      function($http, config) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-navbar.html',
          scope: {
            /**
            * Information for drawing the navbar.
            *
            * @memberof navbar
            * @member {Object} navbarDetails
            */
            navbarDetails: '=',
            findDoctorSearchDetails: '=',
          },
          controller: [
            '$location',
            '$scope',
            '$http',
            '$rootScope', 'languageService', 'config', 'TransparencyFactory', '$anchorScroll',
            function($location, $scope, $http, $rootScope, languageService, config, TransparencyFactory, $anchorScroll) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.language = $rootScope.language || 'en';
              languageService.getLocale($scope.language).then(function(localeReturned) {
                $scope.loc = localeReturned;
              }).catch(console.warn);

              $scope.loggedIn = $rootScope.loggedIn;
              $scope.loc = $rootScope.loc;
              $scope.typeaheadInProgress = false;
              $scope.queryHasFocus = false;
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $scope.filterText = $scope.navbarDetails.searchTerm;

              $scope.clearQueryAndTypeaheadResults = function() {
                this.filterText = '';
                $scope.typeaheadResults = null;
                $scope.typeaheadError = false;
                $scope.showCommonSearch=true;
                $scope.highlightTextSpecialists=false;
                $scope.queryHasFocus = true;
                angular.element('.input-search').focus();
              };

              if ($scope.navbarDetails){
                $scope.navbarDetails.searchTerm = TransparencyFactory.getSearchTerm();
              }

              $scope.anyCommonTerms = function() {
                return $scope.navbarDetails.commonSearchTerms? $scope.navbarDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToCommonDetails = function(commonTerm){
                $rootScope.openMapView = false;
                TransparencyFactory.setResultsTerm(commonTerm.commonSearchTerm);
                $rootScope.gotoView(commonTerm.browsePath);
              };

              /**
               * Returns whether or not to hide the right icon on the navigation.
               *
               * @memberof navbar
               * @method rightNavIconHidden
               * @return {Boolean} Whether or not the icon should be hidden.
               */
              $scope.rightNavIconHidden = function rightNavIconHidden() {
                return $rootScope.hideRightNavIcon;
              };

              /**
               * Returns whether the left nav button matches the provided type.
               *
               * @memberof navbar
               * @method leftNavButtonIs
               * @param  {String}  The button type to check for.
               * @return {Boolean} The left nav button matches the type.
               */
              $scope.leftNavButtonIs = function(type) {
                return $rootScope.leftNavButton === type;
              };
              /**
               * Toggles the menu drawer.
               *
               * @memberof navbar
               * @method toggleMenuOpen
               */
              $scope.toggleMenuOpen = function() {
                /**
                * Whether the menu is open.
                *
                * @memberof navbar
                * @member {Boolean} menuOpen
                */
                $scope.menuOpen = !$scope.menuOpen;

              };
              /**
               * Takes a member to a view.
               *
               * @memberof navbar
               * @method gotoView
               */
              $scope.gotoView = function(view) {
                $rootScope.gotoView(view);
              };

              // If the inbox menu item is present, start the unread count update
              for(var i = 0; i < $scope.navbarDetails.menuItems.length; i++) {
                if($scope.navbarDetails.menuItems[i].link === '/inbox') {
                  $timeout($scope.getUnreadMessageCount, 120 * 1000);
                }
              }

              /**
               * Focuses on the search input.
               *
               * @memberof navbar
               * @method focusOnSearchInput
               */
              $scope.focusOnSearchInput = function() {
                angular.element('.input-search').focus();
              };

              $scope.toggleQueryHasFocus = function(booleanVal) {
                $scope.queryHasFocus = booleanVal;
                $scope.expandCommonDiv = false;
                $scope.expandSpecialtiesDiv = false;
              };

              // Type Ahead Functionality
              $scope.displayFlyout = function(query) {
                // reset scroll to top and highlight to false
                angular.element(".nav-bar-search-results-container")[0].scrollTop=0;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                if (!query) {
                  return;
                }
                $scope.filterText = query;

                $scope.typeaheadInProgress = true;
                $http.get(config.typeaheadUrl + '?locale=en_us&search_term=' + query + '&network_id=' + $scope.selectedPlan.id + '&geo_location=' + (($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip)).then(function(result) {
                  $scope.typeaheadError = false;
                  $scope.typeaheadInProgress = false;
                  $scope.typeaheadResults = result.data;
                  if (result.data &&
                    !result.data.procedures.length &&
                    !result.data.providers.length &&
                    !result.data.search_specialties.length) {
                    $rootScope.healthNavTrackStates(3, {searchTerm: query});
                  }
                })
                .catch(function(error) {
                  $scope.typeaheadInProgress = false;
                  $scope.typeaheadResults = null;
                  $scope.typeaheadError = true;
                });
              };

              $scope.expandCommonTerms = function() {
                $scope.expandCommonDiv = !$scope.expandCommonDiv;
              };

              $scope.expandSpecialties = function() {
                $scope.expandSpecialtiesDiv = !$scope.expandSpecialtiesDiv;
              };

              $scope.moreCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 3: false;
              };

              $scope.anyCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToDetails = function(result){
                if (result.id && !result.provider_id){
                  TransparencyFactory.setResultsTerm(result.name);
                  $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + result.name + '&id=' + result.id + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }else{
                  var searchTerm =  result.provider_id ? result.name : result;
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + searchTerm + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              $scope.launchRefineSearch = function(query){
                if (!$scope.typeaheadInProgress && !$scope.typeaheadError && query
                    && ($scope.typeaheadResults._meta.counts.total.providers!==0
                    || $scope.typeaheadResults._meta.counts.total.search_specialties!==0)){
                  $scope.modalObj.peoplePlacesLength = $scope.typeaheadResults.providers.length;
                  $scope.modalObj.specialistsWhoLength = $scope.typeaheadResults.search_specialties.length;
                  TransparencyFactory.setSearchTerm(query);
                  TransparencyFactory.setResultsTerm(query);
                  $scope.openModal(query);
                }
              };

              $scope.refineSearchClick = function(event, query){
                if(event.key === 'Enter'){
                  $scope.launchRefineSearch(query);
                }
              };

              $scope.confirmModal  = function(data, userAction) {
                if (userAction === 'specialistsWho'){
                  $scope.highlightTextSpecialists = true;
                  $anchorScroll('specialistsWho');
                } else {
                  $rootScope.gotoView('/find-doctor-search-results?name=' + TransparencyFactory.getSearchTerm() + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };
              $scope.modalObj = {
                modalTitle: $scope.findDoctorSearchDetails.modalTitle,
                modalText: $scope.findDoctorSearchDetails.modalText,
                peoplePlacesButton: {
                  title: $scope.findDoctorSearchDetails.peoplePlacesButtonTitle
                },
                specialistButton: {
                  title: $scope.findDoctorSearchDetails.specialistButtonTitle
                },
                values: {
                },
                peoplePlacesLength: null, 
                specialistsWhoLength: null
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the findDoctorResultsDetails.
 *
 * @namespace Directives
 * @class findDoctorResultsDetails
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.findDoctorResultsDetails', [])
    .directive('findDoctorResultsDetails', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-results-details.html',
          scope: {
            findDoctorResultsDetails: '=',
            smartShopperDetails: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'languageService',
            'cordovaService',
            'TransparencyFactory',
            'findDoctorService',
            'helpService',
            'adobeService',
            'analyticConstants',
            function(
              $scope,
              $rootScope,
              languageService,
              cordovaService,
              TransparencyFactory,
              findDoctorService,
              helpService,
              adobeService,
              analyticConstants
            ) {

              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.noMatchPlanFound = $rootScope.noMatchPlanFound;
              $scope.medicareUser = ($rootScope.loggedIn &&
                $rootScope.selectedPolicy.sourceSystem === 'Amisys');

              $scope.showDetails =
                $scope.findDoctorResultsDetails.showMoreDetails;
              $scope.language = $rootScope.language || 'en';
              $scope.policyMembers = $rootScope.selectedPolicy && $rootScope.selectedPolicy.policyMembers && $rootScope.selectedPolicy.policyMembers.map(function(member) {
                var firstName = member.givenName[0] + member.givenName.slice(1).toLowerCase();
                var lastName = member.familyName[0] + member.familyName.slice(1).toLowerCase();
                member.displayMemberName = firstName + ' ' + lastName + ' (' + member.dependentNumber + ')';
                return member;
              });

              $scope.recommendedFlow = ($rootScope.loggedIn && $scope.findDoctorResultsDetails.recommendedFlow && $scope.findDoctorResultsDetails.viewPcpDetails);

              $scope.smartShopperTerm = TransparencyFactory.getSmartShopperTerm();
              $scope.showSmartShopper = ($rootScope.loggedIn && TransparencyFactory.getSmartShopperResultItem());

              var providerIdentifier = null;
              var practitionerIdentifier = null;
              var locationIdentifier = null;
              var nationalProviderIdentifier = null;
              var pcpChangeRequest = null;

              if ($scope.findDoctorResultsDetails.resultSummaryIdentifiers) {
                $scope.findDoctorResultsDetails.resultSummaryIdentifiers.forEach(function(eachType) {
                  switch (eachType.type_code) {
                    case 'SYP':
                      providerIdentifier = eachType.value;
                      break;
                    case 'FAI':
                      locationIdentifier = eachType.value;
                      break;
                    case 'SYI':
                      practitionerIdentifier = eachType.value;
                      break;
                    case 'NPI':
                      nationalProviderIdentifier = eachType.value;
                      break;
                  }
                });
              }

              if ($scope.findDoctorResultsDetails.changePcp) {
                $scope.findDoctorResultsDetails.changePcp.providerData =
                  $scope.findDoctorResultsDetails.cardData.summary;
                $scope.alertModalObj = $scope.findDoctorResultsDetails.changePcp;
              }

              $scope.selectPcpAlertModalObj = {
                title: $scope.loc.PCP_COMMERCIAL_DEPENDENT_BUTTON_SELECT_PCP,
                message: $scope.loc.PCP_COMMERCIAL_DEPENDENT_SELECTED_PCP,
                members: $scope.policyMembers,
                confirmBtn: $scope.loc.PCP_COMMERCIAL_DEPENDENT_BUTTON_SELECT_PCP,
              };

              if ($scope.findDoctorResultsDetails.isPcpFlow && !$scope.recommendedProviderData && !$scope.medicareUser) {
                pcpChangeRequest = {
                  memberId: $rootScope.selectedPolicy.externalId,
                  providerIdentifier: providerIdentifier,
                  practitionerIdentifier: practitionerIdentifier,
                  locationIdentifier: locationIdentifier,
                  policyEffectiveFromDate: $rootScope.selectedPolicy.effectiveDate,
                  policyEffectiveThruDate: $rootScope.selectedPolicy.expirationDate,
                  PCPNPI: nationalProviderIdentifier,
                  PCPName: $scope.findDoctorResultsDetails.cardData.summary.name,
                  lobCode: $rootScope.selectedPolicy.lobCode,
                  groupId: $rootScope.selectedPolicy.groupNumber
                };
              }


              $scope.toggleShowDetails = function() {
                if (
                  $scope.showDetails ===
                  $scope.findDoctorResultsDetails.showMoreDetails
                ) {
                  $scope.showDetails =
                    $scope.findDoctorResultsDetails.showLessDetails;
                } else {
                  $scope.showDetails =
                    $scope.findDoctorResultsDetails.showMoreDetails;
                }
              };

              $scope.openSmartShopper = function() {
                $scope.expandSmartShopperInfo = !$scope.expandSmartShopperInfo;
                $rootScope.healthNavTrackToggleActions('smartShopperClaimReward', 'info', $scope.expandSmartShopperInfo);
              };

              $scope.openChangePcpAlert = function() {
                $scope.displayMakeThisMyPcpError = false;
                if ($scope.policyMembers.length > 1) {
                  $scope.selectPcpAlertModalObj.members.map(function(member) {
                    member.SELECTED = false;
                  });
                  $scope.openSelectPcpModal();
                } else {
                  $scope.openAlertModal();
                }
              };

              $scope.openInfoModal = function() {
                $rootScope.headerTerm = $scope.smartShopperDetails.infoModalHeader;
                $scope.helpInfo = {
                  introText_1: $scope.smartShopperDetails.infoModalBody.introText_1,
                  introText_2: $scope.smartShopperDetails.infoModalBody.introText_2,
                  title: $scope.smartShopperDetails.infoModalBody.title,
                  contents: [
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_1,
                      text: $scope.smartShopperDetails.infoModalBody.text_1,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_2,
                      text: $scope.smartShopperDetails.infoModalBody.text_2,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_3,
                      text: $scope.smartShopperDetails.infoModalBody.text_3,
                    }
                  ],
                  smartShopperInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.confirmFunc = function() {
                $scope.recommendedProviderData = ($scope.findDoctorResultsDetails.recommendedFlow && TransparencyFactory.getRecommendedPcpData()) ? TransparencyFactory.getRecommendedPcpData() : false;
                $rootScope.$emit('pageLoading');
                if ($scope.recommendedProviderData && $scope.medicareUser) {
                  pcpChangeRequest = {
                    memberId: $rootScope.selectedPolicy.externalId,
                    groupNumber: $rootScope.selectedPolicy.groupNumber,
                    lobCode: $rootScope.selectedPolicy.lobCode,
                    sourceSystem : $rootScope.selectedPolicy.sourceSystem,
                    npi: $scope.recommendedProviderData.npi,
                    pcpName: $scope.recommendedProviderData.fullName,
                    amisysPracticeCode: $scope.recommendedProviderData.affiliationId,
                  };
                } else if (!$scope.recommendedProviderData && $scope.medicareUser) {
                  pcpChangeRequest = {
                    memberId: $rootScope.selectedPolicy.externalId,
                    groupNumber: $rootScope.selectedPolicy.groupNumber,
                    lobCode: $rootScope.selectedPolicy.lobCode,
                    sourceSystem : $rootScope.selectedPolicy.sourceSystem,
                    npi: nationalProviderIdentifier,
                    pcpName: $scope.findDoctorResultsDetails.cardData.summary.name,
                    amisysPracticeCode: providerIdentifier,
                  };
                }
                findDoctorService.changePcp(pcpChangeRequest).then(function(res) {
                  $rootScope.$emit('pageLoaded');
                  if (res.successIndicator || res.success) {
                    $scope.ChangedMySelectedPcp = true;
                    $scope.findDoctorResultsDetails.cardData.ChangedMySelectedPcp =
                      $scope.ChangedMySelectedPcp;
                    adobeService.trackAction('pcpChangedSuccessful', analyticConstants.PCP_SECTION);
                  } else {
                    $scope.displayMakeThisMyPcpError = true;
                    adobeService.trackAction('pcpChangedFailed', analyticConstants.PCP_SECTION);
                  }
                }).catch(function() {
                  $scope.displayMakeThisMyPcpError = true;
                });
              };

              $scope.confirmPcpFunc = function(members) {
                var selectedMembers = [];
                members.forEach(function(member) {
                  if (member.SELECTED) {
                    selectedMembers.push(member);
                  }
                });

                var membersInfo = selectedMembers.map(function(member) {
                  var pcpChangeReqMembersData = {};
                  pcpChangeReqMembersData.memberId = member.externalSourceId + member.dependentNumber;
                  pcpChangeReqMembersData.policyEffectiveFromDate = member.enrollmentEffectiveDate;
                  pcpChangeReqMembersData.policyEffectiveThruDate = member.enrollmentExpirationDate;

                  return pcpChangeReqMembersData;
                });

                var pcpChangeRequest = {
                  providerInfo: {},
                  membersInfo: null
                };
                pcpChangeRequest.providerInfo.providerIdentifier = providerIdentifier;
                pcpChangeRequest.providerInfo.practitionerIdentifier = practitionerIdentifier;
                pcpChangeRequest.providerInfo.locationIdentifier = locationIdentifier;
                pcpChangeRequest.PCPNPI = nationalProviderIdentifier;
                pcpChangeRequest.PCPName = $scope.findDoctorResultsDetails.cardData.summary.name;
                pcpChangeRequest.lobCode = $rootScope.selectedPolicy.lobCode;
                pcpChangeRequest.groupId = $rootScope.selectedPolicy.groupNumber;
                pcpChangeRequest.membersInfo = membersInfo;

                $rootScope.$emit('pageLoading');
                findDoctorService.changeMultiPcp(pcpChangeRequest).then(function(res) {
                  $rootScope.$emit('pageLoaded');
                  res.forEach(function(eachRes) {
                    if (eachRes.updateSucceedStatus) {
                      $scope.ChangedMySelectedPcp = true;
                      adobeService.trackAction('pcpMultiChangedSuccessful', analyticConstants.PCP_SECTION, { dependentNumber: eachRes.dependentNumber });
                      if (eachRes.dependentNumber === '00') {
                        $scope.findDoctorResultsDetails.cardData.ChangedMySelectedPcp =
                          $scope.ChangedMySelectedPcp;
                      } else {
                        $scope.findDoctorResultsDetails.cardData.ChangedMyDependentSelectedPcp =
                          $scope.ChangedMySelectedPcp;
                      }
                    } else {
                      // to do: what to show if part requests fail
                      console.log('PCP update failed for this member: ', eachRes.dependentNumber);
                      adobeService.trackAction('pcpMultiChangedFailed', analyticConstants.PCP_SECTION, { dependentNumber: eachRes.dependentNumber });

                    }
                  });
                }).catch(function() {
                  $scope.serviceNotAvailable = true;
                  $scope.displayMakeThisMyPcpError = true;
                });
              };

              if ($rootScope.loggedIn) {
                $rootScope.showPolicySelect = false;
                $rootScope.showNav = false;
              } else {
                languageService
                  .getLocale($scope.language)
                  .then(function(localeReturned) {
                    $scope.loc = localeReturned;
                  })
                  .catch(console.warn);
              }

              $scope.goToHEQ = function() {
                return $rootScope.openInSecureBrowser('appsso:healthequity');
              };

              $scope.findDoctorResultsDetails.searchTerm = TransparencyFactory.getSearchTerm();
              TransparencyFactory.setResultsToShare(
                $scope.findDoctorResultsDetails
              );

              // Reset the results details card data, as it should be obtained again for each provider.
              TransparencyFactory.resetResultsDetails();

              if (!cordovaService.deviceIsBrowser()) {

                AppRate.promptForRating(false);

                AppRate.preferences = {
                  displayAppName: 'Blue Connect Mobile',
                  usesUntilPrompt: 1,
                  promptAgainForEachNewVersion: true,
                  simpleMode: true,
                  inAppReview: false,
                  storeAppURL: {
                    ios: '392607223',
                    android: 'market://details?id=com.bcbsnc.healthnav',
                  },
                  customLocale: {
                    title: $scope.loc.RATING_DID_YOU_FIND,
                    message: $scope.loc.RATING_PLEASE_RATE,
                    cancelButtonLabel: $scope.loc.RATING_NO_THANKS,
                    laterButtonLabel: $scope.loc.RATING_REMIND_ME_LATER,
                    rateButtonLabel: $scope.loc.RATING_RATE_IT_NOW,
                  },
                  callbacks: {
                    onRateDialogShow: function(callback) {
                      callback(1); // cause immediate click on 'Rate Now' button
                    },
                    onButtonClicked: function() {
                    },
                  },
                  openUrl: AppRate.preferences.openUrl,
                };
              }

              /* Search for other pcp take directly to all primary care providers results page"*/
              $scope.otherPcpSearch = function(searchInput) {
                $scope.searchTermId = '260005173';
                TransparencyFactory.setResultsTerm(searchInput.searchTerm);
                return $rootScope.gotoView(
                  searchInput.link +
                  '?id=' + $scope.searchTermId + '&network_id=' +
                  $rootScope.selectedPlan.id +
                  '&distance=' +
                  TransparencyFactory.getDistance() +
                  '&searchTerm=' +
                  searchInput.searchTerm +
                  '&zipCode=' +
                  TransparencyFactory.getCity().zip +
                  '&planName=' +
                  searchInput.planName +
                  '&isPcpFlow=true'
                );
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the find doctor search bottom bar.
 *
 * @namespace Directives
 * @class findDoctorSearchBottomBar
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.findDoctorSearchBottomBar', [])
    .directive('findDoctorSearchBottomBar', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-search-bottom-bar.html',
          scope: {
            /**
             * Information for drawing the navbar.
             *
             * @memberof findDoctorSearchBottomBar
             * @member {Object} bottomBarDetails
             */
            bottomBarDetails: '=',
            pcpDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            'TransparencyFactory',
            'languageService',
            'shareService',
            'alertService',
            'geoLocationService',
            function(
              $scope,
              $rootScope,
              TransparencyFactory,
              languageService,
              shareService,
              alertService,
              geoLocationService
            ) {
              $scope.gotoView = $rootScope.gotoView;
              $scope.trackState = $rootScope.trackState;
              $scope.trackAction = $rootScope.trackAction;
              $scope.language = $rootScope.language || 'en';
              $scope.loggedIn = $rootScope.loggedIn;

              var generateShareContent = function (data, estimatedCostInfo) {
                $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
                // Add name.
                var shareContent = data.summary.name;

                // Add degree if there is one.
                shareContent += data.summary.degrees ? data.summary.degrees + '\n' : '\n';

                // Dr. details
                shareContent += data.summary.gender + data.summary.specialty_names+ '\n';

                // Accepting new patients.
                shareContent += data.summary.accepting_new_patients ? 'Accepting new patients \n': '';

                // Main address.
                shareContent += data.summary.location_name + '\n' + data.summary.addr_line1 + '\n';

                // Addr line 2.
                shareContent += data.summary.addr_line2 ? data.summary.addr_line2 + '\n' : ''; 
                  
                // City, state, zip.
                shareContent += data.summary.city + ', ' + data.summary.state + ' ' + data.summary.postal_code + '\n';

                // Phone number.
                shareContent += data.summary.phone_raw ? 'Phone: ' + data.summary.phone_raw + '\n': '';
                
                // Fax.
                shareContent += data.summary.fax_raw ? 'Fax: ' + data.summary.fax_raw + '\n' : '';

                // If authenticated and estimatedCostInfo provided, show procedure costs info.
                if ($rootScope.loggedIn && estimatedCostInfo && !$scope.medicareUser) {
                  //total estimated cost to you
                  shareContent += estimatedCostInfo.estimatedCostToYou ? estimatedCostInfo.estimatedCostToYou.name + ' ' + estimatedCostInfo.estimatedCostToYou.amount + '\n' : '';

                  // copay.
                  shareContent += estimatedCostInfo.copay ? estimatedCostInfo.copay.name + ': ' + estimatedCostInfo.copay.amount + '\n' : '';

                  // deductible.
                  shareContent += estimatedCostInfo.deductible ? estimatedCostInfo.deductible.name + ': ' + estimatedCostInfo.deductible.amount + '\n' : '';

                  // coinsurance.
                  shareContent += estimatedCostInfo.coinsurance ? estimatedCostInfo.coinsurance.name + ': ' + estimatedCostInfo.coinsurance.amount + '\n' : '';

                  // blueCrossContribution.
                  shareContent += estimatedCostInfo.blueCrossContribution ? estimatedCostInfo.blueCrossContribution.name + ': ' + estimatedCostInfo.blueCrossContribution.amount + '\n' : '';

                  // totalCost.
                  shareContent += estimatedCostInfo.totalCost ? estimatedCostInfo.totalCost.name + ': ' + estimatedCostInfo.totalCost.amount : '';
                }
                // Return.
                return shareContent;
              }

              languageService
                .getLocale($scope.language)
                .then(function(localeReturned) {
                  $scope.loc = localeReturned;
                })
                .catch(console.warn);

              /**
               * Go to the url
               * if index is 0 i.e new search button is selected it will remove the current page from history
               * to make back button functionality works correctly.
               *
               * @memberof findDoctorSearchBottomBar
               * @method bottomBarSelected
               */

              $scope.bottomBarSelected = function(url, title) {
                var data = TransparencyFactory.getResultsToShare();
                var transparencyInfo = {};

                transparencyInfo.searchTerm = TransparencyFactory.getResultsDetailsTerm();
                transparencyInfo.title = 'profile: ' + transparencyInfo.searchTerm;
                

                if (title === $scope.loc.GET_DIRECTION) {
                  transparencyInfo.title += ': get directions'; 
                  $rootScope.healthNavTrackActions(0, transparencyInfo);
                  $rootScope.nativeMap = true;

                  var location =
                    data.cardData.summary.addr_line1 +
                    ' ' +
                    data.cardData.summary.city +
                    ', ' +
                    data.cardData.summary.state +
                    ' ' +
                    data.cardData.summary.postal_code;

                  alertService
                    .showAlert(
                      $scope.loc.EXTERNAL_LINK,
                      $scope.loc.EXTERNAL_LINK_WARNING,
                      { title: $scope.loc.CONTINUE, color: 'blue' },
                      { title: $scope.loc.CANCEL }
                    )
                    .then(function() {
                      $rootScope.blurContent = false;
                      geoLocationService.openMaps(location);
                    });
                } else if (title === $scope.loc.FILTER_RESULTS) {
                  $rootScope.newFilter = true;
                }

                // Share button
                if (title === $scope.loc.SHARE) {
                  transparencyInfo.title += ': share'; 
                  $rootScope.healthNavTrackActions(0, transparencyInfo);
                  $rootScope.pausedForShare = true;
                  
                  // Create share content from card data.
                  var shareContent = generateShareContent(data.cardData, data.cardData.estimatedCostInfo);
                    
                  shareService.showSharing(
                    shareService.contentType.TEXT,
                    shareContent
                  );
                }
                if (title === $scope.loc.HELP) {
                  url += '?expand=FIND_CARE';
                  $rootScope.gotoView(url);
                } else if (url.length > 1) {
                  // Only route if the url is not root.
                  $rootScope.gotoView(url);
                }
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the findDoctorBrowser.
 *
 * @namespace Directives
 * @class findDoctorBrowser
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.findDoctorSearchResults', [])
    .directive('findDoctorSearchResults', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-search-results.html',
          scope: {
            searchResultsDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            '$element',
            '$location',
            '$timeout',
            '$compile',
            'restService',
            'languageService',
            'TransparencyFactory',
            'helpService',
            'geoLocationService',
            'alertService',
            '$route',
            'adobeService',
            'analyticConstants',
            'findDoctorService',
            function (
              $scope,
              $rootScope,
              $element,
              $location,
              $timeout,
              $compile,
              restService,
              languageService,
              TransparencyFactory,
              helpService,
              geoLocationService,
              alertService,
              $route,
              adobeService,
              analyticConstants,
              findDoctorService
            ) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.noMatchPlanFound = $rootScope.noMatchPlanFound;
              $scope.noResultsFound = false;
              $scope.noResultsFoundMapView = false;
              $scope.mustBeNCZipError = false;
              $scope.loadMoreResults = false;
              $scope.language = $rootScope.language || 'en';
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.googleMapsResults = null;
              $scope.displayResult = null;
              $scope.contentString = null;
              $scope.estimatedAmount = null;
              $scope.lastWindowOpened = null;
              $rootScope.OpenDetailsPageFromMapView = 'list';
              var infowindow = new google.maps.InfoWindow({});
              $scope.selectedProviderResult = null;
              $scope.backProviderString = null;
              $rootScope.latlon = null;
              $scope.searchAgain = false;
              $scope.outOfNC = false;
              $scope.pcpError = false;
              $scope.isSmartShopperEligible = $rootScope.isSmartShopperEligible;

              if ($scope.searchResultsDetails.metadata.pages.next !== null) {
                $scope.loadMoreResults = true;
              }

              // initialize active tab to list view by default or to map view when navigate to details page from mapview.
              $scope.activeTab = $rootScope.openMapView ? 'map' : 'list';

              $scope.generateMapView = function() {
                // restrict map elements to first 30 results
                var results = $scope.googleMapsResults
                  ? $scope.googleMapsResults
                  : $scope.searchResultsDetails.results;

                //creating a newResultArray to get the locations list.
                var coordsArray = results.map(function(location) {
                  return (
                    String(location.longitude) + ',' + String(location.latitude)
                  );
                });

                var nonDuplicateCoords = coordsArray.filter(function(
                  coordsPair,
                  index
                ) {
                  return coordsArray.lastIndexOf(coordsPair) === index;
                });

                var newResultsArray = nonDuplicateCoords.map(function(
                  coordsPair
                ) {
                  return results.filter(function(provider) {
                    return (
                      String(provider.longitude) +
                      ',' +
                      String(provider.latitude) ===
                      coordsPair
                    );
                  });
                });

                var div = $element.find('#find-doctor-search-results-map-view');
                var initialZoomLevel =
                  $rootScope.currentZoom && $rootScope.currentZoom < 15
                    ? $rootScope.currentZoom
                    : 15;
                var map = null;
                if (results.length !== 0) {
                  // calculate bounds of initial map display
                  var bounds = new google.maps.LatLngBounds();
                  for (var i = 0; i < results.length; i++) {
                    var result = results[i];
                    result.index = i;
                    var myLatLng = new google.maps.LatLng(
                      result.latitude,
                      result.longitude
                    );
                    bounds.extend(myLatLng);
                  }

                  // Create a Google Maps display initialize to fit the markers that are on display
                  map = new google.maps.Map(div[0], {
                    disableDefaultUI: true,
                    clickableIcons: false,
                    zoom: initialZoomLevel,
                    center: bounds.getCenter(),
                  });
                  map.fitBounds(bounds, 10);
                  // reset zoom when bounds change
                  google.maps.event.addListenerOnce(
                    map,
                    'bounds_changed',
                    function(event) {
                      if (map.getZoom() > 20) {
                        map.setZoom(initialZoomLevel);
                      }
                    }
                  );
                } else {
                  // load map without markers when no results found
                  geoLocationService
                    .getNearestCityByZip(
                      $rootScope.searchAreaNearestCity
                        ? $rootScope.searchAreaNearestCity.zip
                        : TransparencyFactory.getCity().zip
                    )
                    .then(function(nearestPosition) {
                      map = new google.maps.Map(div[0], {
                        disableDefaultUI: true,
                        clickableIcons: false,
                        zoom: initialZoomLevel,
                        center: nearestPosition,
                      });
                      $scope.map = map;
                      map.addListener('dragend', $scope.onMapMove);
                      map.addListener('zoom_changed', $scope.onMapZoomChange);
                    })
                    .catch(function(error) {
                      return error;
                    });
                  return 0;
                }
                $scope.map = map;
                $timeout(
                  function() {
                    $scope.map.addListener('dragend', $scope.onMapMove);
                    $scope.map.addListener(
                      'zoom_changed',
                      $scope.onMapZoomChange
                    );
                    infowindow.close();
                  },
                  100,
                  false
                );

                google.maps.event.addListener($scope.map, 'click', function(
                  event
                ) {
                  if (infowindow && $scope.activeMarker) {
                    $scope.closeInfoWindow();
                    $('#_search-button').removeClass('hidden');
                  }
                });

                $scope.closeInfoWindow = function() {
                  infowindow.close();
                  $scope.activeMarker.setIcon('images/Map Pin - Default.png');
                  $scope.activeMarker = null;
                };

                //reset currentZoom to null
                $rootScope.currentZoom = null;
                return newResultsArray;
              };

              /**
               * Handles toggeling between list view and map view
               *
               * @memberof FindDoctorSearchResultsController
               * @method switchTab
               */
              $scope.switchTab = function(tabName) {
                $scope.activeTab = tabName;
                $scope.activeMarker = null;

                if (tabName == 'map') {
                  if (!$scope.noResultsFoundMapView) {
                    $scope.searchAgain = false;
                  }
                  if ($scope.noResultsFound || $scope.outOfNC) {
                    $scope.searchAgain = true;
                  }
                  $rootScope.openMapView = true;
                  if ($rootScope.mapsReady) {
                    $timeout(
                      function() {
                        $scope.generateMarkers();
                      },
                      1,
                      false
                    );
                  }
                } else {
                  $rootScope.openMapView = false;

                  if ($scope.outOfNC) {
                    $scope.searchResultsDetails.summary =
                      '0 ' + $scope.loc.RESULTS;
                    $scope.searchResultsDetails.results = [];
                    $scope.searchResultsDetails.metadata = null;
                    $scope.loadMoreResults = false;
                  }
                }
              };

              $scope.generateMarkers = function() {
                var newResultsArray = $scope.generateMapView();
                if (newResultsArray.length === 0) {
                  return;
                }
                for (var i = 0; i < newResultsArray.length; i++) {
                  var resultValue = newResultsArray[i];
                  var resultIn = null;
                  $scope.lastWindow = null;
                  resultIn = newResultsArray[i][0];
                  var marker = null;

                  var position = {
                    lat: resultIn.latitude,
                    lng: resultIn.longitude,
                  };
                  if (resultValue.length > 1) {
                    var markerLabel = resultValue.length;
                    marker = new google.maps.Marker({
                      position: position,
                      map: $scope.map,
                      result: resultValue,
                      title: resultIn.title,
                      animation: google.maps.Animation.DROP,
                      icon: 'images/Map Pin - Default.png',
                      label: {
                        text: markerLabel.toString(),
                        color: 'white',
                        fontSize: '10px',
                        fontWeight: 'bold',
                      },
                    });
                  } else {
                    marker = new google.maps.Marker({
                      position: position,
                      map: $scope.map,
                      result: resultValue,
                      title: resultIn.title,
                      animation: google.maps.Animation.DROP,
                      icon: 'images/Map Pin - Default.png',
                    });
                  }

                  // open info window when user clicks on marker
                  marker.addListener(
                    'click',
                    (function(marker) {
                      return function() {
                        $scope.activeMarker = marker;
                        $scope.displayResult = null;
                        $('#_search-button').addClass('hidden');
                        if (marker.result.length > 1) {
                          //multiple providers in the same location
                          $scope.displayResult = marker.result;

                          $scope.contentString =
                            '<div class="browser-item-card">';
                          $scope.contentString +=
                            '<div class="card-description maps-name-display">' +
                            $scope.displayResult[0].title +
                            '<br></div>';
                            if($scope.displayResult[0].label){
                              $scope.contentString +=
                              '<div><span class="tier p1 blue">'+
                              $scope.displayResult[0].label +
                              '</span></div>';
                            }

                          $scope.contentString +=
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult[0].address1 +
                            '</div>' +
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult[0].address2 +
                            '</div>' +
                            '<div class="card-description distance-font-size maps-address-display">' +
                            '(' +
                            $scope.displayResult[0].distance +
                            $scope.displayResult[0].distanceLabel +
                            ')' +
                            '</div>';

                          $scope.contentString +=
                            '<div class="view-details-buttons"><br>' +
                            '<button class = "google-maps-info-window-buttons google-left-button view-details" type="button" ng-click="onMapItemDirectionsClick(' +
                            $scope.displayResult[0].index +
                            ')">' +
                            $scope.loc.FIND_CARE_OPEN_IN_MAPS +
                            '</button> ' +
                            '</div>';

                          $scope.contentString +=
                            "<hr class='providers-line provider-line-top-border'><div class='providers-font-size providers-list card-bottom' ng-click= 'viewAllProvidersLocation()'><span class='med-light-blue'>" +
                            $scope.loc
                              .FIND_CARE_MAPS_VIEW_ALL_PROVIDERS_AT_LOCATION +
                            "</span><i class='fc-right-caret go-next'></i></div>";

                          $scope.contentString += '</div>';
                        } else {
                          $scope.displayResult = marker.result[0];
                          $scope.estimatedAmount = $scope.displayResult
                            .costToMember
                            ? $scope.displayResult.costToMember.toLocaleString(
                              'en-US',
                              {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                                style: 'currency',
                                currency: 'USD',
                              }
                            )
                            : null;

                          $scope.contentString =
                            '<div class="browser-item-card">';
                          if (
                            $scope.displayResult.providerName !==
                            $scope.displayResult.title
                          ) {
                            $scope.contentString +=
                              '<div class="card-description maps-name-display"><span>' +
                              $scope.displayResult.providerName +
                              $scope.displayResult.degrees +
                              '</span><br></div>' +
                              '<div class="card-description address-font-size maps-address-display">' +
                              $scope.displayResult.title +
                              '<br></div>';
                          } else {
                            $scope.contentString +=
                              '<div class="card-description maps-name-display">' +
                              $scope.displayResult.title +
                              '<br></div>';
                          }
                          if($scope.displayResult.label){
                            $scope.contentString +=
                            '<div><span class="tier p1 blue">'+
                            $scope.displayResult.label +
                            '</span></div>';
                          }
                          $scope.contentString +=
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult.address1 +
                            '</div>' +
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult.address2 +
                            '</div>' +
                            '<div class="card-description distance-font-size maps-address-display">' +
                            '(' +
                            $scope.displayResult.distance +
                            $scope.displayResult.distanceLabel +
                            ')' +
                            '</div>';
                          if ($scope.estimatedAmount) {
                            $scope.contentString +=
                              '<div class="med-blue mt2">' +
                              $scope.loc
                                .SEARCH_RESULTS_ESTIMATE_TO_YOU_UPPER_CASE +
                              '<b>' +
                              $scope.estimatedAmount +
                              '</b></div>';
                          }

                          $scope.contentString +=
                            '<div class="view-details-buttons single-provider-buttons"><br>' +
                            '<button class = "google-maps-info-window-buttons google-right-button view-details" type="button" ng-click="onMapItemDetailsClick(' +
                            $scope.displayResult.index +
                            ')">' +
                            $scope.loc.FIND_CARE_VIEW_DETAILS +
                            '</button> ' +
                            '<button class = "google-maps-info-window-buttons google-left-button view-details" type="button" ng-click="onMapItemDirectionsClick(' +
                            $scope.displayResult.index +
                            ')">' +
                            $scope.loc.FIND_CARE_OPEN_IN_MAPS +
                            '</button> ' +
                            '</div>';

                          $scope.contentString += '</div>';
                        }

                        var compiled = $compile($scope.contentString)(
                          $scope
                        )[0];

                        infowindow.setContent(compiled);
                        infowindow.open($scope.map, marker);

                        $scope.viewAllProvidersLocation = function() {
                          $scope.viewAllProvidersContentString =
                            '<div class="browser-item-card">' +
                            '<div class="provider-location-text" >' +
                            $scope.loc.FIND_CARE_PROVIDERS_AT_THIS_LOCATION +
                            '</div>' +
                            '<hr class="providers-line provider-line-bottom-border"><div class="provider-location-list">';
                          $scope.viewAllProvidersContentString =
                            $scope.viewAllProvidersContentString +
                            $scope.displayResult
                              .map(function(result) {
                                $scope.resultSelected = JSON.stringify(result);
                                return (
                                  "<div class='med-light-blue providers-font-size translate-x' ng-click='selectProvider(" +
                                  $scope.resultSelected +
                                  ")'><span>" +
                                  result.providerName +
                                  '</span><br></div>'
                                );
                              })
                              .join('') +
                            '</div></div>';

                          $scope.backProviderString =
                            $scope.viewAllProvidersContentString;

                          infowindow.setContent(
                            $compile($scope.viewAllProvidersContentString)(
                              $scope
                            )[0]
                          );
                        };

                        $scope.selectProvider = function(res) {
                          $scope.estimatedAmount = res.costToMember
                            ? res.costToMember.toLocaleString('en-US', {
                              minimumFractionDigits: 2,
                              maximumFractionDigits: 2,
                              style: 'currency',
                              currency: 'USD',
                            })
                            : null;

                          $scope.providerContentString =
                            '<div class="browser-item-card">';
                          if (res.providerName !== res.title) {
                            $scope.providerContentString +=
                              '<div class="card-description maps-name-display"><span>' +
                              res.providerName +
                              res.degrees +
                              '</span><br></div>';
                          }
                          $scope.providerContentString +=
                            '<div class="card-description maps-address-display">' +
                            res.title +
                            '<br></div>' +
                            '<div class="card-description maps-address-display">' +
                            res.address1 +
                            '</div>' +
                            '<div class="card-description maps-address-display">' +
                            res.address2 +
                            '</div>' +
                            '<div class="card-description maps-address-display distance-font-size">' +
                            '(' +
                            res.distance +
                            res.distanceLabel +
                            ')' +
                            '</div>';
                          if ($scope.estimatedAmount) {
                            $scope.providerContentString +=
                              '<div class="med-blue mt2">' +
                              $scope.loc
                                .SEARCH_RESULTS_ESTIMATE_TO_YOU_UPPER_CASE +
                              '<b>' +
                              $scope.estimatedAmount +
                              '</b></div>';
                          }

                          $scope.providerContentString +=
                            '<div class="view-details-buttons"><br>' +
                            '<button class = "google-maps-info-window-buttons google-right-button view-details" type="button" ng-click="onMapItemDetailsClick(' +
                            res.index +
                            ')">' +
                            $scope.loc.FIND_CARE_VIEW_DETAILS +
                            '</button> ' +
                            '<button class = "google-maps-info-window-buttons google-left-button view-details" type="button" ng-click="onMapItemDirectionsClick(' +
                            res.index +
                            ')">' +
                            $scope.loc.FIND_CARE_OPEN_IN_MAPS +
                            '</button> ' +
                            '</div>';

                          $scope.providerContentString +=
                            "<hr class='providers-line provider-line-top-border'><div class='providers-font-size pb3 providers-list card-bottom' ng-click= 'backToProviders()'><i class='fc-left go-previous'></i><span class='med-light-blue'>" +
                            $scope.loc
                              .FIND_CARE_MAPS_BACK_TO_PROVIDERS_AT_LOCATION +
                            '</span></div>';

                          $scope.providerContentString += '</div>';

                          infowindow.setContent(
                            $compile($scope.providerContentString)($scope)[0]
                          );
                        };

                        $scope.backToProviders = function() {
                          infowindow.setContent(
                            $compile($scope.backProviderString)($scope)[0]
                          );
                        };

                        if ($scope.lastWindow) {
                          $scope.lastWindow.setIcon(
                            'images/Map Pin - Default.png'
                          );
                        }

                        marker.setIcon('images/Map Pin - Selected.png');
                        $scope.lastWindow = marker;
                        $scope.lastWindowOpened = marker;
                      };
                    })(marker, i)
                  );
                } //end of for
              };

              $scope.onMapZoomChange = function() {
                $scope.onMapMove();

                var bounds = $scope.map.getBounds();
                var center = $scope.map.getCenter();
                $rootScope.currentZoom = $scope.map.getZoom();
                var conversionFactor = 0.000621371192;
                if (bounds && center) {
                  var eastBoundLng = bounds.getNorthEast().lng();
                  var eastBoundPosition = new google.maps.LatLng(
                    center.lat(),
                    eastBoundLng
                  );
                  // Calculate radius (in meters).
                  var radius = google.maps.geometry.spherical.computeDistanceBetween(
                    center,
                    eastBoundPosition
                  );
                  $rootScope.currentRadius = Math.round(
                    radius * conversionFactor
                  );
                  $rootScope.currentRadius =
                    $rootScope.currentRadius === 0
                      ? 1
                      : $rootScope.currentRadius;
                }
              };

              $scope.onMapMove = function() {
                $scope.searchAgain = true;
                $scope.noResultsFoundMapView = false;
                $scope.mustBeNCZipError = false;
                infowindow.close();
                $scope.newCenterGeo = $scope.map.getCenter();
                if ($scope.lastWindowOpened) {
                  $scope.lastWindowOpened.setIcon(
                    'images/Map Pin - Default.png'
                  );
                }
                $scope.$apply();
              };

              // Back to mapview from details page when navigate to details page from mapview
              if ($rootScope.openMapView) {
                $scope.switchTab('map');
              }

              $scope.onMapItemDetailsClick = function(idx) {
                var result = $scope.searchResultsDetails.results[idx];
                $rootScope.OpenDetailsPageFromMapView = 'map';
                $scope.resultsDetailsPage(
                  idx,
                  result.procedureName || result.providerName,
                  result.preposition,
                  {
                    label: result.label,
                    style: result.style,
                  },
                  result,
                  (result.smartShopperIncentiveAmount) ? result.smartShopperIncentiveAmount : null
                );
              };

              $scope.onMapItemDirectionsClick = function(idx) {
                const mapResult = $scope.searchResultsDetails.results[idx];
                const mapLocation =
                  mapResult.address1 + ' ' + mapResult.address2;

                adobeService.trackAction(
                  'healthNavOpenInMaps',
                  analyticConstants.HEALTHNAV_SECTION
                );
                alertService
                  .showAlert(
                    $scope.loc.EXTERNAL_LINK,
                    $scope.loc.EXTERNAL_LINK_WARNING,
                    {
                      title: $scope.loc.CONTINUE,
                      color: 'blue',
                    },
                    {
                      title: $scope.loc.CANCEL,
                    }
                  )
                  .then(function() {
                    $rootScope.blurContent = false;
                    geoLocationService.openMaps(mapLocation);
                  });
              };

              TransparencyFactory.setResultsToShare(
                $scope.searchResultsDetails
              );
              TransparencyFactory.setExistingSearchResults(
                $scope.searchResultsDetails
              );

              if (!$rootScope.loggedIn) {
                languageService
                  .getLocale($scope.language)
                  .then(function(localeReturned) {
                    $scope.loc = localeReturned;
                  })
                  .catch(console.warn);
              }

              if (
                $scope.searchResultsDetails.results.length === 0 &&
                !$scope.mustBeNCZipError
              ) {
                $scope.noResultsFound = true;
                $scope.noResultsFoundMapView = true;
              }
              var geo_location = TransparencyFactory.getCity().geo
                  ? TransparencyFactory.getCity().geo
                  : $rootScope.vitalsGeoCoords;

              $scope.resultsDetailsPage = function(
                selectedIndex,
                selectedItem,
                selectedPreposition,
                selectedItemLabel,
                itemData,
                smartShopperIncentiveAmount
              ) {
                $rootScope.detailsFromBackButton = false;

                if (smartShopperIncentiveAmount) {
                  TransparencyFactory.setSmartShopperTerm(selectedItem, selectedPreposition);
                  TransparencyFactory.setSmartShopperResultItem(smartShopperIncentiveAmount);
                }


                TransparencyFactory.setResultsDetailsIndex(selectedIndex)
                  .setResultsDetailsTerm(selectedItem)
                  .setResultsDetailsItemLabel(selectedItemLabel)
                  .setResultDetailsItem(itemData);


                $rootScope.healthNavTrackActions(2, {});

                // if procedure
                if (itemData.costToMember) {
                  TransparencyFactory.setResultsProcedureId(
                    itemData.procedure_id
                  );
                }

                // View url.
                var viewUrl =
                  '/find-doctor-results-details?searchTerm=' +
                  $location.search().searchTerm +
                  '&location=' +
                  itemData.location_id +
                  '&provider=' +
                  itemData.provider_id +
                  '&geo_location=' +
                  geo_location +
                  (itemData.costToMember
                    ? '&procedure_id=' + itemData.procedure_id
                    : '') +
                  '&resultsProviderName=' + itemData.name +
                  '&isPcpFlow=' +
                  itemData.isPcpFlow;

                // Go to view.
                $rootScope.gotoView(viewUrl);
              };

              $scope.gotoDetailsPage = function(providerList) {
                var requestParms = null;
                  if (providerList.vendorSource === 'Nuna'){
                    providerList.fullName = providerList.firstName + ' ' + providerList.middleInitial + ' ' + providerList.lastName;
                    providerList.zipCode = providerList.fullAddress.substring(providerList.fullAddress.length - 5);
                  }
                  TransparencyFactory.setResultsDetailsTerm(providerList.fullName);
                  requestParms = {
                    network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                    accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                    planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                    zipCode: providerList.zipCode,
                    locationName: encodeURIComponent(providerList.practiceName),
                    doctorName: providerList.fullName
                  };
                $rootScope.$emit('pageLoading');

                findDoctorService.getDoctorDetails(requestParms)
                  .then(function(doctorResult) {
                    console.log(doctorResult);
                    if (doctorResult.results && doctorResult.results.length) {
                      var viewUrl = '/find-doctor-results-details?searchTerm=' +
                      $location.search().searchTerm +
                        '&location=' + doctorResult.results[0].location_id +
                        '&provider=' + doctorResult.results[0].provider_id +
                        '&geo_location=' +
                        geo_location +
                        '&isPcpFlow=' +
                        providerList.isPcpFlow;
                      // Go to view.
                      $rootScope.gotoView(viewUrl);
                    } else {
                      $rootScope.$emit('pageLoaded');
                      $scope.pcpError = true;
                      return;
                    }
                  }).catch(function(error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.pcpError = true;
                    return error;
                  });
              };

              $scope.searchThisArea = function () {
                $rootScope.openMapView = true;

                // var bounds = $scope.map.getBounds();
                var center = $scope.map.getCenter();

                // get new center city
                geoLocationService
                  .getNearestCity(center)
                  .then(function(result) {
                    $rootScope.searchAreaNearestCity = result;
                    $rootScope.searchAreaNearestCity.cityFullName =
                      result.city +
                      ', ' +
                      result.state_code +
                      ' - ' +
                      result.zip;

                    // validate NC zip code
                    if (
                      TransparencyFactory.validateZipCode(result.zip).status
                    ) {
                      $rootScope.newCity = $rootScope.city;
                      $rootScope.city = false;
                      $scope.getSearchAgainResults();
                      if ($rootScope.mapsReady) {
                        $timeout(
                          function() {
                            $scope.generateMarkers();
                          },
                          1,
                          false
                        );
                      }
                    } else {
                      $scope.outOfNC = true;
                      $scope.mustBeNCZipError = true;
                      $scope.searchAgain = false;
                    }
                  })
                  .catch(function(error) {
                    return error;
                  });
              };

              /**
               * Retrieves additional find a doctor search results.
               * Called when the "Load More Results" button is clicked.
               */
              $scope.fetchAdditionalResults = function() {
                // Use the query created inside the controller
                var query = $scope.$parent.query;

                // Increment the requested page
                query.page = $scope.searchResultsDetails.metadata.pages.next;

                //Add locale so localization will work in node layer
                query.lang = $rootScope.language;

                // Get the data for the next page
                var pageName = 'find-doctor-search-results';
                $rootScope.$emit('pageLoading');
                restService
                  .getPageData(
                    restService.devices.MOBILE,
                    pageName,
                    $rootScope.language,
                    query
                  )
                  .then(function(resultReceived) {
                    $rootScope.$emit('pageLoaded');

                    // Select the appropriate data element
                    var searchResults = null;
                    resultReceived.forEach(function(component) {
                      if (component.name === 'findDoctorSearchResults') {
                        searchResults = component.values.searchResultsDetails;
                      }
                    });

                    // Update the page metadata returned
                    $scope.searchResultsDetails.metadata =
                      searchResults.metadata;

                    // Hide "Load More Results" button if next page is 'null'
                    if (
                      $scope.searchResultsDetails.metadata.pages.next === null
                    ) {
                      $scope.loadMoreResults = false;
                    }

                    $scope.googleMapsResults = searchResults.results;

                    // Concatenate additional results to existing results array
                    $scope.searchResultsDetails.results = $scope.searchResultsDetails.results.concat(
                      searchResults.results
                    );

                    // Update TransparencyFactory existingSearchResults field
                    TransparencyFactory.setExistingSearchResults(
                      $scope.searchResultsDetails
                    );

                    $rootScope.healthNavTrackStates(1, query);
                  })
                  .catch(function(error) {
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  });
              };

              /**
               * Retrieves search again find a doctor search results.
               * Called when the "Search this area" button is clicked.
               */
              $scope.getSearchAgainResults = function() {
                var lat = $scope.newCenterGeo.lat();
                var lng = $scope.newCenterGeo.lng();
                $rootScope.latlon = lat + ',' + lng;
                $route.updateParams({
                  latlon: $rootScope.latlon,
                  zipCode: $rootScope.searchAreaNearestCity.zip,
                  distance: $rootScope.currentRadius,
                  cityFullName: $rootScope.searchAreaNearestCity.cityFullName,
                });
              };

              $scope.openModal = function(e) {
                e.stopPropagation();
                $rootScope.headerTerm = $scope.searchResultsDetails.tierInformation.modalHeader;
                $scope.helpInfo = {
                  tierModalText: $scope.searchResultsDetails.tierInformation.modalText,
                  tierInfo: true
                };
                helpService.help($scope.helpInfo);
            };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the findDoctorSearch.
 *
 * @namespace Directives
 * @class findDoctorSearch
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.findDoctorSearch', [])
    .directive('findDoctorSearch', ['$http', 'config',
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-search.html',
          scope: {
            findDoctorSearchDetails: '=',
            smartShopperDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            '$http',
            '$anchorScroll',
            'languageService',
            'TransparencyFactory',
            'config',
            'geoLocationService',
            'helpService',
            '$timeout',
            'analyticConstants',
            function($scope, $rootScope, $http, $anchorScroll, languageService, TransparencyFactory, config, geoLocationService, helpService, $timeout, analyticConstants) {
              $rootScope.openMapView = false;
              $scope.isSmartShopperEligible = ($rootScope.loggedIn && $rootScope.isSmartShopperEligible);
              $scope.language = $rootScope.language || 'en';
              $scope.bdcLink = $scope.findDoctorSearchDetails.bdcLink;
              languageService.getLocale($scope.language).then(function(localeReturned) {
                $scope.loc = localeReturned;
              }).catch(console.warn);
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $scope.$on('validate input', function() {
                $timeout(function() {
                  $scope.validateCityInput();
                });
              });

              $scope.detectClickElement = function(event) {
                if (event.target.id !== 'city-input' && $scope.isZipDirty) {
                  $('#_cities').addClass("hidden");
                  $scope.validateCityInput();
                }
              };

              $scope.$watch('data.city.zip', function(newVal, oldVal) {
                if (newVal !== oldVal) {
                  $scope.isZipDirty = true;
                }
              });

              //for medicare supplement and blue medicare pdp plan hide search settings box on new search page.
              $scope.hideSearchSettings = ($scope.findDoctorSearchDetails.blockSearchBoxForRxPdpPlan || $scope.findDoctorSearchDetails.message) ? true : false;

              $scope.gotoView = $rootScope.gotoView;
              $scope.loc = $rootScope.loc;
              $scope.expandDiv = false;
              $scope.showCommonSearch = false;
              $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $scope.currentLocationActive = ($rootScope.toggleIcon === false) ? $rootScope.toggleIcon : $scope.currentLocation;

              TransparencyFactory.setLocationMsg($scope.findDoctorSearchDetails.locationMsg);
              $scope.nomatchPlan = $rootScope.noMatchPlanFound;

              $scope.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $scope.selectedPlan.lobDesc : $scope.selectedPlan.name;

              $scope.locationMsg = TransparencyFactory.getLocationMsg();
              $scope.locationBlocked = TransparencyFactory.getLocationBlocked();
              $scope.loggedIn = $rootScope.loggedIn;
              $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
              $scope.errorText = '';
              $scope.isZipValid = true;
              $scope.isZipDirty = false;
              $scope.highlightTextSpecialists = false;
              $scope.highlightTextProcedures = false;
              $scope.displayDistance = TransparencyFactory.getDistance();
              $scope.data = {
                displayDistance: null,
                city: TransparencyFactory.getCity(),
              };

              $scope.typeaheadInProgress = false;
              $scope.queryHasFocus = false;

              // get members of current policy for members dropdown list
              $scope.policyMembersList = TransparencyFactory.getCurrentPolicyMembers();
              // set initial selectedMember if user is logged in
              if ($rootScope.isLoggedIn) {
                TransparencyFactory.setSelectedMember($scope.policyMembersList[$rootScope.indexOfSelectedMember]);
              }

              //reinitialize all the search terms each time a new search is performed
              TransparencyFactory.resetSearchTerms();

              $rootScope.healthNavTrackStates(0, { title: $scope.findDoctorSearchDetails.message ? 'select network: ' + $scope.planName : analyticConstants.HOME_SECTION });
              // Validate Zip Code when toggle plan
              $scope.onloadZipCodeValidation = function() {
                if ($scope.hideSearchSettings){
                  if (!$scope.locationBlocked && $rootScope.city) {
                    $scope.validateNCZipCode($rootScope.city.zip);
                  } else if (!$scope.locationBlocked && !$rootScope.city) {
                    $rootScope.city = $rootScope.newCity;
                    $scope.validateNCZipCode($rootScope.newCity.zip);
                  } else {
                    $scope.validateNCZipCode($scope.data.city.zip);
                  }
                }
              };

              // Enable Zip Code input and turn of current location
              $scope.enableInputZipCode = function() {
                if ($scope.currentLocationActive === true) {
                  $scope.data.city = { cityFullName: '' };
                  $scope.currentLocationActive = false;
                  $rootScope.toggleIcon = false;
                }
              };

              // NC Zip Code validation for plan toggling and current location toggling
              $scope.validateNCZipCode = function(zipCode, useCurrentLocation) {
                const resp = TransparencyFactory.validateZipCode(zipCode);
                if (!resp.status) {
                  $scope.isZipDirty = true;
                  $scope.isZipValid = false;
                  $scope.errorText = resp.message;
                  $scope.expandDiv = true;
                } else {
                  $scope.isZipValid = true;
                  $scope.isZipDirty = false;
                  $scope.errorText = '';
                  $scope.expandDiv = useCurrentLocation ? true : false;
                }
              };

              $scope.clearQueryAndTypeaheadResults = function() {
                this.query = '';
                $scope.typeaheadResults = null;
                $scope.typeaheadError = false;
                $scope.showCommonSearch = true;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                $scope.queryHasFocus = true;
                $scope.expandProceduresDiv = false;
                $scope.expandSpecialtiesDiv = false;
                angular.element('.form-control').focus();
              };

              if ($scope.findDoctorSearchDetails.searchParams.distance && $scope.findDoctorSearchDetails.searchParams.zipCode) {
                $scope.data.city.cityFullName = $scope.currentLocationActive === true ? $scope.findDoctorSearchDetails.distanceDetails.currentLocation : TransparencyFactory.getCity() ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorSearchDetails.distanceDetails.city.cityFullName;

              } else if ($scope.data.city) {
                  $scope.data.city.cityFullName = TransparencyFactory.getCity() ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorSearchDetails.distanceDetails.city.cityFullName;
              }
              $scope.data.displayDistance = ($scope.displayDistance) ? $scope.displayDistance.toString() : $scope.findDoctorSearchDetails.distanceDetails.defaultDistance;

              if ($scope.policyMembersList) {
                $scope.selectedMember = (!$rootScope.indexOfSelectedMember) ? $scope.policyMembersList[0] : $scope.policyMembersList[$rootScope.indexOfSelectedMember];
              }

              $scope.selectPolicyMember = function(selectedMember) {
                $rootScope.indexOfSelectedMember = $scope.policyMembersList.indexOf(selectedMember);
                TransparencyFactory.setSelectedMember($scope.policyMembersList[$rootScope.indexOfSelectedMember]);
              };

              /**
               * Based on the user selects the search settings it will expand or collapse the div
               *
               * @memberof findDoctorSearch
               * @method expandSettings
               */
              $scope.expandSettings = function() {
                $scope.expandDiv = !$scope.expandDiv;
              };

              $scope.hideTypeAhead = function() {
                $scope.showTypeAhead = false;
                $scope.showCommonSearch = false;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
              };

              $scope.toggleQueryHasFocus = function(booleanVal) {
                $scope.queryHasFocus = booleanVal;
                $scope.expandCommonDiv = false;
              };

              $scope.displayFlyout = function(query) {
                // reset scroll to top and highlight to false
                angular.element(".type-ahead-results-container")[0].scrollTop = 0;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                if (!query) {
                  $scope.showTypeAhead = false;
                  $scope.showCommonSearch = true;
                  $scope.typeaheadError = false;
                  $scope.highlightTextSpecialists = false;
                  $scope.highlightTextProcedures = false;
                  $scope.queryHasFocus = true;
                  return;
                }

                $scope.typeaheadInProgress = true;
                $scope.showTypeAhead = true;
                $scope.showCommonSearch = false;
                var endPoint = ($scope.loggedIn && !$rootScope.noMatchPlanFound) ? 'procedures?locale=en_us&search_term=' : '?locale=en_us&search_term=';
                endPoint = endPoint + query + '&member_number=' + $scope.selectedPlan.alphaPrefix + $scope.selectedPlan.externalId + '&network_id=' + $scope.selectedPlan.id +
                  (
                    $scope.selectedPlan.policyMembers ?
                      '&dob=' + $scope.selectedPlan.policyMembers[0].birthDate.slice(0, 10) :
                      ''
                  );
                if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
                  $http.post(config.typeaheadUrl + endPoint,
                    {
                      jwt: $rootScope.vitalsJWT,
                      signature: $rootScope.vitalsSignature,
                      geo_location: ($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip
                    }
                  ).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, { searchTerm: query });
                    }
                  })
                    .catch(function() {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                    });
                } else {
                  $http.get(config.typeaheadUrl + endPoint + '&geo_location=' + (($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip)).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, { searchTerm: query });
                    }
                  })
                    .catch(function() {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                    });
                }
              };

              $scope.expandCommonTerms = function() {
                $scope.expandCommonDiv = !$scope.expandCommonDiv;
              };

              $scope.expandSpecialties = function() {
                $scope.expandSpecialtiesDiv = !$scope.expandSpecialtiesDiv;
              };

              $scope.expandProcedures = function() {
                $scope.expandProceduresDiv = !$scope.expandProceduresDiv;
              };

              $scope.moreCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms ? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 3 : false;
              };

              $scope.anyCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms ? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 0 : false;
              };

              $scope.goToCommonDetails = function(commonTerm) {
                if (!$scope.isZipValid) {
                  return;
                }
                TransparencyFactory.setResultsTerm(commonTerm.commonSearchTerm);
                $rootScope.gotoView(commonTerm.browsePath);
              };

              $scope.goToDetails = function(result) {
                if (!$scope.isZipValid) {
                  return;
                }
                TransparencyFactory.setSearchSpecialtyId(null);
                if (result.id && !result.provider_id) {
                  TransparencyFactory.setSearchTerm(result.name);
                  TransparencyFactory.setResultsTerm(result.name);
                  $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + result.name + '&id=' + result.id + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                } else {
                  var searchTerm = result.provider_id ? result.name : result;
                  TransparencyFactory.setSearchTerm(searchTerm);
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + searchTerm + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm, planDetails, isExternalLink) {
                // External link?
                if (isExternalLink) {
                  return $rootScope.openInBrowser(url);
                }

                // Prevent forwarding if Zip Code is invalid
                if (!$scope.isZipValid) {
                  return;
                }

                $rootScope.healthNavTrackActions(4, { searchTerm: searchTerm }, analyticConstants.HOME_SECTION);

                if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                  TransparencyFactory.setResultsTerm(searchTerm);
                  TransparencyFactory.setSearchSpecialtyId($scope.findDoctorSearchDetails.urgentCareDetails[0].id);
                  $rootScope.gotoView('/find-doctor-search-results?id=' + TransparencyFactory.getSearchSpecialtyId() + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + planDetails.distance + '&searchTerm=' + searchTerm);
                } else {
                  TransparencyFactory.setSearchTerm(searchTerm);
                  $rootScope.gotoView(url + '?searchTerm=' + searchTerm + '&planName=' + $scope.planName + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id + '&smartShopperFlow=' + planDetails.acceptedSmartShopperTerms);
                }
              };

              /**
               * Toggle Current location
               *
               * @memberof findDoctorSearch
               * @method toggleCurrentLocation
               */
              $scope.toggleCurrentLocation = function() {
                $scope.currentLocationActive = !$scope.currentLocationActive;
                $rootScope.toggleOnOff = $scope.currentLocationActive;
                $rootScope.toggleIcon = $scope.currentLocationActive;
                if ($scope.currentLocation && $scope.currentLocationActive) {
                  $scope.data.city = $rootScope.currentCity;
                  $scope.validateNCZipCode($rootScope.city.zip, true);
                  TransparencyFactory.setGeoLocationStatus(true);
                  TransparencyFactory.setCity($scope.data.city);
                } else if (!$scope.currentLocation && $scope.currentLocationActive) {
                  if (navigator.geolocation) {
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 300);
                    $rootScope.$emit('pageLoading');
                    geoLocationService.getLocation().then(function(response) {
                      $rootScope.$emit('pageLoaded');
                      if (response.data && response.data.zip) {
                        $rootScope.city = response.data;
                        $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                        $rootScope.currentCity = $rootScope.city;
                        $rootScope.vitalsGeoCoords = response.data.geo;
                        TransparencyFactory.setCity(response.data);
                        TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                        TransparencyFactory.setGeoLocationStatus(true);
                        $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();
                        TransparencyFactory.setLocationBlocked(false);
                        $scope.data.city = response.data;
                        $scope.data.city.cityFullName = $scope.findDoctorSearchDetails.distanceDetails.currentLocation;
                        $scope.validateNCZipCode($rootScope.city.zip);
                        if ($scope.isZipValid) {
                          $rootScope.city = $scope.data.city;
                          $rootScope.currentCity = $rootScope.city;
                          TransparencyFactory.setCity($scope.data.city);
                        }
                      } else {
                        $scope.currentLocationFailed();
                      }
                    })
                      .catch(function() {
                        $rootScope.$emit('pageLoaded');
                        $scope.currentLocationFailed();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    $scope.currentLocationFailed();
                  }
                } else {
                  $scope.data.city = { cityFullName: '' };
                }
              };

              /**
              * if finding current location fails
              *
              * @memberof findDoctorSearch
              * @method currentLocationFailed
              */

              $scope.currentLocationFailed = function() {
                $scope.isZipDirty = true;
                $scope.isZipValid = false;
                $scope.errorText = $rootScope.loc.ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE;
                $scope.data.city = { cityFullName: '' };
              };

              $scope.validateCityInput = function() {
                const resp = TransparencyFactory.validateCity(
                  $scope.data.city
                );

                if (resp.status === true) {
                  $rootScope.city = $scope.data.city;
                  TransparencyFactory.setCity($scope.data.city);
                }

                // Set error message.
                $scope.isZipValid = resp.status;
                $scope.errorText = resp.message;
              };

              $scope.saveDistance = function() {
                TransparencyFactory.setDistance($scope.data.displayDistance);
              };

              $scope.launchRefineSearch = function(query) {
                if (!$scope.typeaheadInProgress && !$scope.typeaheadError && query
                  && ($scope.typeaheadResults._meta.counts.total.providers !== 0
                    || $scope.typeaheadResults._meta.counts.total.search_specialties !== 0
                    || $scope.typeaheadResults._meta.counts.total.procedures !== 0)) {
                  $scope.modalObj.peoplePlacesLength = $scope.typeaheadResults.providers.length;
                  $scope.modalObj.specialistsWhoLength = $scope.typeaheadResults.search_specialties.length;
                  $scope.modalObj.providersPerformLength = $scope.typeaheadResults.procedures.length;
                  TransparencyFactory.setSearchTerm(query);
                  $scope.openModal(query);
                }
              };

              $scope.refineSearchClick = function(event, query) {
                if (event.key === 'Enter') {
                  $scope.launchRefineSearch(query);
                }
              };

              $scope.confirmModal = function(data, userAction) {
                if (userAction === 'specialistsWho') {
                  $scope.highlightTextSpecialists = true;
                  $scope.highlightTextProcedures = false;
                  $anchorScroll('search_specialties');
                } else if (userAction === 'providersPerform') {
                  $scope.highlightTextProcedures = true;
                  $scope.highlightTextSpecialists = false;
                  $anchorScroll('procedures');
                } else {
                  if (!$scope.isZipValid) {
                    return;
                  }
                  TransparencyFactory.setSearchTerm(this.query);
                  TransparencyFactory.setResultsTerm(this.query);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + this.query + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              $scope.modalObj = {
                modalTitle: $scope.findDoctorSearchDetails.modalTitle,
                modalText: $scope.findDoctorSearchDetails.modalText,
                peoplePlacesButton: {
                  title: $scope.findDoctorSearchDetails.peoplePlacesButtonTitle
                },
                specialistButton: {
                  title: $scope.findDoctorSearchDetails.specialistButtonTitle
                },
                procedureButton: {
                  title: $scope.findDoctorSearchDetails.procedureButtonTitle
                },
                values: {
                },
                peoplePlacesLength: null,
                specialistsWhoLength: null,
                providersPerformLength: null
              };

              if ($rootScope.loggedIn) {
                $scope.termsModalObj = $scope.smartShopperDetails.acceptTermsModal;
              }

              $scope.openInfoModal = function() {
                $rootScope.headerTerm = $scope.smartShopperDetails.infoModalHeader;
                $scope.helpInfo = {
                  introText_1: $scope.smartShopperDetails.infoModalBody.introText_1,
                  introText_2: $scope.smartShopperDetails.infoModalBody.introText_2,
                  title: $scope.smartShopperDetails.infoModalBody.title,
                  contents: [
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_1,
                      text: $scope.smartShopperDetails.infoModalBody.text_1,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_2,
                      text: $scope.smartShopperDetails.infoModalBody.text_2,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_3,
                      text: $scope.smartShopperDetails.infoModalBody.text_3,
                    }
                  ],
                  smartShopperInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.confirmTermsFunc = function() {
                $rootScope.smartShopperTermsAccepted = true;
                var smartShopperSearchParams = $scope.findDoctorSearchDetails.searchParams;
                smartShopperSearchParams.acceptedSmartShopperTerms = $rootScope.smartShopperTermsAccepted;
                TransparencyFactory.setSmartShopperFilter(false);
                $scope.gotoBrowseLevelPage($scope.smartShopperDetails.url, $scope.smartShopperDetails.searchTerm, $scope.findDoctorSearchDetails.searchParams, false);
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the findDoctor.
 *
 * @namespace Directives
 * @class findDoctor
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.findDoctor', [
    'blueconnect.mobile.directives.navbar'
  ])
    .directive('findDoctor', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor.html',
          scope: {
            findDoctorDetails: '=',
            plans: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            '$timeout',
            'TransparencyFactory',
            'geoLocationService',
            'adobeService',
            'analyticConstants',
            '$window',
            function ($scope, $rootScope, $timeout, TransparencyFactory, geoLocationService, adobeService, analyticConstants, $window) {
              $rootScope.vitalsError = $scope.findDoctorDetails.vitalsError ? $scope.findDoctorDetails.vitalsError : false;
              if ($scope.findDoctorDetails.vitalsError) {
                $rootScope.vitalsDown = true;
                $window.history.back();
              }

              if ($rootScope.loggedIn) {
                $rootScope.getLocale();
              } else {
                $rootScope.getInternalLocale();
              }

              if ($rootScope.loggedIn && $rootScope.menuIsOpen()) {
                $rootScope.toggleMenuOpen();
              }

              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.loggedIn = $rootScope.loggedIn || false;

              // if logged in, plans will actually be plan
              if ($scope.loggedIn === true) {
                $rootScope.selectedPolicy = Object.assign($rootScope.selectedPolicy, $scope.plans);
                $rootScope.selectedPlan = $scope.plans;
                gotoPlanDetails($rootScope.selectedPolicy);
              }

              $scope.togglePlan = function () {
                if ($scope.expandedQuestion) {
                  $scope.expandedQuestion = false;
                }
                $scope.expandedPlan = !$scope.expandedPlan;
                $rootScope.healthNavTrackToggleActions('select network', 'list', $scope.expandedPlan);
              };

              $scope.toggleQuestion = function () {
                if ($scope.expandedPlan) {
                  $scope.expandedPlan = false;
                }
                $scope.expandedQuestion = !$scope.expandedQuestion;
              };

              /**
               * Based on the plan name it will redirect to the find doctor search page
               *
               * @memberof findDoctor
               * @method gotoPlanDetails
               */
              $scope.gotoPlanDetails = gotoPlanDetails;

              function gotoPlanDetails(plan) {
                $rootScope.selectedPlan = (!$rootScope.noMatchPlanName) ? plan : null;
                TransparencyFactory.setSelectedPlan(plan);
                TransparencyFactory.setZipRangeNC($scope.findDoctorDetails.distanceDetails.NCZipMin,$scope.findDoctorDetails.distanceDetails.NCZipMax );

                if (!plan.name) {
                  plan.name = plan.lobDesc;
                }

                if ($rootScope.loggedIn) {
                   adobeService.trackAction('provider search: guided search', analyticConstants.HEALTHNAV_SECTION);
                } else {
                  adobeService.trackAction('provider search: select network: ' + plan.name, analyticConstants.HEALTHNAV_SECTION);
                }

                if ($rootScope.noMatchPlanFound && TransparencyFactory.getCity() && TransparencyFactory.getCity().zip) {
                  $rootScope.openFindCare = true;
                  return $rootScope.gotoView('/find-care');
                } else if ((plan.name.toLowerCase() == 'medicare supplement') || (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip)) {
                  $rootScope.gotoView('/find-doctor-search');
                } else {

                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setLocationBlocked(false);
                          if ($rootScope.noMatchPlanFound) {
                            $rootScope.openFindCare = true;
                            return $rootScope.gotoView('/find-care');
                          } else {
                            $scope.gotoView('/find-doctor-search');
                          }
                        } else if (response === 'position not found') {
                          // this is when I block current location
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.findDoctorDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck = plan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.findDoctorDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = plan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              }

              $scope.confirmFunc = function(data) {
                $rootScope.distance = data.distance;
                $rootScope.city = data.city;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound){
                  $rootScope.openFindCare = true;
                  $rootScope.gotoView('/find-care');
                } else {
                  $rootScope.gotoView('/find-doctor-search');
                }
              };

              $scope.modalObj = {
                locationMsg: $scope.findDoctorDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE
                },
                values: {
                  distanceDetails: $scope.findDoctorDetails.distanceDetails,
                  distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.findDoctorDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity()
                }
              };

              $scope.alertModalObj = {
                title: $scope.findDoctorDetails.title ? $scope.findDoctorDetails.title : '',
                message: $scope.findDoctorDetails.message ? $scope.findDoctorDetails.message : '',
                confirmBtn: $scope.findDoctorDetails.confirmBtn ? $scope.findDoctorDetails.confirmBtn : '',
              };
            }]
        };
      }
    ]);
}());

/**
 * Directive for the reusable full screen modal.
 *
 * @namespace Directives
 * @class fullScreenModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.fullScreenModal', [])
  .directive('fullScreenModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'help/full-screen-modal.html',
        scope: false,
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {

            /**
             * Cancel button for full screen modal
             *
             * @memberof fullScreenModal
             * @method cancel
             */
            $scope.fullScreenCancel = function () {
              angular.element('.full-screen-modal').modal('hide');
              $rootScope.blurContent = false;

              angular.element('.navbar').toggleClass('blur',false);
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the fund balance view on benefits page.
 *
 * @namespace Directives
 * @class fundBalance
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.fundData', [])
  .directive('fundData', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/fund-data.html',
        scope: {
          /**
          * Display information for the fund page.
          *
          * @memberof fundBalance
          * @member {Object} fundBalanceDetails
          */
          funds: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'config',
          'adobeService',
          function($rootScope, $scope, config, adobeService) {
            $scope.loc = $rootScope.loc;

            $scope.goToHEQ = function() {
              return $rootScope.openInSecureBrowser('appsso:healthequity');
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a help item group on the help page.
 *
 * @namespace Directives
 * @class glossaryOfTerms
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.glossaryOfTerms', [])
  .directive('glossaryOfTerms', [
    '$rootScope',
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/glossary-of-terms.html',
        scope: {
          /**
          * Display information for the help item group.
          *
          * @memberof helpItemGroup
          * @member {Object} groupDetails
          */
          data: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          function($scope, $rootScope, $location, $timeout) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
            
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for an element to go back a screen on click.
 *
 * @namespace Directives
 * @class goBack
 */
angular.module('blueconnect.mobile.directives.goBack', [])
.directive('goBack', ['$rootScope','$window', '$location', '$timeout', 'TransparencyFactory', '$route', function($rootScope, $window, $location, $timeout, TransparencyFactory, $route) {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      elem.on('click', function(event) {       
        $rootScope.fromBackButton = false;
        $rootScope.detailsFromBackButton = false;
        if ($rootScope.sentMessage || $rootScope.cliamSendMessage) {
          $window.history.go(-4);
          $rootScope.sentMessage= false;
          $rootScope.cliamSendMessage = false;
        } else if ($location.path() === '/find-doctor-search' || 
        $location.path() === '/find-doctor' || 
        $location.path() === '/find-doctor-browser') {
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $rootScope.openMapView = false;
          $window.history.back();
        } else if ($location.path() === '/find-doctor-search-results') {
          $rootScope.resultsTermsArr.shift();
          TransparencyFactory.setResultsTerm($rootScope.resultsTermsArr[0]);
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $window.history.back();
        } else if ($location.path() === '/find-doctor-results-details') {
          $rootScope.resultsDetailsTermArr.shift();
          TransparencyFactory.setResultsDetailsTerm($rootScope.resultsDetailsTermArr[0]);
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $rootScope.openMapView = ($rootScope.OpenDetailsPageFromMapView === 'map') ? true : false;
          $window.history.back();
        } else if($rootScope.openFindCare && $location.path() === '/find-care'){
          $rootScope.openFindCare = false;
          $window.history.go(-2);
        }else {
          $window.history.back();
        }
      });
    }
  };
}]);

/**
 * Directive for an element to go back to inbox.
 *
 * @namespace Directives
 * @class goInbox
 */
angular.module('blueconnect.mobile.directives.goInbox', [])
.directive('goInbox', ['$rootScope', '$location', function($rootScope, $location) {
  return {
    restrict: 'AE',
    link: function(scope, elem, attrs) {
      elem.on('click', function() {
          scope.$apply(function() {
             if($rootScope.returnToInbox !== undefined){
                $location.url($rootScope.returnToInbox);
              }
              else{
                $location.url('/home');
              }
          });
      });
    }
  };
}]);

/**
 * Directive for the healthNav page.
 *
 * @namespace Directives
 * @class healthNav
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.healthNav', [])
  .directive('healthNav', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/health-nav.html',
        scope: {
          /**
          * Display information for the healthNav page.
          *
          * @memberof about
          * @member {Object} healthNavDetails
          */
          healthNavDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          'analyticConstants',
          '$timeout',
          function($rootScope, $scope, adobeService, analyticConstants, $timeout) {
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.startingView = $rootScope.startingView;
            $scope.trackState = $rootScope.trackState;
            $scope.trackAction = $rootScope.trackAction;
            $scope.alertModal = $rootScope.alertModal;
            adobeService.trackState('memberResources', analyticConstants.HEALTHNAV_SECTION);
            
            $timeout(function() {
              if ($rootScope.vitalsDown) {
                $rootScope.vitalsDown = false;
                return $scope.openAlertModal();
              }
            });

            $scope.checkVitalsError = function() {
              if ($rootScope.vitalsError) {
                $scope.openAlertModal();
              } else {
                $scope.gotoView('/find-doctor');
              }
            };

            $scope.alertModalObj = {
              title: $scope.healthNavDetails.title ? $scope.healthNavDetails.title : '',
              message: $scope.healthNavDetails.message ? $scope.healthNavDetails.message : '',
              confirmBtn: $scope.healthNavDetails.confirmBtn ? $scope.healthNavDetails.confirmBtn : '',
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a clickable help icon that opens the help modal.
 *
 * @namespace Directives
 * @class helpIcon
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpIcon', [])
  .directive('helpIcon', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/help-icon.html',
        scope: {
          /**
          * The filename of the help content.
          *
          * @memberof helpIcon
          * @member {String} fileName
          */
          fileName: '=',
          item: '=',
          data: '=',
          header: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            /**
            * Call the helpService to display relative information
            * that might be helpful to the user
            *
            * @memberof helpIcon
            * @method showHelp
            * @param  {String} filename The name of the helpfile to load.
            */
            $scope.showHelp = function() {
              helpService.showHelp($scope.fileName, $scope.data);
              $rootScope.headerTerm = $scope.header;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a help item group on the help page.
 *
 * @namespace Directives
 * @class helpItemGroup
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpItemGroup', [])
  .directive('helpItemGroup', ['livechatService',
    function(livechatService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/help-item-group.html',
        scope: {
          /**
          * Display information for the help item group.
          *
          * @memberof helpItemGroup
          * @member {Object} groupDetails
          */
          groupDetails: '=',
          urgentCareDetails: '=',
          geoLocationDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          'quickAlertService',
          'TransparencyFactory',
          'geoLocationService',
          'analyticConstants',
          'config',
          'livechatService',
          function($scope, $rootScope, $location, $timeout, quickAlertService, TransparencyFactory, geoLocationService, analyticConstants, config, livechatService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $rootScope.selectedPlan = TransparencyFactory.getSelectedPlan();
            $scope.urltoNavigate = null;
            $scope.searchTermPassed = null;
            $scope.livechat = $rootScope.livechat;
            var chatAvailableBtns = null;
            var chatNotAvailableBtns = null;
            $scope.chatButtons = livechatService.getChatButtons();

            $rootScope.$watch("livechat.value", function(newVal, oldVal) {
              if (newVal !== oldVal && $location.path() === '/help') {
                if ($rootScope.livechat && !$rootScope.livechat.value) {
                    chatAvailableBtns.style.display='none';
                    chatNotAvailableBtns.style.display = '';
                  } else {
                    chatNotAvailableBtns.style.display = 'none';
                    chatAvailableBtns.style.display='';
                  }
              }
            }, true);

            $scope.liveChatUpdate = function() {

              $timeout(function(){
  
                chatAvailableBtns = document.getElementById("live-chat-available");
                chatNotAvailableBtns = document.getElementById("live-chat-not-available");
                if ($rootScope.livechat && !$scope.livechat.value){
                  chatAvailableBtns.style.display='none';
                  chatNotAvailableBtns.style.display = '';
                } else {
                  chatNotAvailableBtns.style.display = 'none';
                  chatAvailableBtns.style.display='';
                }
              });
            };
            if($rootScope.liveChatIntialized) {
              $scope.liveChatUpdate();
            }


            $scope.startChat = function (buttonToken) {
              livechatService.openChat(buttonToken);
            };
            $scope.liveChatAlert = function () {
              livechatService.alert();
            }; 

            $scope.gotoSSO = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };
            $timeout(function() {
              if ($rootScope.vitalsDown) {
                $rootScope.vitalsDown = false;
                return $scope.openAlertModal();
              }
            });

            $scope.checkForSso = function(link, searchTerm, isExternalLink, index) {

              if (searchTerm) {
                $rootScope.healthNavTrackActions(4, {searchTerm: searchTerm}, analyticConstants.HELP_SECTION);
              }

              if (link === '/chatnow') {
                $scope.startChat( $scope.chatButtons[index].token);                                    
              } else if (link === '/chatalert') {
                $scope.liveChatAlert();
              } else if (link.startsWith('sso')) {
                $scope.gotoSSO(link);
              } else {
                $scope.navigatePageRequested(link, searchTerm, isExternalLink);
              }
            };

            $scope.navigatePageRequested = function (url, searchTerm, isExternalLink) {
              // External link?
              if (isExternalLink) {
                return $scope.openInBrowser(url, '_blank', {});
              }
              if (url === '/chat') {
                var bsbcUrl = config.bcbsWebUrl;
                return $scope.openInBrowser(bsbcUrl);
              } else if (!$rootScope.loggedIn) {
                if ($rootScope.vitalsError && url === '/find-doctor') {
                  return $scope.openAlertModal();
                }
                $rootScope.gotoView(url);
              } else if (!$rootScope.selectedPlan.active) {
                if ($rootScope.vitalsError && url === '/find-doctor-browser') {
                  $scope.openAlertModal();
                  return;
                }
                $rootScope.gotoView(url !== '/find-doctor-browser' ? url : '/fad-auth/find-doctor');
              } else {
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                 /* noop */
                } else if (url != '/find-doctor-browser' && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  $rootScope.gotoView(url);
                } else {
                  if ($rootScope.vitalsError) {
                    $scope.openAlertModal();
                    return;
                  }
                  if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound){
                    return $rootScope.gotoView('/find-care');
                  } 
                  if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                    $scope.gotoBrowseLevelPage(url, searchTerm);
                  } else {
                    TransparencyFactory.setZipRangeNC($scope.geoLocationDetails.distanceDetails.NCZipMin,$scope.geoLocationDetails.distanceDetails.NCZipMax);
                    if (navigator.geolocation) {
                      $rootScope.$emit('pageLoading');
                      $timeout(function () {
                        $rootScope.enableLocation = true;
                      }, 0)
                          .then(function () {
                            return geoLocationService.getLocation();
                          })
                          .then(function (response) {
                            $rootScope.$emit('pageLoaded');
                            if (response.data && response.data.zip) {
                              $rootScope.city = response.data;
                              $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                              $rootScope.currentCity = $rootScope.city;
                              $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                              $rootScope.vitalsGeoCoords = response.data.geo;
                              TransparencyFactory.setDistance($rootScope.distance);
                              TransparencyFactory.setCity($rootScope.city);
                              TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                              TransparencyFactory.setGeoLocationStatus(true);
                              TransparencyFactory.setLocationBlocked(false);
                              $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                              if ($rootScope.noMatchPlanFound){
                                $rootScope.gotoView('/find-care');
                               } else {
                                 $scope.gotoBrowseLevelPage(url, searchTerm);
                               }
                            } else if (response === 'position not found') {
                              TransparencyFactory.setLocationBlocked(true);
                              TransparencyFactory.setGeoLocationStatus(false);
                              TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                              $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                              $scope.openModal();
                            } else {
                              TransparencyFactory.setLocationBlocked(false);
                              TransparencyFactory.setGeoLocationStatus(false);
                              $rootScope.$emit('pageLoaded');
                              $scope.modalObj.values.locationNotFound = true;
                              $scope.openModal();
                            }
                          })
                          .catch(function () {
                            TransparencyFactory.setLocationBlocked(false);
                            $rootScope.$emit('pageLoaded');
                            $scope.modalObj.values.locationNotFound = true;
                            $scope.openModal();
                          });
                    } else {
                      $rootScope.$emit('pageLoaded');
                      TransparencyFactory.setLocationBlocked(true);
                      TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                      $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                      $scope.openModal();
                    }
                  }
                }
              }
            };

            /**
             * Based on the user selection, go to the url with planName, zipCode, distance and search term
             *
             * @memberof findDoctorSearch
             * @method gotoBrowseLevelPage
             */
            $scope.gotoBrowseLevelPage = function(url, searchTerm) {
              $rootScope.openMapView = false;
              $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
              if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                TransparencyFactory.setResultsTerm(searchTerm);
                $rootScope.gotoView('/find-doctor-search-results?id=' + $scope.urgentCareDetails[0].id + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + TransparencyFactory.getDistance() + '&searchTerm='+ searchTerm );
              } else {
                TransparencyFactory.setSearchTerm(searchTerm);
                $rootScope.gotoView(url + '?searchTerm='+ searchTerm + '&planName='+ $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
              }
           }; // end of gotoBrowseLevelPage function


           $scope.confirmFunc = function(data) {
             $rootScope.city = data.city;
             $rootScope.distance = data.distance;
             TransparencyFactory.setDistance($rootScope.distance);
             TransparencyFactory.setCity($rootScope.city);
             TransparencyFactory.setGeoLocationStatus(false);
             if ($rootScope.noMatchPlanFound){
              $rootScope.gotoView('/find-care');
             } else {
              $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
            }
           };

           $scope.modalObj = {
             locationMsg: $scope.geoLocationDetails.locationMsg,
             cancelButton: {
               title: $scope.loc.CANCEL
             },
             confirmButton: {
               title: $scope.loc.CONTINUE
             },
             values: {
               distanceDetails: $scope.geoLocationDetails.distanceDetails,
               distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
               city: TransparencyFactory.getCity()
             }
           };

          $scope.alertModalObj = {
            title: $scope.groupDetails.alertModal && $scope.groupDetails.alertModal.title ? $scope.groupDetails.alertModal.title : '',
            message: $scope.groupDetails.alertModal && $scope.groupDetails.alertModal.message ? $scope.groupDetails.alertModal.message : '',
            confirmBtn: $scope.groupDetails.alertModal && $scope.groupDetails.alertModal.confirmBtn ? $scope.groupDetails.alertModal.confirmBtn : '',
          };

            /**
             * Toggles the quick-alert-modal for sent message if messageSent is true
             *
             * @memberof helpItemGroup
             */
             if ($location.search().messageSent) {
               $rootScope.sentMessage = true;
               quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
               $timeout(function() {
                   angular.element('.quick-alert-modal').hide();
               }, 2000);
               var search = angular.copy($location.search());
               delete search.messageSent;
               $location.search(search);
             }
          }
        ],
        // link: function($scope, $elem) {
        //   livechatService.registerButton( $elem.find("[name='live-chat-available-button']").context, 0);
        //   livechatService.registerButton( $elem.find(["name='live-chat-not-available-button'"]).context, 1);
        // }
      };
    }
  ]
);
}());

/**
 * Directive for a clickable help icon that opens the help modal.
 *
 * @namespace Directives
 * @class helpIcon
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpLink', [])
  .directive('helpLink',  ['$compile', 
    function($compile) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/help-link.html',
        scope: {
          /**
          * The filename of the help content.
          *
          * @memberof helpIcon
          * @member {String} fileName
          */
          fileName: '=',
          item: '=',
          data: '='
        },
        link: function  (scope, element, attr) {
          scope.$watch(
            function(scope) {
              // watch the 'compile' expression for changes
              return scope.$parent.$eval(attr.data);
            },
            function(value) {
              var perferred  = scope.loc.FAMILYGRAPH_FAMILYSUMMARY_PREFERREDCARE_LABEL;
              var standard = scope.loc.FAMILYGRAPH_FAMILYSUMMARY_STANDARDCARE_LABEL;
              value = value.replace(perferred, "<A ng-click='showHelp()'>" + perferred + "</A>");
              value = value.replace(standard, "<A ng-click='showHelp()'>" + standard + "</A>");              
              // when the 'compile' expression changes
              // assign it into the current DOM
              element.html(value);
              console.log(value);
              // compile the new DOM and link it to the current
              // scope.
              // NOTE: we only compile .childNodes so that
              // we don't get into infinite loop compiling ourselves
              $compile(element.contents())(scope);
            }
          );
        },
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            /**
            * Call the helpService to display relative information
            * that might be helpful to the user
            *
            * @memberof helpIcon
            * @method showHelp
            * @param  {String} filename The name of the helpfile to load.
            */
            $scope.showHelp = function() {
              helpService.showHelp($scope.fileName, $scope.data);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable help modal.
 *
 * @namespace Directives
 * @class helpModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpModal', [])
  .directive('helpModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'help/help-modal.html',
        scope: false,
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.trackAction = $rootScope.trackAction;
            

            /**
             * Cancel button for help modal
             *
             * @memberof helpModal
             * @method cancel
             */
            $scope.cancel = function () {
              angular.element('.help-modal').modal('hide');
              $rootScope.blurContent = false;

              angular.element('.navbar').toggleClass('blur',false);
            };

          }
        ]
      };
    }
  ]);
}());

/**
* Directive for the benefits card on the home screen.
*
* @namespace Directives
* @class homeCardBenefitsSelect
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardBenefitsSelect', [])
  .directive('homeCardBenefitsSelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-benefits-select.html',
        scope: {
          benefits: '=',
          policySelection: '=',
          selectedPolicy: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          'adobeService',
          function($scope, $rootScope, $filter, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.policyIndex = $scope.policyIndex || 0;
            $scope.policy = $rootScope.policies[$scope.policyIndex];
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Retrieves the policy dates display string.
             *
             * @memberof homeCardBenefits
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
             * Selects a policy type title
             *
             * @memberof homeCardBenefits
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              var response;
              if(new Date(policy.expirationDate) < new Date() && (policy.isMedical || policy.isPharmacy)) {
                 response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
              } else if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };

            /**
             * Sets the benfits available if user has benefits
             *
             * @memberof homeCardBenefits
             * @method checkLink
             */
            $scope.checkLink = function() {
             if($scope.policySelection.choice == 'DENTAL_ONLY') {
               return $scope.gotoView('/benefits/dental-only');
             } else if($scope.policy.sourceSystem.toLowerCase() == 'amisys') {
              return $scope.gotoView('/medicare-benefits');
             }

             return $scope.gotoView('/benefits');
            };

            /**
             * Pass through method to external links for dental benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDentalBenefits
             */
            $scope.gotoDentalBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDrugBenefits
             */
            $scope.gotoDrugBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

          }
        ]
      };
    }
  ]);
}());

/**
* Directive for the benefits card on the home screen.
*
* @namespace Directives
* @class homeCardBenefits
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardBenefits', [])
  .directive('homeCardBenefits', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-benefits.html',
        scope: {
          benefits: '=',
          policySelection: '=',
          selectedPolicy: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          'adobeService',
          'helpService',
          function($scope, $rootScope, $filter, adobeService, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.policyIndex = $scope.policyIndex || 0;
            $scope.policy = $rootScope.policies[$rootScope.selectedPolicy.index];
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Retrieves the policy dates display string.
             *
             * @memberof homeCardBenefits
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
             * Selects a policy type title
             *
             * @memberof homeCardBenefits
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              var response;
              if (new Date(policy.expirationDate) < new Date() && (policy.isMedical || policy.isPharmacy)) {
                 response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN_INACTIVE;
              } else if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };

            /**
             * Sets the benfits available if user has benefits
             *
             * @memberof homeCardBenefits
             * @method checkLink
             */
            $scope.checkLink = function() {
             if ($scope.policySelection.choice == 'DENTAL_ONLY') {
               return (!$scope.policySelection.lowCostDentalOnlyPlan) ? $scope.gotoView('/benefits/dental-only') : $scope.gotoView('/benefits/low-cost-dental-only');
             } else if ($scope.policySelection.choice == 'CONTRACEPTIVE_ONLY') {
              return $scope.gotoView('/benefits/contraceptive-only');
            } else if ($scope.policy.sourceSystem.toLowerCase() == 'amisys') {
              return $scope.gotoView('/medicare-benefits');
            }else if ($scope.policySelection.choice == 'BBTRX_ONLY') {
              return $scope.gotoView('/benefits/bbt-only');
            }else if ($scope.policySelection.choice == 'VISION_ONLY') {
              return $scope.gotoView('/benefits/vision-only');
            } 

             return $scope.gotoView('/benefits');
            };

            $scope.openModal = function() {
              if ($scope.policySelection.choice == 'CONTRACEPTIVE_ONLY') {
                $rootScope.headerTerm = $scope.benefits.modalHeader;
                $scope.helpInfo = {
                  benefitsModalText: $scope.benefits.modalText,
                  contraceptiveInfo : true
                };
                helpService.help($scope.helpInfo);
              }
            };

            /**
             * Pass through method to external links for dental benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDentalBenefits
             */
            $scope.gotoDentalBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for vision benefits
             *
             * @memberof homeCardBenefits
             * @method gotoVisionBenefits
             */
            $scope.gotoVisionBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDrugBenefits
             */
            $scope.gotoDrugBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * @description
 * Directive for Members set up on AutoPay using BlueConnect Mobile before we release
 * features for AutoPay Members.
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.homeCardBillingAutopayStaticContent', [])
    .directive('homeCardBillingAutopayStaticContent', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/home-card-billing-autopay-static-content.html'
        };
      }
    ]);
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.homeCardBillingError', [])
    .directive('homeCardBillingError', function() {
      return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/home-card-billing-error.html',
        scope: {
          planDetails: '<',
          error: '<'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;
          console.warn('Error retrieving home card billing data', $scope.error);
        }]
      };
    });
})();
/**
 * Directive for the billing card on the home screen.
 *
 * @namespace Directives
 * @class homeCardBilling
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardBilling', [])
  .directive('homeCardBilling', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-billing.html',
        scope: {
          /**
          * Display information for the payment.
          *
          * @memberof homeCardBilling
          * @member {Object} paymentDetails
          */
          paymentDetails: '=',
          /**
          * Display information for the plan.
          *
          * @memberof homeCardBilling
          * @member {Object} planDetails
          */
          planDetails: '=',
          /**
          * The link to take autopay members to.
          * We will have all autopay functionality in another release
          *
          * @memberof homeCardBilling
          * @member {string} billingLink
          */
          billingLink: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          'BillingInvoiceHistoryFactory',
          function($scope, $rootScope, BillingInvoiceHistoryFactory) {
            $scope.loc = $rootScope.loc;
            $scope.enterPaymentFlow = $rootScope.enterPaymentFlow;
            $scope.billingLink = $scope.billingLink.replace(/'/g, '');
            $scope.gotoView = function(url) {
              if (url.indexOf('http') === 0) {
                return $rootScope.openInSecureBrowser(url);
              }
              $rootScope.gotoView(url);
            };

            BillingInvoiceHistoryFactory.setMedicareSSAValue(!!$scope.planDetails.medicareSSA);

            $scope.amountDue = $scope.paymentDetails.amountDue ? $scope.paymentDetails.amountDue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : '';
            $scope.balanceForwardAmount = $scope.paymentDetails.balanceForwardAmount ? $scope.paymentDetails.balanceForwardAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';

            /**
             * Retrieves the payment amount dollars for display.
             *
             * @memberof homeCardBilling
             * @method getAmountDueDollars
             * @return {String} The dollar amount
             */
            $scope.getAmountDueDollars = function() {
              return $scope.amountDue.slice(0, $scope.amountDue.indexOf('.') + 1) || 0;
            };

            /**
             * Retrieves the payment amount cents for display.
             *
             * @memberof homeCardBilling
             * @method getAmountDueCents
             * @return {String} The cents amount
             */
            $scope.getAmountDueCents = function() {
              return $scope.amountDue.slice($scope.amountDue.indexOf('.') + 1);
            };

            $scope.getMonth = function(dateStr) {
              if (!dateStr) {
                return null;
              }
            return dateStr.substr(0, dateStr.indexOf(' ')).toUpperCase();
            }
          }
        ]
      };
    }
  ]);

  // https://github.com/uxitten/polyfill/blob/master/string.polyfill.js
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
  if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength,padString) {
        targetLength = targetLength>>0; //floor if number or convert non-number to 0;
        padString = String(padString || ' ');
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength-this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
            }
            return String(this) + padString.slice(0,targetLength);
        }
    };
  }
}());

/**
 * Directive for the about page.
 *
 * @namespace Directives
 * @class about
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homecardChat', [])
  .directive('homeCardChat', ['livechatService',
    function(livechatService) {
    return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-chat.html',
        scope: {
          /**
          * Display information for the about page.
          *
          * @memberof about
          * @member {Object} aboutDetails
          */
          chatDetails: '=',
          liveChatDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          'config',
          '$timeout',
          '$location',
          function($rootScope, $scope, adobeService, config, $timeout, $location) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.loc = $rootScope.loc;
            $scope.chatButtons = livechatService.getChatButtons();
            var mergedResponse = null;
            var chatAvailableBtns = document.getElementById("live-chat-available-button");
            var chatNotAvailableBtns = document.getElementById("live-chat-not-available-button");

            var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

            var liveChatObject = $scope.liveChatDetails;
            var liveChatMemberDetailsObject = liveChatObject.livechatDetailsObject;

            $.post(url + '/livechat', liveChatObject).then(function(result) {
              if (result.dateOfBirth && /\d{8}/.test(result.dateOfBirth)) {

                if (parseInt(result.dateOfBirth.slice(0,2)) < 13) {

                  result.dateOfBirth = [
                    result.dateOfBirth.slice(0,2),
                    result.dateOfBirth.slice(2,4),
                    result.dateOfBirth.slice(4,8)
                    ].join('-');
                }
            }
            liveChatMemberDetailsObject.result = result;
            mergedResponse = angular.extend({}, liveChatMemberDetailsObject.member, liveChatMemberDetailsObject.result);

            if (!window.liveagent) {
              livechatService.reloadLivechat();
              $rootScope.liveChatIntialized = false;
            }
            if (!$rootScope.liveChatIntialized) {
              $rootScope.liveChatIntialized = true;
              if (!window._laq) {
                window._laq = [];
              }

              $timeout(function() {
                window._laq.push(function () {
                  window.liveagent.showWhenOnline($scope.chatButtons[0].token, chatAvailableBtns);
                  window.liveagent.showWhenOffline($scope.chatButtons[0].token, chatNotAvailableBtns);
                });
                
                window.liveagent.init.apply(null, config.liveagent.authInit);
                angular.forEach(mergedResponse, function (value, key) {
                  try {
                    window.liveagent.addCustomDetail(key, value + '');
                  } catch (error) {
                    console.log("error live chat" + error);
                  }
                });

                window.liveagent.addButtonEventHandler($scope.chatButtons[0].token, btnEventHandler);
              }, 1000);
            }
          });
            function btnEventHandler(e){
              if (e == window.liveagent.BUTTON_EVENT.BUTTON_AVAILABLE){
                $rootScope.livechat = { value: true };
                if ($location.path() === '/help') {
                  $rootScope.$apply();
                }
              } else if (e == window.liveagent.BUTTON_EVENT.BUTTON_UNAVAILABLE){
                $rootScope.livechat = { value: false };
                if ($location.path() === '/help') {
                  $rootScope.$apply();
                }
              }
            }

            $scope.startChat = function (buttonToken) {
              livechatService.openChat(buttonToken);
            };
            $scope.liveChatAlert = function () {
              livechatService.alert();
            };           
          }
        ]
      };
    }
  ]);
}());
/**
 * Directive for the claims card on the home screen.
 *
 * @namespace Directives
 * @class homeCardClaims
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardClaims', [])
  .directive('homeCardClaims', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-claims.html',
        scope: {
          /**
          * Up to the 4 latest claims.
          *
          * @memberof homeCardClaims
          * @member {Array} claims
          */
          claims: '=',
          claimsTitle: '=',
          totalClaims: '=',
          policySelection: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'config',
          function($scope, $rootScope, config) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Generates the claim header string based on the policy type.
             *
             * @memberof homeCardClaims
             * @method getClaimsTitle
             */
            $scope.getClaimsTitle = function() {
              var titleString = "";

              switch ($scope.policySelection.choice) {
                  case "RX_ONLY":
                    titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                    break;
                  case "BBTRX_ONLY":
                    titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                    break;
                  case "DENTAL_ONLY":
                    titleString = $rootScope.loc.DENTAL_CLAIMS;
                    break;
                  case "VISION_ONLY":
                    titleString = $rootScope.loc.BLUE2020_CLAIMS_VISION_CLAIMS;
                    break;
                  default: //We will have some form of medical included.
                    if($scope.totalClaims === 1) {
                      titleString = '1 ' + $rootScope.loc.CLAIM;
                    }
                    else if($scope.totalClaims > 1) {
                      titleString = $scope.totalClaims + ' ' + $rootScope.loc.CLAIMS;
                    }
                    else if($scope.totalClaims === 0){
                      titleString = $scope.totalClaims + ' ' + $rootScope.loc.CLAIMS;
                    }
                    else {
                      titleString = $scope.claims.length + ' ' + $rootScope.loc.CLAIMS;
                    }

                    break;
              }

              return titleString;
            };

            /**
             * Pass through method to external links for dental claims
             *
             * @memberof homeCardClaims
             * @method gotoDentalClaims
             */
            $scope.gotoDentalClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for vision claims
             *
             * @memberof homeCardClaims
             * @method gotoVisionClaims
             */
            $scope.gotoVisionClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug claims
             *
             * @memberof homeCardClaims
             * @method gotoDrugClaims
             */
            $scope.gotoDrugClaims = function(ssoLink) {
              var data = {
                ssoLink : ssoLink,
                page : "RxClmDetl"
              };
              return $rootScope.openInSecureBrowser(data);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the  Customer service card on the home screen.
 *
 * @namespace Directives
 * @class homeCardCustomerService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardCustomerService', [])
  .directive('homeCardCustomerService', [
    function(newsService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-customer-service.html',
        scope: {
          /**
          * Display information for the customer service
          *
          * @memberof homeCardCustomerService
          * @member {Object} customerDetails
          */
          customerDetails : "=",
          fadAlertModal : "="
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Opens the default mail application
             */
            $scope.openMail = $rootScope.openMail;

            /**
            * Based on the row size it will display the items from customerDetails
            * Dividing the customerDetails object into rows
            *
            * @memberof homeCardCustomerService
            * @method getRowContent
            **/
            var rowSize = 2;

            $scope.customerDetails1 = getRowContent($scope.customerDetails, rowSize);
            function getRowContent(source, size) {
              var data = [];
              while (source.length > 0) {
                data.push(source.splice(0, size));
              }
              return data;
            }

            /**
            * Tracks a click on the card in analytics
            *
            * @memberof homeCardCustomerService
            * @method trackClick
            **/
            $scope.trackIconClick = function(item) {
              var state = '';
              switch(item.icon) {
                case 'help-compose':
                  state += 'homeComposeSecureMessageIcon';
                  break;
                case 'help-compose':
                  state += 'homeViewSecureInboxIcon';
                  break;
                case 'phone':
                  state += 'homeCallCustomerServiceIcon';
                  break;
                case 'faq':
                  state += 'homeFaqsIcon';
                  break;
                case 'circle-healthnav':
                  state += 'homeHealthNavIcon';
                  break;
                case 'feedback':
                  state += 'homeFeedbackIcon';
                  break;
                default:
                  state += 'homeUnknownIcon';
                  break;
              }
            };

            $scope.checkVitalsError = function(url) {
              if ($rootScope.vitalsError && url === '/fad-auth/find-doctor') {
                $scope.openAlertModal();
              } else {
                $scope.gotoView(url);
              }
            };

            $scope.alertModalObj = {
              title: $scope.fadAlertModal.title ? $scope.fadAlertModal.title : '',
              message: $scope.fadAlertModal.message ? $scope.fadAlertModal.message : '',
              confirmBtn: $scope.fadAlertModal.confirmBtn ? $scope.fadAlertModal.confirmBtn : '',
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the  Find Care card on the home screen.
 *
 * @namespace Directives
 * @class homeCardFindCare
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardFindCare', [])
    .directive('homeCardFindCare', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/home-card-find-care.html',
          scope: {
            /**
            * Display information for the find care
            *
            * @memberof homeCardFindCare
            * @member {Object} findCareDetails
            */
            findCareDetails: '=',
            geoLocationDetails: '=',
            jwt: '=?',
            signature: '=?',
            smartShopperDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            '$timeout',
            'TransparencyFactory',
            'geoLocationService',
            'helpService',
            'analyticConstants',
            function($scope, $rootScope, $timeout, TransparencyFactory, geoLocationService, helpService, analyticConstants) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.trackState = $rootScope.trackState;
              $scope.trackAction = $rootScope.trackAction;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $rootScope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $rootScope.isSmartShopperEligible = ($rootScope.loggedIn && $scope.findCareDetails.isSmartShopperEligible);
              $scope.language = $rootScope.language;

              if ($scope.jwt) {
                console.log('storing jwt', $scope.jwt.substr(0, 5));
                $rootScope.vitalsJWT = $scope.jwt;
              }
              if ($scope.signature) {
                console.log('storing signature');
                $rootScope.vitalsSignature = $scope.signature;
              }

              /**
              * Based on the row size it will display the items from careDetails
              * Dividing the customerDetails object into rows
              *
              * @memberof homeCardCareDetails
              * @method getRowContent
              **/

              var rowSize = 2;

              $scope.hasOddItems = function(items) {
                return !(items.length % 2 === 0);
              };

              $scope.careDetailsRow = ($scope.findCareDetails.links) ? getRowContent($scope.findCareDetails.links, rowSize) : null;

              function getRowContent(source, size) {
                var data = [];
                while (source.length > 0) {
                  data.push(source.splice(0, size));
                }
                return data;
              }

              $scope.gotoSSO = function(ssoLink) {
                return $rootScope.openInSecureBrowser(ssoLink);
              };

              $scope.checkForSso = function(link, searchTerm, description, isExternalLink) {
                $rootScope.healthNavTrackActions(4, { searchTerm: searchTerm }, analyticConstants.HOME_SECTION);
                if (link.startsWith('sso')) {
                  $scope.gotoSSO(link);
                } else {
                  $scope.gotoNavigatedPage(link, searchTerm, description, isExternalLink);
                }
              };

              $scope.gotoNavigatedPage = function(url, searchTerm, planDetails, isExternalLink) {
                // External link?
                if (isExternalLink) {
                  return $rootScope.openInBrowser(url, '_blank', {});
                }

                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                $scope.planDetails = planDetails;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                }
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                } else {
                  TransparencyFactory.setZipRangeNC($scope.geoLocationDetails.distanceDetails.NCZipMin, $scope.geoLocationDetails.distanceDetails.NCZipMax);
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                          if ($rootScope.noMatchPlanFound) {
                            $rootScope.gotoView('/find-care');
                          } else {
                            $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                          }
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };


              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound) {
                  $rootScope.gotoView('/find-care');
                } else {
                  $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed, $scope.planDetails);
                }
              };

              $scope.modalObj = {
                locationMsg: $scope.geoLocationDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE
                },
                values: {
                  distanceDetails: $scope.geoLocationDetails.distanceDetails,
                  distance: (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity()
                }
              };

              $scope.gotoBrowseLevelPage = function(url, searchTerm, planDetails) {
                $rootScope.openMapView = false;
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?id=' + $scope.findCareDetails.urgentCareDetails[0].id + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + planDetails.distance + '&searchTerm=' + searchTerm);
                } else {
                  TransparencyFactory.setSearchTerm(searchTerm);
                  $rootScope.gotoView(url + '?searchTerm=' + searchTerm + '&planName=' + planDetails.planName + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id + '&smartShopperFlow=' + planDetails.acceptedSmartShopperTerms);
                }
              };

              $scope.alertModalObj = {
                title: $scope.findCareDetails.title || '',
                message: $scope.findCareDetails.message || '',
                confirmBtn: $scope.findCareDetails.confirmBtn || '',
                cancelBtn: $scope.findCareDetails.cancelBtn || '',
              };

              $scope.termsModalObj = $scope.smartShopperDetails.acceptTermsModal;

              $rootScope.vitalsError = $scope.findCareDetails.vitalsError ? $scope.findCareDetails.vitalsError : false;

              $scope.checkVitalsUp = function() {
                if (!$scope.findCareDetails.showSearchNav && !$scope.findCareDetails.vitalsError) {
                  return;
                } else if (!$scope.findCareDetails.vitalsError && $scope.findCareDetails.showSearchNav) {
                  $scope.gotoView('/fad-auth/find-doctor');
                } else if ($scope.findCareDetails.vitalsError) {
                  $scope.openAlertModal();
                }
              };

              $scope.openInfoModal = function() {
                $rootScope.headerTerm = $scope.smartShopperDetails.infoModalHeader;
                $scope.helpInfo = {
                  introText_1: $scope.smartShopperDetails.infoModalBody.introText_1,
                  introText_2: $scope.smartShopperDetails.infoModalBody.introText_2,
                  title: $scope.smartShopperDetails.infoModalBody.title,
                  contents: [
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_1,
                      text: $scope.smartShopperDetails.infoModalBody.text_1,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_2,
                      text: $scope.smartShopperDetails.infoModalBody.text_2,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_3,
                      text: $scope.smartShopperDetails.infoModalBody.text_3,
                    }
                  ],
                  smartShopperInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.confirmTermsFunc = function() {
                $rootScope.smartShopperTermsAccepted = true;
                var smartShopperSearchParams = $scope.findCareDetails.searchParams;
                smartShopperSearchParams.acceptedSmartShopperTerms = $rootScope.smartShopperTermsAccepted;
                TransparencyFactory.setSmartShopperFilter(false);
                $scope.gotoNavigatedPage($scope.smartShopperDetails.url, $scope.smartShopperDetails.searchTerm, $scope.findCareDetails.searchParams, false);
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the card on the home screen for ID card.
 *
 * @namespace Directives
 * @class homeCardIdCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardIdCard', [])
  .directive('homeCardIdCard', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-id-card.html',
        scope: {
          /**
          * The policy index of the ID card.
          *
          * @memberof homeCardIdCard
          * @member {Number} policyIndex
          */
          policyIndex: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          function($scope, $rootScope, $filter) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.policyIndex = $scope.policyIndex || 0;
            $scope.policy = $rootScope.policies[$scope.policyIndex];
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Retrieves the policy dates display string.
             *
             * @memberof homeCardBenefits
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
             * Selects a policy type title
             *
             * @memberof homeCardBenefits
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              var response;
              if (new Date(policy.expirationDate) < new Date() && (policy.isMedical || policy.isPharmacy)) {
                 response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN_INACTIVE;
              } else if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the info homeCardInformationAlert card on the home screen.
 *
 * @namespace Directives
 * @class homeCardInformationAlert
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardInformationAlert', [])
  .directive('homeCardInformationAlert', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-information-alert.html',
        scope: {
          /**
          * Display information for the info alert
          *
          * @memberof homeCardInformationAlert
          * @member {Object} informationDetails
          */
          informationDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            /**
             *Display the alert window for external link to open the url in browser
            **/
            $scope.openInBrowser = $rootScope.openInBrowser;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the inbox card on the home screen.
 *
 * @namespace Directives
 * @class homeCardInbox
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardInbox', [])
  .directive('homeCardInbox', [
    'messageService',
    function(messageService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-inbox.html',
        scope: {
          /**
          * Display information for the inbox card.
          *
          * @memberof homeCardInbox
          * @member {Object} inboxDetails
          */
          inboxDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
            $rootScope.unreadMessages = $scope.inboxDetails.unreadMessages;
            $rootScope.getEmailFromCpcFailed = $scope.inboxDetails.getEmailFailed || '';

            $scope.getMessageDisplayDate = messageService.getMessageDisplayDate;
            $scope.readMessage = function(message) {
              $scope.gotoView('/inbox/messages/' + message.messageId); 
              if (message.unread) {
                $rootScope.unreadMessages--;
                $rootScope.refreshNavbar();
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the news update card on the home screen.
 *
 * @namespace Directives
 * @class homeCardNewsUpdate
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardNewsUpdate', [])
  .directive('homeCardNewsUpdate', [
    function(newsService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-news-update.html',
        scope: {
          /**
          * Display information for the news update
          *
          * @memberof homeCardNewsUpdate
          * @member {Object} newsDetails
          */
          newsDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
            /**
             * Checks the link if it has http:// and https://
             * We want to open the link in a browser or in a local view
             *
             * @memberof homeCardNewsUpdate
             * @method handleLink
             */
            $scope.handleLink = function() {
              var url = $scope.newsDetails.link;

              if(url.indexOf('http://') === 0 || url.indexOf('https://') === 0) {
                return $scope.openInBrowser(url);
              } else {
                return $scope.gotoView(url);
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the card on the home screen for information in other languages card.
 *
 * @namespace Directives
 * @class homeCardOtherLanguagesCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardOtherLanguages', [])
  .directive('homeCardOtherLanguages', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-other-languages.html',
        scope: {
          /**
          * Display information for the information in other languages card
          *
          * @memberof homeCardIdCard
          * @member {Number}
          */
          otherLanguages: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.trackAction = $rootScope.trackAction;
            /**
             * Checks the link if it has http:// and https://
             * We want to open the link in a browser or in a local view
             *
             * @memberof homeCardNewsUpdate
             * @method handleLink
             */
            $scope.handleLink = function(link) {
              var url = link;

              if(url.indexOf('http://') === 0 || url.indexOf('https://') === 0) {
                return $rootScope.openInBrowser(url);
              } else {
                return $rootScope.gotoView(url);
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the home card pcp.
 *
 * @namespace Directives
 * @class homeCardPcp
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.homecardPcp', [])
    .directive('homeCardPcp', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/home-card-pcp.html',
          scope: {
            /**
             * Display information for the pcp home card.
             *
             * @memberof about
             * @member {Object} pcpDetails
             */
            pcpDetails: '=',
          },
          controller: [
            '$rootScope',
            '$scope',
            '$filter',
            'TransparencyFactory',
            'geoLocationService',
            '$timeout',
            'helpService',
            'findDoctorService',
            'adobeService',
            'analyticConstants',
            function(
              $rootScope,
              $scope,
              $filter,
              TransparencyFactory,
              geoLocationService,
              $timeout,
              helpService,
              findDoctorService,
              adobeService,
              analyticConstants
            ) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.loc = $rootScope.loc;
              $scope.policy = $rootScope.selectedPolicy;
              $scope.detailsPage = null;
              $scope.policyMembersList = TransparencyFactory.getCurrentPolicyMembers();
              $scope.medicareUser = ($scope.policy.sourceSystem == 'Amisys');

              
              /**
               * Retrieves the policy dates display string.
               *
               * @memberof homeCardPcp
               * @param  {Object} policy The policy to get dates for.
               * @method getPolicyDates
               */
              $scope.getPolicyDates = function(policy) {
                var startDate =
                  $rootScope.loc[
                  $filter('date')(policy.effectiveDate, 'MMM').toUpperCase()
                  ] + $filter('date')(policy.effectiveDate, ' yyyy');
                var endDate =
                  $rootScope.loc[
                  $filter('date')(policy.expirationDate, 'MMM').toUpperCase()
                  ] + $filter('date')(policy.expirationDate, ' yyyy');
                var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
                var expirationMonth =
                  $rootScope.loc[
                  $filter('date')(
                    new Date('December 31, 0000 00:00:00'),
                    'MMM'
                  ).toUpperCase()
                  ];

                if (
                  new Date(policy.expirationDate) >= new Date() &&
                  policy.active
                ) {
                  endDate = $rootScope.loc.ACTIVE;
                } else if (
                  new Date(policy.expirationDate) >= new Date() &&
                  !policy.active
                ) {
                  endDate = expirationMonth + ' ' + policyYear;
                }

                return startDate + ' - ' + endDate;
              };

              /**
               * Selects a policy type title
               *
               * @memberof homeCardPcp
               * @method getPolicyPlanTitle
               */
              $scope.getPolicyPlanTitle = function(policy) {
                var response;
                if (
                  new Date(policy.expirationDate) < new Date() &&
                  (policy.isMedical || policy.isPharmacy)
                ) {
                  response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
                } else if (
                  new Date(policy.expirationDate) < new Date() &&
                  policy.isDental
                ) {
                  response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
                } else if (
                  new Date(policy.expirationDate) < new Date() &&
                  policy.isVision
                ) {
                  response =
                    $rootScope.loc.BLUE2020_HEADER_VISION_PLAN_INACTIVE;
                } else if (policy.isMedical || policy.isPharmacy) {
                  response = $rootScope.loc.HEALTH_PLAN;
                } else if (policy.isDental) {
                  response = $rootScope.loc.DENTAL_PLAN;
                } else if (policy.isVision) {
                  response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
                } else {
                  response = $rootScope.loc.HEALTH_PLAN;
                }
                return response;
              };

              $scope.gotoManageDependentPcp = function() {
                $rootScope.gotoView('/pcp-manage-dependents-pcp');
              };

              $scope.otherPcpSearch = function(searchInput) {
                if ($scope.policy.sourceSystem === 'Amisys') {
                  $rootScope.city = $scope.pcpDetails.getCityForAmisysUser;
                  TransparencyFactory.setCity($scope.pcpDetails.getCityForAmisysUser)
                  .setZipRangeNC($scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMin, $scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMax);
                }
                
                if (
                  TransparencyFactory.getCity() &&
                  TransparencyFactory.getCity().zip
                ) {
                  $scope.gotoPrimaryCarePage(searchInput);
                } else {
                  TransparencyFactory.setZipRangeNC($scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMin, $scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMax);
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName =
                            $rootScope.city.city +
                            $rootScope.city.state_code +
                            ' - ' +
                            $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setCurrentLocationZipCode(
                            response.data.zip
                          );
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName =
                            $scope.pcpDetails.geoLocationDetails.distanceDetails.currentLocation;
                          $scope.gotoPrimaryCarePage(searchInput);
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg(
                            $scope.pcpDetails.geoLocationDetails.locationMsg
                          );
                          $scope.modalObj.values.NCZipCheck =
                            $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg(
                      $scope.pcpDetails.geoLocationDetails.locationMsg
                    );
                    $scope.modalObj.values.NCZipCheck =
                      $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                $scope.gotoPrimaryCarePage($scope.pcpDetails.searchInput);
              };

              if ($scope.pcpDetails.noPCP) {
                adobeService.trackAction('noPCPSelected', analyticConstants.PCP_SECTION);
              }

              if ($scope.pcpDetails.geoLocationDetails) {
                $scope.modalObj = {
                  locationMsg: $scope.pcpDetails.geoLocationDetails.locationMsg,
                  pcp: true,
                  cancelButton: {
                    title: $scope.loc.CANCEL,
                  },
                  confirmButton: {
                    title: $scope.loc.CONTINUE,
                  },
                  values: {
                    distanceDetails:
                      $scope.pcpDetails.geoLocationDetails.distanceDetails,
                    distance: TransparencyFactory.getDistance()
                      ? TransparencyFactory.getDistance().toString()
                      : $scope.pcpDetails.geoLocationDetails.distanceDetails.distance.toString(),
                    city: TransparencyFactory.getCity(),
                  },
                };
              }

              $scope.gotoPrimaryCarePage = function(searchInput) {
                $scope.searchTermId = ($rootScope.selectedPlan.sourceSystem === 'Amisys') ? '260005173' : '260005172';
                TransparencyFactory.setResultsTerm(searchInput.searchTerm);
                return $rootScope.gotoView(
                  searchInput.link +
                  '?id=' + $scope.searchTermId + '&network_id=' +
                  $rootScope.selectedPlan.id +
                  '&distance=' +
                  TransparencyFactory.getDistance() +
                  '&searchTerm=' +
                  searchInput.searchTerm +
                  '&zipCode=' +
                  TransparencyFactory.getCity().zip +
                  '&planName=' +
                  searchInput.planName +
                  '&isPcpFlow=true'
                );
              };

              $scope.gotoDetailsPage = function(providerList) {
                if ($scope.policy.sourceSystem === 'Amisys') {
                  $rootScope.city = $scope.pcpDetails.getCityForAmisysUser;
                  TransparencyFactory.setCity($scope.pcpDetails.getCityForAmisysUser)
                  .setZipRangeNC($scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMin, $scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMax);
                }
                var recommendedFlow = false;
                var requestParms = null;
                if (providerList) { // only if the selection is from recommendation list
                  recommendedFlow = true;
                  if (providerList.vendorSource === 'Nuna'){
                    providerList.fullName = providerList.firstName + ' ' + providerList.middleInitial + ' ' + providerList.lastName;
                    providerList.zipCode = providerList.fullAddress.substring(providerList.fullAddress.length - 5);
                  }
                  TransparencyFactory.setResultsDetailsTerm(providerList.fullName)
                  .setRecommendedPcpData(providerList);
                  requestParms = {
                    network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                    accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                    planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                    zipCode: providerList.zipCode,
                    locationName: encodeURIComponent(providerList.practiceName),
                    doctorName: providerList.fullName
                  };
                } else {
                  TransparencyFactory.setResultsDetailsTerm($scope.pcpDetails.providerData.pcpFullName);
                  requestParms = {
                    network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                    accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                    planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                    zipCode: $scope.pcpDetails.providerData.providerZipCode,
                    locationName: encodeURIComponent($scope.pcpDetails.providerData.providerOrganizationName),
                    doctorName: $scope.pcpDetails.providerData.pcpFullName
                  };
                }
                $rootScope.$emit('pageLoading');

                findDoctorService.getDoctorDetails(requestParms)
                  .then(function(doctorResult) {
                    if (doctorResult.results && doctorResult.results.length) {
                      var viewUrl = '/find-doctor-results-details?' +
                        '&location=' + doctorResult.results[0].location_id +
                        '&provider=' + doctorResult.results[0].provider_id +
                  '&viewPcpDetails=true&recommendedFlow='+ recommendedFlow;
                      // Go to view.
                      $rootScope.gotoView(viewUrl);
                    } else {
                      $rootScope.$emit('pageLoaded');
                      $scope.pcpDetails.displayErrorMessage = true;
                      return;
                    }
                  }).catch(function(error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.pcpDetails.displayErrorMessage = true;
                    return error;
                  });
              };

              $scope.expandRecommendationList = function() {
                $scope.expandRecommendations = !$scope.expandRecommendations;
              };

              $scope.openInformationModal = function(pcpInformation) {
                $rootScope.headerTerm =
                  pcpInformation.modalHeader;
                $scope.helpInfo = {
                  pcpModalText: pcpInformation.modalText,
                  pcpInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.gotoManageDependentPcp = function() {
                $rootScope.gotoView('/pcp-manage-dependents-pcp');
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the security settings card on the home screen.
 *
 * @namespace Directives
 * @class homeCardSettings
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardSettings', [])
  .directive('homeCardSettings', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-settings.html',
        scope: {
          /**
          * Display information for the security settings
          *
          * @memberof homeCardSettings
          * @member {Object} settings
          */
          settings: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'cordovaService',
          function($scope, $rootScope, cordovaService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            cordovaService.checkDeviceType();
            $scope.iphone = $rootScope.iphone;
            $scope.android = $rootScope.android;

            $scope.authType = $rootScope.touchIdAvailable;

            $scope.showHomeCardSettings = $rootScope.touchIdAvailable && !$rootScope.appSettings.login.useTouchId;

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the id card bottom bar.
 *
 * @namespace Directives
 * @class idCardBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardBottomBar', [])
  .directive('idCardBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-bottom-bar.html',
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          function($scope, $rootScope, $location) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.shareIdCard = function() {
              $rootScope.shareIdCard();
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the idCard Customer service tab on details page.
 *
 * @namespace Directives
 * @class idCardGroup
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardCustomerService', [])
  .directive('idCardCustomerService', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-customer-service.html',
        scope: {
          /**
          * The customer service tab to display.
          *
          * @memberof idCardCustomerService
          * @member {Object} contactDetails
          */
          contactDetails: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          function($scope, $rootScope, $location) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the image types on the id card details page.
 *
 * @namespace Directives
 * @class idCardImageTypes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardImageTypes', [])
  .directive('idCardImageTypes', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-image-types.html',
        scope: {
          /**
          * The id card image types to display.
          *
          * @memberof idCardImageTypes
          * @member {Object} imageTypes
          */
          imageTypes: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.noImages = true;
            if ($scope.imageTypes[0].images.length === 0) {
              $scope.noImages = false;
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the info box on the id card details page.
 *
 * @namespace Directives
 * @class idCardInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardInfo', [])
  .directive('idCardInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-info.html',
        scope: {
          /**
          * The id card information to display.
          *
          * @memberof idCardInfo
          * @member {Object} info
          */
          info: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the details box on the id card details page.
 *
 * @namespace Directives
 * @class idCardMemberDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardMemberDetails', [])
  .directive('idCardMemberDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-member-details.html',
        scope: {
          /**
          * The id card details to display.
          *
          * @memberof idCardMemberDetails
          * @member {Object} details
          */
          memberDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the network details box on the id card details page.
 *
 * @namespace Directives
 * @class idCardNetworkDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardNetworkDetails', [])
  .directive('idCardNetworkDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-network-details.html',
        scope: {
          /**
          * The id card network details to display.
          *
          * @memberof idCardNetworkDetails
          * @member {Object} details
          */
          networkDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.networkResponsibilities = [];
            $scope.noBenefits = true;
            var benefit = $scope.networkDetails[0].benefitOption;
            if (benefit.length === 0) {
              $scope.noBenefits = false;
            }
            for(var i=0; i< Object.keys(benefit).length; i++){
              var benefitItemShortDescriptionUpperCase = ($scope.networkDetails[0].benefitOption[i].benefitItemShortDescription).toUpperCase().replace('-','_').split(' ').join('_');
              $scope.networkResponsibilities.push({
                'benefitItemDescription': $scope.networkDetails[0].benefitOption[i].benefitItemDescription,
                'benefitItemShortDescriptionLocalization' : benefitItemShortDescriptionUpperCase,
                'benefitItemShortDescription': $scope.networkDetails[0].benefitOption[i].benefitItemShortDescription
              });
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a id card details
 *
 * @namespace Directives
 * @class idCardDetails
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardPlanDetails', [])
    .directive('idCardPlanDetails', [
      function () {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/id-card-plan-details.html',
          scope: {
            idCardPolicyDetails: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            function ($scope, $rootScope) {
              $scope.loc = $rootScope.loc;
            }
          ]
        };
      }
    ]);
}());
/**
 * Directive for the id card page.
 *
 * @namespace Directives
 * @class idCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCard', [])
  .directive('idCard', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card.html',
        scope: {
          /**
          * Display information for the id card page.
          *
          * @memberof idCard
          * @member {Object} idCardDetails
          */
          idCardDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'coachmarkService',
          'shareService',
          'helpService',
          function($rootScope, $scope, coachmarkService, shareService, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.itemIndex = 0;
            $scope.images =[];
            $scope.isFlipped = false;
            $scope.mimeType =  $scope.idCardDetails.image[1].mimeType;
            $scope.trackAction = $rootScope.trackAction;

            for(var j=0; j < $scope.idCardDetails.image[0].img.length; j++) {
              for(var i = 0; i < $scope.idCardDetails.image[0].img[j].document.length; i++) {
                 if ($scope.idCardDetails.image[0].img[j].document[i].documentTypeCode === "ID_IMG_F") {
                   $scope.imageFront = $scope.idCardDetails.image[1].mimeType + ',' +$scope.idCardDetails.image[0].img[j].document[i].documentImageBlob;
                 }
                 if ($scope.idCardDetails.image[0].img[j].document[i].documentTypeCode === "ID_IMG_B") {
                   $scope.imageBack = $scope.idCardDetails.image[1].mimeType + ',' +$scope.idCardDetails.image[0].img[j].document[i].documentImageBlob;
                 }
               }
               $scope.images.push({'imageFront':$scope.imageFront, 'imageBack': $scope.imageBack, 'index' : j});
            }


            if ($scope.idCardDetails.image[0].img.length) {
              coachmarkService.showCoachmarks('id-card');
            }

            $scope.buttons = [];

            for(var k=0; k< $scope.idCardDetails.buttons.length; k++){
              $scope.buttons.push(
                {
                'title' : $scope.idCardDetails.buttons[k].title,
                'title1' : $scope.idCardDetails.buttons[k].title1,
                'icon' :  $scope.idCardDetails.buttons[k].icon
              });
            }

            $rootScope.shareIdCard = function() {
              //This is WRONG. Only for poc'ing share
              var shareContent;
              var canvas = document.createElement( "canvas" );
              var ctx = canvas.getContext( "2d" );
              var img = document.createElement( "img" );
              canvas.width = "765.69";
              canvas.height = "482.35";

              if($scope.mimeType === 'data:image/svg+xml;base64') {
                if(!$scope.isFlipped){
                  img.setAttribute( "src", $scope.images[$scope.itemIndex].imageFront );
                }else {
                  img.setAttribute( "src", $scope.images[$scope.itemIndex].imageBack );
                }
                img.onload = function() {
                  ctx.drawImage( img, 0, 0 );
                  shareService.showSharing(shareService.contentType.FILES, canvas.toDataURL( "image/png" ) );
                };
              } else {
                if(!$scope.isFlipped){
                  shareContent = $scope.images[$scope.itemIndex].imageFront;
                }else {
                  shareContent = $scope.images[$scope.itemIndex].imageBack;
                }
                shareService.showSharing(shareService.contentType.FILES, shareContent);
              }
            };

            $scope.imageLength = $scope.images.length - 1;

            /**
            * This method used to if the user has multiple images to go to next image.
            *
            * @memberof idCard
            * @method goNextImage
            */

            $scope.goNextImage = function(index) {
              if(index < 0) {
                index = 0;
              }
              if(index > ($scope.images.length-1)) {
                index = ($scope.images.length-1);
              }

              $scope.itemIndex = index;
              var left = index * -75;
              angular.element('.setup-idcard').animate({'width': 100 + '%'}, 125);
              angular.element('.setup-idcard').animate({ 'margin-left' : left + '%'}, 125);
            };

            /**
            * This method used to display the image by returning style margin-left
            *
            * @memberof idCard
            * @method displayImage
            */

            $scope.displayImage = function(index){
              var leftMargin = 0;
              if (index > 0) {
                leftMargin = index * 75;
              }
              console.log(leftMargin + '%');
              return {
                'margin-left' : leftMargin + '%'
              }
            }

            /**
            * This method used to full screen the image.
            *
            * @memberof idCard
            * @method openFullScreen
            */

            $scope.openFullScreen = function(index){
              if(!$scope.isFlipped){
                helpService.imageFullScreen($scope.images[index].imageFront);
              }else{
                helpService.imageFullScreen($scope.images[index].imageBack);
              }
            };

            /**
            * This method used to flip the image back to front.
            *
            * @memberof idCard
            * @method flipCard
            */

            $scope.flipCard = function(index) {
              if($scope.isFlipped){
                $scope.isFlipped = false;
              }else {
                $scope.isFlipped = true;
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the message list bottom bar.
 *
 * @namespace Directives
 * @class inboxBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxBottomBar', [])
  .directive('inboxBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-bottom-bar.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          'adobeService',
          function($scope, $rootScope, $location, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.returnPath = $location.$$path;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the message compose screen.
 *
 * @namespace Directives
 * @class inboxCompose
 */
(function() {
  'use strict';
    angular.module('blueconnect.mobile.directives.inboxCompose', [])
    .directive('inboxCompose', [
      'messageService',
      function(messageService) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/inbox-compose.html',
          scope: {
            /**
            * Message data preloaded if composing a reply.
            *
            * @memberof inboxCompose
            * @member {Object} message
            */
            message: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            '$location',
            '$window',
            '$timeout',
            'inquiryService',
            'quickAlertService',
            'alertService',
            'adobeService',
            'analyticConstants',
            function($scope, $rootScope, $location, $window, $timeout, inquiryService, quickAlertService, alertService, adobeService, analyticConstants) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;

              /**
              * The available inquiry types.
              *
              * @memberof inboxCompose
              * @member {Array} inquiryTypes
              */
              $scope.inquiryTypes = inquiryService.getInquiryTypes($scope.message.state);

              /**
              * Whether the message is a reply to another message.
              *
              * @memberof inboxCompose
              * @member {Boolean} isReply
              */
              $scope.isReply = typeof $scope.message.caseId !== 'undefined';



              /**
              * ($rootScope) Validates the message form. Called by the basic navbar.
              *
              * @memberof inboxCompose
              * @method onSendValidation
              */
              $rootScope.onSendValidation = function() {
                if (!$scope.messageForm.$valid) {
                  $scope.validateMessageForm();
                } else {
                  $scope.sendMessage();
                }
                $scope.$watch('message', function() {
                  $timeout(function() {
                    $scope.validateMessageForm();
                  }, 200);
                }, true);
              };

              $scope.validateMessageForm = function() {
                /**
                * SHOW/HIDE the "REQUIRED" validation
                */
                angular.element('.ng-valid').parent().children('.gray-bar-label').children('.right-action').css('display', 'none');
                angular.element('.ng-invalid').parent().children('.gray-bar-label').children('.right-action').css('display', 'inline-table');

                angular.element('.ng-valid').parent().parent().children('.gray-bar-label').children('.right-action').css('display', 'none');
                angular.element('.ng-invalid').parent().parent().children('.gray-bar-label').children('.right-action').css('display', 'inline-table');
              };

              /**
              * Delete Message alertService called by the bacisnavbarleftclick
              *
              *@memberof inboxCompose
              *@method deleteMessage
              **/
              $rootScope.deleteMessage = function() {
                alertService.showAlert($rootScope.loc.DELETE_MESSAGE, $rootScope.loc.DELETE_MESSAGE_WARNING, {
                  title: $rootScope.loc.DELETE,
                  color: 'red'
                }, {
                  title: $rootScope.loc.CANCEL
                }).then(function() {
                  adobeService.trackAction("inbox:newMessage:delete", analyticConstants.INBOX_SECTION);
                  $window.history.back();
                }, function() {
                  adobeService.trackAction("inbox:newMessage:cancel", analyticConstants.INBOX_SECTION);
                });
              };

              /**
              * Sends the message with the message service.
              *
              * @memberof inboxCompose
              * @method sendMessage
              */
              $scope.sendMessage = function() {
                adobeService.trackAction("inbox:sendConfirmation", analyticConstants.INBOX_SECTION);
                alertService.showAlert($rootScope.loc.SEND_MESSAGE, $rootScope.loc.SEND_MESSAGE_WARNING, {
                  title: $rootScope.loc.SEND,
                  color: 'green'
                }, {
                  title: $rootScope.loc.CONTINUE_EDITING
                }).then(function() {
                  $rootScope.messageSending = true;
                  $rootScope.$emit('pageLoading');

                  messageService.composeMessage(angular.copy($scope.message)).then(function() {
                    $rootScope.messageSending = false;
                    if ($location.search().option === 'claims') {
                      $location.url('/claims/'+ $location.search().claim +'/' + $location.search().dependentNo + '?messageSent=true');
                    } else {
                      adobeService.trackAction("inbox:sendConfirmation:send", analyticConstants.INBOX_SECTION);
                      $location.url($location.search().returnTo + '?messageSent=true');
                    }

                  }, function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.messageSending = false;

                    quickAlertService.showQuickAlert({
                      message: $rootScope.loc.SEND_ERROR,
                      color: 'red',
                      alertBottom: true
                    });
                    $timeout(function() {
                      angular.element('.quick-alert-modal').hide();
                    }, 2000);
                  });
                }, function(){
                  adobeService.trackAction("inbox:sendConfirmation:continueEditing", analyticConstants.INBOX_SECTION);
                });
              };

              /**
              * Auto-sizes the mesagge body input to fill the remainder of the screen.
              *
              * @memberof inboxCompose
              * @method sizeMessageInput
              */
              $scope.sizeMessageInput = function() {
                var input = angular.element('.message-input textarea ');
                if (!input.position()) {
                  $timeout($scope.sizeMessageInput, 100);
                  return;
                }
                input.height(angular.element(document).height() - angular.element('.message-box').position().top - input.position().top - 12);
              };
              $scope.sizeMessageInput();
              /**
              * Focus at the starting of the message body.
              *
              * @method focusMessageBody
              */
              $scope.focusMessageBody = function(){
                $timeout(function () {
                  var input = angular.element('#message');
                  input[0].focus();
                  input[0].setSelectionRange(0,0);
                }, 100);
              };

              $scope.focusMessageBody();

              /**
              * Switches focus after selecting an inquiry type
              *
              * @memberof inboxCompose
              * @method switchFocus
              */
              $scope.switchFocus = function() {
                document.getElementById('subject').focus();
              };

              /**
               *
               */
              $scope.setComposeClaim = function( claim ) {
                $('#inquiryType').val('string:CLAIMS');
                $('#subject').val($rootScope.loc.COMPOSE_SUBJECT_CLAIMS);
                $('#message').val($rootScope.loc.COMPOSE_CLAIM_NUMBER_CLAIMS + ' ' + claim );
                $('#inquiryType').trigger('input').trigger('change').trigger('keydown');
                $('#subject').trigger('input').trigger('change').trigger('keydown');
                $('#message').trigger('input').trigger('change').trigger('keydown');
              };

              if ( $scope.message.option == 'claims') {
                $timeout(function () {
                  $scope.setComposeClaim( $scope.message.claim );
                });
              }

              $scope.switchFocus();
              adobeService.trackState('inbox:compose', analyticConstants.INBOX_SECTION);
            }
          ]
        };
      }
    ]);
  }());

(function() {
  angular.module('blueconnect.mobile.directives.inboxError', [])
  .directive('inboxError', function() {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: 'partials/inbox-error.html',
      controller: ['$rootScope', '$scope', function($rootScope, $scope) {
        $scope.loc = $rootScope.loc;
      }]
    };
  });
})();
/**
 * Directive for the individual message bottom bar.
 *
 * @namespace Directives
 * @class inboxMessageBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxMessageBottomBar', [])
  .directive('inboxMessageBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-message-bottom-bar.html',
        scope: {
          /**
          * The message content.
          *
          * @memberof inboxMessageBottomBar
          * @member {String} message
          */
          message: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$window',
          '$location',
          '$timeout',
          '$filter',
          'alertService',
          'messageService',
          'quickAlertService',
          'shareService',
          'adobeService',
          'analyticConstants',
          function($scope, $rootScope, $window, $location, $timeout, $filter, alertService, messageService, quickAlertService, shareService, adobeService, analyticConstants) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.returnPath = $location.$$path;

            /**
             * Confirms the deletion of a message and then calls the message service to perform the deletion.
             *
             * @memberof inboxMessageBottomBar
             * @method confirmDeleteMessage
             */
            $scope.confirmDeleteMessage = function() {

              alertService.showAlert($rootScope.loc.DELETE_MESSAGE, $rootScope.loc.DELETE_MESSAGE_WARNING, {title: $rootScope.loc.DELETE, color: 'red'}, {title: $rootScope.loc.CANCEL}).then(function() {
                $rootScope.$emit('pageLoading');
                adobeService.trackAction("inbox:deleteConfirmation", analyticConstants.INBOX_SECTION);
                $scope.hideNav = true;
                messageService.deleteMessage($scope.message.messageId).then(function() {
                  adobeService.trackAction("inbox:deleteConfirmation:success", analyticConstants.INBOX_SECTION);
                  $window.history.back();
                }, function() {
                  $scope.delete = false;
                  $scope.hideNav = false;
                });
              }, function() {
                 adobeService.trackAction("inbox:deleteConfirmation:cancel", analyticConstants.INBOX_SECTION);
              });
            };

            /**
             * Based on the bookmarked flag, message is set to bookmarked(boolean)
             *
             * @memberof inboxMessageBottomBar
             * @method bookmarkMessage
             */
            $scope.bookmarkMessage = function() {

              messageService.bookmarkMessage($scope.message.messageId, !$scope.message.bookmarked).then(function() {
                if ($scope.message.bookmarked) {
                  quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_UNBOOKMARKED, color: 'blue'}, $scope.message.bookmarked);
                  $timeout(function() {
                      angular.element('.quick-alert-modal').hide();
                  }, 1200);
                } else {
                  quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_BOOKMARKED, color: 'blue'}, $scope.message.bookmarked);
                  $timeout(function() {
                      angular.element('.quick-alert-modal').hide();
                  }, 1200);
                }

                $scope.message.bookmarked = !$scope.message.bookmarked;

                $rootScope.$emit('bookMarkAlert');

              }, function() {
                console.log('bookmark failed');
              });
            };

            /**
             * Opens the sharing modal for the message.
             *
             * @memberof inboxMessageBottomBar
             * @method shareMessage
             */
            $scope.shareMessage = function() {
              var shareContent = "From: " + $scope.message.messageInitiatedBy + "\n" +
                                 "Sent: " + $filter('date')($scope.message.createdDate, 'short') + "\n" +
                                 "Subject: " + $scope.message.subject + "\n\n" + String($scope.message.body).replace(/<[^>]+>/gm, '');

              shareService.showSharing(shareService.contentType.TEXT, shareContent);
            };

            /**
             * Selects bookmark title wether boomkark or Unbookmark
             *
             * @memberof inboxMessageBottomBar
             * @method getBookmarkTitle
             */
            $scope.getBookmarkTitle = function() {
              return $scope.message.bookmarked ? $rootScope.loc.UNBOOKMARK : $rootScope.loc.BOOKMARK;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the inbox message list element.
 *
 * @namespace Directives
 * @class inboxMessageList
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxMessageList', [])
  .directive('inboxMessageList', [
    '$rootScope',
    '$timeout',
    'alertService',
    'messageService',
    'quickAlertService',
    function($rootScope, $timeout, alertService, messageService, quickAlertService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-message-list.html',
        scope: {
          /**
          * Display information for the inbox message list.
          *
          * @memberof inboxMessageList
          * @member {Object} messages
          */
          messages: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$route',
          'messageService',
          'adobeService',
          function($scope, $rootScope, $location, $route, messageService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.getMessageSubjectSnippet = messageService.getMessageSubjectSnippet;
            $scope.getMessageBodySnippet = messageService.getMessageBodySnippet;
            $scope.getMessageDisplayDate = messageService.getMessageDisplayDate;

            /**
             * If user wants to return from the message view, but they just replied or composed a messages, we want to replace BACK with this returnToInbox
             *
             * @memberof inboxMessageList
             */
            $rootScope.returnToInbox = $location.url();

            /**
            * Reloads the current page
            *
            * @memberof inboxMessageList
            * @method reloadPage
            */
            $scope.reloadPage = function(){
              $route.reload();
              // angular.element('#app-container').removeClass('no-scroll');
            };

            /**
            * If user doesn't have the messages based on the $location.path it will display the messages.
            */
            if($scope.messages.length === 0){
              if($location.path() ==='/inbox'){
                $scope.noMessages = $rootScope.loc.NO_INBOX_MESSAGES;
              } else if($location.path() ==='/inbox/sent') {
                $scope.noMessages = $rootScope.loc.NO_SENT_MESSAGES;
              } else if($location.path() ==='/inbox/bookmarked') {
                $scope.noMessages = $rootScope.loc.NO_MESSAGES_BOOKMARKED;
              } else if($location.path() ==='/inbox/search' && $location.search().q) {
                $scope.noMessages = $rootScope.loc.SECURE_INBOX_NO_SEARCH_RESULTS;
              } else if($location.path() ==='/inbox/search' && !$location.search().q) {
                $scope.noMessages = $rootScope.loc.SECURE_INBOX_NO_SEARCH;
              }
           }


            /**
             * Toggles the quick-alert-modal for sent message if messageSent is true
             *
             * @memberof inboxMessageList
             */
            if($location.search().messageSent) {
              $rootScope.sentMessage = true;
              quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
              $timeout(function() {
                  angular.element('.quick-alert-modal').hide();
              }, 2000);
              var search = angular.copy($location.search());
              delete search.messageSent;
              $location.search(search);
            }

            /**
             * Opens the individual message view if no message is swiped.
             *
             * @memberof inboxMessageList
             * @method openMessage
             * @param  {Object} message The message to open.
             */
            $scope.openMessage = function(message) {
              for(var i = 0; i < $scope.messages.length; i++) {
                if($scope.messages[i].swiped) {
                  $scope.messages[i].swiped = false;
                  return;
                }
              }
              if (message.unread) {
                $rootScope.unreadMessages--;
                $rootScope.refreshNavbar();
              }

              $rootScope.gotoView('/inbox/messages/' + message.messageId);
            };

            /**
             * Opens the message options when swiped left.
             *
             * @memberof inboxMessageList
             * @method swipeMessage
             * @param  {Object} message The message swiped.
             */
            $scope.swipeMessage = function(message) {
              for(var i = 0; i < $scope.messages.length; i++) {
                if($scope.messages[i].swiped) {
                  $scope.messages[i].swiped = false;
                }
              }
              message.swiped = true;
            };

            /**
             * Closes the message options when swiped right.
             *
             * @memberof inboxMessageList
             * @method unswipeMessage
             * @param  {Object} message The message swiped.
             */
            $scope.unswipeMessage = function(message) {
              if(message.swiped) {
                message.swiped = false;
              }
            };

            /**
             * Toggles whether the message is read with the message service.
             *
             * @memberof inboxMessageList
             * @method toggleRead
             * @param  {Object} message The message to toggle.
             */
            $scope.toggleRead = function(message) {
              $rootScope.$emit('pageLoading');
              $rootScope.unreadMessages = message.unread ? $rootScope.unreadMessages - 1 : $rootScope.unreadMessages + 1;

              messageService.updateMessage(message.messageId, message.unread ? 'READ' : 'UNREAD').then(function() {
                message.unread = !message.unread;
                $scope.unswipeMessage(message);
                $rootScope.$emit('pageLoaded');
                $rootScope.refreshNavbar();
              }, function(error, status) {
                $rootScope.$emit('pageLoaded');
              });
            };

            /**
             * Toggles whether the message is bookmarked with the message service.
             *
             * @memberof inboxMessageList
             * @method toggleBookmarked
             * @param  {Object} message The message to toggle.
             */
            $scope.toggleBookmarked = function(message) {
              $rootScope.$emit('pageLoading');

              messageService.bookmarkMessage(message.messageId, !message.bookmarked).then(function() {
                if($location.url().indexOf('/bookmarked') > -1) {
                  for(var i = 0; i < $scope.messages.length; i++) {
                    if(message.messageId === $scope.messages[i].messageId) {
                      $scope.messages.splice(i, 1);
                      $scope.reloadPage();
                      break;
                    }
                  }
                }
                else {
                  message.bookmarked = !message.bookmarked;
                  $scope.unswipeMessage(message);
                }

                $rootScope.$emit('pageLoaded');
              }, function(error, status) {
                $rootScope.$emit('pageLoaded');
              });
            };

            /**
             * Confirms deletion of a message and performs the action with the message service.
             *
             * @memberof inboxMessageList
             * @method confirmDeletion
             * @param  {Object} message The message to delete.
             */
            $scope.confirmDeletion = function(message) {
              alertService.showAlert($rootScope.loc.DELETE_MESSAGE, $rootScope.loc.DELETE_MESSAGE_WARNING, {title: $rootScope.loc.DELETE, color: 'red'}, {title: $rootScope.loc.CANCEL}).then(function() {
                $rootScope.$emit('pageLoading');
                angular.element('.inbox-message-list').addClass('no-scroll');
                messageService.deleteMessage(message.messageId).then(function() {
                  for(var i = 0; i < $scope.messages.length; i++) {
                    if(message.messageId === $scope.messages[i].messageId) {
                      $scope.messages.splice(i, 1);
                      $scope.reloadPage();
                      break;
                    }
                  }
                  $rootScope.$emit('pageLoaded');
                }, function(error, status) {
                  $rootScope.$emit('pageLoaded');
                });
              });
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a single inbox message.
 *
 * @namespace Directives
 * @class inboxMessage
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxMessage', [])
  .directive('inboxMessage', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-message.html',
        scope: {
          /**
          * Display information for the inbox message.
          *
          * @memberof inboxMessage
          * @member {Object} message
          */
          message: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          'messageService',
          'quickAlertService',
          'adobeService',
          function($scope, $rootScope, $location, $timeout, messageService, quickAlertService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.getMessageBodyHtml = messageService.getMessageBodyHtml;
            $scope.getMessageDisplayDate = messageService.getMessageDisplayDate;

            /**
             * Toggles the quick-alert-modal for sent message if messageSent is true
             *
             * @memberof inboxMessage
             */
             if($location.search().messageSent) {
               $rootScope.sentMessage = true;
               quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
               $timeout(function() {
                   angular.element('.quick-alert-modal').hide();
               }, 2000);
               var search = angular.copy($location.search());
               delete search.messageSent;
               $location.search(search);
             }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the inbox message search screen.
 *
 * @namespace Directives
 * @class inboxMessageSearch
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxSearch', [])
  .directive('inboxSearch', [
    function() {

      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-search.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.invoicePayments', [])
    .directive('invoicePayments', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/invoice-payments.html',
        scope: {
          payment: '<?'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }]
      };
    });
})();
/**
 * Directive for a list messaging window.
 *
 * @namespace Directives
 * @class listMessaging
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.listMessaging', [])
  .directive('listMessaging', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/list-messaging.html',
        scope: {
          /**
          * The title of the list messaging window
          *
          * @memberof listMessaging
          * @member {String} title
          * @member {Boolean} pageName
          */
          title: '=',
          pageName: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.isComponent = $scope.pageName ? true : false;
          }
        ]
      };
    }
  ]);
}());

/**
 * @description Directive for Salesforce-drive live Agent chat.
 * @namespace Directives
 * @class liveChat
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.liveChat', [])
  .directive('liveChat', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/live-chat.html',
        controller: [
          '$scope',
          '$window',
          'config',
          'languageService',
          'livechatService',
          function($scope, $window, config, languageService, livechatService) {
            $scope.liveChatAvailable = false;
            $scope.agentAvailable = false;
            $scope.memberInitializedLiveChat = false;
            $scope.language = languageService.getDefaultLanguage();

            if (!$window.liveagent) {
              $scope.liveChatAvailable = false;
            }

            var liveagent = $window.liveagent;

            if (!config.liveagent) {
              $scope.liveChatAvailable = false;
            }



            $scope.chatButtons = livechatService.getChatButtons();

            $scope.liveChatAvailable = true;
            $scope.initializeChat = init;

            $scope.memberHasLiveChat = livechatService.memberHasLiveChat;

            function init () {
              $scope.memberInitializedLiveChat = true;
              livechatService.init();
            };

            $scope.startChat = function(buttonToken) {
              $window.liveagent.startChat(buttonToken, config.liveagent);
            };
          }
        ],
        controllerAs: 'liveChatCtrl'
      };
    }
  ]);
}());

/**
 * Directive for the login page bottom bar.
 *
 * @namespace Directives
 * @class loginBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.loginBottomBar', [])
  .directive('loginBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/login-bottom-bar.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          'languageService',
          function($scope, $rootScope, languageService) {
            $scope.gotoView = $rootScope.gotoView;
            if (!$rootScope.language) {
              $rootScope.setLanguage(languageService.getDefaultLanguage());
            }

            /**
             * @description Toggles the language between English and Spanish.
             * @memberof loginBottomBar
             * @method toggleLanguage
             */
            $scope.toggleLanguage = function() {
              $rootScope
                .setLanguage($rootScope.language === 'en' ? 'es' : 'en')
                .then(function(lang) {
                  $scope.loc = $rootScope.getInternalLocale(lang);
              });
            };

          }
        ]
      };
    }
  ]);
}());

(function () {
    'use strict';
    angular.module('blueconnect.mobile.directives.lookupCitiesInput', []).directive('lookupCitiesInput', function () {
        return {
            scope: {
                city: '='
            },
            controller: ['TransparencyFactory', '$http', '$rootScope', '$scope', 'config', '$timeout', function (TransparencyFactory, $http, $rootScope, $scope, config, $timeout) {
                var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;
                $scope.data = {
                    cities: null,
                    displayCityName: $scope.city ? $scope.city.cityFullName : ''
                };
                $scope.$watch('city', function() {
                    $rootScope.useCurrentLocation = ($scope.city && $scope.city.cityFullName === 'Current Location');
                    if ($scope.city) {
                        $scope.data.displayCityName = $scope.city.cityFullName;
                    }
                });

                $scope.searchCities = function () {
                    $scope.city = {cityFullName: $scope.data.displayCityName};
                    $('#_cities').removeClass('hidden');
                    if ($scope.data.displayCityName) {
                        $timeout(function () {
                            $scope.getCities($scope.data.displayCityName);
                        });
                    } else {
                        $scope.$emit('validate input');
                    }
                };

                $scope.getCities = function (citySearchTerm) {

                    const isNorthCarolinaPlan = TransparencyFactory.getSelectedPlan().isNorthCarolinaPlan;
                    var requestUrl = url + '/cities?radius=' + TransparencyFactory.getDistance() + '&name=' + citySearchTerm + (isNaN(citySearchTerm) ? isNorthCarolinaPlan ? '+nc' : '' : '');

                    $http.get(requestUrl)
                        .then(function (result) {
                            if (result.data && result.data.length > 0) {
                                $scope.data.cities = result.data;
                            } else {
                                $scope.data.cities = [];
                                $scope.data.cities.push({
                                    errorMessage: $rootScope.loc.ERROR_LOCATION_NOT_FOUND
                                });
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                };

                $scope.setCity = function (selectedCity) {
                    $scope.city = selectedCity;
                    $scope.city.cityFullName = selectedCity.city + ", " + selectedCity.state_code + " - " + selectedCity.zip;
                    $scope.data.displayCityName = $scope.city.cityFullName;
                    $scope.$emit('validate input');
                    $scope.$emit('validate city input');
                    $scope.data.cities = [];
                };

            }],
            templateUrl: 'partials/lookup-cities-input.html'
        };
    });
})();
/**
 * Directive for a low-cost-dental-only-info.
 *
 * @namespace Directives
 * @class lowCostDentalOnlyInfo
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.lowCostDentalOnlyInfo', [])
    .directive('lowCostDentalOnlyInfo', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/low-cost-dental-only-info.html',
          scope: {
            /**
            * The title of the low-cost-dental-only-info.
            *
            * @memberof lowCostDentalOnlyInfo
            * @member {String} title
            */
            data: '=',
            geoLocationDetails: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'TransparencyFactory',
            '$timeout',
            'geoLocationService',
            function($scope, $rootScope, TransparencyFactory, $timeout, geoLocationService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;


              $scope.gotoNavigatedPage = function(url, searchTerm) {
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm);
               } else {
                 TransparencyFactory.setZipRangeNC($scope.geoLocationDetails.distanceDetails.NCZipMin,$scope.geoLocationDetails.distanceDetails.NCZipMax);
                 if (navigator.geolocation) {
                   $rootScope.$emit('pageLoading');
                   $timeout(function(){
                     $rootScope.enableLocation = true;
                   }, 0)
                     .then(function(val) {
                       return geoLocationService.getLocation();
                     })
                     .then(function(response) {
                       $rootScope.$emit('pageLoaded');
                       if (response.data && response.data.zip) {
                         $rootScope.city = response.data;
                         $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                         $rootScope.currentCity = $rootScope.city;
                         $rootScope.vitalsGeoCoords = response.data.geo;
                         $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                         TransparencyFactory.setDistance($rootScope.distance);
                         TransparencyFactory.setCity($rootScope.city);
                         TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                         TransparencyFactory.setGeoLocationStatus(true);
                         TransparencyFactory.setLocationBlocked(false);
                         $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                         if ($rootScope.noMatchPlanFound){
                          $rootScope.gotoView('/find-care');
                        } else {
                          $scope.gotoBrowseLevelPage(url, searchTerm);
                        } 
                       } else if (response === 'position not found') {
                         TransparencyFactory.setLocationBlocked(true);
                         TransparencyFactory.setGeoLocationStatus(false);
                         TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                         $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                         $scope.openModal();
                       } else {
                         TransparencyFactory.setLocationBlocked(false);
                         TransparencyFactory.setGeoLocationStatus(false); 
                         $rootScope.$emit('pageLoaded');
                         $scope.modalObj.values.locationNotFound = true;
                         $scope.openModal();
                       }
                     })
                     .catch(function(error) {
                       TransparencyFactory.setLocationBlocked(false);
                       $rootScope.$emit('pageLoaded');
                       $scope.modalObj.values.locationNotFound = true;
                       $scope.openModal();
                     });
                 } else {
                   $rootScope.$emit('pageLoaded');
                   TransparencyFactory.setLocationBlocked(true);
                   TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                   $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                   $scope.openModal();
                 }
               }
              }
  
              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm) {
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                TransparencyFactory.setSearchTerm(searchTerm);
                $rootScope.gotoView(url + '?searchTerm=' + searchTerm + '&planName=' + $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
              };// end of gotoBrowseLevelPage function
  
  
             $scope.confirmFunc = function(data) {
               $rootScope.city = data.city;
               $rootScope.distance = data.distance;
               TransparencyFactory.setDistance($rootScope.distance);
               TransparencyFactory.setCity($rootScope.city);
               TransparencyFactory.setGeoLocationStatus(false);
               if ($rootScope.noMatchPlanFound){
                $rootScope.gotoView('/find-care');
              } else {
                $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
              }
             };
  
             $scope.modalObj = {
               locationMsg: $scope.geoLocationDetails.locationMsg,
               cancelButton: {
                 title: $scope.loc.CANCEL
               },
               confirmButton: {
                 title: $scope.loc.CONTINUE
               },
               values: {
                 distanceDetails: $scope.geoLocationDetails.distanceDetails,
                 distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                 city: TransparencyFactory.getCity()
               }
             };
            }
          ]
        };
      }
    ]);
  }());
  
/**
 * Directive for preventing user input in a field once maxlength has been reached
 *
 * @namespace Directives
 * @class maxLengthEnforce
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.maxLengthEnforce', [])
  .directive('maxLengthEnforce', [
    function() {
      return {
        restrict: 'A',
        link: function($scope, $elem, $attrs) {
          $elem.on('keydown', function(ev) {
            var value = $elem.find('input').val();
            if (
              (ev.key !== 'Backspace' && ev.key !== 'Delete') &&
              value.length === $attrs.maxLength - 0
            ) {
              ev.preventDefault();
            }
          });
        }
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareDrugBenefitsCoverageGap', [])
  .directive('medicareDrugBenefitsCoverageGap', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-drug-benefits-coverage-gap.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicareDrugBenefits
          * @member {Object} medicareDrugBenefitsDetails
          */
          medicareDrugBenefitsCoverageGapDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareDrugBenefitsInitialCoverage', [])
  .directive('medicareDrugBenefitsInitialCoverage', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-drug-benefits-initial-coverage.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicareDrugBenefits
          * @member {Object} medicareDrugBenefitsDetails
          */
          medicareDrugBenefitsInitialCoverageDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareDrugBenefits', [])
  .directive('medicareDrugBenefits', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-drug-benefits.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicareDrugBenefits
          * @member {Object} medicareDrugBenefitsDetails
          */
          medicareDrugBenefitsDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre footnotes page.
 *
 * @namespace Directives
 * @class medicare-footnotes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareFootnotes', [])
  .directive('medicareFootnotes', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-footnotes.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareFootnotesDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.loc = $rootScope.loc;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre footnotes page.
 *
 * @namespace Directives
 * @class medicare-footnotes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareGroupInfo', [])
  .directive('medicareGroupInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-group-info.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareGroupInfoDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre footnotes page.
 *
 * @namespace Directives
 * @class medicare-footnotes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareMoreInformationPdf', [])
  .directive('medicareMoreInformationPdf', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-more-information-pdf.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareMoreInformationPdfDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.loc = $rootScope.loc;

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicarePlanBenefits', [])
  .directive('medicarePlanBenefits', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-plan-benefits.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicarePlanBenefitsDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if ($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre supp-plan page.
 *
 * @namespace Directives
 * @class medicare-supp-plan
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareSuppPlan', [])
  .directive('medicareSuppPlan', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-supp-plan.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareSuppPlanDetails: '=',
          policy: '=',
          policyIndex: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.loc = $rootScope.loc;

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the member savings total on the claims page.
 *
 * @namespace Directives
 * @class memberSavingsFooter
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.memberSavingsFooter', [])
  .directive('memberSavingsFooter', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/member-savings-footer.html',
        scope: {
          /**
          * The member savings total.
          *
          * @memberof memberSavingsFooter
          * @member {Object} memberSavings
          */
          memberSavings: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            /**
             * Returns the member savings amount as currency.
             *
             * @memberof memberSavingsFooter
             * @method getSavingsDollarAmount
             * return {String} The member savings as currency.
             */
            $scope.getSavingsDollarAmount = function() {
              return '$' + $scope.memberSavings.toFixed(2);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the navbar loading spinner.
 *
 * @namespace Directives
 * @class navbarLoading
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.navbarLoading', [])
  .directive('navbarLoading', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/navbar-loading.html',
        scope: false
      };
    }
  ]);
}());

/**
 * Directive for the main navbar.
 *
 * @namespace Directives
 * @class navbar
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.navbar', [])
    .directive('navbar', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/navbar.html',
          scope: {
            /**
             * Information for drawing the navbar.
             *
             * @memberof navbar
             * @member {Object} navbarDetails
             */
            navbarDetails: '=',
            urgentCareDetails: '=',
            geoLocationDetails: '=',
          },
          controller: [
            '$location',
            '$scope',
            '$rootScope',
            '$sce',
            '$timeout',
            'livechatService',
            'messageService',
            'alertService',
            'adobeService',
            'coachmarkService',
            'PaymentFlowFactory',
            'TransparencyFactory',
            'geoLocationService',
            'config',
            function(
              $location,
              $scope,
              $rootScope,
              $sce,
              $timeout,
              livechatService,
              messageService,
              alertService,
              adobeService,
              coachmarkService,
              PaymentFlowFactory,
              TransparencyFactory,
              geoLocationService,
              config
            ) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.urltoNavigate = null;
              $scope.searchTermPassed = null;
              $scope.livechatIsAvailable = false;
              $scope.loc = $rootScope.loc;
              $scope.memberInitializedLiveChat = false;
              $scope.chatButtons = livechatService.getChatButtons();

              $scope.startChat = function (buttonToken) {
                livechatService.openChat(buttonToken);
              };
              $scope.liveChatAlert = function () {
                livechatService.alert();
              }; 

              /**
               * Returns whether or not to hide the right icon on the navigation.
               *
               * @memberof navbar
               * @method rightNavIconHidden
               * @return {Boolean} Whether or not the icon should be hidden.
               */
              $scope.rightNavIconHidden = function rightNavIconHidden() {
                return $rootScope.hideRightNavIcon;
              };

              /**
               * Returns whether the left nav button matches the provided type.
               *
               * @memberof navbar
               * @method leftNavButtonIs
               * @param  {String}  The button type to check for.
               * @return {Boolean} The left nav button matches the type.
               */
              $scope.leftNavButtonIs = function(type) {
                return $rootScope.leftNavButton === type;
              };

              /**
               * Returns whether the current view is the home view.
               *
               * @memberof navbar
               * @method viewIsHome
               * @return {Boolean} Whether the view is '/' or '/home'.
               */
              $scope.viewIsHome = function() {
                return $rootScope.getViewUrl() === '/' || $rootScope.getViewUrl() === '/home';
              };

              /**
               * Toggles the menu drawer.
               *
               * @memberof navbar
               * @method toggleMenuOpen
               */
              $scope.toggleMenuOpen = function() {
                if ($rootScope.liveChatIntialized && $rootScope.selectedPolicy.active && !$rootScope.selectedPolicy.isVision && !$rootScope.selectedPolicy.isDental) {
                  $scope.chatAvailableBtns = document.getElementById("navbar-live-chat-available");
                  $scope.chatNotAvailableBtns = document.getElementById("navbar-live-chat-not-available");
                  if ($rootScope.livechat && $scope.chatAvailableBtns && $scope.chatNotAvailableBtns) {
                    if (!$rootScope.livechat.value ){
                      $scope.chatAvailableBtns.style.display='none';
                      $scope.chatNotAvailableBtns.style.display = '';
                    } else {
                      $scope.chatNotAvailableBtns.style.display = 'none';
                      $scope.chatAvailableBtns.style.display='';
                    }
                  }
                }


                $scope.trackButtonAction('homeMenu:' + ($scope.menuOpen ? 'close' : 'open'));

                $rootScope.closePolicySelect();
                $scope.menuOpen = !$scope.menuOpen;
                $rootScope.blurContent = $scope.menuOpen;
                if ($scope.menuOpen) {
                  coachmarkService.showCoachmarks('menu');
                }
              };
              $rootScope.toggleMenuOpen = $scope.toggleMenuOpen;

              $scope.menuIsOpen = function() {
                return $scope.menuOpen;
              };
              $rootScope.menuIsOpen = $scope.menuIsOpen;

              $scope.trackButtonAction = function(action) {
                var section = $location.path().split('/')[1];

                section = section[0].toUpperCase() + section.slice(1);
                adobeService.trackAction(action, section);
              };

              /**
               * Returns the current page title as trusted HTML.
               *
               * @memberof navbar
               * @method getPageTitle
               * @return {Object} The trusted HTML object.
               */
              $scope.getPageTitle = function() {
                return $sce.trustAsHtml($rootScope.pageTitle);
              };

              /**
               * Retrieves the unread inbox messge count on a 120 second interval.
               *
               * @memberof navbar
               * @method getUnreadMessageCount
               */
              $scope.getUnreadMessageCount = function() {
                messageService.getCounts().then(function(counts) {
                  for (var i = 0; i < $scope.navbarDetails.menuItems.length; i++) {
                    if ($scope.navbarDetails.menuItems[i].link === '/inbox') {
                      $scope.navbarDetails.menuItems[i].badge = counts.unreadMessages;
                      $timeout($scope.getUnreadMessageCount, 120 * 1000);
                      break;
                    }
                  }
                });
              };

              /**
               * Takes a member to a view.
               *
               * @memberof navbar
               * @method gotoView
               */
              $scope.gotoView = function(view, i) {
                if (view === 'menu'){
                  view = $scope.navbarDetails.menuItems[i].link;
                }
                if (view === '/help') {
                  $scope.trackButtonAction('help');
                }

                if (view === '/logout') {
                  return alertService
                    .showAlert(
                      $rootScope.loc.LOG_OUT_CONFIRM,
                      null,
                      { title: $rootScope.loc.LOG_OUT, color: 'red' },
                      { title: $rootScope.loc.CANCEL }
                    )
                    .then(function() {
                      $rootScope.logOut();
                    });
                }

                if (/payment/.test($location.url())) {
                  PaymentFlowFactory.reset();
                }

                if (view === '/chatnow') {
                  var chatId = $scope.navbarDetails.menuItems[i].index;
                  $scope.startChat($scope.chatButtons[chatId].token);                                   
                } else if (view === '/chatalert') {
                  $scope.liveChatAlert();
                } else {
                  $rootScope.gotoView(view);
                }
              };

              $scope.gotoNavigatedPage = function(url, searchTerm, isExternalLink) {
                // External link?
                if (isExternalLink) {
                  $scope.gotoExternalLink(url);
                } else {
                  $scope.gotoInternalPage(url, searchTerm);
                }
              };

              $scope.gotoExternalLink = function(url) {
                return $rootScope.openInBrowser(url, '_blank', {});
              };

              $scope.gotoInternalPage = function(url, searchTerm) {

                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  return;
                }
                if ($rootScope.vitalsError) {
                  $scope.openAlertModal();
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm);
                } else {
                  TransparencyFactory.setZipRangeNC(
                    $scope.geoLocationDetails.distanceDetails.NCZipMin,
                    $scope.geoLocationDetails.distanceDetails.NCZipMax
                  );
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                          if ($rootScope.noMatchPlanFound) {
                            $rootScope.gotoView('/find-care');
                          } else {
                            $scope.gotoBrowseLevelPage(url, searchTerm);
                          }
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck =
                          $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };

              $scope.alertModalObj = {
                title: $scope.navbarDetails.alertModal && $scope.navbarDetails.alertModal.title ? $scope.navbarDetails.alertModal.title : '',
                message: $scope.navbarDetails.alertModal && $scope.navbarDetails.alertModal.message ? $scope.navbarDetails.alertModal.message : '',
                confirmBtn: $scope.navbarDetails.alertModal && $scope.navbarDetails.alertModal.confirmBtn ? $scope.navbarDetails.alertModal.confirmBtn : '',
              };

              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm) {
                $rootScope.openMapView = false;
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                if ($scope.navbarDetails.selectedPolicy.active) {
                  if (searchTerm === $scope.loc.URGENT_CARE_HOME) {
                    // if the selection in the browse level one have id go to results page
                    TransparencyFactory.setResultsTerm(searchTerm);
                    $rootScope.gotoView(
                      '/find-doctor-search-results?id=' +
                        $scope.urgentCareDetails[0].id +
                        '&network_id=' +
                        $rootScope.selectedPlan.id +
                        '&distance=' +
                        TransparencyFactory.getDistance() +
                        '&searchTerm=' +
                        searchTerm
                    );
                  } else {
                    TransparencyFactory.setSearchTerm(searchTerm);
                    $rootScope.gotoView(
                      url +
                        '?searchTerm=' +
                        searchTerm +
                        '&planName=' +
                        $rootScope.selectedPlan.lobDesc +
                        '&zipCode=' +
                        TransparencyFactory.getCity().zip +
                        '&distance=' +
                        TransparencyFactory.getDistance() +
                        '&planId=' +
                        $rootScope.selectedPlan.id
                    );
                  }
                } else {
                  //if the policy is not active redirect to search landing page
                  $rootScope.gotoView('/fad-auth/find-doctor');
                }
              }; // end of gotoBrowseLevelPage function

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound) {
                  $rootScope.gotoView('/find-care');
                } else {
                  $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
                }
              };

              $scope.modalObj = {
                locationMsg: $scope.geoLocationDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL,
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE,
                },
                values: {
                  distanceDetails: $scope.geoLocationDetails.distanceDetails,
                  distance: TransparencyFactory.getDistance()
                    ? TransparencyFactory.getDistance().toString()
                    : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity(),
                },
              };

              $scope.returnFADLinks = function() {
                if (!$scope.navbarDetails.selectedPolicy.active) {
                  $scope.navbarDetails.findCareItems.forEach(function(element) {
                    if (!element.externalLink) {
                      element.link = '/fad-auth/find-doctor';
                    }
                  });
                }
                return $scope.navbarDetails.findCareItems;
              };

              // If the inbox menu item is present, start the unread count update
              for (var i = 0; i < $scope.navbarDetails.menuItems.length; i++) {
                if ($scope.navbarDetails.menuItems[i].link === '/inbox') {
                  $timeout($scope.getUnreadMessageCount, 120 * 1000);
                }
              }
            },
          ],
        };
      },
    ])
    .directive('findDoctorNavbarListItem', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-list-item.html',
          scope: {
            name: '@',
            title: '@',
            icon: '@',
            description: '@',
            externalLink: '@?',
            link: '@',
            toggleMenuOpen: '<',
            gotoNavigatedPage: '<',
          },
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.gotoView = $rootScope.gotoView;

              /**
               * Pass through method to external links for drug benefits
               *
               * @memberof homeCardBenefits
               * @method gotoDrugBenefits
               */
              $scope.gotoSSO = function(ssoLink) {
                return $rootScope.openInSecureBrowser(ssoLink);
              };

              $scope.checkForSso = function(link, description, isExternalLink) {
                $rootScope.healthNavTrackActions(
                  0,
                  { title: 'guided search: ' + description, searchTerm: description },
                  'Menu'
                );
                // Check sso.
                if (link.startsWith('sso')) {
                  $scope.gotoSSO(link);
                } else {
                  $scope.gotoNavigatedPage(link, description, isExternalLink);
                }
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * @description
 * Directive for the paid component showing a Member is fully paid.
 *
 * @example
 * <paid-component></paid-component>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.paidComponent', [])
    .directive('paidComponent', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          scope: false,
          templateUrl: 'partials/paid-component.html'
        };
      }
    ]);
})();
/**
 * Directive for the payment flow autopay pending confirmation.
 *
 * @namespace Directives
 * @class paymentFlowAutoPayPending
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowAutoPayPending', [])
      .directive('paymentFlowAutoPayPending', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-autopay-pending.html',
            scope: {
              billingInfo: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowAutopayPromo', [])
    .directive('paymentFlowAutopayPromo', function() {
      return {
        restrict: 'E',
        replace: false,
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.paymentFrequencySelected = PaymentFlowFactory.getPaymentFrequency();
          $scope.hideAutopayPromo = /auto/i.test($scope.paymentFrequencySelected);
          $scope.gotoView = function(url) {
            PaymentFlowFactory.setPaymentFlow('autopay').setPaymentFrequency('autopay');
            return $rootScope.gotoView(url);
          }
        }],
        templateUrl: 'partials/payment-flow-autopay-promo.html'
      }
    });
})();
/**
 * Directive for the payment flow autopay setup confirmation.
 *
 * @namespace Directives
 * @class paymentFlowAutoPaySetup
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowAutoPaySetup', [])
      .directive('paymentFlowAutoPaySetup', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-autopay-setup.html',
            scope: {
              billingInfo: '=',
              userSelectedAutoPay: '=?',
              flowIsAutopay: '=?'
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();

                if ($scope.flowIsAutopay){
                  $scope.showAutoPay = true;
                }else {
                  //if the user is in autopay they come to the screen with only the autopay option showing and autopay automatically selected
                  $scope.showAutoPay = (
                      (
                          // Displays when account balance > 0 and user is not outside of reinstatement period.
                          $scope.billingInfo.isPaymentProcessing ?
                              $scope.billingInfo.currentInvoice.remainingBalance > 0:
                              $scope.billingInfo.currentInvoice.totalDueAmount > 0
                      )
                      // doesn't show when user is in reinstatement, at all
                      // doesn't show when user is a medicare member
                      && !$scope.billingInfo.memberInReinstatement && $scope.billingInfo.policyMembership.enrollmentSourceSystemCode.toLowerCase() !== 'amisys'
                  );

                }
              }
            ]
          };
        }
      ]);
}());

/**
 * Directive for the payment flow autopay success confirmation.
 *
 * @namespace Directives
 * @class paymentFlowAutoPaySuccess
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowAutoPaySuccess', [])
      .directive('paymentFlowAutoPaySuccess', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-autopay-success.html',
            scope: {
              billingInfo: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowBankDetails', [])
    .directive('paymentFlowBankDetails', function() {
      return {
        templateUrl: 'partials/payment-flow-bank-details.html',
        controllerAs: 'bankDetailsCtrl',
        scope: {
          billingInfo: '=',
          userData: '='
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          if(!$scope.userData.accountHolderName &&
            $scope.billingInfo &&
            $scope.billingInfo.userIdentity) {
            $scope.userData.accountHolderName = normalizedName($scope.billingInfo.userIdentity.givenName) + ' ' + normalizedName($scope.billingInfo.userIdentity.familyName);
          }
          $scope.namePattern = /[a-zA-z0-9]/;
          $scope.routingNumberPattern = /^[0-9]{9}$/;
          $scope.accountNumberPattern = /^[0-9]{8,17}$/;

          /**
           * Takes a string and makes all except the first letter lower case
           * @param {string} name
           * @return {string}
           */
          function normalizedName(name) {
            if(!name) {
              return;
            }
            return name.replace(/\B[A-Z]+/, function(ending) { return ending.toLowerCase() })
          }
        }]
      };
    });
})();
/**
 * Directive for the payment flow billing method.
 *
 * @namespace Directives
 * @class paymentFlowBillingMethod
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowBillingMethod', [])
    .directive('addressValidation', [
      'config',
      '$http',
      '$q',
      function(config, $http, $q) {
        return {
          restrict: 'A',
          require: '^form',
          link: function($scope, $elem, $attrs, $ctrl) {
            var paymentInputCtrl = $ctrl[$attrs.formLabel];
            // set lastAddress to null to track once directive is rendered
            var lastAddress = null;

            $scope.$parent.$watch('userData.preferences.mailingAddress', function() {
              // re-validate this field if the mailing address changes
              paymentInputCtrl.$validate();
            }, true);
            paymentInputCtrl.$asyncValidators.cityStateZipMatch = function(oldValue, newValue) {
              // if the value isn't changing, don't launch the async function
              // we do check if the value is null for the first time the address is rendered
              // in this way, we always check the address at least once if it exists already
              if (angular.equals(lastAddress, $scope.$parent.userData.preferences.mailingAddress) && lastAddress !== null) {
                return $q.resolve();
              }

              // if the value is different than what we last checked, let's validate
              return $q(function(resolve, reject) {
                lastAddress = angular.copy($scope.$parent.userData.preferences.mailingAddress);
                paymentInputCtrl.$setDirty();
                $http.post(
                  config.apiUrl + '/address',
                  {
                    postalCode: paymentInputCtrl.$viewValue,
                    stateCode: $scope.$parent.userData.preferences.mailingAddress.stateCode,
                    cityName: $scope.$parent.userData.preferences.mailingAddress.cityName,
                  }
                )
                .then(function(response) {
                  if (response.data.addressError === true) {
                    reject();
                    // timing issue in AngularJS is causing us to have to set this
                    // programmatically instead of it being handled by $asyncValidators
                    if (paymentInputCtrl.$valid) {
                      paymentInputCtrl.$setValidity('cityStateZipMatch', false);
                    }
                  } else {
                    return resolve();
                  }

                })
                .catch(function(error) {
                  reject();
                });
              });
            }
          }
        }
      }
    ])
    .directive('paymentFlowBillingMethod', [
      function() {
        return {
          scope: {
            /**
             * @param {Object} userData
             * @param {Object} userData.preferences
             */
            balanceInfo: '=',
            userData: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-billing-method.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            $scope.loc = $rootScope.loc;
            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            // $scope.userData = PaymentFlowFactory.getUserSetData();
            $scope.paymentFlow = PaymentFlowFactory.getPaymentFlow();

            var billingMethodSelected = PaymentFlowFactory.getBillingMethod();
            if (billingMethodSelected) {
              $scope.billingMethodSelected = billingMethodSelected;
            }
            if($scope.paymentFlow === 'otp') {
              $scope.billingMethodSelected = 'email';
            }

            if(
              (!$scope.userData.preferences ||
              !$scope.userData.preferences.emailAddress) &&
              $scope.balanceInfo.preferences &&
              $scope.balanceInfo.preferences.emailAddress
            ) {
              $scope.userData.preferences.emailAddress = $scope.balanceInfo.preferences.emailAddress;
            }

            if (
                (!$scope.userData.preferences ||
                !$scope.userData.preferences.mailingAddress.addressLine1) &&
                $scope.balanceInfo.preferences &&
                $scope.balanceInfo.preferences.mailingAddress &&
                Object.keys($scope.balanceInfo.preferences.mailingAddress).length
              ) {
                $scope.userData.preferences.mailingAddress = $scope.balanceInfo.preferences.mailingAddress;
              }

            var paymentFlowSelected = PaymentFlowFactory.getPaymentFlow();
            if (paymentFlowSelected === 'otp' &&
                $scope.preferences &&
                $scope.balanceInfo.preferences.isPaperless === false
              ) {
                $scope.billingMethodSelected = 'email';
              }
          }]
        };
      }
    ])
    .directive('paymentFlowBillingMethodMedicare', [
      function() {
        return {
          scope: {
            /**
             * @param {Object} userData
             * @param {Object} userData.preferences
             */
            balanceInfo: '=',
            userData: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-billing-method-medicare.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            // $scope.userData = PaymentFlowFactory.getUserSetData();
            $scope.paymentFlow = PaymentFlowFactory.getPaymentFlow();

            var billingMethodSelected = PaymentFlowFactory.getBillingMethod();
            if (billingMethodSelected) {
              $scope.billingMethodSelected = billingMethodSelected;
            }
            if ($scope.paymentFlow === 'otp') {
              $scope.billingMethodSelected = 'postal';
            }

            if (
              (!$scope.userData.preferences ||
              !$scope.userData.preferences.emailAddress) &&
              $scope.balanceInfo.preferences &&
              $scope.balanceInfo.preferences.emailAddress
            ) {
              $scope.userData.preferences.emailAddress = $scope.balanceInfo.preferences.emailAddress;
            }

            if (
                (!$scope.userData.preferences ||
                !$scope.userData.preferences.mailingAddress.addressLine1) &&
                $scope.balanceInfo.preferences &&
                $scope.balanceInfo.preferences.mailingAddress &&
                Object.keys($scope.balanceInfo.preferences.mailingAddress).length
              ) {
                $scope.userData.preferences.mailingAddress = $scope.balanceInfo.preferences.mailingAddress;
              }

            var paymentFlowSelected = PaymentFlowFactory.getPaymentFlow();
            if (paymentFlowSelected === 'otp' &&
                $scope.preferences &&
                $scope.balanceInfo.preferences.isPaperless === false
              ) {
                $scope.billingMethodSelected = 'email';
              }
          }]
        };
      }
    ]);
}());
(function() {
  angular.module('blueconnect.mobile.directives.paymentFlowCancelButton', [])
    .directive('paymentFlowCancelButton', function() {
      return {
        template: [
        '<cta-button-row>',
          '<cta-button ng-click="openModal()" class="white"><span ng-bind="::loc.CANCEL"></span></cta-button>',
        '</cta-button-row>',
        '<extendable-alert-modal open-modal-fn-alias="openModal" confirm-fn="goToBillingSummary"  ng-class="{show: showModal}" modal-info="cancelModalObj"></extendable-alert-modal>'
        ].join(''),
        controller: ['$rootScope', '$scope', 'PaymentFlowFactory',function($rootScope, $scope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.goToBillingSummary = function() {
            PaymentFlowFactory.reset();
            $rootScope.gotoView('/billing');
          };

          $scope.cancelModalObj = {
            title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
            body: $scope.loc.BP_ARE_YOU_SURE,
            cancelButton: {
              title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
            },
            confirmButton: {
              color: 'red',
              title: $scope.loc.BP_CANCEL_PAYMENT
            }
          };
        }]
      };
    })
    .directive('editCreditDetailsButton', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/edit-credit-details-button.html',
        scope: {
          paymentMethod: '<',
          cancelRoute: '@',
          buttonTitle: '<'
        },
        controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;
          $scope.goToBillingSummary = function() {
            PaymentFlowFactory.resetCreditCardDetails();
            $rootScope.gotoView($scope.cancelRoute);
          };

          $scope.cancelModalObj = {
            title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
            body: $scope.loc.BP_EDIT_PAYMENT_REENTER_DETAILS,
            cancelButton: {
              title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
            },
            confirmButton: {
              color: 'blue',
              title: $scope.loc.BP_EDIT_PAYMENT_INFO
            }
          };
        }]
      };
    });
})();
'use strict';
/**
 * Takes a parameter value as a boolean for whether the checkbox is checked or not
 */
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowCheckbox', [])
    .directive('pfCheckbox', function() {
      return {
        restrict: 'E',
        transclude: true,
        templateUrl: 'partials/payment-flow-checkbox.html',
        scope: {
          value: '='
        },
        controller: ['$scope', function($scope) {
          if($scope.value === undefined) {
            $scope.value = false;
          }
          $scope.toggleCheckbox = function() {
            $scope.value = !$scope.value;
          };
        }]
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowCreditCardDetails', [])
    .directive('mobileCreditCards', function() {
      return {
        restrict: 'E',
        template: [
          '<div class="card-logos">',
            '<img src="images/visa-logo.svg" alt="">',
            '<img src="images/mastercard-logo.svg" alt="">',
            '<img src="images/discover-logo.svg" alt="">',
            '<img src="images/amex-logo.svg" alt="">',
          '</div>'
        ].join('')
      };
    })
    .directive('paymentFlowCreditCardDetails', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/payment-flow-credit-card-details.html',
        scope: {
          billingInfo: '=',
          userData: '='
        },
        controller: ['$rootScope', '$scope', '$timeout', 'PaymentFlowFactory', function($rootScope, $scope, $timeout, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.language = $rootScope.language;
          $scope.moment = moment;

          $scope.scanCreditCard = function() {
            CardIO.scan({
              requireExpiry: true,
              scanExpiry: false,
              requirePostalCode: false,
              hideCardIOLogo: true,
              suppressScan: false,
              keepApplicationTheme: true
            }, onScanComplete, angular.noop);
            function onScanComplete(cardInfoObj) {
              $timeout(function() {
                // this happens outside of angular, so we need to use an angular construct
                // to let angular know to update the view
                var expiryMonth = cardInfoObj.expiryMonth.toString();
                if (expiryMonth.length === 1) {
                  expiryMonth = '0' + expiryMonth;
                }
                $scope.userData.creditCardDetails = {
                  firstName: cardInfoObj.cardholderName,
                  lastFour: cardInfoObj.cardNumber,
                  year: cardInfoObj.expiryYear.toString().slice(2) - 0,
                  month: expiryMonth,
                  cvn: cardInfoObj.cvv
                };
              }, 0);
            }

          };
          /*
          * @namespace Regular Expressions
          * @name cardRegex
          * @author Seth Rhodes <seth.rhodes@bcbsnc.com>
          *
          * @description
          * Use this to validate the cards which we accept. MasterCard, VISA, and Discover
          * are accepted. Length validation is handled here for 16-digit cards and 19-digit VISA
          * cards. Please refer to BCB-508 for validation rules used at the time of creation.
          */
          var cardRegex = /^(4((.{12}?)|(.{15}?)|(.{18}?)|(.{19}?))|6(011(0[0-9]|[2-4]|7(4|[7-9])(.{10})|8[6-9]|9)((\d{10})|(\d{11})?)|(4[4-9](\d{13})|5(\d{14})))|5[1-5](\d{14})|3[47][0-9]{13}|222[1-9](\d{12})|2720(\d{12}))$/
          $scope.cardRegex = cardRegex;

          var currentDate = new Date();
          var currentMonth = currentDate.getMonth() + 1;
          var currentYear = currentDate.getFullYear();
          var currentYearShort = currentYear.toString().slice(2);

          $scope.validateExpirationDate = function(month, year) {
            if (month === currentMonth && year === currentYearShort) {
              $scope.userData.creditCardDetails.month = null;
            }
            if (year === currentYearShort && month < currentMonth) {
              $scope.userData.creditCardDetails.month = null;
            }
          };

          var numberOfAvailableYears = 20;
          $scope.yearsArr = [];
          for (var i = 0; i < numberOfAvailableYears; i++) {
            var yearValue = (currentYear + i).toString();
            $scope.yearsArr.push({
              value: yearValue.slice(2),
              label: yearValue
            });
          }

          $scope.$watch('userData.creditCardDetails.year', function(n) {
            $scope
              .validateExpirationDate(
                $scope.userData.creditCardDetails.month,
                $scope.userData.creditCardDetails.year
              )
          });

          var numberOfAvailableMonths = 12;
          $scope.monthArr = [];
          for (var i = 0; i < numberOfAvailableMonths; i++) {
            var monthValue = (currentMonth + i).toString();
            $scope.monthArr.push({
              value: monthValue.slice(2),
              label: monthValue
            });
          }
          $scope.$watch('userData.creditCardDetails.month', function(n) {
            $scope
              .validateExpirationDate(
                $scope.userData.creditCardDetails.month,
                $scope.userData.creditCardDetails.year
              );
          });
        }]
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowCtaButton', [])
    /**
     * A layout directive to create a row for a cta button to be formatted well on mobile
     */
    .directive('ctaButtonRow', function() {
        return {
          restrict: 'E',
        };
      })
      /**
      * If an action funciton is passed from the parent controller it will override
      * the page transition functionality. Applied classes change the styling.
      * Available classes [ white, condensed-font, blue ]
      * @example
      * <cta-button-row>
      *   <cta-button class="white condensed-font">{{loc.buttonText}}</cta-buttonp>
      * </cta-button-row>
      *  @example
      * <cta-button-row>
      *   <cta-button class="blue">{{loc.buttonText}}</cta-buttonp>
      * </cta-button-row>
      */
      .directive('ctaButton', function() {
        return {
          restrict: 'E',
          transclude: true,
          templateUrl: 'partials/payment-flow-cta-button.html',
          scope: {
            /**
             * @param
             */
            transitionPage: '@?',
            /**
             * @param
             */
            actionFn: '=?',
            loading: '=?',
            loadingText: '=?'
          },
          controller: ['$rootScope', '$scope', function($rootScope, $scope) {
            $scope.gotoView = $rootScope.gotoView;
            $scope.loading = angular.isUndefined($scope.loading) ? false : $scope.loading;
            $scope.loadingText = angular.isUndefined($scope.loadingText) ? $rootScope.loc.BP_LOADING : $scope.loadingText;
          }],
          link: function(scope, elem, attr, ctrl) {
            elem.on('click', function() {
              scope.gotoView(scope.transitionPage);
            });
          }
        };
    });
})();
/**
 * Directive for the payment flow bottom bar.
 *
 * @namespace Directives
 * @class paymentFlowHelpShare
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowHelpShare', [])
      .directive('paymentFlowHelpShare', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-help-share.html',
            scope: {
              /**
               *
               * @memberof paymentFlowHelpShare
               * @member {Object} paymentFlow
               */
              paymentReceipt: '=',
              flowIsAutopay: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              '$filter',
              'shareService',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, $filter, shareService, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = function (url) {
                  PaymentFlowFactory.resetCreditCardDetails();
                  PaymentFlowFactory.reset();
                  $rootScope.gotoView(url);
                };
                $scope.userData = PaymentFlowFactory.getUserSetData();

                $scope.shareReceipt = function () {
                  var shareContent = '';
                  var maskFilter = $filter('maskAccount');
                  var maskAcct = maskFilter($scope.userData.accountNumber);
                  var todaysDate = new Date();

                  var billingMethod = PaymentFlowFactory.getBillingMethod();
                  if (billingMethod === 'postal') {
                    $scope.localizedBillingMethod = $scope.loc.BP_POSTAL_MAIL;
                  }
                  if (billingMethod === 'none') {
                    $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
                  }
                  if (billingMethod === 'email') {
                    $scope.localizedBillingMethod = $scope.loc.EMAIL;
                  }

                  if ($scope.flowIsAutopay) {

                    shareContent = $rootScope.loc.BP_PAYMENT_DATE + ": " + ((todaysDate.getMonth() + 1) + '/' + todaysDate.getDate() + '/' + todaysDate.getFullYear()) + "\n" +
                         $rootScope.loc.BP_CONFIRMATION_CODE + ": " + $scope.userData.successConfirmationCode + "\n" +
                         $rootScope.loc.POLICY_ID + ": " + $scope.paymentReceipt.account.policyMembership.policyId + "\n" +
                         $rootScope.loc.SUBSCRIBER_ID + ": " + $scope.paymentReceipt.account.policyMembership.fullExternalId + "\n" +
                         $rootScope.loc.BP_TITLE_PAYMENT_FREQUENCY + ": " + $scope.loc.BP_AUTOPAY + "\n" +
                         $rootScope.loc.BP_MONTHLY_DRAFT_DATE + ": " + $scope.loc.BP_MONTHLY_DRAFT + "\n" +
                         $rootScope.loc.BP_MONTHLY_PREMIUM_AMOUNT + ": " + $scope.paymentReceipt.account.currentInvoice.billedAmount  + "\n" +
                         $rootScope.loc.BP_HEADER_PAYMENT_METHOD + ": " +  (PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD) + "\n" +
                         $rootScope.loc.BP_TITLE_BILLING_METHOD + ": " +  $scope.localizedBillingMethod + "\n" ;
                    if (PaymentFlowFactory.getPaymentMethod() === 'bankdraft') {
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_ACCOUNT + ": " + $scope.userData.accountHolderName + "\n" +
                          $rootScope.loc.BP_ACCOUNT_TYPE + ": " + ($scope.userData.accountType === 'Savings' ? $scope.loc.SAVINGS : $scope.loc.BP_CHECKING) + "\n" +
                          $rootScope.loc.BP_ROUTING_NUMBER + ": " + $scope.userData.routingNumber + "\n" +
                          $rootScope.loc.BP_BANK_ACCOUNT_NUMBER + ": " + maskAcct;
                    } else {
                      //payment method is credit card
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_CARD + ": " + $scope.userData.creditCardDetails.firstName + "\n" +
                          $rootScope.loc.BP_CARD_NUMBER + ": " + maskFilter($scope.userData.creditCardDetails.lastFour) + "\n" +
                          $rootScope.loc.BP_EXPIRATION_DATE + ": " + $scope.userData.creditCardDetails.month + "/" + $scope.userData.creditCardDetails.year;
                    }
                  } else {

                    shareContent = $rootScope.loc.BP_PAYMENT_DATE + ": " + ((todaysDate.getMonth() + 1) + '/' + todaysDate.getDate() + '/' + todaysDate.getFullYear()) + "\n" +
                        $rootScope.loc.BP_CONFIRMATION_CODE + ": " + $scope.userData.successConfirmationCode + "\n" +
                        $rootScope.loc.POLICY_ID + ": " + $scope.paymentReceipt.policyMembership.policyId + "\n" +
                        $rootScope.loc.SUBSCRIBER_ID + ": " + $scope.paymentReceipt.policyMembership.fullExternalId + "\n" +
                        $rootScope.loc.BP_TITLE_PAYMENT_FREQUENCY + ": " + (PaymentFlowFactory.getPaymentFrequency() === 'autopay' ? $scope.loc.BP_AUTOPAY : $scope.loc.BP_ONE_TIME_PAYMENT) + "\n" +
                        $rootScope.loc.BP_MONTHLY_PREMIUM_AMOUNT + ": " + $scope.paymentReceipt.currentInvoice.billedAmount + "\n" +
                        $rootScope.loc.BP_TOTAL_ACCOUNT_BALANCE + ": " + $scope.paymentReceipt.currentInvoice.totalDueAmount + "\n" +
                        $rootScope.loc.BP_AMOUNT_PAID_TODAY + ": " + $scope.userData.paymentAmount + "\n" +
                        $rootScope.loc.BP_HEADER_PAYMENT_METHOD + ": " + (PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD) + "\n";

                    if ($scope.paymentReceipt.isPaymentProcessing) {
                      shareContent = shareContent +
                          $rootScope.loc.BP_PREVIOUS_PAYMENT + " (" + $rootScope.loc.BP_CURRENTLY_PROCESSING + ")" + ": " + $scope.paymentReceipt.currentInvoice.balanceForwardAmount + "\n";
                    }

                    if ($scope.paymentReceipt.preferences.isPaperless === false) {
                      shareContent = shareContent +
                          $rootScope.loc.BP_TITLE_BILLING_METHOD + ": " + (PaymentFlowFactory.getBillingMethod() === 'email' ? $scope.loc.EMAIL : $scope.loc.BP_POSTAL_MAIL) + "\n";
                    }

                    if (PaymentFlowFactory.getPaymentMethod() === 'bankdraft') {
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_ACCOUNT + ": " + $scope.userData.accountHolderName + "\n" +
                          $rootScope.loc.BP_ACCOUNT_TYPE + ": " + ($scope.userData.accountType === 'Savings' ? $scope.loc.SAVINGS : $scope.loc.BP_CHECKING) + "\n" +
                          $rootScope.loc.BP_ROUTING_NUMBER + ": " + $scope.userData.routingNumber + "\n" +
                          $rootScope.loc.BP_BANK_ACCOUNT_NUMBER + ": " + maskAcct;
                    } else {
                      //payment method is credit card
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_CARD + ": " + $scope.userData.creditCardDetails.firstName + "\n" +
                          $rootScope.loc.BP_CARD_NUMBER + ": " + maskFilter($scope.userData.creditCardDetails.lastFour) + "\n" +
                          $rootScope.loc.BP_EXPIRATION_DATE + ": " + $scope.userData.creditCardDetails.month + "/" + $scope.userData.creditCardDetails.year;
                    }
                  }//end if flowIsAutoPay

                  shareService.showSharing(shareService.contentType.TEXT, shareContent);
                };
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowInputs', [])
    /**
     * @description
     * Mostly used in parallel with the input field directive
     * @param infoModal {string} takes the name of the modal that it will activate
     */
    .directive('paymentFlowInputLabel', function() {
      return {
        scope: {
          infoModal: '@'
        },
        transclude: true,
        template: '<span class="label-title" ng-transclude></span><i ng-show="infoModal" pf-modal-open="{{infoModal}}" class="fa fc-outlined-help"></i>'
      };
    })
    /**
     *
     * @param {string} placeholder
     * @example <payment-flow-input modal-name="namePassedIntopPfModalDirective"></payment-flow-input>
     */
    .directive('paymentFlowInput', function() {
      return {
        template: [
          '<payment-flow-input-label info-modal="{{modalName}}">{{title}}</payment-flow-input-label>',
          '<input max-length="maxLength" ng-pattern="pattern" match-model match-input="matchInput" ng-model-options="{debounce: 500}" name="{{formLabel}}" ng-model="value" placeholder="{{placeholder}}" type="{{type}}" ng-required="required" ng-disabled="disabled"/>'].join(''),
        scope: {
          title: '@?',
          placeholder: '@?',
          modalName: '@?',
          value: '=',
          pattern: '=?',
          matchInput: '=?',
          formLabel: '@?',
          required: '=?',
          disabled: '=?',
          type: '@?',
          number: '=?',
          maxLength: '=?',
          ngModel: '='
        },
        link: function(scope, elem) {
          elem.find('input').on("keyup", function(ev) {
            //if the input is longer than the max length 
            //if it is not 'Delete', 'Backspace', 'Tab', 'ArrowRight', 'ArrowLeft'
            var input = elem.find('input');
            var value = input.val();
            if (input.val().length > scope.maxLength) {
                input.val(value.substr(0,value.length-1));
                scope.$apply();
                ev.preventDefault();
            } 
          });

          elem.on('cut copy paste', function(event) {
            event.preventDefault();
          });
        }
      };
    })
    .directive('routing', ['config', '$http', '$q', function(config, $http, $q) {
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, attr, elem, parentCtrl) {
          parentCtrl.$asyncValidators.validRouting = function(modelValue, viewValue) {
            var def = $q.defer();
            if(!scope.required) {
              def.resolve();
            }
            if(scope.required) {
              $http.get(config.apiUrl + '/validate-routing?routingNumber=' + modelValue)
                .then(function(response) {
                  scope.bankName = response.data.bankName;
                  def.resolve();
                })
                .catch(function(error) {
                  console.warn(error.data.error);
                  def.reject();
                });
            }
            return def.promise;
          };
        }
      };
    }])
     /**
     *
     * @param {string} placeholder
     * @example <payment-flow-input modal-name="namePassedIntopPfModalDirective"></payment-flow-input>
     */
    .directive('routingNumberInput', function() {
      return {
        template: [
          '<payment-flow-input-label info-modal="{{modalName}}">{{title}}</payment-flow-input-label>',
          '<input ng-pattern="pattern" routing bank-name="bankName" ng-model-options="{debounce: 500}" name="{{formLabel}}" ng-model="value" placeholder="{{placeholder}}" type="{{type}}" ng-required="required"/>'].join(''),
        scope: {
          title: '@?',
          placeholder: '@?',
          modalName: '@?',
          value: '=',
          pattern: '=?',
          formLabel: '@?',
          required: '=?',
          type: '@?',
          number: '=?',
          bankName: '=?'
        },
        link: function(scope, elem, attr, parentCtrl) {
          var oneKeyCode = 48;
          var zeroKeyCode = 58;
          var backspaceKeyCode = 8;
          var tabKeyCode = 9;
          elem.on('cut copy paste', function(event) {
            event.preventDefault();
          });
          if(scope.number === true) {
            elem.on('keydown', function(event) {
              if((event.keyCode < oneKeyCode || event.keyCode > zeroKeyCode) && event.keyCode != backspaceKeyCode && event.keyCode != tabKeyCode) {
                event.preventDefault();
              }
            });
          }
        }
      };
    })
    /**
     * @description
     * An atttribute to go onto a form input that makes the input valid only if the passed in value
     * matches the viewValue.
     * @example
     * <input match-model match-input="formInputToMatchAgainst" ng-model="someValueOnScope"/>
     */
    .directive('matchModel', function() {
      return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
          matchInput: '=?'
        },
        link: function(scope, elem, attr, inputCtrl) {
          inputCtrl.$validators.match = function(modelValue, viewValue) {
            if(scope.matchInput && scope.matchInput.$viewValue) {
              if(scope.matchInput.$viewValue !== inputCtrl.$viewValue) {
               return false;
              }
              return true
            }
            return true;
          };
          if(scope.matchInput) {
            scope.$watch(function() {
              return scope.matchInput.$modelValue;
            }, function() {
              inputCtrl.$validate();
            });
          }

        }
      };
    })
    /**
     * @example
     * <payment-flow-select value="someValueOnScope">
     *   <option value="'checking'" ng-selected="someValueOnScope === 'checking'"></option>
     *   <option value="'savings'" ng-selected="someValueOnScope === 'savings'"></option>
     * </payment-flow-select>
     * @param {string} title
     * @param
     */
    .directive('paymentFlowSelect', function() {
      return {
        transclude: true,
        templateUrl: 'partials/payment-flow-select.html',
        scope: {
          title: '@?',
          modalName: '@?',
          value:"=",
          formLabel: '@?',
          required: '=?'
        },
        controller: ['$scope', '$rootScope', function($scope, $rootScope) {
          $scope.loc = $rootScope.loc;
        }]
      };
    });
})();
(function() {
  angular
  .module('blueconnect.mobile.directives.paperlessAgreement', [])
  .directive('paymentFlowPaperlessAgreement', function() {
    return {
      restrict: 'E',
      templateUrl: 'partials/payment-flow-paperless-agreement.html',
      scope: {
        billingInfo: '=',
        required: '=?'
      },
      controllerAs: 'paperlessCtrl',
      controller: ['$rootScope', '$scope', '$timeout', function($rootScope, $scope, $timeout) {
        var vm = this;
        $scope.loc = $rootScope.loc;
        $scope.checkboxValue = false;
        $scope.acceptPaperlessFn = function() {
          $scope.checkboxValue = true;
        };
        // queue this for later, sometimes billingMethodForm isn't there at time of evaluation
        $timeout(function() {
          if ($scope.$parent.paymentFlowBillingMethodForm && $scope.$parent.paymentFlowPageMethodForm.paymentFlowBillingMethodForm) {
            $scope.billingMethodSelected = $scope.$parent.paymentFlowPageMethodForm.paymentFlowBillingMethodForm.billingMethodSelected;
          }
        }, 0);
      }]
    };
  });
})();

/**
 * Directive for the payment flow paperless success confirmation.
 *
 * @namespace Directives
 * @class paymentFlowPaperlessSuccess
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowPaperlessSuccess', [])
      .directive('paymentFlowPaperlessSuccess', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-paperless-success.html',
            scope: {
              /**
               *
               * @memberof paymentFlowPaperlessSuccess
               * @member {Object} paymentFlow
               */
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentAmount', [])
    .directive('paymentFlowPaymentAmount', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/payment-flow-payment-amount.html',
        controllerAs: 'totalAmntCtrl',
        scope: {
          billingInfo: '='
        },
        controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
          var vm = this;
          $scope.loc = $rootScope.loc;
          $scope.selectedPolicy = $rootScope.selectedPolicy;
          if ($scope.billingInfo.currentInvoice.minAmountDue === $scope.billingInfo.currentInvoice.totalDueAmount){
            $scope.minAmountDue = false;
          } else if ($scope.billingInfo.currentInvoice.minAmountDue === $scope.billingInfo.currentInvoice.balanceForwardAmount){
            $scope.minAmountDue = false;
          } else {
            $scope.minAmountDue = $scope.billingInfo.currentInvoice.minAmountDue > 0;
          }
          
          vm.available = true;

          if ($scope.billingInfo.isPaymentProcessing && $scope.billingInfo.currentInvoice.remainingBalance === 0) {
            vm.available = false;
          }
          if ($scope.billingInfo.preferences && $scope.billingInfo.preferences.isAutopay) {
            vm.available = false;
          }
          if (!$scope.billingInfo.currentInvoice.totalDueAmount) {
            vm.available = false;
          }
          if ($scope.billingInfo.reinstatementAmount > 0) {
            vm.available = true;
          }

          if (vm.available && $scope.billingInfo.isPaymentProcessing === true) {
            // have to coerce to string because label attr is string
            $scope.desiredPaymentAmount = $scope.billingInfo.currentInvoice.remainingBalance.toString();
          }

          if (vm.available && $scope.billingInfo.isPaymentProcessing === false) {
            $scope.desiredPaymentAmount = $scope.billingInfo.currentInvoice.totalDueAmount.toString();
          }

          if (vm.available && $scope.billingInfo.reinstatementAmount > 0) {
            $scope.desiredPaymentAmount = $scope.billingInfo.reinstatementAmount.toString();
          }

          $scope.padAmt = function(amt) {
            var amountDue = amt.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return amountDue;
          };

          var desiredPaymentAmount = PaymentFlowFactory.getPaymentAmount();
          if (desiredPaymentAmount) {
            $scope.desiredPaymentAmount = desiredPaymentAmount;
          }

        }]
      };
    });
})();
/**
 * Directive for the payment flow have questions & faqs .
 *
 * @namespace Directives
 * @class paymentFlowFaqsButton
 */
(function () {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.paymentFlowFaqsButton', [])
        .directive('paymentFlowFaqsButton', [
          function () {
            return {
              restrict: 'E',
              replace: true,
              templateUrl: 'partials/payment-flow-faqs-button.html',
              scope: {
                /**
                 *
                 * @memberof paymentFlowFaqsButton
                 * @member {Object} paymentFlow
                 */
              },
              controller: [
                '$scope',
                '$rootScope',
                function ($scope, $rootScope) {
                  $scope.loc = $rootScope.loc;
                  $scope.gotoView = $rootScope.gotoView;
                }
              ]
            };
          }
        ]);
  }());
  
/**
 * Directive for the payment flow tracker.
 *
 * @namespace Directives
 * @class paymentFlowTracker
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentFrequency', [])
    .directive('paymentFlowPaymentFrequency', [
      function() {
        return {
          scope: {
            balanceInfo: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-payment-frequency.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.frequencySelected = null;

            // defaults to squelch unreferenced property errors in the console
            $scope.balanceInfo = $scope.balanceInfo || {};

            $scope.changeBillingMethodToEmail = function(form) {
              form.$$parentForm.paymentFlowBillingMethodForm.billingMethodSelected = 'email';
            };

            var inReinstatement = $scope.balanceInfo.reinstateEligible === true && $scope.balanceInfo.reinstatementAmount > 0;

            //if the user is in autopay they come to the screen with only the autopay option showing and autopay automatically selected
            $scope.showAutoPay = (
              (
                // Displays when account balance > 0 and user is not outside of reinstatement period.
                $scope.balanceInfo.isPaymentProcessing ?
                $scope.balanceInfo.currentInvoice.remainingBalance > 0:
                $scope.balanceInfo.currentInvoice.totalDueAmount > 0
              )
              // doesn't show when user is in reinstatement, at all
              // doesn't show when user is a medicare member
              && !$scope.balanceInfo.memberInReinstatement && $scope.balanceInfo.policyMembership.enrollmentSourceSystemCode.toLowerCase() !== 'amisys'
            );

            $scope.showOneTimePayment = (
              (
                // Displays when account balance > 0 and user is not outside of reinstatement period.
                $scope.balanceInfo.isPaymentProcessing ?
                $scope.balanceInfo.currentInvoice.remainingBalance > 0:
                $scope.balanceInfo.currentInvoice.totalDueAmount > 0
              ) ||
              // can display when user is in reinstament,
              // but they have to be reinstatement eligible
              (
                $scope.balanceInfo.memberInReinstatement &&
                $scope.balanceInfo.reinstateEligible
              )
            );

            // if autopay is the only available option
            if ($scope.showAutoPay === true && $scope.showOneTimePayment === false) {
              $scope.frequencySelected = 'autopay';
            }

            // if one time payment is the only available option
            if ($scope.showAutoPay === false && $scope.showOneTimePayment === true) {
              $scope.frequencySelected = 'oneTimePayment';
            }

            var desiredFrequency = PaymentFlowFactory.getPaymentFrequency();
            if (desiredFrequency) {
              console.log('payment flow present');
              console.log(desiredFrequency);
              $scope.frequencySelected = /auto/i.test(desiredFrequency) ? 'autopay': 'oneTimePayment';
            }

            if ($scope.showAutoPay && $scope.showOneTimePayment) {
              var desiredPaymentFlow = PaymentFlowFactory.getPaymentFlow();
              if (!desiredPaymentFlow) {
                return console.warn('Probably caused by a refresh, possibly an error, but no payment flow was available!');
              }
              $scope.frequencySelected = /auto/i.test(desiredPaymentFlow) ? 'autopay': 'oneTimePayment';
            }

          }]
        };
      }
    ]);
}());

/**
 * Directive for the payment flow payment method.
 *
 * @namespace Directives
 * @class paymentFlowPaymentMethodSelected
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentMethodSelected', [])
    .directive('paymentFlowPaymentMethodSelected', [
      function() {
        return {
          scope: {
            billingInfo: '=methodInfo'
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-payment-method-selected.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.selectedPaymentAmount = PaymentFlowFactory.getPaymentAmount();
            if (!$scope.billingInfo.memberInReinstatement){
              $scope.totalAccountBalance = ($scope.selectedPaymentAmount == $scope.billingInfo.currentInvoice.totalDueAmount);
              $scope.minAmountDue = !$scope.totalAccountBalance && ($scope.selectedPaymentAmount == $scope.billingInfo.currentInvoice.minAmountDue);
              $scope.amountDue = (!$scope.totalAccountBalance && !$scope.minAmountDue); 
            }

            $scope.localizedPaymentFrequency = (
              /auto/.test(PaymentFlowFactory.getPaymentFrequency()) ?
              $scope.loc.BP_AUTOPAY :
              $scope.loc.BP_ONE_TIME_PAYMENT
            );

            $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                $scope.loc.BP_BANK_DRAFT :
                $scope.loc.BP_CREDIT_CARD
            );

            var billingMethod = PaymentFlowFactory.getBillingMethod();
            if (billingMethod === 'postal') {
              $scope.localizedBillingMethod = $scope.loc.BP_POSTAL_MAIL;
            }
            if (billingMethod === 'none') {
              $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
            }
            if (billingMethod === 'email') {
              $scope.localizedBillingMethod = $scope.loc.EMAIL;
            }

          }]
        };
      }
    ]);
}());
/**
 * Directive for the payment flow payment method.
 *
 * @namespace Directives
 * @class paymentFlowPaymentMethod
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentMethod', [])
    .directive('paymentFlowPaymentMethod', [
      function() {
        return {
          scope: {
            methodInfo: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-payment-method.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.paymentMethod = null;

            var desiredPaymentMethod = PaymentFlowFactory.getPaymentMethod();
            if (desiredPaymentMethod) {
              $scope.desiredPaymentMethod = desiredPaymentMethod;
            }
          }]
        };
      }
    ]);
}());
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentReceipt', [])
    .directive('paymentFlowPaymentReceipt', function() {
      return {
        restrict: 'E',
        replace: false,
        scope: {
          billingInfo: '='
        },
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.userSetData = PaymentFlowFactory.getUserSetData();
          $scope.paymentFrequencyDisplayValue = /auto/.test($scope.userSetData.paymentFrequency) ? $scope.loc.BP_MONTHLY_AUTOPAY : $scope.loc.BP_ONE_TIME_PAYMENT;
          $scope.paymentMethodDisplayValue = /bank/.test($scope.userSetData.paymentMethod) ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD;
          $scope.accountTypeDisplayValue = $scope.userSetData.accountType === 'Checking' ? $scope.loc.BP_CHECKING : $scope.loc.SAVINGS;

          var billingMethod = PaymentFlowFactory.getBillingMethod();
          if (billingMethod === 'postal') {
            $scope.billingMethodDisplayValue = $scope.loc.BP_POSTAL_MAIL;
          }
          if (billingMethod === 'none') {
            $scope.billingMethodDisplayValue = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
          }
          if (billingMethod === 'email') {
            $scope.billingMethodDisplayValue = $scope.loc.EMAIL;
          }
        }],
        templateUrl: 'partials/payment-flow-payment-receipt.html'
      }
    })
    .directive('paymentFlowReceiptRow', function() {
      return {
        restrict: 'E',
        replace: false,
        scope: {
          label: '@',
          value: '@'
        },
        templateUrl: 'partials/payment-flow-payment-receipt-row.html'
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowProcessingPayment', [])
    .directive('paymentFlowProcessingPayment', function() {
      return {
        restrict: 'E',
        replace: false,
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.userSetData = PaymentFlowFactory.getUserSetData();
          var todaysDate  = new Date();
          $scope.todayFormatted = (todaysDate.getMonth() + 1) + '/' + todaysDate.getDate() + '/' + todaysDate.getFullYear();
        }],
        templateUrl: 'partials/payment-flow-processing-payment.html'
      }
    });
})();
/**
 *
 * Directive for a general purpose radio group for use in the billing and payment flow. All radio
 * groups (even with one button) require the parent payment-flow-radio-group for passing data.
 *
 * @namespace Directives
 * @class paymentFlowTracker
 */
(function(){
  angular
    .module('blueconnect.mobile.directives.paymentFlowRadioGroup', [])
    .directive('paymentFlowRadioGroup', [
      function() {
        return {
          restrict: 'E',
          scope: {
            groupValue: '='
          },
          bindToController: true,
          controller: [
            function() {
              var vm = this;
            }
          ]
        };
      }
    ])
    .directive('paymentFlowRadioButton', [
      function() {
        return {
          restrict: 'E',
          templateUrl: 'partials/payment-flow-radio-button.html',
          controllerAs: 'radioCtrl',
          require: '^^paymentFlowRadioGroup',
          transclude: true,
          scope: {
            label: '@',
            value: '@',
            clickHandler: '&?'
          },
          controller: ['$scope',
            function($scope) {
              var vm = this;
            }
          ],
          link: function($scope, $elem, $attrs, groupCtrl) {
            $scope.getGroupValue = function() {
              return groupCtrl.groupValue;
            };
            $scope.makeSelection = function(incomingValue) {
              groupCtrl.groupValue = incomingValue;
              if ($scope.clickHandler) {
                $scope.clickHandler();
              }
            };
          }
        };
      }
    ]);

})();
/**
 * Directive for the payment flow reinstatement pending confirmation.
 *
 * @namespace Directives
 * @class paymentFlowReinstatementPending
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowReinstatementPending', [])
      .directive('paymentFlowReinstatementPending', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-reinstatement-pending.html',
            scope: {
              billingInfo: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowReusableDirectives', [])
    /**
     * @description
     * A reusable dividing line for spacing, designed for use in the payment flow
     */
    .directive('pfDivider', function() {
      return {
        template: '<div class="dividing-line"></div>'
      };
    })
    /**
     * @description
     * A directive used to open a pfModal. Set the attribute equal to the string name
     * of the modal directive that you want to open.
     */
    .directive('pfModalOpen', ['$rootScope', function($rootScope) {
      return {
        restrict: 'A',
        scope: true,
        link: function(scope, elem, attr) {
          elem.on('click', function() {
            $rootScope.$broadcast('openPaymentFlowModal:' + attr.pfModalOpen)
          });
        }
      };
    }])
    /**
     * @description
     * A modal used in the payment flow section of the site
     * @param {string} name The unique name for the modal which is also used with pfModalOpen
     * @param {string} title The title displayed in on the modals top bar
     * @param {function} agreementButton The passed in function to be run on the parent scope when 
     * the user accepts the information displayed in the modal. No value will hide the acceptance 
     * button.
     * @example 
     * <pf-modal 
     *  name="uniqueNameToBeUsedByPfModalOpen" 
     *  title="titleBarContent"
     *  button="textDisplayedOnTheAgreementButton"
     *  agreementButton="someFunctionFromTheParentController">
     *    <p>Place html content in p tag for text styling</p>
     * <pf-modal>
     */
    .directive('pfModal', ['$rootScope', function($rootScope) {
      return {
        restrict: 'E',
        scope: {
          name: '@',
          title: '@modalTitle',
          button: '@modalButton',
          agreementButton: '&?'
        },
        controller: ['$scope', function($scope) {
          var vm = this;
          $scope.open = false;
          $scope.closeModal = function() {
            angular.element('#pf-scrollable-section').addClass('payment-flow-phone-scroll');
            
            $scope.open = false;
          };
          
          $scope.acceptModal = function() {
            angular.element('#pf-scrollable-section').addClass('payment-flow-phone-scroll');
            $scope.agreementButton();
            $scope.open = false;
          };

        }],
        transclude: true,
        controllerAs: 'modalCtrl',
        templateUrl: 'partials/payment-flow-modal.html',
        link: function postLink(scope, elem, attr, modalOpenCtrl) {
          scope.$on('openPaymentFlowModal:' + scope.name, function() {
            scope.open = true;
            angular.element('#pf-scrollable-section').removeClass('payment-flow-phone-scroll');
            scope.$apply();
          });
        }
      };
    }])
    /**
     * A reusable error message to be used in the payment flow page
     * @description
     * @example
      <pr-error-message ng-show="forIsValid">{{loc.BP}}</pf-error-message>
     */
    .directive('pfErrorMessage', function() {
      return {
        restrict: 'E',
        transclude: true,
        template: '<p ng-transclude></p>'
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowReviewDetails', [])
    .directive('paymentFlowReviewDetails', function() {
      return {
        templateUrl: 'partials/payment-flow-review-details.html',
        controllerAs: 'paymentFlowReviewDetailsCtrl',
        scope: {
          reviewDetails: '='
        },
        controller: ['$rootScope', '$scope', '$filter', 'PaymentFlowFactory', function($rootScope, $scope, $filter, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;

          $scope.userData = PaymentFlowFactory.getUserSetData();

          $scope.localizedPaymentFrequency = (
              /autopay/.test(PaymentFlowFactory.getPaymentFrequency()) ?
                  $scope.loc.BP_AUTOPAY :
                  $scope.loc.BP_ONE_TIME_PAYMENT
          );

          $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                  $scope.loc.BP_BANK_DRAFT :
                  $scope.loc.BP_CREDIT_CARD
          );

          var billingMethod = PaymentFlowFactory.getBillingMethod();
          if (billingMethod === 'postal') {
            $scope.localizedBillingMethod = $scope.loc.BP_POSTAL_MAIL;
          }
          if (billingMethod === 'none') {
            $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
          }
          if (billingMethod === 'email') {
            $scope.localizedBillingMethod = $scope.loc.EMAIL;
          }

          $scope.localizedAccountType = (
              $scope.userData.accountType === 'Savings' ?
                  $scope.loc.SAVINGS :
                  $scope.loc.BP_CHECKING
          );

          $scope.selectedPaymentAmount = PaymentFlowFactory.getPaymentAmount();

        }]
      };
    })
})();

(function() {
  /**
   *
   * @param {string} placeholder
   * @example <payment-flow-state-select title="::loc.state" formLabel="myForm.state"></payment-flow-state-select>
   */
  angular
  .module('blueconnect.mobile.directives.paymentFlowStateSelect', [])
  .directive('paymentFlowStateSelect', function() {
    return {
      template: [
        '<payment-flow-input-label>{{title}}</payment-flow-input-label>',
        '<div class="arrow-row"><i class="fa fc-dropdown"></i></div>',
        '<select name="{{formLabel}}" ng-options="state.value as state.label for state in statesArray" ng-model="value" placeholder="{{placeholder}}" ng-required="required">',
        '</select>'
      ].join(''),
      scope: {
        title: '@?',
        placeholder: '@?',
        value: '=',
        formLabel: '@?',
        required: '=?',
      },
      controller: ['$scope', '$rootScope', '$timeout', function($scope, $rootScope, $timeout) {
        $scope.loc = $rootScope.loc;
        $scope.statesArray = [
          {label: $scope.loc.BP_SELECT, value: null},
          {label: $scope.loc.BP_AL, value: 'AL'},
          {label: $scope.loc.BP_AK, value: 'AK'},
          {label: $scope.loc.BP_AZ, value: 'AZ'},
          {label: $scope.loc.BP_AR, value: 'AR'},
          {label: $scope.loc.BP_CA, value: 'CA'},
          {label: $scope.loc.BP_CO, value: 'CO'},
          {label: $scope.loc.BP_CT, value: 'CT'},
          {label: $scope.loc.BP_DE, value: 'DE'},
          {label: $scope.loc.BP_FL, value: 'FL'},
          {label: $scope.loc.BP_GA, value: 'GA'},
          {label: $scope.loc.BP_HI, value: 'HI'},
          {label: $scope.loc.BP_ID, value: 'ID'},
          {label: $scope.loc.BP_IL, value: 'IL'},
          {label: $scope.loc.BP_IN, value: 'IN'},
          {label: $scope.loc.BP_IA, value: 'IA'},
          {label: $scope.loc.BP_KS, value: 'KS'},
          {label: $scope.loc.BP_KY, value: 'KY'},
          {label: $scope.loc.BP_LA, value: 'LA'},
          {label: $scope.loc.BP_ME, value: 'ME'},
          {label: $scope.loc.BP_MD, value: 'MD'},
          {label: $scope.loc.BP_MA, value: 'MA'},
          {label: $scope.loc.BP_MI, value: 'MI'},
          {label: $scope.loc.BP_MN, value: 'MN'},
          {label: $scope.loc.BP_MS, value: 'MS'},
          {label: $scope.loc.BP_MO, value: 'MO'},
          {label: $scope.loc.BP_MT, value: 'MT'},
          {label: $scope.loc.BP_NE, value: 'NE'},
          {label: $scope.loc.BP_NV, value: 'NV'},
          {label: $scope.loc.BP_NH, value: 'NH'},
          {label: $scope.loc.BP_NJ, value: 'NJ'},
          {label: $scope.loc.BP_NM, value: 'NM'},
          {label: $scope.loc.BP_NY, value: 'NY'},
          {label: $scope.loc.BP_NC, value: 'NC'},
          {label: $scope.loc.BP_ND, value: 'ND'},
          {label: $scope.loc.BP_OH, value: 'OH'},
          {label: $scope.loc.BP_OK, value: 'OK'},
          {label: $scope.loc.BP_OR, value: 'OR'},
          {label: $scope.loc.BP_PA, value: 'PA'},
          {label: $scope.loc.BP_RI, value: 'RI'},
          {label: $scope.loc.BP_SC, value: 'SC'},
          {label: $scope.loc.BP_SD, value: 'SD'},
          {label: $scope.loc.BP_TN, value: 'TN'},
          {label: $scope.loc.BP_TX, value: 'TX'},
          {label: $scope.loc.BP_UT, value: 'UT'},
          {label: $scope.loc.BP_VT, value: 'VT'},
          {label: $scope.loc.BP_VA, value: 'VA'},
          {label: $scope.loc.BP_WA, value: 'WA'},
          {label: $scope.loc.BP_WV, value: 'WV'},
          {label: $scope.loc.BP_WI, value: 'WI'},
          {label: $scope.loc.BP_WY, value: 'WY'}
        ];
        $timeout(function() {
          $scope.value = isFalsy($scope.value) ? $scope.statesArray[0].value: $scope.value;
        }, 100);

        function isFalsy(val) {
          if (!val || val === null) {
            return true;
          }
          if (typeof val === 'string' && !val.length) {
            return true;
          }
          return false;
        }

      }]
    };
  })
})();
(function() {
  angular
  .module('blueconnect.mobile.directives.termsConditions', [])
  .directive('paymentFlowTermsConditions', function() {
    return {
      restrict: 'E',
      templateUrl: 'partials/payment-flow-terms-conditions.html',
      scope: {
        termsConditions: '='
      },
      controllerAs: 'termsCtrl',
      controller: ['$rootScope', '$scope', function($rootScope, $scope) {
        var vm = this;
        $scope.loc = $rootScope.loc;
        $scope.checkboxValue = false;
        $scope.acceptTermsFn = function() {
          $scope.checkboxValue = true;
        };
      }]
    };
  });
})();

/**
 * @description
 * Directive for the payment flow title bars. A reusable title bar for payment flow.
 *
 * @param {string} title The string content for the title applied with one time string binding
 * @example
  <payment-flow-title-bar title="Payment Frequency"><payment-flow-title-bar>
  
 * @example 
  <payment-flow-title-bar title="{{loc.SOME_LOC_STRING}}"></payment-flow-title-bar>
 *@example
 *With the center attribute set to true you can center the text
  <payment-flow-title-bar center="true" title="{{loc.SOME_LOC_STRING}}"</payment-flow-title-bar>
 */
(function() {
  'use strict'
  angular
    .module('blueconnect.mobile.directives.paymentFlowTitleBar', [])
    .directive('paymentFlowTitleBar', [
      function() {
        return {
          restrict: 'E',
          template: '<h6>{{title}}</h6>',
          scope: {
            title: '@'
          },
          link: function(scope, elem, attr) {
            if(attr.center) {
              elem.addClass('justify-center');
            }
          }
        };
      }
    ]);
})();
/**
 * Directive for the payment flow total account balance.
 *
 * @namespace Directives
 * @class paymentFlowTotalBalance
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowTotalBalance', [])
  .directive('paymentFlowTotalBalance', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/payment-flow-total-account-balance.html',
        scope: {
          balanceInfo: '='
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;

          $scope.getDollars = function(input) {
            if (!input) {
              return '';
            }
            var inputStr = input.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return inputStr.slice(1, inputStr.indexOf('.') + 1) || 0;
          };
          $scope.getCents = function(input) {
            if (!input) {
              return '';
            }
            var inputStr = input.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return inputStr.slice(inputStr.indexOf('.') + 1);
          };
        }]
      };
    }
  ]);
}());

/**
 * Directive for the payment flow tracker.
 *
 * @namespace Directives
 * @class paymentFlowTracker
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowTracker', [])
    .directive('paymentFlowTracker', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/payment-flow-tracker.html',
          scope: {
            trackerInfo: '=',
            flowIsAutopay: '='
          },
          controller: ['$rootScope', '$scope', function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;

          }]
        };
      }
    ]);
}());

/**
 * Directive for the payment flow container component.
 *
 * @namespace Directives
 * @class paymentFlow
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlow', [
      'bcbsnc.cloud.services.page'
    ])
    .directive('paymentFlowPage', function() {
      return {
        restrict: 'E',
        scope: {
          loc: '=localization',
          step: '=',
          billingInfo: '=',
          trackerInfo: '=',
          validateForm: '=',
          navbarDetails: '='
        },
        templateUrl: function($elem, $attrs) {
          var url = 'views/payment-flow-page-' + $attrs.step.toLowerCase() + '.html';
          return url;
        },
        controller: ['$rootScope', '$scope', '$routeParams', 'PaymentFlowFactory', function($rootScope, $scope, $routeParams, PaymentFlowFactory) {
          $scope.selectedPolicy = $rootScope.selectedPolicy;
          $scope.userData = PaymentFlowFactory.getUserSetData();
          $scope.gotoView = $rootScope.gotoView;
          $scope.trackerInfo = {
            step: $routeParams.step.toUpperCase()
          };
        }]
      };
    })
    .directive('paymentFlow', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'views/payment-flow.html',
          controller: 'PaymentFlowController',
          link: function($scope, $elem, $attrs) {

          }
        };
      }
    ]);
}());

/**
 * @description
 * Directive for when a payment is processing.
 *
 * @example
 * <payment-processing payment-date="dateScopeVar" payment-amount="amountScopeVar"></payment-processing>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.paymentProcessing', [])
    .directive('paymentProcessing', [
      function() {
        return {
          restrict: 'E',
          scope: {
            paymentAmount: '<',
            paymentDate: '<'
          },
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
            }
          ],
          templateUrl: 'partials/payment-processing.html'
        };
      }
    ]);
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.invoicePayments')
    .directive('paymentSuccess', function() {
      return {
        templateUrl: 'partials/payment-success.html',
        scope: {
          paymentAmount: '<',
          paymentDate: '<'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }] 
      };
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentUnsuccessful', [])
    .directive('unsuccessfulHeader', function() {
      return {
        scope: {
          headerContent: '<?'
        },
        template: [
          '<h3 class="flex-row flex-center-center">',
            '<div class="icon-halo mr2">',
              '<i class="fa fa-2x fc-warning" aria-hidden="true"></i>',
            '</div>',
            '<span class="text-center pt2" ng-bind="::headerContent || loc.BP_UNSUCCESSFUL"></span>',
          '</h3>'
        ].join(''),
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
        }],
        restrict: 'E'
      };
    })
    .directive('paymentUnsuccessful', function() {
      return {
        templateUrl: 'partials/payment-unsuccessful.html',
        scope: {
          paymentAmount: '<',
          paymentDate: '<'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }]
      };
    });
})();
/**
 * Directive for the pcp dependent pcp card.
 *
 * @namespace Directives
 * @class pcpDependentPcps
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.pcpDependentPcps', [])
    .directive('pcpDependentPcps', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/pcp-dependent-pcps.html',
          scope: {
            /**
             * Display information for the dependent pcp.
             *
             * @memberof about
             * @member {Object} dependentPcpDetails
             */
            dependentPcpDetails: '=',
          },
          controller: [
            '$rootScope',
            '$scope',
            '$filter',
            'TransparencyFactory',
            'geoLocationService',
            '$timeout',
            'helpService',
            'findDoctorService',
            function(
              $rootScope,
              $scope,
              $filter,
              TransparencyFactory,
              geoLocationService,
              $timeout,
              helpService,
              findDoctorService
            ) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.loc = $rootScope.loc;
              $scope.policy = $rootScope.selectedPolicy;
              $scope.detailsPage = null;
              $scope.policyMembersList = TransparencyFactory.getCurrentPolicyMembers();

              $scope.toggleCollapse = function(index) {
                var cardClose = 'cardClose' + index;
                $scope[cardClose] = !$scope[cardClose];
              };

              $scope.otherPcpSearch = function(searchInput) {
                if (
                  TransparencyFactory.getCity() &&
                  TransparencyFactory.getCity().zip
                ) {
                  $scope.gotoPrimaryCarePage(searchInput);
                } else {
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName =
                            $rootScope.city.city +
                            $rootScope.city.state_code +
                            ' - ' +
                            $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setCurrentLocationZipCode(
                            response.data.zip
                          );
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName =
                            $scope.dependentPcpDetails.geoLocationDetails.distanceDetails.currentLocation;
                          $scope.gotoPrimaryCarePage(searchInput);
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg(
                            $scope.dependentPcpDetails.geoLocationDetails.locationMsg
                          );
                          $scope.modalObj.values.NCZipCheck =
                            $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg(
                      $scope.dependentPcpDetails.geoLocationDetails.locationMsg
                    );
                    $scope.modalObj.values.NCZipCheck =
                      $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                $scope.gotoPrimaryCarePage($scope.dependentPcpDetails.searchInput);
              };

              if ($scope.dependentPcpDetails.geoLocationDetails) {
                $scope.modalObj = {
                  locationMsg: $scope.dependentPcpDetails.geoLocationDetails.locationMsg,
                  pcp: true,
                  cancelButton: {
                    title: $scope.loc.CANCEL,
                  },
                  confirmButton: {
                    title: $scope.loc.CONTINUE,
                  },
                  values: {
                    distanceDetails:
                      $scope.dependentPcpDetails.geoLocationDetails.distanceDetails,
                    distance: TransparencyFactory.getDistance()
                      ? TransparencyFactory.getDistance().toString()
                      : $scope.dependentPcpDetails.geoLocationDetails.distanceDetails.distance.toString(),
                    city: TransparencyFactory.getCity(),
                  },
                };
              }

              $scope.gotoPrimaryCarePage = function(searchInput) {
                TransparencyFactory.setResultsTerm(searchInput.searchTerm);
                return $rootScope.gotoView(
                  searchInput.link +
                  '?id=260005172&network_id=' +
                  $rootScope.selectedPlan.id +
                  '&distance=' +
                  TransparencyFactory.getDistance() +
                  '&searchTerm=' +
                  searchInput.searchTerm +
                  '&zipCode=' +
                  TransparencyFactory.getCity().zip +
                  '&planName=' +
                  searchInput.planName +
                  '&isPcpFlow=true'
                );
              };

              $scope.openInformationModal = function(pcpInformation) {
                $rootScope.headerTerm =
                  pcpInformation.modalHeader;
                $scope.helpInfo = {
                  pcpModalText: pcpInformation.modalText,
                  pcpInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.gotoDetailsPage = function(event, index, displayMember) {
                TransparencyFactory.setResultsDetailsTerm($scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.pcpFullName);
                var requestParms = {
                  network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                  accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                  planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                  zipCode: $scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.providerZipCode,
                  locationName: encodeURIComponent($scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.providerOrganizationName),
                  doctorName: $scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.pcpFullName
                };
                $rootScope.$emit('pageLoading');

                findDoctorService.getDoctorDetails(requestParms)
                  .then(function(doctorResult) {
                    if (doctorResult.results && doctorResult.results.length) {
                      var viewUrl = '/find-doctor-results-details?' +
                        '&location=' + doctorResult.results[0].location_id +
                        '&provider=' + doctorResult.results[0].provider_id +
                        '&dependentName=' + displayMember +
                        '&viewPcpDetails=true&dependentPcp=true';
                      // Go to view.
                      $rootScope.gotoView(viewUrl);
                    } else {
                      $rootScope.$emit('pageLoaded');
                      $scope.dependentPcpDetails.providerData[index].displayErrorMessage = true;
                      $scope.dependentPcpDetails.displayErrorMessage = true;
                      event.target.parentNode.parentNode.style.display = 'none';
                      return;
                    }
                  }).catch(function(error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.dependentPcpDetails.providerData[index].displayErrorMessage = true;
                    $scope.dependentPcpDetails.displayErrorMessage = true;
                    event.target.parentNode.parentNode.style.display = 'none';
                    return error;
                  });
              };
            },
          ],
        };
      },
    ]);
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.planDetails', [])
    .directive('planDetails', function() {
      return {
        restrict: 'E',
        scope: {
          /**
           * @param {object} policy
           * @param {Array} policy.policyMembers
           * @param {string} policy.policyMembers[x].givenName
           * @param {string} policy.alphaPrefix
           * @param {string} policy.eternalId
           */
          policy: '<'
        },
        templateUrl: 'partials/plan-details.html',
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
        }]
      };
    });
})();
/**
 * Directive for the static blue plan header (for find doctor).
 *
 * @namespace Directives
 * @class planHeader
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.planHeader', [])
    .directive('planHeader', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/plan-header.html',
          scope: false,
          controller: [
            '$scope',
            '$rootScope',
            'TransparencyFactory',
            function($scope, $rootScope, TransparencyFactory) {
              if (!$rootScope.loggedIn) {
                $rootScope.getInternalLocale();
              }
              $scope.loc = $rootScope.loc;
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the plan select.
 *
 * @namespace Directives
 * @class planSelect
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.planSelect', [])
  .directive('planSelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/plan-select.html',
        scope: {
          planSelectDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'TransparencyFactory',
          function($scope, $rootScope, TransparencyFactory) {
            $scope.loc = $rootScope.loc;
            $scope.selectedPlan = $rootScope.selectedPlan;

            $scope.togglePlan = function () {
              $scope.expandedPlan = !$scope.expandedPlan;
            };

            $scope.selectPlan = function(plan){
              $scope.selectedPlan = plan;
              $rootScope.selectedUnauthenticatedPlanName = plan.name;
              $rootScope.selectedPlan = $scope.selectedPlan;
              TransparencyFactory.setSelectedPlan(plan);
              $rootScope.selectsPlan(plan);
              $scope.togglePlan();
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the static blue policy header.
 *
 * @namespace Directives
 * @class policyHeaderBlue
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.policyHeaderBlue', [])
  .directive('policyHeaderBlue', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/policy-header-blue.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          function($scope, $rootScope, $filter) {
            /**
             * Retrieves the policy dates display string.
             *
             * @memberof policyHeaderBlue
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates 
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
              * Selects a policy type title
              *
              * @memberof policyHeaderBlue
              * @method getPolicyPlanTitle
              */
             $scope.getPolicyPlanTitle = function(policy) {
              var response;
              policy = policy || {};
              if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision) {
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the static gray policy header.
 *
 * @namespace Directives
 * @class policyHeaderGray
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.policyHeaderGray', [])
  .directive('policyHeaderGray', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/policy-header-gray.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          function($scope, $rootScope, $filter) {
            /**
             * Retrieves the policy dates display string.
             *
             * @memberof policyHeaderGray
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
             $scope.getPolicyDates = function(policy) {
               policy = policy || {};
               var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
               var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');

               if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                 endDate = $rootScope.loc.ACTIVE;
               }

               if (policy.active) {
                 return startDate + ' - ' + endDate;
               } else if (!policy.active && new Date(policy.effectiveDate) >= new Date()) {
                 return $rootScope.loc.BP_FUTURE_POLICY;
               } else if (!policy.active) {
                 return $rootScope.loc.INACTIVE_POLICY;
               }
             };

             /**
              * Selects a policy type title
              *
              * @memberof policySelect
              * @method getPolicyPlanTitle
              */
             $scope.getPolicyPlanTitle = function(policy) {
               var response;
               policy = policy || {};
               if (policy.isMedical || policy.isPharmacy){
                 response = $rootScope.loc.HEALTH_PLAN;
               } else if (policy.isDental){
                 response = $rootScope.loc.DENTAL_PLAN;
               } else if (policy.isVision) {
                  response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
               } else {
                 response = $rootScope.loc.HEALTH_PLAN;
               }
               return response;
             };
           }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the policy select element.
 *
 * @namespace Directives
 * @class policySelect
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.policySelect', []).directive('policySelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/policy-select.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          'adobeService',
          '$location',
          function($scope, $rootScope, $filter, adobeService, $location) {
            /**
             * Retrieves the policy dates display string.
             *
             * @memberof policySelect
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate =
                $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate =
                $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth =
                $rootScope.loc[
                  $filter('date')(new Date('December 31, 0000 00:00:00'), 'MMM').toUpperCase()
                ];

              if (new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }
              return startDate + ' - ' + endDate;
            };

            /**
             * Retrieves the policy dates display string for header.
             *
             * @memberof policySelect
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDatesHeader
             */
            $scope.getPolicyDatesHeader = function(policy) {
              var response;
              if (!policy) {
                return policy;
              }

              var startDate =
                $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate =
                $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.expirationDate, ' yyyy');
              var current = new Date();

              if (new Date(policy.expirationDate) >= current && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              }
              if (policy.active) {
                response = startDate + ' - ' + endDate;
              } else if (!policy.active && new Date(policy.effectiveDate) >= current) {
                response = $rootScope.loc.BP_FUTURE_POLICY;
              } else if (!policy.active) {
                response = $rootScope.loc.INACTIVE_POLICY;
              }

              return response;
            };

            /**
             * Toggles the select element.
             *
             * @memberof policySelect
             * @method toggleSelectOpen
             */
            $scope.toggleSelectOpen = function(isOpen) {
              $scope.trackselectDropDownAction(isOpen ? 'close' : 'open');
              if ($rootScope.policies || $rootScope.policies.length > 1) {
                /**
                 * Whether the select element is open.
                 *
                 * @memberof policySelect
                 * @member {Boolean} selectOpen
                 */
                $scope.selectOpen = !$scope.selectOpen;
                $rootScope.blurContent = $scope.selectOpen;
              }
            };

            /**
             * ($rootScope) Allows outside controllers and directives to close the policy select.
             *
             * @memberof policySelect
             * @method closePolicySelect
             */
            $rootScope.closePolicySelect = function() {
              if ($scope.selectOpen) {
                $scope.selectOpen = false;
                $rootScope.blurContent = false;
              }
            };

            /**
             * Returns whether a policy is active.
             *
             * @memberof policySelect
             * @method isActive
             * @param  {Object} policy The policy to check
             * @return {Boolean} Whether the policy is active
             */
            $scope.isActive = function(policy) {
              return new Date(policy.expirationDate) > new Date();
            };

            /**
             * Returns whether a policy is future policy or not.
             *
             * @memberof policySelect
             * @method isActiveFuture
             * @param  {Object} policy The policy to check
             * @return {Boolean} Whether the policy is Future
             */

            $scope.isActiveFuture = function(policy) {
              if (new Date(policy.effectiveDate) > new Date()){
                $rootScope.futurePolicy = true;
                return true;
              }
              
            };

            /**
             * Selects a policy index.
             *
             * @memberof policySelect
             * @method selectPolicy
             * @param  {Number} index The policy index
             */
            $scope.selectPolicyFromDropdown = function(index) {
              $scope.trackselectDropDownAction('select');
              $scope.toggleSelectOpen(true);
              $rootScope.selectPolicy(index);
              $rootScope.refreshNavbar();
            };

            /**
             * Tracks the action of the plan dropdown.
             *
             * @memberof policySelect
             * @method trackselectDropDownAction
             * @param  {String} actionVariable the action to track ('open','close' or 'select')
             *
             */
            $scope.trackselectDropDownAction = function(actionVariable) {
              var action = 'homePlanDropdown:' + actionVariable;
              var section = $location.path().split('/')[1];

              section = section[0].toUpperCase() + section.slice(1);
              adobeService.trackAction(action, section);
            };

            /**
             * Selects a policy type title
             *
             * @memberof policySelect
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              if (!policy) {
                return policy;
              }
              // FIX: why is response set like this?
              var response;
              if (policy.isMedical || policy.isPharmacy) {
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental) {
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision) {
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };
          },
        ],
      };
    },
  ]);
})();

/**
 * Directive for a prescription-only-info.
 *
 * @namespace Directives
 * @class prescriptionOnlyInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.prescriptionOnlyInfo', [])
  .directive('prescriptionOnlyInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/prescription-only-info.html',
        scope: {
          /**
          * The title of the prescription-only-info.
          *
          * @memberof prescriptionOnlyInfo
          * @member {String} title
          */
          data: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'shareService',
          '$window',
          function($scope, $rootScope, shareService, $window) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.language = $rootScope.language;

            document.addEventListener("deviceready", onDeviceReady, false);

            function onDeviceReady() {
              var devicePlatform = device.platform;
              $scope.openPDF = function(url){
                if (devicePlatform !== 'iOS') {
                /**
                * Android can not open PDF using openInBrowser
                * Adding google drive prefix link to open PDF in browser
                */
                $rootScope.$emit('pageLoading');
                DocumentViewer.previewFileFromUrlOrPath(
                      function (success) {
                        $rootScope.$emit('pageLoaded');
                    },
                      function (error) {
                        console.log(error);
                        $rootScope.$emit('pageLoaded');
                    },
                    url, 'benefits.pdf');
                } else {
                  $scope.openInBrowser(url);
                }
              }
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable quick alert modal.
 *
 * @namespace Directives
 * @class quickAlertModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.quickAlertModal', [])
  .directive('quickAlertModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/quick-alert-modal.html',
        scope: false,
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the radio button element.
 *
 * @namespace Directives
 * @class radioButton
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.radioButton', [])
  .directive('radioButton', [
    function() {
      return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/radio-button.html',
        scope: {
          /**
          * The radio buttons defined for usage. Each button consists of a name, label, value, and status.
          *
          * @memberof radioButton
          * @member {Array} buttons
          */
          buttons:'=',

          /**
          * This is the single value representing the radio button group.
          *
          * @memberof radioButton
          * @member {String} buttons
          */
          value:'='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {

            /**
            * This method toggles on non-selected buttons off and turns on the selected button.
            *
            * @memberof radioButton
            * @member {Object} selectedButton  The currently seleted button.
            * @member {Array} buttonCollection The collection of buttons within this group.
            */
            $scope.toggleRadio = function(selectedButton, buttonCollection) {
              disableButtons(buttonCollection);

              selectedButton.status = true;
              $scope.value          = selectedButton.value;
            };

            var disableButtons = function(buttonCollection) {
              for (var index = 0; index < buttonCollection.length; index++) {
                buttonCollection[index].status = false;
              }
            };

            var init = function(buttons) {
              for (var index = 0; index < buttons.length; index++) {
                if (buttons[index].status === true) {
                  $scope.value = buttons[index].value;
                  break;
                }
              }
            };

            init($scope.buttons);
          }
        ]
      };
    }
  ]);
}());

var MAX_AFFILIATIONS = 3;
var FIND_DOCTOR_RESULTS_DETAILS = 'findDoctorResultsDetails';
/**
 * Directive for the result details blocks.
 *
 * @namespace Directives
 * @class resultsDetailsBlocks
 */
(function() {
  'use strict';
  var pageName = 'find-doctor-results-details';
  angular
    .module('blueconnect.mobile.directives.resultsDetailsBlocks', [])
    .directive('findDoctorResultsDetailsNameCard', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-results-details-name-card.html',
          scope: {
            doctorNameCardInfo: '<doctorNameCardObj',
            viewPcpDetailsValue: '<viewPcpDetailsValue',
            recommendedFlowValue: '<recommendedFlowValue',
            dependentPcp: '<dependentPcp'
          },
          controller: [
            '$rootScope',
            '$scope',
            'TransparencyFactory',
            'helpService',
            function($rootScope, $scope, TransparencyFactory, helpService) {
              // Set the locale from the parent directive
              $scope.loc = $scope.$parent.loc;
              $scope.noMatchPlanFound = $rootScope.noMatchPlanFound;
              $scope.recommendedProviderData = ($scope.recommendedFlowValue && TransparencyFactory.getRecommendedPcpData()) ? TransparencyFactory.getRecommendedPcpData() : false;

              $scope.doctorNameCardOpen = true;
              $scope.tierDetails = TransparencyFactory.getResultsDetailsItemLabel();
              $scope.toggleCollapse = function() {
                $scope.doctorNameCardOpen = !$scope.doctorNameCardOpen;
                $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_NAME_CARD, $scope.doctorNameCardOpen);
              };

              $scope.openOutNetworkInformation = function() {
                $rootScope.headerTerm = $scope.loc.INFORMATION;
                $scope.helpInfo = {
                  makeMyPcpQuestion: $scope.loc.PCP_MEDICARE_DETAILS_OUTOFNETWORKPCP,
                  makeMyPcpAnswer: $scope.loc.PCP_MEDICARE_MODAL_OUTOFNETWORKPCP,
                  makePcpInfo: true
                };
                helpService.help($scope.helpInfo);

              };

              $scope.openTierInfoModal = function() {
                $rootScope.headerTerm = $scope.loc.INFORMATION;
                $scope.helpInfo = {
                  tierModalText: $scope.loc.CLEAR_PRICING_TIER_INFORMATION,
                  tierInfo: true
                };
                helpService.help($scope.helpInfo);
              };
            },
          ],
        };
      },
    ])

    .directive('findDoctorResultsDetailsOfficeLocationCard', function() {
      return {
        restrict: 'E',
        scope: {
          locationAndContactCardInfo: '<locationAndContactInfoCardObj',
        },
        templateUrl:
          'partials/find-doctor-results-details-office-location-card.html',
        controller: [
          '$rootScope',
          '$scope',
          'alertService',
          'geoLocationService',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            alertService,
            geoLocationService,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Default params.
            $scope.officeAndLocationCardOpen = true;
            $scope.expandedLocation = false;
            $scope.isLoadingMore = false;

            $scope.toggleItem = function() {
              $scope.officeAndLocationCardOpen = !$scope.officeAndLocationCardOpen;
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.OFFICE_LOCATION, $scope.officeAndLocationCardOpen);
            };

            $scope.locationsArray = $scope.locationAndContactCardInfo
              ? $scope.locationAndContactCardInfo.details
              : [];

            // Display other locations, if any
            $scope.displayOtherLocations = function(locationDetails) {
              $scope.expandedLocation = !$scope.expandedLocation;
            };

            $scope.getDirectionsClicked = function() {
              var location =
                $scope.locationAndContactCardInfo.summary.addr_line1 +
                ' ' +
                $scope.locationAndContactCardInfo.summary.city +
                ', ' +
                $scope.locationAndContactCardInfo.summary.state +
                ' ' +
                $scope.locationAndContactCardInfo.summary.postal_code;

              alertService
                .showAlert(
                  $scope.loc.EXTERNAL_LINK,
                  $scope.loc.EXTERNAL_LINK_WARNING,
                  { title: $scope.loc.CONTINUE, color: 'blue' },
                  { title: $scope.loc.CANCEL }
                )
                .then(function() {
                  $rootScope.blurContent = false;

                  geoLocationService.openMaps(location);
                });
            };

            // Handle go to details of location.
            $scope.viewDetailsOfLocation = function(selectedLocation) {
              $rootScope.detailsFromBackButton = false;
              // Set results details term/item.
              var resultsDetailsTerm = selectedLocation.name || selectedLocation.title;
              var resultsDetailsItem = { location_id: selectedLocation.location_id, provider_id: selectedLocation.provider_id };

              // Populate transparency factory.
              TransparencyFactory
                .setResultsDetailsTerm(resultsDetailsTerm)
                .setResultDetailsItem(resultsDetailsItem);

              // Construct url.
              var viewUrl = '/find-doctor-results-details?location=' + selectedLocation.location_id + '&provider=' + selectedLocation.provider_id;

              // Navigate.
              $rootScope.gotoView(viewUrl);
            };

            $scope.canLoadMore = function() {
              return $scope.locationAndContactCardInfo.other_locations._meta
                .pages.next;
            };

            $scope.loadMore = function() {
              // Construct query params.
              var query = {
                account_id:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                card: 'location',
                distance: TransparencyFactory.getDistance(),
                lang: $rootScope.language,
                location_id: TransparencyFactory.getResultsDetailsItem()
                  .location_id,
                loggedIn: $rootScope.loggedIn,
                network_id:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                page:
                  $scope.locationAndContactCardInfo.other_locations._meta.pages
                    .next,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                provider_id: TransparencyFactory.getResultsDetailsItem()
                  .provider_id,
                resultsTerm: TransparencyFactory.getResultsDetailsTerm(),
                zipCode: TransparencyFactory.getCity() ? TransparencyFactory.getCity().zip : null,
              };

              // Toggle loading more.
              $scope.isLoadingMore = true;

              // Call rest service.
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(function(res) {
                  // Toggle isLoadingMore
                  $scope.isLoadingMore = false;

                  // Select the appropriate data element.
                  var data = res.find(function(c) {
                    return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                  }).values.findDoctorResultsDetails.cardData;

                  // Get new meta.
                  $scope.locationAndContactCardInfo.other_locations._meta =
                    data._meta;

                  // Concat results.
                  $scope.locationAndContactCardInfo.other_locations.other_provider_locations = $scope.locationAndContactCardInfo.other_locations.other_provider_locations.concat(
                    data.other_provider_locations
                  );
                });
            };
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsNetworksCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl: 'partials/find-doctor-results-details-networks-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.networksCardOpen = false;

            var loadNetworks = function() {
              // if no data is saved, retrieve it
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName = $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'networks';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('networkCardLoading');

              // Retrieve the required provider networks data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('networkCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.providerNetworks =
                          component.values.findDoctorResultsDetails.cardData.networks_accepted;
                        TransparencyFactory.setResultsDetailsNetworksAccepted(
                          $scope.providerNetworks
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('networkCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_NETWORKS_ACCEPTED_CARD, !$scope.networksCardOpen);
              // When card is being expanded
              if (!$scope.networksCardOpen) {
                var savedNetworks = TransparencyFactory.getResultsDetailsNetworksAccepted();

                // Check if networks data has already been obtained previously
                if (savedNetworks) {
                  $scope.providerNetworks = savedNetworks;
                } else {
                  // retrieve data.
                  loadNetworks();
                }
              }

              // Toggle card state
              $scope.networksCardOpen = !$scope.networksCardOpen;
            };

            // Show card loading spinner
            $scope.$on('networkCardLoading', function() {
              angular.element('.network-data').hide();
              angular.element('.network-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('networkCardLoaded', function() {
              angular.element('.network-data').show();
              angular.element('.network-card-loading-spinner').hide();
            });

            // kick off load networks.
            loadNetworks();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsSpecialtiesCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-specialties-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.specialtiesCardOpen = false;
            angular.element('.specialties-card-loading-spinner').hide();

            var loadSpecialties = function() {

              // if no data is saved, retrieve it
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName =
                $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'specialties';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('specialtiesCardLoading');

              // Retrieve the required provider specialties data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('specialtiesCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.loggedIn = $rootScope.loggedIn;
                        $scope.providerSpecialties =
                          component.values.findDoctorResultsDetails.cardData.specialties;
                        $scope.providerInfo = {};
                        $scope.providerInfo.providerName =
                          component.values.findDoctorResultsDetails.cardData.providerName;
                        $scope.providerInfo.isPcp =
                          component.values.findDoctorResultsDetails.cardData.isPcp;
                        $scope.providerInfo.isProvider =
                          component.values.findDoctorResultsDetails.cardData.isProvider;
                        TransparencyFactory.setResultsDetailsSpecialties(
                          $scope.providerSpecialties
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('specialtiesCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_SPECIALTIES_CARD, !$scope.specialtiesCardOpen);
              // When card is being expanded
              if (!$scope.specialtiesCardOpen) {
                var savedSpecialties = TransparencyFactory.getResultsDetailsSpecialties();

                // Check if specialties data has already been obtained previously
                if (savedSpecialties) {
                  $scope.providerSpecialties = savedSpecialties;
                } else {
                  // load data.
                  loadSpecialties();
                }
              }

              // Toggle card state
              $scope.specialtiesCardOpen = !$scope.specialtiesCardOpen;


            };

            // Show card loading spinner
            $scope.$on('specialtiesCardLoading', function() {
              angular.element('.specialties-data').hide();
              angular.element('.specialties-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('specialtiesCardLoaded', function() {
              angular.element('.specialties-data').show();
              angular.element('.specialties-card-loading-spinner').hide();
            });

            // Initialize data load.
            loadSpecialties();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsCredentialCard', function() {
      return {
        restrict: 'E',
        scope: {
          providerType: '<providerType',
        },
        templateUrl:
          'partials/find-doctor-results-details-credential-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.credentialCardOpen = false;
            angular.element('.credentials-card-loading-spinner').hide();

            // function to load data
            var loadCredentials = function() {
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName =
                $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'credentials';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('credentialsCardLoading');

              // Retrieve the required provider credentials data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('credentialsCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.providerCredentials =
                          component.values.findDoctorResultsDetails.cardData;
                        TransparencyFactory.setResultsDetailsCredentials(
                          $scope.providerCredentials
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('credentialsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );

            };

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_CREDENTIALS_CARD, !$scope.credentialCardOpen);
              // When card is being expanded
              if (!$scope.credentialCardOpen) {
                var savedCredentials = TransparencyFactory.getResultsDetailsCredentials();

                // Check if credentials data has already been obtained previously
                if (savedCredentials) {
                  $scope.providerCredentials = savedCredentials;
                } else {
                  // if no data is saved, retrieve it
                  loadCredentials();
                }
              }

              // Toggle card state
              $scope.credentialCardOpen = !$scope.credentialCardOpen;
            };

            // Show card loading spinner
            $scope.$on('credentialsCardLoading', function() {
              angular.element('.credentials-data').hide();
              angular.element('.credentials-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('credentialsCardLoaded', function() {
              angular.element('.credentials-data').show();
              angular.element('.credentials-card-loading-spinner').hide();
            });

            // Initial data load.
            loadCredentials();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsAwardsCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl: 'partials/find-doctor-results-details-awards-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.awardsCardOpen = false;
            angular.element('.awards-card-loading-spinner').hide();

            var loadAwards = function() {
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName =
                $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'awards';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('awardsCardLoading');

              // Retrieve the required provider awards data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('awardsCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.providerAwards =
                          component.values.findDoctorResultsDetails.cardData;
                        TransparencyFactory.setResultsDetailsAwards(
                          $scope.providerAwards
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('awardsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            }

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_AWARDS_CARD, !$scope.awardsCardOpen);
              // When card is being expanded
              if (!$scope.awardsCardOpen) {
                var savedAwards = TransparencyFactory.getResultsDetailsAwards();

                // Check if awards data has already been obtained previously
                if (savedAwards) {
                  $scope.providerAwards = savedAwards;
                } else {
                  // if no data is saved, retrieve it
                  loadAwards()
                }
              }

              // Toggle card state
              $scope.awardsCardOpen = !$scope.awardsCardOpen;
            };

            // Show card loading spinner
            $scope.$on('awardsCardLoading', function() {
              angular.element('.awards-data').hide();
              angular.element('.awards-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('awardsCardLoaded', function() {
              angular.element('.awards-data').show();
              angular.element('.awards-card-loading-spinner').hide();
            });

            loadAwards();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsAffiliationCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-affiliation-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Default variables.
            $scope.loc = $scope.$parent.loc;
            $scope.affiliationsCardOpen = false;
            $scope.showOtherAffiliations = false;
            $scope.loadMoreAffiliationsMessage =
              $scope.loc.RESULTS_DETAILS_MORE_AFFILIATES;
            var query = $location.search();

            var loadAffiliations = function() {

              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'affiliations',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('affiliationsCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('affiliationsCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope affiliations.
                    $scope.affiliations =
                      resultDetails.values.findDoctorResultsDetails.cardData.topAffiliations;
                    $scope.otherAffiliations =
                      resultDetails.values.findDoctorResultsDetails.cardData.otherAffiliations;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsAffiliations(
                      $scope.affiliations
                    );
                  },
                  function(error, status) {
                    $scope.$emit('affiliationsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.affiliationsCardOpen = !$scope.affiliationsCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_AFFILIATIONS_CARD, $scope.affiliationsCardOpen);

              // Load affiliations from transparency factory.
              if (TransparencyFactory.hasResultsDetailsAffiliations()) {
                $scope.affiliations = TransparencyFactory.getResultsDetailsAffiliations();
              } else {
                // Load data.
                loadAffiliations();
              }
            };


            $scope.toggleOtherAffiliations = function() {
              // Toggle show other affiliations.
              $scope.showOtherAffiliations = !$scope.showOtherAffiliations;

              if ($scope.showOtherAffiliations) {
                // Set message.
                $scope.loadMoreAffiliationsMessage =
                  $scope.loc.RESULTS_DETAILS_SEE_LESS;

                // Concat array.
                $scope.affiliations = $scope.affiliations.concat(
                  $scope.otherAffiliations
                );
              } else {
                // Set message.
                $scope.loadMoreAffiliationsMessage =
                  $scope.loc.RESULTS_DETAILS_MORE_AFFILIATES;

                // Slice array.
                $scope.affiliations = $scope.affiliations.slice(
                  0,
                  MAX_AFFILIATIONS
                );
              }
            };

            $scope.canLoadMore = true;

            // Handle go to details of location.
            $scope.viewDetailsOfAffiliate = function(affiliate) {
              $rootScope.detailsFromBackButton = false;
              // Set results details term/item.
              var resultsDetailsTerm = affiliate.name;
              var resultsDetailsItem = { location_id: affiliate.location_id, provider_id: affiliate.provider_id };

              // Populate transparency factory.
              TransparencyFactory
                .setResultsDetailsTerm(resultsDetailsTerm)
                .setResultDetailsItem(resultsDetailsItem);

              // Construct url.
              var viewUrl = '/find-doctor-results-details?location=' + affiliate.location_id + '&provider=' + affiliate.provider_id;

              // Navigate.
              $rootScope.gotoView(viewUrl);
            };


            // Hide card loading spinner.
            $scope.$on('affiliationsCardLoaded', function() {
              angular.element('.affiliation-data').show();
              angular.element('.affiliation-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('affiliationsCardLoading', function() {
              angular.element('.affiliation-data').hide();
              angular.element('.affiliation-card-loading-spinner').show();
            });

            loadAffiliations();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsLanguagesCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl: 'partials/find-doctor-results-details-languages-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.languagesCardOpen = false;
            var query = $location.search();

            var loadLanguages = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'languages',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('languagesCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('languagesCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope languages.
                    $scope.languages =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsLanguages(
                      $scope.languages
                    );
                  },
                  function(error, status) {
                    $scope.$emit('languagesCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.languagesCardOpen = !$scope.languagesCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_LANGUAGES_CARD, $scope.languagesCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsLanguages()) {
                $scope.languages = TransparencyFactory.getResultsDetailsLanguages();
              } else {
                loadLanguages();
              }
            };

            // Hide card loading spinner.
            $scope.$on('languagesCardLoaded', function() {
              angular.element('.language-data').show();
              angular.element('.language-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('languagesCardLoading', function() {
              angular.element('.language-data').hide();
              angular.element('.language-card-loading-spinner').show();
            });

            loadLanguages();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsLimitationsCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-limitations-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.limitationsCardOpen = false;
            var query = $location.search();

            var loadLimitations = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'limitations',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('limitationsCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('limitationsCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope limitations.
                    $scope.limitations =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    $scope.limitations = ($scope.limitations.length > 0 && $scope.limitations[0].type_code === 'toa') ? $scope.limitations.reverse() : $scope.limitations;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsLimitations(
                      $scope.limitations
                    );
                  },
                  function(error, status) {
                    $scope.$emit('limitationsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.limitationsCardOpen = !$scope.limitationsCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_LIMITATIONS_CARD, $scope.limitationsCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsLimitations()) {
                $scope.limitations = TransparencyFactory.getResultsDetailsLimitations();
              } else {
                loadLimitations();
              }
            };

            // Hide card loading spinner.
            $scope.$on('limitationsCardLoaded', function() {
              angular.element('.limitation-data').show();
              angular.element('.limitation-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('limitationsCardLoading', function() {
              angular.element('.limitation-data').hide();
              angular.element('.limitation-card-loading-spinner').show();
            });

            $scope.limits = { min: 0, max: 99 };

            loadLimitations();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsLocationAmenitiesCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-location-amenities-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.amenitiesCardOpen = false;
            var query = $location.search();

            var loadLocationAmenties = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'amenities',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('amenitiesCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('amenitiesCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope amenities.
                    $scope.amenities =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsAmenities(
                      $scope.amenities
                    );
                  },
                  function(error, status) {
                    $scope.$emit('amenitiesCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.amenitiesCardOpen = !$scope.amenitiesCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_AMENITIESS_CARD, $scope.amenitiesCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsAmenities()) {
                $scope.amenities = TransparencyFactory.getResultsDetailsAmenities();
              } else {
                loadLocationAmenties();
              }
            };

            // Hide card loading spinner.
            $scope.$on('amenitiesCardLoaded', function() {
              angular.element('.amenity-data').show();
              angular.element('.amenity-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('amenitiesCardLoading', function() {
              angular.element('.amenity-data').hide();
              angular.element('.amenity-card-loading-spinner').show();
            });

            loadLocationAmenties();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsMoreProviderDetailsCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-more-provider-details-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.detailsCardOpen = false;
            var query = $location.search();

            var loadProviderDetails = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'identifiers',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('detailsCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('detailsCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope identifiers.
                    $scope.identifiers =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsIdentifiers(
                      $scope.identifiers
                    );
                  },
                  function(error, status) {
                    $scope.$emit('detailsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.detailsCardOpen = !$scope.detailsCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_MORE_INFO_CARD, $scope.detailsCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsIdentifiers()) {
                $scope.identifiers = TransparencyFactory.getResultsDetailsIdentifiers();
              } else {
                loadProviderDetails();
              }
            };

            // Hide card loading spinner.
            $scope.$on('detailsCardLoaded', function() {
              angular.element('.details-data').show();
              angular.element('.details-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('detailsCardLoading', function() {
              angular.element('.details-data').hide();
              angular.element('.details-card-loading-spinner').show();
            });

            loadProviderDetails();
          },
        ],
      };
    });
})();

/**
 * Directive for the removal of URL unsafe characters from an input.
 *
 * @namespace Directives
 * @class safeInput
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.safeInput', [])
  .directive('safeInput', function(){
  	return {
      restrict: 'A',
  		require: 'ngModel',
  		link: function(scope, element, attrs, modelCtrl) {
  			modelCtrl.$parsers.push(function (inputValue) {
  				if(inputValue){
  					if(!inputValue.length) {
  						return inputValue;
  					}

  					var transformedInput = inputValue.replace(/[^a-zA-Z0-9_-\s]/g, '');
  					if (transformedInput!=inputValue) {
  						modelCtrl.$setViewValue(transformedInput);
  						modelCtrl.$render();
  					}

  					return transformedInput;
  				}
  				return inputValue;
  			});
  		}
  	};
  });

}());

/**
 * Directive for the id card scroll div end.
 *
 * @namespace Directives
 * @class idCardScrollEnd
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.scrollEnd', [])
  .directive('scrollEnd', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/scroll-end.html',
      };
    }
  ]);
}());

/**
 * Directive for the id card scroll div start.
 *
 * @namespace Directives
 * @class idCardScrollStart
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.scrollStart', [])
  .directive('scrollStart', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/scroll-start.html',
      };
    }
  ]);
}());

/**
 * Directive for a standalone search input.
 *
 * @namespace Directives
 * @class searchInput
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.searchInput', [])
  .directive('searchInput', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/search-input.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          function($scope, $rootScope, $location) {
            $scope.loc = $rootScope.loc;

            /**
            * The query string to search by.
            *
            * @memberof searchInput
            * @member {String} query
            */
            $scope.query = $location.search().q || '';

            /**
             * Focuses on the search input.
             *
             * @memberof searchInput
             * @method focusOnSearchInput
             */
            $scope.focusOnSearchInput = function() {
              angular.element('.search-input input').focus();
            };

            /**
             * Validates the query string.
             *
             * @memberof searchInput
             * @method queryIsValid
             */
            $scope.queryIsValid = function() {
              if($scope.query.length < 3) {
                return false;
              }
              if($scope.query === $location.search().q) {
                return false;
              }

              return true;
            };

            /**
             * Performs the search.
             *
             * @memberof searchInput
             * @method search
             */
            $scope.search = function() {
              $scope.hideKeyboard();
              if(!$scope.queryIsValid()) {
                return;
              }
              $location.url($location.path() + '?q=' + $scope.query);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the application settings page.
 *
 * @namespace Directives
 * @class settings
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.settingsList', [])
    .directive('settingsList', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/settings-list.html',
        scope: {
          /**
           * The settings information to display.
           *
           * @memberof settings
           * @member {Object} data
           */
          settingsData: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$route',
          '$window',
          '$q',
          'cordovaService',
          'restService',
          'languageService',
          'loginService',
          'touchIdService',
          'adobeService',
          'analyticConstants',
          function(
            $scope,
            $rootScope,
            $route,
            $window,
            $q,
            cordovaService,
            restService,
            languageService,
            loginService,
            touchIdService,
            adobeService,
            analyticConstants
          ) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.language = $rootScope.language;

            $scope.loginSettings = {
              touchIdAvailable: null,
              biometricEnabled: null,
              faceId: null
            };
            $scope.settingData = $scope.settingsData; //I could not use $scope.settingsData in template because it was not being updated.

            touchIdService
              .isAvailable()
              .then(function(result) {
                $scope.loginSettings.touchIdAvailable = true;
                $scope.loginSettings.faceId = result === 'face';
                return loginService.getBiometricEnabled();
              })
              .then(function(bioBoolean) {
                $scope.loginSettings.biometricEnabled = bioBoolean;

                // Set display text.
                updateTouchIdMessage($scope.loginSettings.biometricEnabled);
              })
              .catch(function() {
                $scope.loginSettings.touchIdAvailable = false;
              });

            for (var setting in $scope.settingsData) {
              var currentSetting = $scope.settingsData[setting].settings;
              for (var key in currentSetting) {
                // eslint-disable-next-line no-undefined
                if ($rootScope.appSettings[setting] !== undefined) {
                  if ($rootScope.appSettings[setting].hasOwnProperty(key)) {
                    $scope.settingsData[setting].settings[key].value =
                      $rootScope.appSettings[setting][key];
                  }
                }
              }
            }



            /* setting device type for setting list if statement */
            var deviceResult = cordovaService.checkDeviceType();
            $scope.iphone = deviceResult.ios;
            $scope.android = deviceResult.android;

            // Set display text based on current scope.
            function updateTouchIdMessage(useTouchId) {
              if ($scope.android === true) {
                $scope.touchIdDisplayText = useTouchId === false ?
                $rootScope.loc.ENABLE_FINGERPRINT_AUTH:
                $rootScope.loc.DISABLE_FINGERPRINT_AUTH;
              } else {
                if ($scope.loginSettings.faceId === true) {
                  $scope.touchIdDisplayText = useTouchId === false ?
                  $rootScope.loc.ENABLE_FACE_ID:
                  $rootScope.loc.DISABLE_FACE_ID;
                } else {
                  $scope.touchIdDisplayText = useTouchId === false ?
                  $rootScope.loc.ENABLE_TOUCH_ID:
                  $rootScope.loc.DISABLE_TOUCH_ID;
                }
              }
            }

            /**
             * Allows the user to select the language used by the application.
             *
             * @memberof settings
             * @method toggleLanguage
             * @param  {String} languageToBe The selected language to make active on the screen by user.
             */
            $scope.toggleLanguage = function(languageToBe) {
              $rootScope.setLanguage(languageToBe);
              $scope.language = languageToBe;

              languageService
                .getLocale(languageToBe)
                .then(function(locale) {
                  $rootScope.loc = locale;
                  $scope.loc = $rootScope.loc;
                  return $scope.getPolicies($rootScope.policyIndex);
                })
                .then(function(policies) {
                  $rootScope.policies = policies;
                  $rootScope.refreshNavbar();
                  $route.reload();
                  return $scope.loc;
                });
            };

            /**
             * Retrieves the member's policies from the data service.
             *
             * @memberof settings
             * @method getPolicies
             */
            $scope.getPolicies = function(policyToSelect) {
              var deferred = $q.defer();
              restService.getData('policies', $rootScope.language || 'en').then(function(policies) {
                $rootScope.policies = policies;
                $rootScope.selectPolicy(policyToSelect);
                deferred.resolve(policies);
              });

              return deferred.promise;
            };

            /**
             * opens the external link to reset the password.
             *
             * @memberof settings
             * @method gotoResetPassword
             */

            $scope.gotoResetPassword = function() {
              return $rootScope.openInBrowser($scope.settingsData.login.settings.link);
            };

            /**
             * Submits the settings form and saves data to local database and rootscope.
             *
             * @memberof settings
             * @method saveSettings
             * @param  {Object} formData The settings data to be saved on the device.
             */
            $scope.saveSettings = function(formData) {
              for (var category in formData) {
                //Category is login, pushNotifications, etc..
                var settings = { data: [] };

                var currentSetting = formData[category].settings; //currentSetting is the full key/value pairs for a category
                for (var key in currentSetting) {
                  //key is the individual fields in a specific category
                  var setting = { key: key, value: formData[category].settings[key].value };
                  settings.data.push(setting);

                  $rootScope.appSettings[category][key] = setting.value;
                }

                cordovaService.updateAppSettings(category, settings);
              }

              $window.history.back();
            };

            /**
             * Toggles the touch ID value on/off. It sets the value and switches the button text.
             *
             * @memberof settings
             * @method onToggleTouchId
             * @param  {Boolean} useTouchId
             */
            $scope.onToggleTouchId = function() {
              return (
                $scope.loginSettings.biometricEnabled === false ?
                touchIdService
                  .isAvailable()
                  .then(function(biometric) {
                    console.log(biometric);
                    return touchIdService.verifyFingerprint('Sign into your Member Profile');
                  }) :
                  $q.resolve(false)
              )
              .then(function() {
                return loginService.setBiometricEnabled(!$scope.loginSettings.biometricEnabled);
              })
              .then(function(bioBoolean) {
                console.log(bioBoolean);
                adobeService.trackAction('settings:update:biometrics:' + bioBoolean ? 'on' : 'off', analyticConstants.SETTINGS_SECTION);
                return loginService.getBiometricEnabled();
              })
              .then(function(bioBooleanFromAppSettings) {
                $scope.loginSettings.biometricEnabled = bioBooleanFromAppSettings;
                // Update message.
                updateTouchIdMessage($scope.loginSettings.biometricEnabled);
              })
              .catch(function(setBioBooleanError) {
                console.warn('Error setting biometric boolean', setBioBooleanError);
                loginService
                  .getBiometricEnabled()
                  .then(function(bioBooleanToRevert) {
                    $scope.loginSettings.biometricEnabled = bioBooleanToRevert;
                  });
              });
            };
          },
        ],
      };
    },
  ]);
})();

/**
 * Directive for the reusable share modal.
 *
 * @namespace Directives
 * @class shareModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.shareModal', [])
  .directive('shareModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/share-modal.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the billingPreferencesUpdate in the payment flow.
 *
 * @namespace Directives
 * @class billingPreferencesUpdate
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.stopAutopay', [])
        .directive('stopAutopay', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/stop-autopay.html',
                    scope: {
                        /**
                         * Display information for the billingPreferencesUpdate.
                         *
                         * @memberof billingPreferencesUpdate
                         * @member {Object} billingPreferencesUpdateData
                         */
                        stopAutopayData: '=',
                        policy: '=',
                        billingToken: '<token'
                    },
                    controller: [
                        'config',
                        '$http',
                        '$rootScope',
                        '$scope',
                        function (config, $http, $rootScope, $scope) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;
                            $scope.stopAutopayError = false;
                            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

                            // Defaults to EMAIL to encourage email as a selection
                            $scope.billingMethodSelected = 'EMAIL';

                            // Building object to work with existing template
                            $scope.userData = {
                                preferences: $scope.stopAutopayData
                            };
                            $scope.checkboxValue = false;

                            $scope.acceptPaperlessFn = function () {
                                $scope.checkboxValue = true;
                            };

                            $scope.stopAutopay = function(formObj) {
                                if(formObj.memberEmail) {
                                    formObj.memberEmail.$setDirty();
                                }
                                if(formObj.paperlessAgreement) {
                                    formObj.paperlessAgreement.$setDirty();
                                }
                                if($scope.billingMethodSelected === 'POSTAL') {
                                    formObj.streetAddress.$setDirty();
                                    formObj.city.$setDirty();
                                    formObj.state.$setDirty();
                                    formObj.zipcode.$setDirty();
                                }
                                if(formObj.$invalid) {
                                    return;
                                }

                                // TODO this needs to be removed when services are updated Dec 28th, 2017
                                if($scope.userData.preferences.payment.bankDraftDetails) {
                                    $scope.userData.preferences.payment.bankDraftDetails.bankName = "BANK OF AMERICA";
                                }
                                $rootScope.$emit('pageLoading');
                                $http.post(config.apiUrl + '/setBillingPreferences', {
                                    account: {
                                        token: $scope.billingToken
                                      },
                                      preferences: {
                                        mailingAddress: $scope.userData.preferences.mailingAddress,
                                        emailAddress: $scope.userData.preferences.emailAddress,
                                        payment: $scope.userData.preferences.payment,
                                        updatedPreferences: {
                                          paymentMethod: $scope.userData.preferences.paymentMethod,
                                          billingMethod: ($scope.stopAutopayForm.billingMethodSelected && $scope.stopAutopayForm.billingMethodSelected.$modelValue) || $scope.stopAutopayData.billingMethod,
                                          paymentFrequency: 'DIRECTBILL'
                                        },
                                        priorBillingNotifPrefCode: $scope.userData.preferences.priorBillingNotifPrefCode
                                      },
                                      TIPData: $rootScope.getTIPData($scope.userData.preferences.paymentMethod.toLowerCase() === 'creditcard' ? 'TurnOffRcrCreditCard' : 'TurnOffRcrBankDraft', '/setBillingPreferences')
                                }).then(function() {
                                    $rootScope.$emit('pageLoaded');
                                    $rootScope.gotoView('/billing-preferences?success=true');
                                })
                                .catch(function() {
                                    $rootScope.$emit('pageLoaded');
                                    $scope.stopAutopayError = true;
                                });
                            };
                        }
                    ]
                };
            }
        ]);
}());

/**
 * Directive for the tab select element.
 *
 * @namespace Directives
 * @class tabSelect
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.tabSelect', [])
  .directive('tabSelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/tab-select.html',
        scope: {
          /**
          * Display information for a tab select element.
          *
          * @memberof tabSelect
          * @member {Object} inboxDetails
          */
          tabs: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$httpParamSerializer',
          function($scope, $rootScope, $location, $httpParamSerializer) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Navigates to a view when a tab is clicked.
             *
             * @memberof tabSelect
             * @method tabToView
             */
            $scope.tabToView = function(url) {
              $rootScope.gotoView(url + '?' + $httpParamSerializer($location.search()));
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable terms modal.
 *
 * @namespace Directives
 * @class termsModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.termsModal', [])
    .directive('termsModal', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'help/terms-modal.html',
          scope: false,
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.trackAction = $rootScope.trackAction;


              /**
               * goBack button for terms modal
               *
               * @memberof termsModal
               * @method goBack
               */
              $scope.goBack = function() {
                angular.element('.terms-modal').modal('hide');
                $rootScope.blurContent = false;

                angular.element('.navbar').toggleClass('blur', false);
              };

            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the toggle switch element.
 *
 * @namespace Directives
 * @class toggleSwitch
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.toggleSwitch', [])
  .directive('toggleSwitch', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/toggle-switch.html',
        scope: {
          /**
          * Boolean to tie to the toggle.
          *
          * @memberof tabSelect
          * @member {Boolean} model
          */
          model: '=',
          /**
          * Function to callback with the model value.
          *
          * @member {Function} onClick
          */
          onClick: '=',
          controlled: '=?'
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope) {
            /**
             * Toggles the model between true and false.
             *
             * @memberof tabSelect
             * @method toggleModel
             */
            $scope.toggleModel = function() {
              if (!$scope.controlled) {
                $scope.model = !$scope.model;
              }

              // Event.
              if ($scope.onClick) {
                $scope.onClick($scope.model);
              };
            };

            /**
             * Toggles the model on.
             *
             * @memberof tabSelect
             * @method modelOn
             */
            $scope.modelOn = function() {
              if (!$scope.model) {
                $scope.toggleModel();
              }
            };

            /**
             * Toggles the model off.
             *
             * @memberof tabSelect
             * @method modelOff
             */
            $scope.modelOff = function() {
              if ($scope.model) {
                $scope.toggleModel();
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the total remaining balance when there's a
 * payment processing and the member isn't overdue
 *
 * @namespace Directives
 * @class totalRemainingBalance
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.totalRemainingBalance', [])
    .directive('totalRemainingBalance', [
      function () {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/total-remaining-balance.html',
          controller: [
            '$rootScope',
            '$scope',
            function ($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the trackerBillingSummary in the payment flow.
 *
 * @namespace Directives
 * @class trackerBillingSummary
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.trackerBillingSummary', [])
        .directive('trackerBillingSummary', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/tracker-billing-summary.html',
                    scope: {
                        /**
                         * Display information for the trackerBillingSummary in the payment flow.
                         *
                         * @memberof trackerBillingSummary
                         * @member {Object} trackerBillingData
                         */
                        trackerBillingData: '='
                    },
                    controller: [
                        '$rootScope',
                        '$scope',
                        function ($rootScope, $scope) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;

                          $scope.padAmt = function(amt) {
                            var amountDue = amt.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
                            return amountDue;
                          }

                            /**
                             * Toggle
                             *
                             */

                            $scope.toggleItem = function () {
                                if ($scope.expandedDiv) {
                                    $scope.expandedDiv = true;
                                }
                                $scope.expandedDiv = !$scope.expandedDiv;
                            };

                        }
                    ]
                };
            }
        ]);
}());

/**
 * Directive for a vertical bar graph.
 *
 * @namespace Directives
 * @class verticalBarGraph
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.verticalBarGraph', [])
  .directive('verticalBarGraph', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/vertical-bar-graph.html',
        scope: {
          /**
          * Values to display in the graph.
          *
          * @memberof verticalBarGraph
          * @member {Object} graphValues
          */
          graphValues: '=',

          /**
          * Optional height.
          *
          * @memberof verticalBarGraph
          * @member {Object} height
          */
          graphHeight: '@'
        },
        controller: [
          '$scope',
          function($scope) {
            $scope.graphHeight = $scope.graphHeight || 6;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a vision-only-info.
 *
 * @namespace Directives
 * @class visionOnlyInfo
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.visionOnlyInfo', [])
    .directive('visionOnlyInfo', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/vision-only-info.html',
          scope: {
            /**
            * The title of the vision-only-info.
            *
            * @memberof visionOnlyInfo
            * @member {String} title
            */
           visionBenefitsData: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'shareService',
            'adobeService',
            function($scope, $rootScope, shareService, adobeService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $scope.trackAction = $rootScope.trackAction;
              $scope.footnotesBottom = $scope.visionBenefitsData[3].showFullText;
              $scope.visionPlan = $rootScope.selectedPolicy.visionPlan;
  
              document.addEventListener("deviceready", onDeviceReady, false);
  
              $scope.toggleItem = function() {
                if ($scope.expandedDiv){
                  $scope.expandedDiv = true;
                  $scope.footnotesBottom = $scope.visionBenefitsData[3].showFullText;
                } else {
                  $scope.footnotesBottom = $scope.visionBenefitsData[3].hideFullText;
                }
  
                $scope.expandedDiv = !$scope.expandedDiv;
              };
  
              function onDeviceReady() {
                var devicePlatform = device.platform;
                $scope.openPDF = function(url){
                  if (devicePlatform !== 'iOS') {
                    /**
                    * Android can not open PDF using openInBrowser
                    * Adding google drive prefix link to open PDF in browser
                    */
                    $rootScope.$emit('pageLoading');
                    DocumentViewer.previewFileFromUrlOrPath(
                          function (success) {
                            $rootScope.$emit('pageLoaded');
                        },
                          function (error) {
                            console.log(error);
                            $rootScope.$emit('pageLoaded');
                        },
                        url, 'benefits.pdf');
                    } else {
                      $scope.openInBrowser(url);
                    }
                };
              }
            }
          ]
        };
      }
    ]);
  }());
(function () {
  angular
      .module('blueconnect.mobile.directives.billingInvoiceHistoryFilterRibbon', [])
      .directive('billingInvoiceHistoryFilterRibbon', function () {
        return {
          restrict: 'E',
          scope: {
            resultsCount: '='
          },
          templateUrl: 'partials/billing-invoice-history/billing-invoice-history-filter-ribbon.html',
          controller: ['$rootScope', '$scope', 'BillingInvoiceHistoryFactory', function ($rootScope, $scope, BillingInvoiceHistoryFactory) {
            $scope.loc = $rootScope.loc;
            $scope.isMedicareSSA = BillingInvoiceHistoryFactory.getMedicareSSAValue();

            $scope.resetFilter = function(){
              BillingInvoiceHistoryFactory.resetFilter();
              $rootScope.gotoView('billing-invoice-history');
            };

            var transType = BillingInvoiceHistoryFactory.getHistoryType();
            switch (transType) {
              case 'P':
                $scope.filterTransType = $rootScope.loc.BP_PAYMENTS;
                break;
              case 'I':
                $scope.filterTransType = $rootScope.loc.BP_INVOICES;
                break;
              default:
                $scope.filterTransType = $rootScope.loc.BP_PAYMENT_INVOICES;
            }

            var currentSpan = BillingInvoiceHistoryFactory.getTimeSpan().toString();

            switch (currentSpan) {
              case '3':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_3_MONTHS;
                break;
              case '6':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_6_MONTHS;
                break;
              case '12':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_12_MONTHS;
                break;
              case '24':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_24_MONTHS;
                break;
              case '0':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_YEARS_PLAN;
                break;
              default:
                $scope.resultsCountText = (moment(BillingInvoiceHistoryFactory.getStartDate()).format('MMMM YYYY') + ' - ' + moment(BillingInvoiceHistoryFactory.getEndDate()).format('MMMM YYYY'));
            }

          }]
        };
      })
})();
(function () {
  angular.module('blueconnect.mobile.directives.downloadPDFButton', [])
    .directive('downloadPdfButton', function () {
      return {
        scope: {
          invoice: '<'
        },
        controller: ['BillingInvoiceHistoryFactory', 'config', '$http', '$rootScope', '$scope',
          function (BillingInvoiceHistoryFactory, config, $http, $rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.failedToLoad = false;
            $scope.loading = false;
            $scope.pdfReady = false;
            $scope.downloadAll = $scope.invoice.length ? true : false;

            $scope.downloadInvoice = function(invoice) {
              var serviceName = null;
              var startDate = null;
              var endDate = null;
              var body = null;
              var transactionCode = null;
              $scope.loading = true;
              $scope.pdfReady = false;
              $scope.failedToLoad = false;
              
              if ($scope.downloadAll) {
                serviceName = 'getBillingHistoryAsPdf';
                startDate = BillingInvoiceHistoryFactory.serviceFormattedSearchFromDate();
                endDate = BillingInvoiceHistoryFactory.serviceFormattedSearchToDate();
                transactionCode = 'ViewInvcPDF';
              } else {
                serviceName = 'getInvoice';
                startDate = invoice.invoiceStartDate;
                endDate = invoice.invoiceEndDate;
                transactionCode = 'ViewInvoice';
              }
              body = {
                token: BillingInvoiceHistoryFactory.getAccountToken(),
                startDate: startDate,
                endDate: endDate,
                TIPData: $rootScope.getTIPData(transactionCode, '/' + serviceName)
              };

              $http.post(config.apiUrl + '/' + serviceName, body)
                .then(function (response) {
                  $scope.loading = false;
                  if (response.status === 200 && response.data) {
                    $scope.pdfFile = 'data:application/pdf;base64,' + response.data;
                    $scope.pdfReady = true;
                  }
                })
                .catch(function (err) {
                  $scope.loading = false;
                  $scope.failedToLoad = true;
                  console.log(err);
                });
            };
            $scope.viewPdf = function () {
              var device = window.device || null;
              var devicePlatform = navigator.userAgent;
              if (device) {
                devicePlatform = device.platform;
              }
              switch(devicePlatform){
                case 'Android':
                case 'amazon-fireos':
                  /**
                  * Android devices cannot open up PDFs in a sub web view (inAppBrowser) so the PDF needs to be downloaded and then opened with whatever
                  * native PDF viewer is installed on the app.
                  */
                  $rootScope.$emit('pageLoading');
                  DocumentViewer.saveAndPreviewBase64File(
                    function (success) {
                      $rootScope.$emit('pageLoaded');
                      $rootScope.pausedForReadPDF = true;
                    },
                      function (error) {
                        console.log(error);
                        $rootScope.$emit('pageLoaded');
                    },
                    $scope.pdfFile.replace('data:application/pdf;base64,', ''), 'application/pdf', cordova.file.cacheDirectory, 'invoice-preview.pdf');
                break;

              default:
                /**
                * IOS can open PDF using openInBrowser
                */
                $scope.openInBrowser($scope.pdfFile);

                break;
              }
            };

          }
        ],
        templateUrl: 'partials/billing-invoice-history/download-pdf-button.html'
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.invoiceHistoryCard', [])
    .directive('invoiceHistoryCard', function() {
      return {
        restrict: 'E',
        scope: {
          invoice: '<'
        },
        templateUrl: 'partials/billing-invoice-history/invoice-history-card.html',
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc || {};
        }]
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.billingInvoiceHistoryNoInvoices', [])
    .directive('noInvoicesMessage', function() {
      return {
        scope: true,
        controller: ['$rootScope', '$routeParams', '$scope', function($rootScope, $routeParams, $scope) {
          $scope.loc = $rootScope.loc || {};
          $scope.searchContext = $routeParams.search;
        }],
        templateUrl: 'partials/billing-invoice-history/no-invoices-message.html'
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentError', [])
    .directive('detailsPagePaymentError', function() {
      return {
        restrict: 'E',
        template: '<p><span ng-bind="::loc.BP_PAYMENT_DETAILS_NOT_ACCEPTED"></span></p>',
        controller: ['$rootScope', '$scope', function($rootScope, $scope){
          $scope.loc = $rootScope.loc;
        }]
      };
    })
    .directive('reviewPagePaymentError', function() {
      return {
        restrict: 'E',
        template: [
          '<unsuccessful-header class="mb4"></unsuccessful-header>',
          '<p ng-bind="::loc.BP_TECHNICAL_DIFFICULTIES"></p>',
          '<p ng-bind="::loc.BP_TECHNICAL_DIFFICULTIES_LINE2"></p>'
        ].join(''),
        controller: ['$rootScope', '$scope', function($rootScope, $scope){
          $scope.loc = $rootScope.loc;
        }]
      };
    })
    .directive('confirmationPagePaymentError', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/confirmation-page-payment-error.html',
        controller: [ '$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory){
          $scope.loc = $rootScope.loc;
          $scope.paymentAmount = PaymentFlowFactory.getUserSetData().paymentAmount;
          $scope.paymentDate = moment().format('MMMM Do YYYY');
          $scope.gotoView = $rootScope.gotoView;
        }]
      };
    })
    .directive('mobileErrorMessage', function() {
      return {
        restrict: 'E',
        transclude: true,
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
        }],
        template: '<div ng-transclude></div>'
      };
    });
})();
(function () {
  'use strict';

  angular.module('blueconnect.mobile.config', []).constant('config', {
    env: 'LOCAL',
    merchantId: 'bcbsncdev',
    liveagent: {
      publicInit: [],
      publicWindowHeight: 610,
      publicWindowWidth: 650,

      authInit: [
        'https://d.la1-c1cs-ord.salesforceliveagent.com/chat',
        '572440000000GHz',
        '00D2C000000CmhL',
      ],

      authWindowHeight: 610,
      authWindowWidth: 650,

      authButtons: {
        shp: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '57344000000PTtd',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '57344000000PTtd',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '57344000000PTtY',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '57344000000PTtY',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
        iu65: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '573440000000ImI',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '573440000000ImI',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '573440000000ImD',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '573440000000ImD',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
        signature: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '573440000000ImS',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '573440000000ImS',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '573440000000ImN',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '573440000000ImN',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
        medicare: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '5732S000000k9dO',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '5732S000000k9dO',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '5732S000000k9dN',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '5732S000000k9dN',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
      },
    },
    apiUrl: 'https://localhost:8800/api',
    apiVersion: '0.1.6',
    capraApiUrl: 'https://localhost:8801/api',
    capraVersion: '0.1.1',
    loginUrl: 'https://mobileps.bcbsnc.com/mga/sps/oauth/oauth20/token',
    typeaheadUrl: 'https://localhost:8802/',
    bcbsWebUrl: 'https://wwwps.bcbsnc.com',
    bcbsWebMobileUrl: 'https://mobileps.bcbsnc.com',
    bcbsAccountUrl: 'https://accountbs.bcbsnc.com',
    key: 'a3VuZyBmdSBhY3Rpb24gZ3JpcA==',
    heurl:
      'https://mobileps.bcbsnc.com/FIM/sps/BCBSNCNWFIDP/saml20/logininitial?RequestBinding=HTTPPost&NameIdFormat=Email&PartnerId=https://pi.healthequity.com/HEAppSaml2.aspx',
    credentials: {
      clientId:
        'U2FsdGVkX1/BzlSXUdiA3vkRFSfJ/46aYwRknc6P2A0Ucd2mGGGybKcEq5AQtPnM',
      clientSecret:
        'U2FsdGVkX18wQqUrxye346kY0uvquTXK8DcKgyrKnbQWUaDZOTvKyqhKWRSBjZVU',
    },
  });
})();

(function() {
    function Ba(a) {
        switch (a) {
            case "'":
                return "\x26#39;";
            case "\x26":
                return "\x26amp;";
            case "\x3c":
                return "\x26lt;";
            case "\x3e":
                return "\x26gt;";
            case '"':
                return "\x26quot;";
            case "\u00a9":
                return "\x26copy;";
            case "\u2028":
                return "\x3cbr\x3e";
            case "\u2029":
                return "\x3cp\x3e";
            default:
                return a
        }
    }

    function l() {}

    function t() {}

    function la(a) {
        l.prototype.init.call(this, a, l.TYPE.STANDARD)
    }

    function ma(a) {
        k[a] || (k[a] = new la(a));
        return k[a]
    }

    function S(a, b) {
        l.prototype.init.call(this, b + "_" + a, l.TYPE.AGENT)
    }

    function L(a,
        b) {
        var c = b + "_" + a;
        if (!k[c]) {
            var e = new S(a, b),
                d;
            k[a] && (d = k[a], d.endpoint && e.setEndpoint(d.endpoint), d.prechat && e.setPrechat(d.prechat), d.language && e.setLanguage(d.language), e.setOnlineState(d.onlineState));
            k[c] = e
        }
        return k[c]
    }

    function T(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function U(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function n(a) {
        l.prototype.init.call(this, a, l.TYPE.INVITE);
        this.active = !1;
        this.filterLogic = null;
        this.rules = {};
        this.autoRejectTimeout = this.inviteTimeout = this.inviteDelay = this.ruleTree =
            null
    }

    function u(a) {
        k[a] || (k[a] = new n(a));
        return k[a]
    }

    function A(a, b, c, e, d, g, C, y) {
        t.prototype.init.call(this, a, b);
        this.hasInviteAfterAccept = g;
        this.hasInviteAfterReject = C;
        this.rejectTime = y;
        null !== f.getCssAnimation(b) || "Custom" == c ? this.renderer = new n.RENDERER[c].renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d]) : this.renderer = new n.RENDERER.Appear.renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d])
    }

    function D(a) {
        return u(a) ? u(a).getTracker() : null
    }

    function r() {}

    function J(a, b, c, e) {
        r.prototype.init.call(this,
            a, b, c, e)
    }

    function K(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function M(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function E(a, b, c, e) {
        E.prototype.init.call(this, a, b, null, null)
    }

    function h() {}

    function N(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function O(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function V(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function F(a) {
        na++;
        if (1E3 < na) throw Error("Error processing rule filter logic, preventing recursion");
        for (var b = 0, c = 0, e =
                0; e < a.length; e++) "(" == a.charAt(e) ? c++ : ")" == a.charAt(e) && c--, "," == a.charAt(e) && 1 == c && (b = e);
        if (0 == a.indexOf("AND(")) return c = F(a.substring(4, b)), a = F(a.substring(b + 1, a.length - 1)), new W(c, a);
        if (0 == a.indexOf("OR(")) return c = F(a.substring(3, b)), a = F(a.substring(b + 1, a.length - 1)), new X(c, a);
        if (0 == a.indexOf("NOT(")) return c = F(a.substring(4, a.length - 1)), new Y(c);
        if (!isNaN(parseInt(a, 10))) return new Z(parseInt(a, 10));
        throw Error("Encountered unexpected character in filter logic");
    }

    function z() {}

    function Z(a) {
        this.ruleId =
            a;
        z.prototype.init.call(this, null, null)
    }

    function W(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function X(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function Y(a) {
        z.prototype.init.call(this, a, null)
    }

    function Ca(a, b, c, e) {
        var d = document.createElement("div");
        d.id = "liveagent_invite_button_" + a;
        var g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.position = "absolute";
        g.style.right = "-20px";
        g.style.top = "-20px";
        g.src = f.addPrefixToURL(m.contentServerUrl, m.urlPrefix, !0) + "/images/x.png";
        f.addEventListener(g,
            "click",
            function() {
                p.rejectChat(a)
            });
        d.appendChild(g);
        g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.clear = "right";
        g.src = b;
        g.width = c;
        g.height = e;
        f.addEventListener(g, "click", function() {
            p.startChat(a)
        });
        d.appendChild(g);
        document.body.appendChild(d);
        return d
    }

    function oa(a, b, c) {
        "undefined" == typeof c && (c = !0);
        this.getLabel = function() {
            return a
        };
        this.getValue = function() {
            return b
        };
        this.getDisplayToAgent = function() {
            return c
        };
        var e = new aa;
        this.getMapper = function() {
            return e
        };
        this.doKnowledgeSearch = !1;
        this.getDoKnowledgeSearch = function() {
            return this.doKnowledgeSearch
        };
        this.setDoKnowledgeSearch = function() {
            this.doKnowledgeSearch = !0
        }
    }

    function aa() {
        var a = [],
            b = [];
        this.getEntityMaps = function() {
            return a
        };
        this.getTranscriptFields = function() {
            return b
        }
    }

    function pa(a, b, c, e, d) {
        this.getEntityName = function() {
            return a
        };
        this.getFieldName = function() {
            return b
        };
        this.getFastFill = function() {
            return c
        };
        this.getAutoQuery = function() {
            return e
        };
        this.getExactMatch = function() {
            return d
        }
    }

    function qa(a) {
        this.saveToTranscript =
            "";
        this.showOnCreate = !1;
        this.linkToEntityField = this.linkToEntityName = "";
        var b = new ra;
        this.getEntityName = function() {
            return a
        };
        this.getSaveTranscript = function() {
            return this.saveTranscript
        };
        this.getShowOnCreate = function() {
            return this.showOnCreate
        };
        this.getLinkToEntityName = function() {
            return this.linkToEntityName
        };
        this.getLinkToEntityField = function() {
            return this.linkToEntityField
        };
        this.getEntityMapper = function() {
            return b
        };
        this.setSaveTranscript = function(a) {
            this.saveTranscript = a
        };
        this.setShowOnCreate = function(a) {
            this.showOnCreate =
                a
        };
        this.setLinkToEntityName = function(a) {
            this.linkToEntityName = a
        };
        this.setLinkToEntityField = function(a) {
            this.linkToEntityField = a
        }
    }

    function ra() {
        var a = [];
        this.getEntityFieldsMaps = function() {
            return a
        }
    }

    function sa(a, b, c, e, d) {
        this.getFieldName = function() {
            return a
        };
        this.getLabel = function() {
            return b
        };
        this.getDoFind = function() {
            return c
        };
        this.getIsExactMatch = function() {
            return e
        };
        this.getDoCreate = function() {
            return d
        }
    }

    function P() {
        if (!ta) {
            ta = !0;
            f.log("DOM is ready. Setting up environment.");
            null == v.getOref() &&
                v.setOref(document.referrer);
            null == v.getVisitCount() && v.setVisitCount(1);
            if (window._laq)
                for (var a = 0; a < window._laq.length; a++) window._laq[a].call(window);
            q.connection.setCallback("liveagent._.handlePing");
            ua()
        }
    }

    function ua() {
        var a = [],
            b = {};
        ba && (b.chatted = 1);
        x ? (b.sid = x, f.log("Reusing existing session.")) : (a.push(new q.Noun("VisitorId")), f.log("Requesting new session."));
        a.push(new q.Noun("Settings", {
            buttonIds: "[" + va() + "]",
            updateBreadcrumb: 1,
            urlPrefix: m.urlPrefix
        }));
        q.connection.send(a, b)
    }

    function wa(a,
        b) {
        b.endpointUrl && a.setEndpoint(b.endpointUrl);
        b.prechatUrl && a.setPrechat(b.prechatUrl);
        b.language && a.setLanguage(b.language);
        a.setOnlineState(b.isAvailable)
    }

    function Da() {
        if (q.connection.isRunning())
            if (null == x || ca) ca = !1, ua();
            else {
                f.log("Pinging server to keep presence");
                Q = null;
                var a = {};
                a.sid = x;
                ba && (a.chatted = 1);
                a.r = (new Date).getMilliseconds();
                var b = [new q.Noun("Availability", {
                    ids: "[" + va() + "]"
                })];
                q.connection.send(b, a)
            }
    }

    function da() {
        f.log("Disconnecting from Live Agent");
        q.connection.setIsRunning(!1);
        for (var a in k) k.hasOwnProperty(a) && k[a].setOnlineState(!1)
    }

    function va() {
        var a = [],
            b = {},
            c;
        for (c in k) k.hasOwnProperty(c) && k[c].getType() == l.TYPE.STANDARD && (b[c] = k[c]);
        for (var e in b) a.push(e);
        var b = {},
            d;
        for (d in k) k.hasOwnProperty(d) && k[d].getType() == l.TYPE.AGENT && (b[d] = k[d]);
        for (e in b) a.push(e);
        d = {};
        for (var g in k) k.hasOwnProperty(g) && k[g].getType() == l.TYPE.INVITE && (d[g] = k[g]);
        for (e in d) a.push(e);
        e = "";
        for (g = 0; g < a.length; g++) e += a[g], g < a.length - 1 && (e += ",");
        return e
    }

    function xa(a, b, c, e) {
        document.cookie =
            "liveagent_chatted\x3d1;path\x3d/;";
        ba = !0;
        var d;
        d = "deployment_id\x3d" + m.deploymentId;
        d = d + "\x26org_id\x3d" + m.orgId;
        d += "\x26button_id\x3d";
        d += a;
        c && (d += "\x26agent_id\x3d", d += c);
        e && (d += "\x26do_fallback\x3d1");
        d += "\x26session_id\x3d";
        d += x;
        a = c ? k[c + "_" + a].getEndpoint(d) : k[a].getEndpoint(d);
        c = "height\x3d" + m.chatWindowHeight;
        c = c + ",width\x3d" + m.chatWindowWidth;
        c += ",menubar\x3dno";
        c += ",toolbar\x3dno";
        c += ",location\x3dno";
        c += ",personalbar\x3dno";
        Ea(b, a)
    }
    
    function Ea(a, b) {
        function c(a, b, c) {
            var input =
                document.createElement("input");
                input.name = b;
                input.setAttribute('value', c);
                input.id = b;
            a.appendChild(input);
        }
        var e = v.getVisitCount();
        // null == e && (e = "0");
        e = e || '0';
        var d = document.createElement("form");
        d.style.display = "none";
        c(d, "deploymentId", m.deploymentId);
        c(d, "orgId", m.orgId);
        c(d, "vc", e);
        c(d, "sid", x);
        c(d, "ptid", v.getPermanentId());
        c(d, "det", f.jsonEncode(ya));
        c(d, "oref", v.getOref());
        c(d, "pages", f.jsonEncode(B.getPages()));
        c(d, "sessionStart", (new Date).getTime() - B.getSessionStart());
        c(d, "ent", f.jsonEncode(za));
        ea && c(d, "visitorName", ea);
        d.method = "POST";
        d.setAttribute('id', 'livechat-form');
        d.action = b;
        d.target = a;

        var pageContent = '<html><head></head><body>' + d.outerHTML +
        '</body></html>';
        var pageContentUrl = 'data:text/html;base64,' + btoa(pageContent);

        var ref = cordova.InAppBrowser.open(       
            pageContentUrl,
            "_blank",
            "location=yes,hidenavigationbuttons=yes"
        );

        function eventCallBackFunction(){
            ref.executeScript({code: "document.getElementById('livechat-form').submit()"}, executecallback());
        }

        ref.addEventListener('loadstop', eventCallBackFunction, true);


        function executecallback() {
            ref.removeEventListener('loadstop', eventCallBackFunction, true);    
        }

            
    }

    function fa(a) {
        a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
    }

    function Aa(a) {
        a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
        da()
    }
    if (!window.liveAgentDeployment) {
        window.liveAgentDeployment = !0;
        var p = {};
        window.liveagent && (p = window.liveagent);
        window.liveagent = p;
        var f = {
                getCookie: function(a) {
                    var b = document.cookie,
                        c = b.indexOf(a + "\x3d");
                    if (-1 == c) return null;
                    c += (a + "\x3d").length;
                    a = b.indexOf(";", c); -
                    1 == a && (a = b.length);
                    return b.substring(c, a)
                },
                setCookie: function(a, b, c) {
                    a = a + "\x3d" + b + ";";
                    c && (c = new Date, c.setFullYear(c.getFullYear() + 10), a += "expires\x3d" + c.toGMTString() + ";");
                    document.cookie = a + "path\x3d/;"
                },
                addEventListener: function(a, b, c) {
                    if (a.addEventListener) a.addEventListener(b, c, !1);
                    else if (a.attachEvent) a.attachEvent("on" + b, c, !1);
                    else throw Error("Could not add event listener");
                },
                log: function(a) {
                    R && window.console && window.console.log && window.console.log("LIVE AGENT: " + a)
                },
                logGroupStart: function(a) {
                    R &&
                        window.console && (window.console.group ? window.console.groupCollapsed("LIVE AGENT: " + a) : f.log(a))
                },
                logGroupEnd: function() {
                    R && window.console && window.console.group && window.console.groupEnd()
                },
                getLanguage: function() {
                    return "undefined" != typeof window.navigator.language ? window.navigator.language : "undefined" != typeof window.navigator.userLanguage ? window.navigator.userLanguage : ""
                },
                arrayHasItem: function(a, b) {
                    if (Array.prototype.indexOf) return -1 < a.indexOf(b);
                    for (var c = 0; c < a.length; c++)
                        if (a[c] == b) return !0
                },
                jsonEncode: function(a,
                    b, c) {
                    function e(a) {
                        g.lastIndex = 0;
                        return g.test(a) ? '"' + a.replace(g, function(a) {
                            var b = f[a];
                            return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                        }) + '"' : '"' + a + '"'
                    }

                    function d(a, b) {
                        var c, g, f, C, y = w,
                            k, h = b[a];
                        h && "object" === typeof h && "function" === typeof h.toJSON && (h = h.toJSON(a));
                        "function" === typeof m && (h = m.call(b, a, h));
                        switch (typeof h) {
                            case "string":
                                return e(h);
                            case "number":
                                return isFinite(h) ? String(h) : "null";
                            case "boolean":
                            case "null":
                                return String(h);
                            case "object":
                                if (!h) return "null";
                                w += l;
                                k = [];
                                if ("[object Array]" === Object.prototype.toString.apply(h)) {
                                    C = h.length;
                                    for (c = 0; c < C; c += 1) k[c] = d(c, h) || "null";
                                    f = 0 === k.length ? "[]" : w ? "[\n" + w + k.join(",\n" + w) + "\n" + y + "]" : "[" + k.join(",") + "]";
                                    w = y;
                                    return f
                                }
                                if (m && "object" === typeof m)
                                    for (C = m.length, c = 0; c < C; c += 1) "string" === typeof m[c] && (g = m[c], (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f));
                                else
                                    for (g in h) Object.prototype.hasOwnProperty.call(Object(h), g) && (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f);
                                f = 0 === k.length ? "{}" : w ? "{\n" + w + k.join(",\n" + w) + "\n" + y + "}" : "{" +
                                    k.join(",") + "}";
                                w = y;
                                return f
                        }
                    }
                    if ("undefined" !== typeof window.JSON) return window.JSON.stringify(a, b, c);
                    if (void 0 === a || null === a) return "null";
                    var g = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                        f = {
                            "\b": "\\b",
                            "\t": "\\t",
                            "\n": "\\n",
                            "\f": "\\f",
                            "\r": "\\r",
                            '"': '\\"',
                            "\\": "\\\\"
                        },
                        y, w = "",
                        l = "",
                        m = b;
                    if ("number" === typeof c)
                        for (y = 0; y < c; y += 1) l += " ";
                    else "string" === typeof c && (l = c);
                    if (b && "function" !== typeof b && ("object" !== typeof b || "number" !==
                            typeof b.length)) throw Error("Error during JSON.stringify");
                    return d("", {
                        "": a
                    })
                },
                jsonDecode: function(a) {
                    a = String(a);
                    if ("undefined" !== typeof window.JSON) return window.JSON.parse(a);
                    var b = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                    b.lastIndex = 0;
                    b.test(a) && (a = a.replace(b, function(a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    }));
                    if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
                            "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return eval("(" + a + ")");
                    throw Error("Error during JSON.parse");
                },
                getCssAnimation: function(a) {
                    var b = ["Webkit", "Moz", "O", "ms", "Khtml"];
                    if (void 0 !== a.style.animationName) return "";
                    for (var c = 0; c < b.length; c++)
                        if (void 0 !== a.style[b[c] + "AnimationName"]) return b[c].toLowerCase();
                    return null
                },
                addPrefixToURL: function(a, b, c) {
                    if (!f.isEmpty(a) && !f.isEmpty(b) && 0 !== a.indexOf(b)) {
                        c && (b = f.escapeToHtml(b));
                        var e = /(https?:\/\/)(.*)/i;
                        c = a.replace(e, "$1");
                        a = a.replace(e, "$2");
                        b = b.replace(e,
                            "$2");
                        a = c + b + "/" + a
                    }
                    return a
                },
                getDomainFromUrl: function(a) {
                    if (f.isEmpty(a)) return "";
                    var b;
                    ga || (ga = document.createElement("a"));
                    b = ga;
                    b.href = a;
                    a = a.match(/:(\d+)/g);
                    b = b.protocol + "//" + b.hostname || window.location.protocol + "//" + window.location.hostname;
                    return a ? b + a[0] : b
                },
                isEmpty: function(a) {
                    return null === a || void 0 === a || "" === a
                },
                escapeToHtml: function(a) {
                    return null === a || void 0 === a || "" === a ? "" : a = a.replace(/[&<>"'\u00a9\u2028\u2029]/g, Ba)
                },
                isValidEntityId: function(a) {
                    return a && "string" === typeof a && (18 === a.length ||
                        15 === a.length)
                },
                getKeyPrefix: function(a) {
                    return this.isValidEntityId(a) ? a.substr(0, 3) : null
                },
                isOrganizationId: function(a) {
                    return "00D" === this.getKeyPrefix(a)
                },
                isDeploymentId: function(a) {
                    return "572" === this.getKeyPrefix(a)
                },
                trim: function(a) {
                    return a && a.replace(/^[\s\u0000-\u0020]*|[\s\u0000-\u0020]*$/g, "") || ""
                }
            },
            ga, v = {
                getVisitCount: function() {
                    var a = parseInt(f.getCookie("liveagent_vc"), 10);
                    return isNaN(a) ? null : a
                },
                getOref: function() {
                    return f.getCookie("liveagent_oref")
                },
                getPermanentId: function() {
                    var a =
                        f.getCookie("liveagent_ptid");
                    return null != a ? a : ""
                },
                setVisitCount: function(a) {
                    f.setCookie("liveagent_vc", a, !0)
                },
                setOref: function(a) {
                    return f.setCookie("liveagent_oref", a, !0)
                },
                setPermanentId: function(a) {
                    f.setCookie("liveagent_ptid", a, !0)
                }
            },
            B = new function() {
                function a() {
                    return window.localStorage ? window.localStorage : window.sessionStorage
                }

                function b() {
                    var a = document.createElement("div");
                    a.style.display = "none";
                    document.body.appendChild(a);
                    a.id = "liveagent_userdata_provider";
                    a.addBehavior("#default#userData");
                    a.load("liveagent");
                    return {
                        getItem: function(b) {
                            return a.getAttribute(b)
                        },
                        setItem: function(b, c) {
                            a.setAttribute(b, c);
                            a.save("liveagent")
                        },
                        removeItem: function(b) {
                            a.removeAttribute(b);
                            a.save("liveagent")
                        }
                    }
                }

                function c() {
                    var a = {};
                    return {
                        getItem: function(b) {
                            return a[b]
                        },
                        setItem: function(b, c) {
                            a[b] = c
                        },
                        removeItem: function(b) {
                            delete a[b]
                        }
                    }
                }

                function e() {
                    g.setItem(d.SESSION_ID, x);
                    g.setItem(d.PAGE_COUNT, "0");
                    g.setItem(d.SESSION_START, (new Date).getTime().toString())
                }
                var d = {
                    SESSION_ID: "liveAgentSid",
                    PAGE_COUNT: "liveAgentPc",
                    SESSION_START: "liveAgentStart",
                    PAGE: "liveAgentPage_",
                    PAGE_TIME: "liveAgentPageTime_"
                };
                a.isSupported = function() {
                    try {
                        if (window.localStorage || window.sessionStorage) {
                            var a = window.localStorage ? window.localStorage : window.sessionStorage;
                            a.setItem("liveAgentTestKey", "1");
                            a.removeItem("liveAgentTestKey");
                            return !0
                        }
                        return !1
                    } catch (b) {
                        return !1
                    }
                };
                b.isSupported = function() {
                    return document.createElement("div").addBehavior
                };
                var g;
                g = a.isSupported() ? a() : b.isSupported() ? b() : c();
                this.init = function() {
                    if (g.getItem(d.SESSION_ID)) {
                        if (g.getItem(d.SESSION_ID) !=
                            x) {
                            g.removeItem(d.SESSION_START);
                            for (var a = g.getItem(d.PAGE_COUNT), b = 25 > a ? 0 : a - 25; b < a; b++) g.removeItem(d.PAGE + b), g.removeItem(d.PAGE_TIME + b);
                            e()
                        }
                    } else e();
                    a = parseInt(g.getItem(d.PAGE_COUNT), 10);
                    25 <= a && (g.removeItem(d.PAGE + (a - 25)), g.removeItem(d.PAGE_TIME + (a - 25)));
                    g.setItem(d.PAGE_COUNT, (a + 1).toString());
                    g.setItem(d.PAGE + a.toString(), window.location.href);
                    g.setItem(d.PAGE_TIME + a.toString(), (new Date).getTime())
                };
                this.getPageCount = function() {
                    return parseInt(g.getItem(d.PAGE_COUNT), 10)
                };
                this.getSessionStart =
                    function() {
                        return g.getItem(d.SESSION_START)
                    };
                this.getPages = function() {
                    for (var a = [], b = this.getPageCount(), c = 25 > b ? 0 : b - 25; c < b; c++) a.unshift({
                        location: g.getItem(d.PAGE + c.toString()),
                        time: ((new Date).getTime() - parseInt(g.getItem(d.PAGE_TIME + c.toString()), 10)).toString()
                    });
                    return a
                };
                this.getCurrentPage = function() {
                    return g.getItem(d.PAGE + (this.getPageCount() - 1).toString())
                };
                this.clear = function() {
                    g.clear()
                }
            };
        l.TYPE = {
            STANDARD: "STANDARD",
            INVITE: "INVITE",
            AGENT: "AGENT"
        };
        l.EVENT = {
            BUTTON_AVAILABLE: "BUTTON_AVAILABLE",
            BUTTON_UNAVAILABLE: "BUTTON_UNAVAILABLE",
            BUTTON_ACCEPTED: "BUTTON_ACCEPTED",
            BUTTON_REJECTED: "BUTTON_REJECTED"
        };
        l.prototype.init = function(a, b) {
            this.buttonId = a;
            this.type = b;
            this.onlineState = null;
            this.trackers = [];
            this.language = this.prechat = this.endpoint = null
        };
        l.prototype.getType = function() {
            return this.type
        };
        l.prototype.getOnlineState = function() {
            return this.onlineState
        };
        l.prototype.setOnlineState = function(a) {
            this.onlineState = a;
            for (var b = 0; b < this.trackers.length; b++) this.trackers[b].setState(a)
        };
        l.prototype.addTracker =
            function(a) {
                this.trackers.push(a)
            };
        l.prototype.setPrechat = function(a) {
            this.prechat = a
        };
        l.prototype.setEndpoint = function(a) {
            this.endpoint = a
        };
        l.prototype.getEndpoint = function(a) {
            function b() {
                var b = m.contentServerUrl,
                    c = m.urlPrefix;
                if (null == b) throw Error("You cannot call liveagent.startChat until the asynchronous call to liveagent.init has completed!");
                m.contentServerUrl = f.addPrefixToURL(b, c, !0);
                b = this.endpoint;
                b = !f.isEmpty(b) && -1 < f.getDomainFromUrl(b).indexOf("force") ? f.addPrefixToURL(b, c, !0) : b;
                this.endpoint =
                    b;
                b = (null != this.endpoint ? this.endpoint : m.contentServerUrl + m.chatPage) + "?language\x3d" + (this.language ? this.language : "");
                f.isEmpty(c) || (b += "\x26proxy\x3d" + c + "\x26proxyKey\x3d" + m.prefixKey + "\x26org_id\x3d" + m.orgId + "\x26deployment_id\x3d" + m.deploymentId);
                return b += "#" + a
            }
            var c = null,
                c = null == this.prechat ? b.call(this) : this.prechat + "?endpoint\x3d" + encodeURIComponent(b.call(this));
            return m.contentServerUrl + m.prechatHandler + "?endpoint\x3d" + encodeURIComponent(c)
        };
        l.prototype.setLanguage = function(a) {
            this.language =
                a
        };
        l.prototype.startChat = function(a) {
            return this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED) ? (xa(this.buttonId, a), !0) : !1
        };
        l.prototype.rejectChat = function() {
            return this.dispatchEvent(l.EVENT.BUTTON_REJECTED) ? !0 : !1
        };
        l.prototype.dispatchEvent = function(a) {
            return ha.hasOwnProperty(this.buttonId) ? !1 === ha[this.buttonId].call(this, a) ? !1 : !0 : !0
        };
        t.prototype.init = function(a, b) {
            this.buttonId = a;
            this.element = b
        };
        t.prototype.getId = function() {
            return this.buttonId
        };
        t.prototype.setState = function(a) {
            f.log("Setting state for button " +
                this.buttonId + " to " + (a ? "online" : "offline"));
            return k[this.buttonId].dispatchEvent(a ? l.EVENT.BUTTON_AVAILABLE : l.EVENT.BUTTON_UNAVAILABLE) ? !0 : !1
        };
        la.prototype = new l;
        S.prototype = new l;
        S.prototype.startChat = function(a, b) {
            if (this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED)) {
                var c = this.buttonId.split("_");
                xa(c[1], a, c[0], b);
                return !0
            }
            return !1
        };
        T.prototype = new t;
        T.prototype.setState = function(a) {
            t.prototype.setState.call(this, a) && (this.element.style.display = a ? "" : "none")
        };
        U.prototype = new t;
        U.prototype.setState =
            function(a) {
                t.prototype.setState.call(this, a) && (this.element.style.display = a ? "none" : "")
            };
        var ia = !1,
            G = null,
            ja = {},
            H = {};
        n.prototype = new l;
        n.RENDERER = {
            Slide: {
                renderClass: J
            },
            Fade: {
                renderClass: K
            },
            Appear: {
                renderClass: M
            },
            Custom: {
                renderClass: E
            }
        };
        n.START_POSITION = {
            TopLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopLeftTop: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            Top: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightTop: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            },
            Right: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            BottomRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomRightBottom: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            Bottom: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftBottom: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            Left: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            TopLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            }
        };
        n.END_POSITION = {
            TopLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 0,
                yOffset: 1
            },
            Top: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 0,
                yOffset: 1
            },
            TopRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 0,
                yOffset: 1
            },
            Left: {
                xPercent: 0,
                xOffset: 1,
                yPercent: .5,
                yOffset: 0
            },
            Center: {
                xPercent: .5,
                xOffset: 0,
                yPercent: .5,
                yOffset: 0
            },
            Right: {
                xPercent: 1,
                xOffset: -1,
                yPercent: .5,
                yOffset: 0
            },
            BottomLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 1,
                yOffset: -1
            },
            Bottom: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 1,
                yOffset: -1
            }
        };
        n.prototype.setRules = function(a, b) {
            if (a && b) {
                for (var c in a) {
                    var e = a[c],
                        d = null;
                    switch (e.type) {
                        case h.TYPE.NUMBER_OF_PAGE_VIEWS:
                            d = new N(e.order, this.buttonId, B.getPageCount(), e.operator, parseInt(e.value, 10));
                            break;
                        case h.TYPE.URL_MATCH:
                            d = new N(e.order, this.buttonId, B.getCurrentPage(), e.operator, e.value);
                            break;
                        case h.TYPE.SECONDS_ON_PAGE:
                            d = new O(e.order, this.buttonId, (new Date).getTime(), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.SECONDS_ON_SITE:
                            d = new O(e.order, this.buttonId,
                                parseInt(B.getSessionStart(), 10), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.CUSTOM_VARIABLE:
                            d = new V(e.order, this.buttonId, e.name, e.operator, e.value), H.hasOwnProperty(e.name) || (H[e.name] = []), H[e.name].push(this.buttonId)
                    }
                    null != d && this.addRule(d)
                }
                this.filterLogic = b;
                this.ruleTree = F(b)
            }
        };
        n.prototype.setOnlineState = function(a) {
            a || null === this.inviteTimeout || (clearTimeout(this.inviteTimeout), this.inviteTimeout = null);
            a || null === this.autoRejectTimeout || (clearTimeout(this.autoRejectTimeout), this.autoRejectTimeout =
                null);
            l.prototype.setOnlineState.call(this, a)
        };
        n.prototype.isActive = function() {
            return this.active
        };
        n.prototype.setActive = function(a) {
            this.active = a
        };
        n.prototype.addTracker = function(a) {
            this.trackers = [];
            l.prototype.addTracker.call(this, a)
        };
        n.prototype.getTracker = function() {
            if (1 != this.trackers.length) throw Error("InviteButtons should have exactly 1 tracker");
            return this.trackers[0]
        };
        n.prototype.startChat = function(a) {
            return this.active && l.prototype.startChat.call(this, a) ? (this.getTracker().accept(), !0) :
                !1
        };
        n.prototype.rejectChat = function() {
            return this.active && l.prototype.rejectChat.call(this) ? (this.getTracker().reject(), !0) : !1
        };
        n.prototype.trigger = function() {
            if (f.getCookie("liveagent_invite_rejected_" + this.buttonId)) return !1;
            var a = !0;
            null != this.ruleTree && (f.logGroupStart("Invite " + this.buttonId + " Rule Evaluation"), f.log("Filter Logic: " + this.filterLogic), a = this.ruleTree.evaluate(this), f.logGroupEnd());
            if (!a && null != this.inviteDelay) {
                var b = this;
                this.inviteTimeout = window.setTimeout(function() {
                        b.setOnlineState(!0)
                    },
                    this.inviteDelay);
                this.inviteDelay = null
            }
            return a
        };
        n.prototype.addRule = function(a) {
            this.rules[a.getId()] = a
        };
        n.prototype.getRule = function(a) {
            return this.rules[a]
        };
        n.prototype.getInviteDelay = function() {
            return this.inviteDelay
        };
        n.prototype.setInviteDelay = function(a) {
            f.log("Setting invite delay to: " + a);
            this.inviteDelay = a
        };
        n.prototype.setAutoRejectTimeout = function(a) {
            this.autoRejectTimeout = a
        };
        A.prototype = new t;
        A.prototype.setState = function(a) {
            a && !ia && u(this.buttonId).trigger() && t.prototype.setState.call(this,
                !0) ? (ia = !0, G = this.buttonId, this.renderer.render()) : !a && u(this.buttonId).isActive() && t.prototype.setState.call(this, !1) && (ia = !1, this.remove(!0))
        };
        A.prototype.renderFinish = function() {
            u(this.buttonId).setActive(!0);
            if (-1 != this.rejectTime) {
                var a = this.buttonId;
                u(this.buttonId).setAutoRejectTimeout(window.setTimeout(function() {
                    u(a).rejectChat()
                }, 1E3 * this.rejectTime))
            }
            this.renderer.renderFinish()
        };
        A.prototype.accept = function() {
            this.hasInviteAfterAccept || f.setCookie("liveagent_invite_rejected_" + this.buttonId,
                !0, !1);
            this.remove(!1)
        };
        A.prototype.reject = function() {
            this.hasInviteAfterReject || f.setCookie("liveagent_invite_rejected_" + this.buttonId, !0, !1);
            this.remove(!0)
        };
        A.prototype.remove = function(a) {
            u(this.buttonId).setActive(!1);
            this.renderer.remove(a)
        };
        A.prototype.removeFinish = function() {
            this.renderer.remove(!1)
        };
        r.prototype.init = function(a, b, c, e) {
            window.innerWidth ? this.realWidth = window.innerWidth : document.documentElement && document.documentElement.clientWidth ? this.realWidth = document.documentElement.clientWidth :
                document.body && (this.realWidth = document.body.clientWidth);
            window.innerHeight ? this.realHeight = window.innerHeight : document.documentElement && document.documentElement.clientHeight ? this.realHeight = document.documentElement.clientHeight : document.body && (this.realHeight = document.body.clientHeight);
            this.offset = 25;
            this.buttonId = a;
            this.animationPrefix = f.getCssAnimation(b);
            this.element = b;
            this.element.style.position = null !== this.animationPrefix ? "fixed" : "absolute";
            this.element.style.left = "-1000px";
            this.element.style.top =
                "-1000px";
            this.element.style.zIndex = "10000";
            this.element.style.display = "";
            this.width = this.element.offsetWidth;
            this.height = this.element.offsetHeight;
            this.startPosition = c;
            this.endPosition = e
        };
        r.prototype.render = function() {
            this.element.style.display = ""
        };
        r.prototype.renderFinish = function() {};
        r.prototype.remove = function(a) {
            this.element.style.left = "-1000px";
            this.element.style.top = "-1000px"
        };
        r.prototype.addRenderListeners = function() {
            var a = this.buttonId,
                b = "AnimationIteration",
                c = "AnimationEnd";
            "" == this.animationPrefix ?
                (b = b.toLowerCase(), c = c.toLowerCase()) : (b = this.animationPrefix + b, c = this.animationPrefix + c);
            f.addEventListener(this.element, b, function() {
                D(a).renderFinish()
            });
            f.addEventListener(this.element, c, function() {
                D(a).removeFinish()
            })
        };
        J.prototype = new r;
        J.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = this.width * this.startPosition.xPosition + this.offset * this.startPosition.xOffset,
                b = this.height * this.startPosition.yPosition + this.offset * this.startPosition.yOffset,
                c = this.width * this.endPosition.xPercent *
                -1 + this.offset * this.endPosition.xOffset,
                e = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset,
                d = "";
            "" !== this.animationPrefix && (d = "-" + this.animationPrefix + "-");
            var g = document.createElement("style");
            g.innerHTML = "@" + d + "keyframes slide" + this.buttonId + "{from { margin-left: " + a + "px; margin-top: " + b + "px; left: " + 100 * this.startPosition.xPercent + "%; top: " + 100 * this.startPosition.yPercent + "%; }to { margin-left: " + c + "px; margin-top: " + e + "px; left: " + 100 * this.endPosition.xPercent + "%; top: " +
                100 * this.endPosition.yPercent + "%; }}";
            document.getElementsByTagName("head")[0].appendChild(g);
            this.element.style[d + "animation-name"] = "slide" + this.buttonId;
            this.element.style[d + "animation-duration"] = "1s";
            this.element.style[d + "animation-iteration-count"] = "2";
            this.element.style[d + "animation-direction"] = "alternate";
            this.element.style[d + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(d + "animation-name", "slide" + this.buttonId, "");
            this.element.style.setProperty(d + "animation-duration",
                "1s", "");
            this.element.style.setProperty(d + "animation-iteration-count", "2", "");
            this.element.style.setProperty(d + "animation-direction", "alternate", "");
            this.element.style.setProperty(d + "animation-timing-function", "ease-in-out", "");
            r.prototype.render.call(this)
        };
        J.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        J.prototype.remove =
            function(a) {
                var b = "";
                "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
                a ? (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", "")) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
            };
        K.prototype = new r;
        K.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            var b = document.createElement("style");
            b.innerHTML = "@" + a + "keyframes fade" + this.buttonId + "{from { opacity: 0; }to { opacity: 1; }}";
            document.getElementsByTagName("head")[0].appendChild(b);
            this.element.style[a + "animation-name"] = "fade" + this.buttonId;
            this.element.style[a + "animation-duration"] = "1s";
            this.element.style[a + "animation-iteration-count"] = "2";
            this.element.style[a + "animation-direction"] = "alternate";
            this.element.style[a + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(a +
                "animation-name", "fade" + this.buttonId, "");
            this.element.style.setProperty(a + "animation-duration", "1s", "");
            this.element.style.setProperty(a + "animation-iteration-count", "2", "");
            this.element.style.setProperty(a + "animation-direction", "alternate", "");
            this.element.style.setProperty(a + "animation-timing-function", "ease-in-out", "");
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent + "%";
            this.element.style.marginTop =
                this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this)
        };
        K.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        K.prototype.remove = function(a) {
            var b = "";
            "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
            a ?
                (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", ""), this.element.style.opacity = 0) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
        };
        M.prototype = new r;
        M.prototype.render = function() {
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent +
                "%";
            this.element.style.marginTop = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this);
            D(this.buttonId).renderFinish()
        };
        M.prototype.remove = function(a) {
            a ? D(this.buttonId).removeFinish() : r.prototype.remove.call(this, a)
        };
        E.prototype = new r;
        E.prototype.render = function() {
            D(this.buttonId).renderFinish()
        };
        E.prototype.renderFinish = function() {};
        E.prototype.remove = function(a) {
            a && D(this.buttonId).removeFinish()
        };
        h.TYPE = {
            NUMBER_OF_PAGE_VIEWS: "NUMBER_OF_PAGE_VIEWS",
            URL_MATCH: "URL_MATCH",
            SECONDS_ON_PAGE: "SECONDS_ON_PAGE",
            SECONDS_ON_SITE: "SECONDS_ON_SITE",
            CUSTOM_VARIABLE: "CUSTOM_VARIABLE"
        };
        h.OPERATOR = {
            EQUALS: "EQUALS",
            NOT_EQUAL: "NOT_EQUAL",
            START_WITH: "START_WITH",
            CONTAINS: "CONTAINS",
            NOT_CONTAIN: "NOT_CONTAIN",
            LESS_THAN: "LESS_THAN",
            GREATER_THAN: "GREATER_THAN",
            LESS_OR_EQUAL: "LESS_OR_EQUAL",
            GREATER_OR_EQUAL: "GREATER_OR_EQUAL"
        };
        h.prototype.init = function(a, b, c, e, d) {
            this.ruleId = a;
            this.buttonId = b;
            this.compareFrom = c;
            this.operator =
                e;
            this.compareTo = d
        };
        h.prototype.getId = function() {
            return this.ruleId
        };
        h.prototype.evaluate = function(a, b) {
            switch (this.operator) {
                case h.OPERATOR.EQUALS:
                    return f.log("Evaluate: " + a + " \x3d\x3d " + b), a == b;
                case h.OPERATOR.NOT_EQUAL:
                    return f.log("Evaluate: " + a + " !\x3d " + b), a != b;
                case h.OPERATOR.START_WITH:
                    return f.log("Evaluate: " + a + " indexOf " + b + " \x3d\x3d 0"), 0 == a.indexOf(b);
                case h.OPERATOR.CONTAINS:
                    return f.log("Evaluate: " + a + " indexOf " + b + " !\x3d -1"), -1 != a.indexOf(b);
                case h.OPERATOR.NOT_CONTAIN:
                    return f.log("Evaluate: " +
                        a + " indexOf " + b + " \x3d\x3d -1"), -1 == a.indexOf(b);
                case h.OPERATOR.LESS_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c " + parseFloat(b)), parseFloat(a) < parseFloat(b);
                case h.OPERATOR.GREATER_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e " + parseFloat(b)), parseFloat(a) > parseFloat(b);
                case h.OPERATOR.LESS_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c\x3d " + parseFloat(b)), parseFloat(a) <= parseFloat(b);
                case h.OPERATOR.GREATER_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e\x3d " +
                        parseFloat(b)), parseFloat(a) >= parseFloat(b)
            }
        };
        N.prototype = new h;
        N.prototype.evaluate = function() {
            f.log("Evaluating StandardInviteRule");
            return h.prototype.evaluate.call(this, this.compareFrom, this.compareTo)
        };
        O.prototype = new h;
        O.prototype.evaluate = function() {
            f.log("Evaluating TimerInviteRule");
            var a = (new Date).getTime() - this.compareFrom,
                b = h.prototype.evaluate.call(this, a, this.compareTo);
            !b && a <= this.compareTo && (a = this.compareTo - a, (null == u(this.buttonId).getInviteDelay() || a < u(this.buttonId).getInviteDelay()) &&
                u(this.buttonId).setInviteDelay(a));
            return b
        };
        V.prototype = new h;
        V.prototype.evaluate = function() {
            if (ja.hasOwnProperty(this.compareFrom)) return f.log("Evaluating CustomInviteRule"), h.prototype.evaluate.call(this, ja[this.compareFrom].toString(), this.compareTo);
            f.log("CustomInviteRule evaluation failed due to missing custom variable");
            return !1
        };
        var na = 0;
        z.prototype.init = function(a, b) {
            this.left = a;
            this.right = b
        };
        z.prototype.evaluate = function(a) {
            return !1
        };
        Z.prototype = new z;
        Z.prototype.evaluate = function(a) {
            f.log("Evaluating Atom Node: " +
                this.ruleId);
            return a.getRule(this.ruleId).evaluate()
        };
        W.prototype = new z;
        W.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating And Node");
            a = this.left.evaluate(a) && this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        X.prototype = new z;
        X.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Or Node");
            a = this.left.evaluate(a) || this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        Y.prototype = new z;
        Y.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Not Node");
            a = !this.left.evaluate(a);
            f.logGroupEnd();
            return a
        };
        oa.prototype.toJSON = function() {
            return {
                label: this.getLabel(),
                value: this.getValue(),
                displayToAgent: this.getDisplayToAgent(),
                entityMaps: this.getMapper().getEntityMaps(),
                transcriptFields: this.getMapper().getTranscriptFields(),
                doKnowledgeSearch: this.getDoKnowledgeSearch()
            }
        };
        aa.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityMaps().push(new pa(a, b, c, e, d))
        };
        aa.prototype.saveToTranscript = function(a) {
            this.getTranscriptFields().push(a)
        };
        pa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                fieldName: this.getFieldName(),
                fastFill: this.getFastFill(),
                autoQuery: this.getAutoQuery(),
                exactMatch: this.getExactMatch()
            }
        };
        var I = {};
        p._ = I;
        I.handlePing = function(a) {
            q.connection.handlePing(a)
        };
        I.error = function(a) {
            a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
            da()
        };
        I.warning = function(a) {
            a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
        };
        I.setNewPtid = function(a) {
            v.setPermanentId(a)
        };
        I.clearStorage =
            function() {
                B.clear()
            };
        p.init = function(a, b, c) {
            if ("string" != typeof a) throw Error("The url to init must be strings");
            if (!f.isOrganizationId(c)) throw Error("Invalid OrganizationId Parameter Value: " + c);
            if (!f.isDeploymentId(b)) throw Error("Invalid DeploymentId Parameter Value: " + b);
            m.url = a;
            m.deploymentId = b;
            m.orgId = c;
            f.log("System Initialized. Waiting for the DOM to be ready");
            "complete" === document.readyState ? setTimeout(P, 1) : document.addEventListener ? (document.addEventListener("DOMContentLoaded", P, !1),
                window.addEventListener("load", P, !1)) : window.attachEvent ? window.attachEvent("onload", P) : f.log("No available event model. Exiting.")
        };
        p.getSid = function() {
            return x
        };
        p.enableLogging = function() {
            R = !0
        };
        p.setLocation = function(a) {};
        p.setChatWindowWidth = function(a) {
            m.chatWindowWidth = a
        };
        p.setChatWindowHeight = function(a) {
            m.chatWindowHeight = a
        };
        p.disconnect = function() {
            da()
        };
        p.startChat = function(a, b, c) {
            (b ? L(a, b) : k[a]).startChat("liveagent" + Math.round(1E5 * Math.random()) + (new Date).getTime(), c)
        };
        p.startChatWithWindow =
            function(a, b, c, e) {
                (c ? L(a, c) : k[a]).startChat(b, e)
            };
        p.rejectChat = function(a) {
            k[a].rejectChat()
        };
        p.showWhenOnline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new T(a.buttonId, b))
        };
        p.showWhenOffline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new U(a.buttonId, b))
        };
        p.addCustomDetail = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a detail after page initialization.");
            if ("undefined" == typeof a || "undefined" == typeof b || null === a || null === b) throw Error("CustomDetail contains null value");
            var e = new oa(a, b, c);
            ya.push(e);
            var d = {
                map: function(a, b, c, f, h) {
                    if ("undefined" == typeof a || null === a || "undefined" == typeof b || null === b || null === c || null === f || null === h) throw Error("CustomDetail.map contains null value");
                    e.getMapper().map(a, b, c, f, h);
                    return d
                },
                saveToTranscript: function(a) {
                    if ("undefined" == typeof a || null === a) throw Error("CustomDetail.saveToTranscript contains null value");
                    e.getMapper().saveToTranscript(a);
                    return d
                },
                doKnowledgeSearch: function() {
                    e.setDoKnowledgeSearch();
                    return d
                }
            };
            return d
        };
        p.setName = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set the name after page initialization.");
            ea = a
        };
        p.addButtonEventHandler = function(a, b) {
            "function" == typeof b && (ha[a] = b)
        };
        p.BUTTON_EVENT = l.EVENT;
        p.setCustomVariable = function(a, b) {
            ja[a] = b;
            if (H.hasOwnProperty(a))
                for (var c = 0; c < H[a].length; c++) {
                    var e = u(H[a][c]);
                    e.getOnlineState() && e.setOnlineState(!0)
                }
        };
        p.findOrCreate = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot find or create after page initialization.");
            var b = new qa(a);
            za.push(b);
            var c = {
                map: function(a, d, g, f, h) {
                    b.getEntityMapper().map(a, d, g, f, h);
                    return c
                },
                saveToTranscript: function(a) {
                    b.setSaveTranscript(a);
                    return c
                },
                showOnCreate: function() {
                    b.setShowOnCreate(!0);
                    return c
                },
                linkToEntity: function(a, d) {
                    if (ka.hasOwnProperty(a) && ka[a] == b.getEntityName()) return fa("Warning: Recursive links detected, skip link " + b.getEntityName() + " to " + a), c;
                    b.setLinkToEntityName(a);
                    b.setLinkToEntityField(d);
                    ka[b.getEntityName()] = a;
                    return c
                }
            };
            return c
        };
        p.addURLPrefix = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set a URL Prefix after page initialization.");
            if ("string" != typeof a) throw Error("The parameter to addURLPrefix must be a string");
            m.url = f.addPrefixToURL(m.url, a, !0);
            m.urlPrefix = a
        };
        var q = {
            VisitorMessage: {
                ERROR: "Error",
                WARNING: "Warning"
            },
            SystemMessage: {
                ASYNC_RESULT: "AsyncResult",
                SWITCH_SERVER: "SwitchServer"
            }
        };
        (function() {
            var a = null,
                b = !1,
                c = null,
                e = null,
                d = {};
            (function() {
                d.send = function(b, f) {
                    if (null !== c) d.onError.call(window, "Did not handle response before sending another message");
                    else {
                        "undefined" == typeof f && (f = {});
                        var h = "Visitor",
                            k = "",
                            l = !1;
                        1 < b.length ?
                            (h = "System", k = "MultiNoun", f.nouns = "", l = !0) : k = b[0].getName();
                        h = m.url + "/rest/" + h + "/" + k + ".jsonp?";
                        for (k = 0; k < b.length; k++) {
                            l && (f.nouns += b[k].getName() + ",");
                            f[b[k].getName() + ".prefix"] = "Visitor";
                            for (var n in b[k].getData()) b[k].getData().hasOwnProperty(n) && (f[b[k].getName() + "." + n] = b[k].getData()[n])
                        }
                        l && (f.nouns = f.nouns.substr(0, f.nouns.length - 1));
                        for (var p in f) f.hasOwnProperty(p) && (h += p + "\x3d" + f[p] + "\x26");
                        h += "callback\x3d" + a;
                        h += "\x26deployment_id\x3d" + m.deploymentId;
                        h += "\x26org_id\x3d" + m.orgId;
                        h += "\x26version\x3d36";
                        l = document.createElement("script");
                        l.type = "text/javascript";
                        l.src = h;
                        c = document.body.appendChild(l);
                        e = window.setTimeout(function() {
                            d.onError.call(window, "Server failed to respond.")
                        }, m.pingTimeout)
                    }
                };
                d.handlePing = function(a) {
                    e && (clearTimeout(e), e = null);
                    b = !0;
                    a = a.messages;
                    for (var f = 0; f < a.length; f++) d.messageHandler.call(window, a[f].type, a[f].message);
                    d.onSuccess.call(window);
                    null !== c && (document.body.removeChild(c), c = null)
                };
                d.messageHandler = function(a, b) {};
                d.onSuccess = function() {};
                d.onError = function(a) {};
                d.isRunning = function() {
                    return b
                };
                d.setIsRunning = function(a) {
                    b = a
                };
                d.setCallback = function(b) {
                    a = b
                }
            })();
            q.connection = d;
            q.Noun = function(a, b) {
                this.getName = function() {
                    return a
                };
                this.getData = function() {
                    return b
                }
            }
        })();
        qa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                saveToTranscript: this.getSaveTranscript(),
                showOnCreate: this.getShowOnCreate(),
                linkToEntityName: this.getLinkToEntityName(),
                linkToEntityField: this.getLinkToEntityField(),
                entityFieldsMaps: this.getEntityMapper().getEntityFieldsMaps()
            }
        };
        ra.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityFieldsMaps().push(new sa(a, b, c, e, d))
        };
        sa.prototype.toJSON = function() {
            return {
                fieldName: this.getFieldName(),
                label: this.getLabel(),
                doFind: this.getDoFind(),
                isExactMatch: this.getIsExactMatch(),
                doCreate: this.getDoCreate()
            }
        };
        var x = f.getCookie("liveagent_sid"),
            ba = f.getCookie("liveagent_chatted"),
            ta = !1,
            R = !1,
            k = {},
            ya = [],
            za = [],
            ea = null,
            ha = {},
            Q = null,
            ka = {},
            ca = !1,
            m = {
                url: null,
                deploymentId: null,
                orgId: null,
                pingRate: null,
                pingTimeout: 5E3,
                chatWindowWidth: 482,
                chatWindowHeight: 450,
                contentServerUrl: null,
                chatPage: "/s/chat",
                prechatHandler: "/s/prechatVisitor"
            };
        q.connection.messageHandler = function(a, b) {
            switch (a) {
                case "VisitorId":
                    b.sessionId && (f.log("Received new session ID"), x = b.sessionId, document.cookie = "liveagent_sid\x3d" + encodeURIComponent(x) + ";path\x3d/;", null != v.getVisitCount() && v.setVisitCount(v.getVisitCount() + 1), v.getPermanentId() || v.setPermanentId(x));
                    break;
                case "Settings":
                    B.init();
                    f.log("Ping rate set to " + b.pingRate + "ms");
                    m.pingRate = b.pingRate;
                    m.contentServerUrl = b.contentServerUrl;
                    m.prefixKey = b.prefixKey;
                    for (var c = 0; c < b.buttons.length; c++) switch (b.buttons[c].type) {
                        case "ToAgent":
                        case "Standard":
                            var e = b.buttons[c],
                                d = k[e.id];
                            d && wa(d, e);
                            break;
                        case "Invite":
                            var e = b.buttons[c],
                                g = null,
                                g = e.inviteImageUrl ? Ca(e.id, e.inviteImageUrl, e.inviteImageWidth, e.inviteImageHeight) : document.getElementById("liveagent_invite_button_" + e.id);
                            null == g ? fa("Warning: Button " + e.id + " disabled because HTML element was not found") :
                                (d = u(e.id), d.addTracker(new A(e.id, g, e.inviteRenderer, e.inviteStartPosition, e.inviteEndPosition, e.hasInviteAfterAccept, e.hasInviteAfterReject, e.inviteRejectTime)), g = f.jsonDecode(e.inviteRules), d.setRules(g.rules, g.filter), wa(d, e))
                    }
                    break;
                case "Availability":
                    c = {};
                    for (e = 0; e < b.results.length; e++)(d = k[b.results[e].id]) && (c[b.results[e].id] = {
                        button: d,
                        isAvailable: b.results[e].isAvailable
                    });
                    null != G && c.hasOwnProperty(G) && (c[G].button.setOnlineState(c[G].isAvailable), delete c[G]);
                    for (g in c) c.hasOwnProperty(g) &&
                        c[g].button.setOnlineState(c[g].isAvailable);
                    break;
                case q.VisitorMessage.WARNING:
                    fa(b.text);
                    break;
                case q.VisitorMessage.ERROR:
                    Aa(b.text);
                    break;
                case q.SystemMessage.SWITCH_SERVER:
                    c = b.newUrl;
                    if ("string" === typeof c) m.url = c, f.log("Received updated LiveAgent server url: " + c + "! Consider updating this site's deployment code.");
                    else throw Error("Trying to set invalid LiveAgent server url: " + c);
                    ca = !0
            }
        };
        q.connection.onSuccess = function() {
            null !== Q && clearTimeout(Q);
            Q = window.setTimeout(Da, m.pingRate)
        };
        q.connection.onError =
            function(a) {
                Aa(a)
            }
    }
})();
(function() {
    function Ba(a) {
        switch (a) {
            case "'":
                return "\x26#39;";
            case "\x26":
                return "\x26amp;";
            case "\x3c":
                return "\x26lt;";
            case "\x3e":
                return "\x26gt;";
            case '"':
                return "\x26quot;";
            case "\u00a9":
                return "\x26copy;";
            case "\u2028":
                return "\x3cbr\x3e";
            case "\u2029":
                return "\x3cp\x3e";
            default:
                return a
        }
    }

    function l() {}

    function t() {}

    function la(a) {
        l.prototype.init.call(this, a, l.TYPE.STANDARD)
    }

    function ma(a) {
        k[a] || (k[a] = new la(a));
        return k[a]
    }

    function S(a, b) {
        l.prototype.init.call(this, b + "_" + a, l.TYPE.AGENT)
    }

    function L(a,
        b) {
        var c = b + "_" + a;
        if (!k[c]) {
            var e = new S(a, b),
                d;
            k[a] && (d = k[a], d.endpoint && e.setEndpoint(d.endpoint), d.prechat && e.setPrechat(d.prechat), d.language && e.setLanguage(d.language), e.setOnlineState(d.onlineState));
            k[c] = e
        }
        return k[c]
    }

    function T(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function U(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function n(a) {
        l.prototype.init.call(this, a, l.TYPE.INVITE);
        this.active = !1;
        this.filterLogic = null;
        this.rules = {};
        this.autoRejectTimeout = this.inviteTimeout = this.inviteDelay = this.ruleTree =
            null
    }

    function u(a) {
        k[a] || (k[a] = new n(a));
        return k[a]
    }

    function A(a, b, c, e, d, g, C, y) {
        t.prototype.init.call(this, a, b);
        this.hasInviteAfterAccept = g;
        this.hasInviteAfterReject = C;
        this.rejectTime = y;
        null !== f.getCssAnimation(b) || "Custom" == c ? this.renderer = new n.RENDERER[c].renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d]) : this.renderer = new n.RENDERER.Appear.renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d])
    }

    function D(a) {
        return u(a) ? u(a).getTracker() : null
    }

    function r() {}

    function J(a, b, c, e) {
        r.prototype.init.call(this,
            a, b, c, e)
    }

    function K(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function M(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function E(a, b, c, e) {
        E.prototype.init.call(this, a, b, null, null)
    }

    function h() {}

    function N(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function O(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function V(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function F(a) {
        na++;
        if (1E3 < na) throw Error("Error processing rule filter logic, preventing recursion");
        for (var b = 0, c = 0, e =
                0; e < a.length; e++) "(" == a.charAt(e) ? c++ : ")" == a.charAt(e) && c--, "," == a.charAt(e) && 1 == c && (b = e);
        if (0 == a.indexOf("AND(")) return c = F(a.substring(4, b)), a = F(a.substring(b + 1, a.length - 1)), new W(c, a);
        if (0 == a.indexOf("OR(")) return c = F(a.substring(3, b)), a = F(a.substring(b + 1, a.length - 1)), new X(c, a);
        if (0 == a.indexOf("NOT(")) return c = F(a.substring(4, a.length - 1)), new Y(c);
        if (!isNaN(parseInt(a, 10))) return new Z(parseInt(a, 10));
        throw Error("Encountered unexpected character in filter logic");
    }

    function z() {}

    function Z(a) {
        this.ruleId =
            a;
        z.prototype.init.call(this, null, null)
    }

    function W(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function X(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function Y(a) {
        z.prototype.init.call(this, a, null)
    }

    function Ca(a, b, c, e) {
        var d = document.createElement("div");
        d.id = "liveagent_invite_button_" + a;
        var g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.position = "absolute";
        g.style.right = "-20px";
        g.style.top = "-20px";
        g.src = f.addPrefixToURL(m.contentServerUrl, m.urlPrefix, !0) + "/images/x.png";
        f.addEventListener(g,
            "click",
            function() {
                p.rejectChat(a)
            });
        d.appendChild(g);
        g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.clear = "right";
        g.src = b;
        g.width = c;
        g.height = e;
        f.addEventListener(g, "click", function() {
            p.startChat(a)
        });
        d.appendChild(g);
        document.body.appendChild(d);
        return d
    }

    function oa(a, b, c) {
        "undefined" == typeof c && (c = !0);
        this.getLabel = function() {
            return a
        };
        this.getValue = function() {
            return b
        };
        this.getDisplayToAgent = function() {
            return c
        };
        var e = new aa;
        this.getMapper = function() {
            return e
        };
        this.doKnowledgeSearch = !1;
        this.getDoKnowledgeSearch = function() {
            return this.doKnowledgeSearch
        };
        this.setDoKnowledgeSearch = function() {
            this.doKnowledgeSearch = !0
        }
    }

    function aa() {
        var a = [],
            b = [];
        this.getEntityMaps = function() {
            return a
        };
        this.getTranscriptFields = function() {
            return b
        }
    }

    function pa(a, b, c, e, d) {
        this.getEntityName = function() {
            return a
        };
        this.getFieldName = function() {
            return b
        };
        this.getFastFill = function() {
            return c
        };
        this.getAutoQuery = function() {
            return e
        };
        this.getExactMatch = function() {
            return d
        }
    }

    function qa(a) {
        this.saveToTranscript =
            "";
        this.showOnCreate = !1;
        this.linkToEntityField = this.linkToEntityName = "";
        var b = new ra;
        this.getEntityName = function() {
            return a
        };
        this.getSaveTranscript = function() {
            return this.saveTranscript
        };
        this.getShowOnCreate = function() {
            return this.showOnCreate
        };
        this.getLinkToEntityName = function() {
            return this.linkToEntityName
        };
        this.getLinkToEntityField = function() {
            return this.linkToEntityField
        };
        this.getEntityMapper = function() {
            return b
        };
        this.setSaveTranscript = function(a) {
            this.saveTranscript = a
        };
        this.setShowOnCreate = function(a) {
            this.showOnCreate =
                a
        };
        this.setLinkToEntityName = function(a) {
            this.linkToEntityName = a
        };
        this.setLinkToEntityField = function(a) {
            this.linkToEntityField = a
        }
    }

    function ra() {
        var a = [];
        this.getEntityFieldsMaps = function() {
            return a
        }
    }

    function sa(a, b, c, e, d) {
        this.getFieldName = function() {
            return a
        };
        this.getLabel = function() {
            return b
        };
        this.getDoFind = function() {
            return c
        };
        this.getIsExactMatch = function() {
            return e
        };
        this.getDoCreate = function() {
            return d
        }
    }

    function P() {
        if (!ta) {
            ta = !0;
            f.log("DOM is ready. Setting up environment.");
            null == v.getOref() &&
                v.setOref(document.referrer);
            null == v.getVisitCount() && v.setVisitCount(1);
            if (window._laq)
                for (var a = 0; a < window._laq.length; a++) window._laq[a].call(window);
            q.connection.setCallback("liveagent._.handlePing");
            ua()
        }
    }

    function ua() {
        var a = [],
            b = {};
        ba && (b.chatted = 1);
        x ? (b.sid = x, f.log("Reusing existing session.")) : (a.push(new q.Noun("VisitorId")), f.log("Requesting new session."));
        a.push(new q.Noun("Settings", {
            buttonIds: "[" + va() + "]",
            updateBreadcrumb: 1,
            urlPrefix: m.urlPrefix
        }));
        q.connection.send(a, b)
    }

    function wa(a,
        b) {
        b.endpointUrl && a.setEndpoint(b.endpointUrl);
        b.prechatUrl && a.setPrechat(b.prechatUrl);
        b.language && a.setLanguage(b.language);
        a.setOnlineState(b.isAvailable)
    }

    function Da() {
        if (q.connection.isRunning())
            if (null == x || ca) ca = !1, ua();
            else {
                f.log("Pinging server to keep presence");
                Q = null;
                var a = {};
                a.sid = x;
                ba && (a.chatted = 1);
                a.r = (new Date).getMilliseconds();
                var b = [new q.Noun("Availability", {
                    ids: "[" + va() + "]"
                })];
                q.connection.send(b, a)
            }
    }

    function da() {
        f.log("Disconnecting from Live Agent");
        q.connection.setIsRunning(!1);
        for (var a in k) k.hasOwnProperty(a) && k[a].setOnlineState(!1)
    }

    function va() {
        var a = [],
            b = {},
            c;
        for (c in k) k.hasOwnProperty(c) && k[c].getType() == l.TYPE.STANDARD && (b[c] = k[c]);
        for (var e in b) a.push(e);
        var b = {},
            d;
        for (d in k) k.hasOwnProperty(d) && k[d].getType() == l.TYPE.AGENT && (b[d] = k[d]);
        for (e in b) a.push(e);
        d = {};
        for (var g in k) k.hasOwnProperty(g) && k[g].getType() == l.TYPE.INVITE && (d[g] = k[g]);
        for (e in d) a.push(e);
        e = "";
        for (g = 0; g < a.length; g++) e += a[g], g < a.length - 1 && (e += ",");
        return e
    }

    function xa(a, b, c, e) {
        document.cookie =
            "liveagent_chatted\x3d1;path\x3d/;";
        ba = !0;
        var d;
        d = "deployment_id\x3d" + m.deploymentId;
        d = d + "\x26org_id\x3d" + m.orgId;
        d += "\x26button_id\x3d";
        d += a;
        c && (d += "\x26agent_id\x3d", d += c);
        e && (d += "\x26do_fallback\x3d1");
        d += "\x26session_id\x3d";
        d += x;
        a = c ? k[c + "_" + a].getEndpoint(d) : k[a].getEndpoint(d);
        c = "height\x3d" + m.chatWindowHeight;
        c = c + ",width\x3d" + m.chatWindowWidth;
        c += ",menubar\x3dno";
        c += ",toolbar\x3dno";
        c += ",location\x3dno";
        c += ",personalbar\x3dno";
        Ea(b, a)
    }
    
    function Ea(a, b) {
        function c(a, b, c) {
            var input =
                document.createElement("input");
                input.name = b;
                input.setAttribute('value', c);
                input.id = b;
            a.appendChild(input);
        }
        var e = v.getVisitCount();
        // null == e && (e = "0");
        e = e || '0';
        var d = document.createElement("form");
        d.style.display = "none";
        c(d, "deploymentId", m.deploymentId);
        c(d, "orgId", m.orgId);
        c(d, "vc", e);
        c(d, "sid", x);
        c(d, "ptid", v.getPermanentId());
        c(d, "det", f.jsonEncode(ya));
        c(d, "oref", v.getOref());
        c(d, "pages", f.jsonEncode(B.getPages()));
        c(d, "sessionStart", (new Date).getTime() - B.getSessionStart());
        c(d, "ent", f.jsonEncode(za));
        ea && c(d, "visitorName", ea);
        d.method = "POST";
        d.setAttribute('id', 'livechat-form');
        d.action = b;
        d.target = a;

        var pageContent = '<html><head></head><body>' + d.outerHTML +
        '</body></html>';
        var pageContentUrl = 'data:text/html;base64,' + btoa(pageContent);

        var ref = cordova.InAppBrowser.open(       
            pageContentUrl,
            "_blank",
            "location=yes,hidenavigationbuttons=yes"
        );

        function eventCallBackFunction(){
            ref.executeScript({code: "document.getElementById('livechat-form').submit()"}, executecallback());
        }

        ref.addEventListener('loadstop', eventCallBackFunction, true);


        function executecallback() {
            ref.removeEventListener('loadstop', eventCallBackFunction, true);    
        }

            
    }

    function fa(a) {
        a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
    }

    function Aa(a) {
        a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
        da()
    }
    if (!window.liveAgentDeployment) {
        window.liveAgentDeployment = !0;
        var p = {};
        window.liveagent && (p = window.liveagent);
        window.liveagent = p;
        var f = {
                getCookie: function(a) {
                    var b = document.cookie,
                        c = b.indexOf(a + "\x3d");
                    if (-1 == c) return null;
                    c += (a + "\x3d").length;
                    a = b.indexOf(";", c); -
                    1 == a && (a = b.length);
                    return b.substring(c, a)
                },
                setCookie: function(a, b, c) {
                    a = a + "\x3d" + b + ";";
                    c && (c = new Date, c.setFullYear(c.getFullYear() + 10), a += "expires\x3d" + c.toGMTString() + ";");
                    document.cookie = a + "path\x3d/;"
                },
                addEventListener: function(a, b, c) {
                    if (a.addEventListener) a.addEventListener(b, c, !1);
                    else if (a.attachEvent) a.attachEvent("on" + b, c, !1);
                    else throw Error("Could not add event listener");
                },
                log: function(a) {
                    R && window.console && window.console.log && window.console.log("LIVE AGENT: " + a)
                },
                logGroupStart: function(a) {
                    R &&
                        window.console && (window.console.group ? window.console.groupCollapsed("LIVE AGENT: " + a) : f.log(a))
                },
                logGroupEnd: function() {
                    R && window.console && window.console.group && window.console.groupEnd()
                },
                getLanguage: function() {
                    return "undefined" != typeof window.navigator.language ? window.navigator.language : "undefined" != typeof window.navigator.userLanguage ? window.navigator.userLanguage : ""
                },
                arrayHasItem: function(a, b) {
                    if (Array.prototype.indexOf) return -1 < a.indexOf(b);
                    for (var c = 0; c < a.length; c++)
                        if (a[c] == b) return !0
                },
                jsonEncode: function(a,
                    b, c) {
                    function e(a) {
                        g.lastIndex = 0;
                        return g.test(a) ? '"' + a.replace(g, function(a) {
                            var b = f[a];
                            return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                        }) + '"' : '"' + a + '"'
                    }

                    function d(a, b) {
                        var c, g, f, C, y = w,
                            k, h = b[a];
                        h && "object" === typeof h && "function" === typeof h.toJSON && (h = h.toJSON(a));
                        "function" === typeof m && (h = m.call(b, a, h));
                        switch (typeof h) {
                            case "string":
                                return e(h);
                            case "number":
                                return isFinite(h) ? String(h) : "null";
                            case "boolean":
                            case "null":
                                return String(h);
                            case "object":
                                if (!h) return "null";
                                w += l;
                                k = [];
                                if ("[object Array]" === Object.prototype.toString.apply(h)) {
                                    C = h.length;
                                    for (c = 0; c < C; c += 1) k[c] = d(c, h) || "null";
                                    f = 0 === k.length ? "[]" : w ? "[\n" + w + k.join(",\n" + w) + "\n" + y + "]" : "[" + k.join(",") + "]";
                                    w = y;
                                    return f
                                }
                                if (m && "object" === typeof m)
                                    for (C = m.length, c = 0; c < C; c += 1) "string" === typeof m[c] && (g = m[c], (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f));
                                else
                                    for (g in h) Object.prototype.hasOwnProperty.call(Object(h), g) && (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f);
                                f = 0 === k.length ? "{}" : w ? "{\n" + w + k.join(",\n" + w) + "\n" + y + "}" : "{" +
                                    k.join(",") + "}";
                                w = y;
                                return f
                        }
                    }
                    if ("undefined" !== typeof window.JSON) return window.JSON.stringify(a, b, c);
                    if (void 0 === a || null === a) return "null";
                    var g = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                        f = {
                            "\b": "\\b",
                            "\t": "\\t",
                            "\n": "\\n",
                            "\f": "\\f",
                            "\r": "\\r",
                            '"': '\\"',
                            "\\": "\\\\"
                        },
                        y, w = "",
                        l = "",
                        m = b;
                    if ("number" === typeof c)
                        for (y = 0; y < c; y += 1) l += " ";
                    else "string" === typeof c && (l = c);
                    if (b && "function" !== typeof b && ("object" !== typeof b || "number" !==
                            typeof b.length)) throw Error("Error during JSON.stringify");
                    return d("", {
                        "": a
                    })
                },
                jsonDecode: function(a) {
                    a = String(a);
                    if ("undefined" !== typeof window.JSON) return window.JSON.parse(a);
                    var b = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                    b.lastIndex = 0;
                    b.test(a) && (a = a.replace(b, function(a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    }));
                    if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
                            "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return eval("(" + a + ")");
                    throw Error("Error during JSON.parse");
                },
                getCssAnimation: function(a) {
                    var b = ["Webkit", "Moz", "O", "ms", "Khtml"];
                    if (void 0 !== a.style.animationName) return "";
                    for (var c = 0; c < b.length; c++)
                        if (void 0 !== a.style[b[c] + "AnimationName"]) return b[c].toLowerCase();
                    return null
                },
                addPrefixToURL: function(a, b, c) {
                    if (!f.isEmpty(a) && !f.isEmpty(b) && 0 !== a.indexOf(b)) {
                        c && (b = f.escapeToHtml(b));
                        var e = /(https?:\/\/)(.*)/i;
                        c = a.replace(e, "$1");
                        a = a.replace(e, "$2");
                        b = b.replace(e,
                            "$2");
                        a = c + b + "/" + a
                    }
                    return a
                },
                getDomainFromUrl: function(a) {
                    if (f.isEmpty(a)) return "";
                    var b;
                    ga || (ga = document.createElement("a"));
                    b = ga;
                    b.href = a;
                    a = a.match(/:(\d+)/g);
                    b = b.protocol + "//" + b.hostname || window.location.protocol + "//" + window.location.hostname;
                    return a ? b + a[0] : b
                },
                isEmpty: function(a) {
                    return null === a || void 0 === a || "" === a
                },
                escapeToHtml: function(a) {
                    return null === a || void 0 === a || "" === a ? "" : a = a.replace(/[&<>"'\u00a9\u2028\u2029]/g, Ba)
                },
                isValidEntityId: function(a) {
                    return a && "string" === typeof a && (18 === a.length ||
                        15 === a.length)
                },
                getKeyPrefix: function(a) {
                    return this.isValidEntityId(a) ? a.substr(0, 3) : null
                },
                isOrganizationId: function(a) {
                    return "00D" === this.getKeyPrefix(a)
                },
                isDeploymentId: function(a) {
                    return "572" === this.getKeyPrefix(a)
                },
                trim: function(a) {
                    return a && a.replace(/^[\s\u0000-\u0020]*|[\s\u0000-\u0020]*$/g, "") || ""
                }
            },
            ga, v = {
                getVisitCount: function() {
                    var a = parseInt(f.getCookie("liveagent_vc"), 10);
                    return isNaN(a) ? null : a
                },
                getOref: function() {
                    return f.getCookie("liveagent_oref")
                },
                getPermanentId: function() {
                    var a =
                        f.getCookie("liveagent_ptid");
                    return null != a ? a : ""
                },
                setVisitCount: function(a) {
                    f.setCookie("liveagent_vc", a, !0)
                },
                setOref: function(a) {
                    return f.setCookie("liveagent_oref", a, !0)
                },
                setPermanentId: function(a) {
                    f.setCookie("liveagent_ptid", a, !0)
                }
            },
            B = new function() {
                function a() {
                    return window.localStorage ? window.localStorage : window.sessionStorage
                }

                function b() {
                    var a = document.createElement("div");
                    a.style.display = "none";
                    document.body.appendChild(a);
                    a.id = "liveagent_userdata_provider";
                    a.addBehavior("#default#userData");
                    a.load("liveagent");
                    return {
                        getItem: function(b) {
                            return a.getAttribute(b)
                        },
                        setItem: function(b, c) {
                            a.setAttribute(b, c);
                            a.save("liveagent")
                        },
                        removeItem: function(b) {
                            a.removeAttribute(b);
                            a.save("liveagent")
                        }
                    }
                }

                function c() {
                    var a = {};
                    return {
                        getItem: function(b) {
                            return a[b]
                        },
                        setItem: function(b, c) {
                            a[b] = c
                        },
                        removeItem: function(b) {
                            delete a[b]
                        }
                    }
                }

                function e() {
                    g.setItem(d.SESSION_ID, x);
                    g.setItem(d.PAGE_COUNT, "0");
                    g.setItem(d.SESSION_START, (new Date).getTime().toString())
                }
                var d = {
                    SESSION_ID: "liveAgentSid",
                    PAGE_COUNT: "liveAgentPc",
                    SESSION_START: "liveAgentStart",
                    PAGE: "liveAgentPage_",
                    PAGE_TIME: "liveAgentPageTime_"
                };
                a.isSupported = function() {
                    try {
                        if (window.localStorage || window.sessionStorage) {
                            var a = window.localStorage ? window.localStorage : window.sessionStorage;
                            a.setItem("liveAgentTestKey", "1");
                            a.removeItem("liveAgentTestKey");
                            return !0
                        }
                        return !1
                    } catch (b) {
                        return !1
                    }
                };
                b.isSupported = function() {
                    return document.createElement("div").addBehavior
                };
                var g;
                g = a.isSupported() ? a() : b.isSupported() ? b() : c();
                this.init = function() {
                    if (g.getItem(d.SESSION_ID)) {
                        if (g.getItem(d.SESSION_ID) !=
                            x) {
                            g.removeItem(d.SESSION_START);
                            for (var a = g.getItem(d.PAGE_COUNT), b = 25 > a ? 0 : a - 25; b < a; b++) g.removeItem(d.PAGE + b), g.removeItem(d.PAGE_TIME + b);
                            e()
                        }
                    } else e();
                    a = parseInt(g.getItem(d.PAGE_COUNT), 10);
                    25 <= a && (g.removeItem(d.PAGE + (a - 25)), g.removeItem(d.PAGE_TIME + (a - 25)));
                    g.setItem(d.PAGE_COUNT, (a + 1).toString());
                    g.setItem(d.PAGE + a.toString(), window.location.href);
                    g.setItem(d.PAGE_TIME + a.toString(), (new Date).getTime())
                };
                this.getPageCount = function() {
                    return parseInt(g.getItem(d.PAGE_COUNT), 10)
                };
                this.getSessionStart =
                    function() {
                        return g.getItem(d.SESSION_START)
                    };
                this.getPages = function() {
                    for (var a = [], b = this.getPageCount(), c = 25 > b ? 0 : b - 25; c < b; c++) a.unshift({
                        location: g.getItem(d.PAGE + c.toString()),
                        time: ((new Date).getTime() - parseInt(g.getItem(d.PAGE_TIME + c.toString()), 10)).toString()
                    });
                    return a
                };
                this.getCurrentPage = function() {
                    return g.getItem(d.PAGE + (this.getPageCount() - 1).toString())
                };
                this.clear = function() {
                    g.clear()
                }
            };
        l.TYPE = {
            STANDARD: "STANDARD",
            INVITE: "INVITE",
            AGENT: "AGENT"
        };
        l.EVENT = {
            BUTTON_AVAILABLE: "BUTTON_AVAILABLE",
            BUTTON_UNAVAILABLE: "BUTTON_UNAVAILABLE",
            BUTTON_ACCEPTED: "BUTTON_ACCEPTED",
            BUTTON_REJECTED: "BUTTON_REJECTED"
        };
        l.prototype.init = function(a, b) {
            this.buttonId = a;
            this.type = b;
            this.onlineState = null;
            this.trackers = [];
            this.language = this.prechat = this.endpoint = null
        };
        l.prototype.getType = function() {
            return this.type
        };
        l.prototype.getOnlineState = function() {
            return this.onlineState
        };
        l.prototype.setOnlineState = function(a) {
            this.onlineState = a;
            for (var b = 0; b < this.trackers.length; b++) this.trackers[b].setState(a)
        };
        l.prototype.addTracker =
            function(a) {
                this.trackers.push(a)
            };
        l.prototype.setPrechat = function(a) {
            this.prechat = a
        };
        l.prototype.setEndpoint = function(a) {
            this.endpoint = a
        };
        l.prototype.getEndpoint = function(a) {
            function b() {
                var b = m.contentServerUrl,
                    c = m.urlPrefix;
                if (null == b) throw Error("You cannot call liveagent.startChat until the asynchronous call to liveagent.init has completed!");
                m.contentServerUrl = f.addPrefixToURL(b, c, !0);
                b = this.endpoint;
                b = !f.isEmpty(b) && -1 < f.getDomainFromUrl(b).indexOf("force") ? f.addPrefixToURL(b, c, !0) : b;
                this.endpoint =
                    b;
                b = (null != this.endpoint ? this.endpoint : m.contentServerUrl + m.chatPage) + "?language\x3d" + (this.language ? this.language : "");
                f.isEmpty(c) || (b += "\x26proxy\x3d" + c + "\x26proxyKey\x3d" + m.prefixKey + "\x26org_id\x3d" + m.orgId + "\x26deployment_id\x3d" + m.deploymentId);
                return b += "#" + a
            }
            var c = null,
                c = null == this.prechat ? b.call(this) : this.prechat + "?endpoint\x3d" + encodeURIComponent(b.call(this));
            return m.contentServerUrl + m.prechatHandler + "?endpoint\x3d" + encodeURIComponent(c)
        };
        l.prototype.setLanguage = function(a) {
            this.language =
                a
        };
        l.prototype.startChat = function(a) {
            return this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED) ? (xa(this.buttonId, a), !0) : !1
        };
        l.prototype.rejectChat = function() {
            return this.dispatchEvent(l.EVENT.BUTTON_REJECTED) ? !0 : !1
        };
        l.prototype.dispatchEvent = function(a) {
            return ha.hasOwnProperty(this.buttonId) ? !1 === ha[this.buttonId].call(this, a) ? !1 : !0 : !0
        };
        t.prototype.init = function(a, b) {
            this.buttonId = a;
            this.element = b
        };
        t.prototype.getId = function() {
            return this.buttonId
        };
        t.prototype.setState = function(a) {
            f.log("Setting state for button " +
                this.buttonId + " to " + (a ? "online" : "offline"));
            return k[this.buttonId].dispatchEvent(a ? l.EVENT.BUTTON_AVAILABLE : l.EVENT.BUTTON_UNAVAILABLE) ? !0 : !1
        };
        la.prototype = new l;
        S.prototype = new l;
        S.prototype.startChat = function(a, b) {
            if (this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED)) {
                var c = this.buttonId.split("_");
                xa(c[1], a, c[0], b);
                return !0
            }
            return !1
        };
        T.prototype = new t;
        T.prototype.setState = function(a) {
            t.prototype.setState.call(this, a) && (this.element.style.display = a ? "" : "none")
        };
        U.prototype = new t;
        U.prototype.setState =
            function(a) {
                t.prototype.setState.call(this, a) && (this.element.style.display = a ? "none" : "")
            };
        var ia = !1,
            G = null,
            ja = {},
            H = {};
        n.prototype = new l;
        n.RENDERER = {
            Slide: {
                renderClass: J
            },
            Fade: {
                renderClass: K
            },
            Appear: {
                renderClass: M
            },
            Custom: {
                renderClass: E
            }
        };
        n.START_POSITION = {
            TopLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopLeftTop: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            Top: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightTop: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            },
            Right: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            BottomRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomRightBottom: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            Bottom: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftBottom: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            Left: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            TopLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            }
        };
        n.END_POSITION = {
            TopLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 0,
                yOffset: 1
            },
            Top: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 0,
                yOffset: 1
            },
            TopRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 0,
                yOffset: 1
            },
            Left: {
                xPercent: 0,
                xOffset: 1,
                yPercent: .5,
                yOffset: 0
            },
            Center: {
                xPercent: .5,
                xOffset: 0,
                yPercent: .5,
                yOffset: 0
            },
            Right: {
                xPercent: 1,
                xOffset: -1,
                yPercent: .5,
                yOffset: 0
            },
            BottomLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 1,
                yOffset: -1
            },
            Bottom: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 1,
                yOffset: -1
            }
        };
        n.prototype.setRules = function(a, b) {
            if (a && b) {
                for (var c in a) {
                    var e = a[c],
                        d = null;
                    switch (e.type) {
                        case h.TYPE.NUMBER_OF_PAGE_VIEWS:
                            d = new N(e.order, this.buttonId, B.getPageCount(), e.operator, parseInt(e.value, 10));
                            break;
                        case h.TYPE.URL_MATCH:
                            d = new N(e.order, this.buttonId, B.getCurrentPage(), e.operator, e.value);
                            break;
                        case h.TYPE.SECONDS_ON_PAGE:
                            d = new O(e.order, this.buttonId, (new Date).getTime(), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.SECONDS_ON_SITE:
                            d = new O(e.order, this.buttonId,
                                parseInt(B.getSessionStart(), 10), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.CUSTOM_VARIABLE:
                            d = new V(e.order, this.buttonId, e.name, e.operator, e.value), H.hasOwnProperty(e.name) || (H[e.name] = []), H[e.name].push(this.buttonId)
                    }
                    null != d && this.addRule(d)
                }
                this.filterLogic = b;
                this.ruleTree = F(b)
            }
        };
        n.prototype.setOnlineState = function(a) {
            a || null === this.inviteTimeout || (clearTimeout(this.inviteTimeout), this.inviteTimeout = null);
            a || null === this.autoRejectTimeout || (clearTimeout(this.autoRejectTimeout), this.autoRejectTimeout =
                null);
            l.prototype.setOnlineState.call(this, a)
        };
        n.prototype.isActive = function() {
            return this.active
        };
        n.prototype.setActive = function(a) {
            this.active = a
        };
        n.prototype.addTracker = function(a) {
            this.trackers = [];
            l.prototype.addTracker.call(this, a)
        };
        n.prototype.getTracker = function() {
            if (1 != this.trackers.length) throw Error("InviteButtons should have exactly 1 tracker");
            return this.trackers[0]
        };
        n.prototype.startChat = function(a) {
            return this.active && l.prototype.startChat.call(this, a) ? (this.getTracker().accept(), !0) :
                !1
        };
        n.prototype.rejectChat = function() {
            return this.active && l.prototype.rejectChat.call(this) ? (this.getTracker().reject(), !0) : !1
        };
        n.prototype.trigger = function() {
            if (f.getCookie("liveagent_invite_rejected_" + this.buttonId)) return !1;
            var a = !0;
            null != this.ruleTree && (f.logGroupStart("Invite " + this.buttonId + " Rule Evaluation"), f.log("Filter Logic: " + this.filterLogic), a = this.ruleTree.evaluate(this), f.logGroupEnd());
            if (!a && null != this.inviteDelay) {
                var b = this;
                this.inviteTimeout = window.setTimeout(function() {
                        b.setOnlineState(!0)
                    },
                    this.inviteDelay);
                this.inviteDelay = null
            }
            return a
        };
        n.prototype.addRule = function(a) {
            this.rules[a.getId()] = a
        };
        n.prototype.getRule = function(a) {
            return this.rules[a]
        };
        n.prototype.getInviteDelay = function() {
            return this.inviteDelay
        };
        n.prototype.setInviteDelay = function(a) {
            f.log("Setting invite delay to: " + a);
            this.inviteDelay = a
        };
        n.prototype.setAutoRejectTimeout = function(a) {
            this.autoRejectTimeout = a
        };
        A.prototype = new t;
        A.prototype.setState = function(a) {
            a && !ia && u(this.buttonId).trigger() && t.prototype.setState.call(this,
                !0) ? (ia = !0, G = this.buttonId, this.renderer.render()) : !a && u(this.buttonId).isActive() && t.prototype.setState.call(this, !1) && (ia = !1, this.remove(!0))
        };
        A.prototype.renderFinish = function() {
            u(this.buttonId).setActive(!0);
            if (-1 != this.rejectTime) {
                var a = this.buttonId;
                u(this.buttonId).setAutoRejectTimeout(window.setTimeout(function() {
                    u(a).rejectChat()
                }, 1E3 * this.rejectTime))
            }
            this.renderer.renderFinish()
        };
        A.prototype.accept = function() {
            this.hasInviteAfterAccept || f.setCookie("liveagent_invite_rejected_" + this.buttonId,
                !0, !1);
            this.remove(!1)
        };
        A.prototype.reject = function() {
            this.hasInviteAfterReject || f.setCookie("liveagent_invite_rejected_" + this.buttonId, !0, !1);
            this.remove(!0)
        };
        A.prototype.remove = function(a) {
            u(this.buttonId).setActive(!1);
            this.renderer.remove(a)
        };
        A.prototype.removeFinish = function() {
            this.renderer.remove(!1)
        };
        r.prototype.init = function(a, b, c, e) {
            window.innerWidth ? this.realWidth = window.innerWidth : document.documentElement && document.documentElement.clientWidth ? this.realWidth = document.documentElement.clientWidth :
                document.body && (this.realWidth = document.body.clientWidth);
            window.innerHeight ? this.realHeight = window.innerHeight : document.documentElement && document.documentElement.clientHeight ? this.realHeight = document.documentElement.clientHeight : document.body && (this.realHeight = document.body.clientHeight);
            this.offset = 25;
            this.buttonId = a;
            this.animationPrefix = f.getCssAnimation(b);
            this.element = b;
            this.element.style.position = null !== this.animationPrefix ? "fixed" : "absolute";
            this.element.style.left = "-1000px";
            this.element.style.top =
                "-1000px";
            this.element.style.zIndex = "10000";
            this.element.style.display = "";
            this.width = this.element.offsetWidth;
            this.height = this.element.offsetHeight;
            this.startPosition = c;
            this.endPosition = e
        };
        r.prototype.render = function() {
            this.element.style.display = ""
        };
        r.prototype.renderFinish = function() {};
        r.prototype.remove = function(a) {
            this.element.style.left = "-1000px";
            this.element.style.top = "-1000px"
        };
        r.prototype.addRenderListeners = function() {
            var a = this.buttonId,
                b = "AnimationIteration",
                c = "AnimationEnd";
            "" == this.animationPrefix ?
                (b = b.toLowerCase(), c = c.toLowerCase()) : (b = this.animationPrefix + b, c = this.animationPrefix + c);
            f.addEventListener(this.element, b, function() {
                D(a).renderFinish()
            });
            f.addEventListener(this.element, c, function() {
                D(a).removeFinish()
            })
        };
        J.prototype = new r;
        J.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = this.width * this.startPosition.xPosition + this.offset * this.startPosition.xOffset,
                b = this.height * this.startPosition.yPosition + this.offset * this.startPosition.yOffset,
                c = this.width * this.endPosition.xPercent *
                -1 + this.offset * this.endPosition.xOffset,
                e = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset,
                d = "";
            "" !== this.animationPrefix && (d = "-" + this.animationPrefix + "-");
            var g = document.createElement("style");
            g.innerHTML = "@" + d + "keyframes slide" + this.buttonId + "{from { margin-left: " + a + "px; margin-top: " + b + "px; left: " + 100 * this.startPosition.xPercent + "%; top: " + 100 * this.startPosition.yPercent + "%; }to { margin-left: " + c + "px; margin-top: " + e + "px; left: " + 100 * this.endPosition.xPercent + "%; top: " +
                100 * this.endPosition.yPercent + "%; }}";
            document.getElementsByTagName("head")[0].appendChild(g);
            this.element.style[d + "animation-name"] = "slide" + this.buttonId;
            this.element.style[d + "animation-duration"] = "1s";
            this.element.style[d + "animation-iteration-count"] = "2";
            this.element.style[d + "animation-direction"] = "alternate";
            this.element.style[d + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(d + "animation-name", "slide" + this.buttonId, "");
            this.element.style.setProperty(d + "animation-duration",
                "1s", "");
            this.element.style.setProperty(d + "animation-iteration-count", "2", "");
            this.element.style.setProperty(d + "animation-direction", "alternate", "");
            this.element.style.setProperty(d + "animation-timing-function", "ease-in-out", "");
            r.prototype.render.call(this)
        };
        J.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        J.prototype.remove =
            function(a) {
                var b = "";
                "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
                a ? (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", "")) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
            };
        K.prototype = new r;
        K.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            var b = document.createElement("style");
            b.innerHTML = "@" + a + "keyframes fade" + this.buttonId + "{from { opacity: 0; }to { opacity: 1; }}";
            document.getElementsByTagName("head")[0].appendChild(b);
            this.element.style[a + "animation-name"] = "fade" + this.buttonId;
            this.element.style[a + "animation-duration"] = "1s";
            this.element.style[a + "animation-iteration-count"] = "2";
            this.element.style[a + "animation-direction"] = "alternate";
            this.element.style[a + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(a +
                "animation-name", "fade" + this.buttonId, "");
            this.element.style.setProperty(a + "animation-duration", "1s", "");
            this.element.style.setProperty(a + "animation-iteration-count", "2", "");
            this.element.style.setProperty(a + "animation-direction", "alternate", "");
            this.element.style.setProperty(a + "animation-timing-function", "ease-in-out", "");
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent + "%";
            this.element.style.marginTop =
                this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this)
        };
        K.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        K.prototype.remove = function(a) {
            var b = "";
            "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
            a ?
                (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", ""), this.element.style.opacity = 0) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
        };
        M.prototype = new r;
        M.prototype.render = function() {
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent +
                "%";
            this.element.style.marginTop = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this);
            D(this.buttonId).renderFinish()
        };
        M.prototype.remove = function(a) {
            a ? D(this.buttonId).removeFinish() : r.prototype.remove.call(this, a)
        };
        E.prototype = new r;
        E.prototype.render = function() {
            D(this.buttonId).renderFinish()
        };
        E.prototype.renderFinish = function() {};
        E.prototype.remove = function(a) {
            a && D(this.buttonId).removeFinish()
        };
        h.TYPE = {
            NUMBER_OF_PAGE_VIEWS: "NUMBER_OF_PAGE_VIEWS",
            URL_MATCH: "URL_MATCH",
            SECONDS_ON_PAGE: "SECONDS_ON_PAGE",
            SECONDS_ON_SITE: "SECONDS_ON_SITE",
            CUSTOM_VARIABLE: "CUSTOM_VARIABLE"
        };
        h.OPERATOR = {
            EQUALS: "EQUALS",
            NOT_EQUAL: "NOT_EQUAL",
            START_WITH: "START_WITH",
            CONTAINS: "CONTAINS",
            NOT_CONTAIN: "NOT_CONTAIN",
            LESS_THAN: "LESS_THAN",
            GREATER_THAN: "GREATER_THAN",
            LESS_OR_EQUAL: "LESS_OR_EQUAL",
            GREATER_OR_EQUAL: "GREATER_OR_EQUAL"
        };
        h.prototype.init = function(a, b, c, e, d) {
            this.ruleId = a;
            this.buttonId = b;
            this.compareFrom = c;
            this.operator =
                e;
            this.compareTo = d
        };
        h.prototype.getId = function() {
            return this.ruleId
        };
        h.prototype.evaluate = function(a, b) {
            switch (this.operator) {
                case h.OPERATOR.EQUALS:
                    return f.log("Evaluate: " + a + " \x3d\x3d " + b), a == b;
                case h.OPERATOR.NOT_EQUAL:
                    return f.log("Evaluate: " + a + " !\x3d " + b), a != b;
                case h.OPERATOR.START_WITH:
                    return f.log("Evaluate: " + a + " indexOf " + b + " \x3d\x3d 0"), 0 == a.indexOf(b);
                case h.OPERATOR.CONTAINS:
                    return f.log("Evaluate: " + a + " indexOf " + b + " !\x3d -1"), -1 != a.indexOf(b);
                case h.OPERATOR.NOT_CONTAIN:
                    return f.log("Evaluate: " +
                        a + " indexOf " + b + " \x3d\x3d -1"), -1 == a.indexOf(b);
                case h.OPERATOR.LESS_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c " + parseFloat(b)), parseFloat(a) < parseFloat(b);
                case h.OPERATOR.GREATER_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e " + parseFloat(b)), parseFloat(a) > parseFloat(b);
                case h.OPERATOR.LESS_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c\x3d " + parseFloat(b)), parseFloat(a) <= parseFloat(b);
                case h.OPERATOR.GREATER_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e\x3d " +
                        parseFloat(b)), parseFloat(a) >= parseFloat(b)
            }
        };
        N.prototype = new h;
        N.prototype.evaluate = function() {
            f.log("Evaluating StandardInviteRule");
            return h.prototype.evaluate.call(this, this.compareFrom, this.compareTo)
        };
        O.prototype = new h;
        O.prototype.evaluate = function() {
            f.log("Evaluating TimerInviteRule");
            var a = (new Date).getTime() - this.compareFrom,
                b = h.prototype.evaluate.call(this, a, this.compareTo);
            !b && a <= this.compareTo && (a = this.compareTo - a, (null == u(this.buttonId).getInviteDelay() || a < u(this.buttonId).getInviteDelay()) &&
                u(this.buttonId).setInviteDelay(a));
            return b
        };
        V.prototype = new h;
        V.prototype.evaluate = function() {
            if (ja.hasOwnProperty(this.compareFrom)) return f.log("Evaluating CustomInviteRule"), h.prototype.evaluate.call(this, ja[this.compareFrom].toString(), this.compareTo);
            f.log("CustomInviteRule evaluation failed due to missing custom variable");
            return !1
        };
        var na = 0;
        z.prototype.init = function(a, b) {
            this.left = a;
            this.right = b
        };
        z.prototype.evaluate = function(a) {
            return !1
        };
        Z.prototype = new z;
        Z.prototype.evaluate = function(a) {
            f.log("Evaluating Atom Node: " +
                this.ruleId);
            return a.getRule(this.ruleId).evaluate()
        };
        W.prototype = new z;
        W.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating And Node");
            a = this.left.evaluate(a) && this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        X.prototype = new z;
        X.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Or Node");
            a = this.left.evaluate(a) || this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        Y.prototype = new z;
        Y.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Not Node");
            a = !this.left.evaluate(a);
            f.logGroupEnd();
            return a
        };
        oa.prototype.toJSON = function() {
            return {
                label: this.getLabel(),
                value: this.getValue(),
                displayToAgent: this.getDisplayToAgent(),
                entityMaps: this.getMapper().getEntityMaps(),
                transcriptFields: this.getMapper().getTranscriptFields(),
                doKnowledgeSearch: this.getDoKnowledgeSearch()
            }
        };
        aa.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityMaps().push(new pa(a, b, c, e, d))
        };
        aa.prototype.saveToTranscript = function(a) {
            this.getTranscriptFields().push(a)
        };
        pa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                fieldName: this.getFieldName(),
                fastFill: this.getFastFill(),
                autoQuery: this.getAutoQuery(),
                exactMatch: this.getExactMatch()
            }
        };
        var I = {};
        p._ = I;
        I.handlePing = function(a) {
            q.connection.handlePing(a)
        };
        I.error = function(a) {
            a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
            da()
        };
        I.warning = function(a) {
            a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
        };
        I.setNewPtid = function(a) {
            v.setPermanentId(a)
        };
        I.clearStorage =
            function() {
                B.clear()
            };
        p.init = function(a, b, c) {
            if ("string" != typeof a) throw Error("The url to init must be strings");
            if (!f.isOrganizationId(c)) throw Error("Invalid OrganizationId Parameter Value: " + c);
            if (!f.isDeploymentId(b)) throw Error("Invalid DeploymentId Parameter Value: " + b);
            m.url = a;
            m.deploymentId = b;
            m.orgId = c;
            f.log("System Initialized. Waiting for the DOM to be ready");
            "complete" === document.readyState ? setTimeout(P, 1) : document.addEventListener ? (document.addEventListener("DOMContentLoaded", P, !1),
                window.addEventListener("load", P, !1)) : window.attachEvent ? window.attachEvent("onload", P) : f.log("No available event model. Exiting.")
        };
        p.getSid = function() {
            return x
        };
        p.enableLogging = function() {
            R = !0
        };
        p.setLocation = function(a) {};
        p.setChatWindowWidth = function(a) {
            m.chatWindowWidth = a
        };
        p.setChatWindowHeight = function(a) {
            m.chatWindowHeight = a
        };
        p.disconnect = function() {
            da()
        };
        p.startChat = function(a, b, c) {
            (b ? L(a, b) : k[a]).startChat("liveagent" + Math.round(1E5 * Math.random()) + (new Date).getTime(), c)
        };
        p.startChatWithWindow =
            function(a, b, c, e) {
                (c ? L(a, c) : k[a]).startChat(b, e)
            };
        p.rejectChat = function(a) {
            k[a].rejectChat()
        };
        p.showWhenOnline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new T(a.buttonId, b))
        };
        p.showWhenOffline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new U(a.buttonId, b))
        };
        p.addCustomDetail = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a detail after page initialization.");
            if ("undefined" == typeof a || "undefined" == typeof b || null === a || null === b) throw Error("CustomDetail contains null value");
            var e = new oa(a, b, c);
            ya.push(e);
            var d = {
                map: function(a, b, c, f, h) {
                    if ("undefined" == typeof a || null === a || "undefined" == typeof b || null === b || null === c || null === f || null === h) throw Error("CustomDetail.map contains null value");
                    e.getMapper().map(a, b, c, f, h);
                    return d
                },
                saveToTranscript: function(a) {
                    if ("undefined" == typeof a || null === a) throw Error("CustomDetail.saveToTranscript contains null value");
                    e.getMapper().saveToTranscript(a);
                    return d
                },
                doKnowledgeSearch: function() {
                    e.setDoKnowledgeSearch();
                    return d
                }
            };
            return d
        };
        p.setName = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set the name after page initialization.");
            ea = a
        };
        p.addButtonEventHandler = function(a, b) {
            "function" == typeof b && (ha[a] = b)
        };
        p.BUTTON_EVENT = l.EVENT;
        p.setCustomVariable = function(a, b) {
            ja[a] = b;
            if (H.hasOwnProperty(a))
                for (var c = 0; c < H[a].length; c++) {
                    var e = u(H[a][c]);
                    e.getOnlineState() && e.setOnlineState(!0)
                }
        };
        p.findOrCreate = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot find or create after page initialization.");
            var b = new qa(a);
            za.push(b);
            var c = {
                map: function(a, d, g, f, h) {
                    b.getEntityMapper().map(a, d, g, f, h);
                    return c
                },
                saveToTranscript: function(a) {
                    b.setSaveTranscript(a);
                    return c
                },
                showOnCreate: function() {
                    b.setShowOnCreate(!0);
                    return c
                },
                linkToEntity: function(a, d) {
                    if (ka.hasOwnProperty(a) && ka[a] == b.getEntityName()) return fa("Warning: Recursive links detected, skip link " + b.getEntityName() + " to " + a), c;
                    b.setLinkToEntityName(a);
                    b.setLinkToEntityField(d);
                    ka[b.getEntityName()] = a;
                    return c
                }
            };
            return c
        };
        p.addURLPrefix = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set a URL Prefix after page initialization.");
            if ("string" != typeof a) throw Error("The parameter to addURLPrefix must be a string");
            m.url = f.addPrefixToURL(m.url, a, !0);
            m.urlPrefix = a
        };
        var q = {
            VisitorMessage: {
                ERROR: "Error",
                WARNING: "Warning"
            },
            SystemMessage: {
                ASYNC_RESULT: "AsyncResult",
                SWITCH_SERVER: "SwitchServer"
            }
        };
        (function() {
            var a = null,
                b = !1,
                c = null,
                e = null,
                d = {};
            (function() {
                d.send = function(b, f) {
                    if (null !== c) d.onError.call(window, "Did not handle response before sending another message");
                    else {
                        "undefined" == typeof f && (f = {});
                        var h = "Visitor",
                            k = "",
                            l = !1;
                        1 < b.length ?
                            (h = "System", k = "MultiNoun", f.nouns = "", l = !0) : k = b[0].getName();
                        h = m.url + "/rest/" + h + "/" + k + ".jsonp?";
                        for (k = 0; k < b.length; k++) {
                            l && (f.nouns += b[k].getName() + ",");
                            f[b[k].getName() + ".prefix"] = "Visitor";
                            for (var n in b[k].getData()) b[k].getData().hasOwnProperty(n) && (f[b[k].getName() + "." + n] = b[k].getData()[n])
                        }
                        l && (f.nouns = f.nouns.substr(0, f.nouns.length - 1));
                        for (var p in f) f.hasOwnProperty(p) && (h += p + "\x3d" + f[p] + "\x26");
                        h += "callback\x3d" + a;
                        h += "\x26deployment_id\x3d" + m.deploymentId;
                        h += "\x26org_id\x3d" + m.orgId;
                        h += "\x26version\x3d36";
                        l = document.createElement("script");
                        l.type = "text/javascript";
                        l.src = h;
                        c = document.body.appendChild(l);
                        e = window.setTimeout(function() {
                            d.onError.call(window, "Server failed to respond.")
                        }, m.pingTimeout)
                    }
                };
                d.handlePing = function(a) {
                    e && (clearTimeout(e), e = null);
                    b = !0;
                    a = a.messages;
                    for (var f = 0; f < a.length; f++) d.messageHandler.call(window, a[f].type, a[f].message);
                    d.onSuccess.call(window);
                    null !== c && (document.body.removeChild(c), c = null)
                };
                d.messageHandler = function(a, b) {};
                d.onSuccess = function() {};
                d.onError = function(a) {};
                d.isRunning = function() {
                    return b
                };
                d.setIsRunning = function(a) {
                    b = a
                };
                d.setCallback = function(b) {
                    a = b
                }
            })();
            q.connection = d;
            q.Noun = function(a, b) {
                this.getName = function() {
                    return a
                };
                this.getData = function() {
                    return b
                }
            }
        })();
        qa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                saveToTranscript: this.getSaveTranscript(),
                showOnCreate: this.getShowOnCreate(),
                linkToEntityName: this.getLinkToEntityName(),
                linkToEntityField: this.getLinkToEntityField(),
                entityFieldsMaps: this.getEntityMapper().getEntityFieldsMaps()
            }
        };
        ra.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityFieldsMaps().push(new sa(a, b, c, e, d))
        };
        sa.prototype.toJSON = function() {
            return {
                fieldName: this.getFieldName(),
                label: this.getLabel(),
                doFind: this.getDoFind(),
                isExactMatch: this.getIsExactMatch(),
                doCreate: this.getDoCreate()
            }
        };
        var x = f.getCookie("liveagent_sid"),
            ba = f.getCookie("liveagent_chatted"),
            ta = !1,
            R = !1,
            k = {},
            ya = [],
            za = [],
            ea = null,
            ha = {},
            Q = null,
            ka = {},
            ca = !1,
            m = {
                url: null,
                deploymentId: null,
                orgId: null,
                pingRate: null,
                pingTimeout: 5E3,
                chatWindowWidth: 482,
                chatWindowHeight: 450,
                contentServerUrl: null,
                chatPage: "/s/chat",
                prechatHandler: "/s/prechatVisitor"
            };
        q.connection.messageHandler = function(a, b) {
            switch (a) {
                case "VisitorId":
                    b.sessionId && (f.log("Received new session ID"), x = b.sessionId, document.cookie = "liveagent_sid\x3d" + encodeURIComponent(x) + ";path\x3d/;", null != v.getVisitCount() && v.setVisitCount(v.getVisitCount() + 1), v.getPermanentId() || v.setPermanentId(x));
                    break;
                case "Settings":
                    B.init();
                    f.log("Ping rate set to " + b.pingRate + "ms");
                    m.pingRate = b.pingRate;
                    m.contentServerUrl = b.contentServerUrl;
                    m.prefixKey = b.prefixKey;
                    for (var c = 0; c < b.buttons.length; c++) switch (b.buttons[c].type) {
                        case "ToAgent":
                        case "Standard":
                            var e = b.buttons[c],
                                d = k[e.id];
                            d && wa(d, e);
                            break;
                        case "Invite":
                            var e = b.buttons[c],
                                g = null,
                                g = e.inviteImageUrl ? Ca(e.id, e.inviteImageUrl, e.inviteImageWidth, e.inviteImageHeight) : document.getElementById("liveagent_invite_button_" + e.id);
                            null == g ? fa("Warning: Button " + e.id + " disabled because HTML element was not found") :
                                (d = u(e.id), d.addTracker(new A(e.id, g, e.inviteRenderer, e.inviteStartPosition, e.inviteEndPosition, e.hasInviteAfterAccept, e.hasInviteAfterReject, e.inviteRejectTime)), g = f.jsonDecode(e.inviteRules), d.setRules(g.rules, g.filter), wa(d, e))
                    }
                    break;
                case "Availability":
                    c = {};
                    for (e = 0; e < b.results.length; e++)(d = k[b.results[e].id]) && (c[b.results[e].id] = {
                        button: d,
                        isAvailable: b.results[e].isAvailable
                    });
                    null != G && c.hasOwnProperty(G) && (c[G].button.setOnlineState(c[G].isAvailable), delete c[G]);
                    for (g in c) c.hasOwnProperty(g) &&
                        c[g].button.setOnlineState(c[g].isAvailable);
                    break;
                case q.VisitorMessage.WARNING:
                    fa(b.text);
                    break;
                case q.VisitorMessage.ERROR:
                    Aa(b.text);
                    break;
                case q.SystemMessage.SWITCH_SERVER:
                    c = b.newUrl;
                    if ("string" === typeof c) m.url = c, f.log("Received updated LiveAgent server url: " + c + "! Consider updating this site's deployment code.");
                    else throw Error("Trying to set invalid LiveAgent server url: " + c);
                    ca = !0
            }
        };
        q.connection.onSuccess = function() {
            null !== Q && clearTimeout(Q);
            Q = window.setTimeout(Da, m.pingRate)
        };
        q.connection.onError =
            function(a) {
                Aa(a)
            }
    }
})();
;(function () {
	'use strict';

	/**
	 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	 *
	 * @codingstandard ftlabs-jsv2
	 * @copyright The Financial Times Limited [All Rights Reserved]
	 * @license MIT License (see LICENSE.txt)
	 */

	/*jslint browser:true, node:true*/
	/*global define, Event, Node*/


	/**
	 * Instantiate fast-clicking listeners on the specified layer.
	 *
	 * @constructor
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	function FastClick(layer, options) {
		var oldOnClick;

		options = options || {};

		/**
		 * Whether a click is currently being tracked.
		 *
		 * @type boolean
		 */
		this.trackingClick = false;


		/**
		 * Timestamp for when click tracking started.
		 *
		 * @type number
		 */
		this.trackingClickStart = 0;


		/**
		 * The element being tracked for a click.
		 *
		 * @type EventTarget
		 */
		this.targetElement = null;


		/**
		 * X-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartX = 0;


		/**
		 * Y-coordinate of touch start event.
		 *
		 * @type number
		 */
		this.touchStartY = 0;


		/**
		 * ID of the last touch, retrieved from Touch.identifier.
		 *
		 * @type number
		 */
		this.lastTouchIdentifier = 0;


		/**
		 * Touchmove boundary, beyond which a click will be cancelled.
		 *
		 * @type number
		 */
		this.touchBoundary = options.touchBoundary || 10;


		/**
		 * The FastClick layer.
		 *
		 * @type Element
		 */
		this.layer = layer;

		/**
		 * The minimum time between tap(touchstart and touchend) events
		 *
		 * @type number
		 */
		this.tapDelay = options.tapDelay || 200;

		/**
		 * The maximum time for a tap
		 *
		 * @type number
		 */
		this.tapTimeout = options.tapTimeout || 700;

		if (FastClick.notNeeded(layer)) {
			return;
		}

		// Some old versions of Android don't have Function.prototype.bind
		function bind(method, context) {
			return function() { return method.apply(context, arguments); };
		}


		var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
		var context = this;
		for (var i = 0, l = methods.length; i < l; i++) {
			context[methods[i]] = bind(context[methods[i]], context);
		}

		// Set up event handlers as required
		if (deviceIsAndroid) {
			layer.addEventListener('mouseover', this.onMouse, true);
			layer.addEventListener('mousedown', this.onMouse, true);
			layer.addEventListener('mouseup', this.onMouse, true);
		}

		layer.addEventListener('click', this.onClick, true);
		layer.addEventListener('touchstart', this.onTouchStart, false);
		layer.addEventListener('touchmove', this.onTouchMove, false);
		layer.addEventListener('touchend', this.onTouchEnd, false);
		layer.addEventListener('touchcancel', this.onTouchCancel, false);

		// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
		// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
		// layer when they are cancelled.
		if (!Event.prototype.stopImmediatePropagation) {
			layer.removeEventListener = function(type, callback, capture) {
				var rmv = Node.prototype.removeEventListener;
				if (type === 'click') {
					rmv.call(layer, type, callback.hijacked || callback, capture);
				} else {
					rmv.call(layer, type, callback, capture);
				}
			};

			layer.addEventListener = function(type, callback, capture) {
				var adv = Node.prototype.addEventListener;
				if (type === 'click') {
					adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
						if (!event.propagationStopped) {
							callback(event);
						}
					}), capture);
				} else {
					adv.call(layer, type, callback, capture);
				}
			};
		}

		// If a handler is already declared in the element's onclick attribute, it will be fired before
		// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
		// adding it as listener.
		if (typeof layer.onclick === 'function') {

			// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
			// - the old one won't work if passed to addEventListener directly.
			oldOnClick = layer.onclick;
			layer.addEventListener('click', function(event) {
				oldOnClick(event);
			}, false);
			layer.onclick = null;
		}
	}

	/**
	* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	*
	* @type boolean
	*/
	var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

	/**
	 * Android requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


	/**
	 * iOS requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


	/**
	 * iOS 4 requires an exception for select elements.
	 *
	 * @type boolean
	 */
	var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


	/**
	 * iOS 6.0-7.* requires the target element to be manually derived
	 *
	 * @type boolean
	 */
	var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

	/**
	 * BlackBerry requires exceptions.
	 *
	 * @type boolean
	 */
	var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

	/**
	 * Determine whether a given element requires a native click.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element needs a native click
	 */
	FastClick.prototype.needsClick = function(target) {
		switch (target.nodeName.toLowerCase()) {

		// Don't send a synthetic click to disabled inputs (issue #62)
		case 'button':
		case 'select':
		case 'textarea':
			if (target.disabled) {
				return true;
			}

			break;
		case 'input':

			// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
			if ((deviceIsIOS && target.type === 'file') || target.disabled) {
				return true;
			}

			break;
		case 'label':
		case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
		case 'video':
			return true;
		}

		return (/\bneedsclick\b/).test(target.className);
	};


	/**
	 * Determine whether a given element requires a call to focus to simulate click into element.
	 *
	 * @param {EventTarget|Element} target Target DOM element
	 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	 */
	FastClick.prototype.needsFocus = function(target) {
		switch (target.nodeName.toLowerCase()) {
		case 'textarea':
			return true;
		case 'select':
			return !deviceIsAndroid;
		case 'input':
			switch (target.type) {
			case 'button':
			case 'checkbox':
			case 'file':
			case 'image':
			case 'radio':
			case 'submit':
				return false;
			}

			// No point in attempting to focus disabled inputs
			return !target.disabled && !target.readOnly;
		default:
			return (/\bneedsfocus\b/).test(target.className);
		}
	};


	/**
	 * Send a click event to the specified element.
	 *
	 * @param {EventTarget|Element} targetElement
	 * @param {Event} event
	 */
	FastClick.prototype.sendClick = function(targetElement, event) {
		var clickEvent, touch;

		// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
		if (document.activeElement && document.activeElement !== targetElement) {
			document.activeElement.blur();
		}

		touch = event.changedTouches[0];

		// Synthesise a click event, with an extra attribute so it can be tracked
		clickEvent = document.createEvent('MouseEvents');
		clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
		clickEvent.forwardedTouchEvent = true;
		targetElement.dispatchEvent(clickEvent);
	};

	FastClick.prototype.determineEventType = function(targetElement) {

		//Issue #159: Android Chrome Select Box does not open with a synthetic click event
		if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
			return 'mousedown';
		}

		return 'click';
	};


	/**
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.focus = function(targetElement) {
		var length;

		// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
		if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
			length = targetElement.value.length;
			targetElement.setSelectionRange(length, length);
		} else {
			targetElement.focus();
		}
	};


	/**
	 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	 *
	 * @param {EventTarget|Element} targetElement
	 */
	FastClick.prototype.updateScrollParent = function(targetElement) {
		var scrollParent, parentElement;

		scrollParent = targetElement.fastClickScrollParent;

		// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
		// target element was moved to another parent.
		if (!scrollParent || !scrollParent.contains(targetElement)) {
			parentElement = targetElement;
			do {
				if (parentElement.scrollHeight > parentElement.offsetHeight) {
					scrollParent = parentElement;
					targetElement.fastClickScrollParent = parentElement;
					break;
				}

				parentElement = parentElement.parentElement;
			} while (parentElement);
		}

		// Always update the scroll top tracker if possible.
		if (scrollParent) {
			scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
		}
	};


	/**
	 * @param {EventTarget} targetElement
	 * @returns {Element|EventTarget}
	 */
	FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

		// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
		if (eventTarget.nodeType === Node.TEXT_NODE) {
			return eventTarget.parentNode;
		}

		return eventTarget;
	};


	/**
	 * On touch start, record the position and scroll offset.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchStart = function(event) {
		var targetElement, touch, selection;

		// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
		if (event.targetTouches.length > 1) {
			return true;
		}

		targetElement = this.getTargetElementFromEventTarget(event.target);
		touch = event.targetTouches[0];

		if (deviceIsIOS) {

			// Only trusted events will deselect text on iOS (issue #49)
			selection = window.getSelection();
			if (selection.rangeCount && !selection.isCollapsed) {
				return true;
			}

			if (!deviceIsIOS4) {

				// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
				// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
				// with the same identifier as the touch event that previously triggered the click that triggered the alert.
				// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
				// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
				// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
				// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
				// random integers, it's safe to to continue if the identifier is 0 here.
				if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
					event.preventDefault();
					return false;
				}

				this.lastTouchIdentifier = touch.identifier;

				// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
				// 1) the user does a fling scroll on the scrollable layer
				// 2) the user stops the fling scroll with another tap
				// then the event.target of the last 'touchend' event will be the element that was under the user's finger
				// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
				// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
				this.updateScrollParent(targetElement);
			}
		}

		this.trackingClick = true;
		this.trackingClickStart = event.timeStamp;
		this.targetElement = targetElement;

		this.touchStartX = touch.pageX;
		this.touchStartY = touch.pageY;

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			event.preventDefault();
		}

		return true;
	};


	/**
	 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.touchHasMoved = function(event) {
		var touch = event.changedTouches[0], boundary = this.touchBoundary;

		if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
			return true;
		}

		return false;
	};


	/**
	 * Update the last position.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchMove = function(event) {
		if (!this.trackingClick) {
			return true;
		}

		// If the touch has moved, cancel the click tracking
		if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
			this.trackingClick = false;
			this.targetElement = null;
		}

		return true;
	};


	/**
	 * Attempt to find the labelled control for the given label element.
	 *
	 * @param {EventTarget|HTMLLabelElement} labelElement
	 * @returns {Element|null}
	 */
	FastClick.prototype.findControl = function(labelElement) {

		// Fast path for newer browsers supporting the HTML5 control attribute
		if (labelElement.control !== undefined) {
			return labelElement.control;
		}

		// All browsers under test that support touch events also support the HTML5 htmlFor attribute
		if (labelElement.htmlFor) {
			return document.getElementById(labelElement.htmlFor);
		}

		// If no for attribute exists, attempt to retrieve the first labellable descendant element
		// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
		return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	};


	/**
	 * On touch end, determine whether to send a click event at once.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onTouchEnd = function(event) {
		var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

		if (!this.trackingClick) {
			return true;
		}

		// Prevent phantom clicks on fast double-tap (issue #36)
		if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
			this.cancelNextClick = true;
			return true;
		}

		if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
			return true;
		}

		// Reset to prevent wrong click cancel on input (issue #156).
		this.cancelNextClick = false;

		this.lastClickTime = event.timeStamp;

		trackingClickStart = this.trackingClickStart;
		this.trackingClick = false;
		this.trackingClickStart = 0;

		// On some iOS devices, the targetElement supplied with the event is invalid if the layer
		// is performing a transition or scroll, and has to be re-detected manually. Note that
		// for this to function correctly, it must be called *after* the event target is checked!
		// See issue #57; also filed as rdar://13048589 .
		if (deviceIsIOSWithBadTarget) {
			touch = event.changedTouches[0];

			// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
			targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
			targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
		}

		targetTagName = targetElement.tagName.toLowerCase();
		if (targetTagName === 'label') {
			forElement = this.findControl(targetElement);
			if (forElement) {
				this.focus(targetElement);
				if (deviceIsAndroid) {
					return false;
				}

				targetElement = forElement;
			}
		} else if (this.needsFocus(targetElement)) {

			// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
			// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
			if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
				this.targetElement = null;
				return false;
			}

			this.focus(targetElement);
			this.sendClick(targetElement, event);

			// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
			// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
			if (!deviceIsIOS || targetTagName !== 'select') {
				this.targetElement = null;
				event.preventDefault();
			}

			return false;
		}

		if (deviceIsIOS && !deviceIsIOS4) {

			// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
			// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
			scrollParent = targetElement.fastClickScrollParent;
			if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
				return true;
			}
		}

		// Prevent the actual click from going though - unless the target node is marked as requiring
		// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
		if (!this.needsClick(targetElement)) {
			event.preventDefault();
			this.sendClick(targetElement, event);
		}

		return false;
	};


	/**
	 * On touch cancel, stop tracking the click.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.onTouchCancel = function() {
		this.trackingClick = false;
		this.targetElement = null;
	};


	/**
	 * Determine mouse events which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onMouse = function(event) {

		// If a target element was never set (because a touch event was never fired) allow the event
		if (!this.targetElement) {
			return true;
		}

		if (event.forwardedTouchEvent) {
			return true;
		}

		// Programmatically generated events targeting a specific element should be permitted
		if (!event.cancelable) {
			return true;
		}

		// Derive and check the target element to see whether the mouse event needs to be permitted;
		// unless explicitly enabled, prevent non-touch click events from triggering actions,
		// to prevent ghost/doubleclicks.
		if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

			// Prevent any user-added listeners declared on FastClick element from being fired.
			if (event.stopImmediatePropagation) {
				event.stopImmediatePropagation();
			} else {

				// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
				event.propagationStopped = true;
			}

			// Cancel the event
			event.stopPropagation();
			event.preventDefault();

			return false;
		}

		// If the mouse event is permitted, return true for the action to go through.
		return true;
	};


	/**
	 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	 * an actual click which should be permitted.
	 *
	 * @param {Event} event
	 * @returns {boolean}
	 */
	FastClick.prototype.onClick = function(event) {
		var permitted;

		// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
		if (this.trackingClick) {
			this.targetElement = null;
			this.trackingClick = false;
			return true;
		}

		// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
		if (event.target.type === 'submit' && event.detail === 0) {
			return true;
		}

		permitted = this.onMouse(event);

		// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
		if (!permitted) {
			this.targetElement = null;
		}

		// If clicks are permitted, return true for the action to go through.
		return permitted;
	};


	/**
	 * Remove all FastClick's event listeners.
	 *
	 * @returns {void}
	 */
	FastClick.prototype.destroy = function() {
		var layer = this.layer;

		if (deviceIsAndroid) {
			layer.removeEventListener('mouseover', this.onMouse, true);
			layer.removeEventListener('mousedown', this.onMouse, true);
			layer.removeEventListener('mouseup', this.onMouse, true);
		}

		layer.removeEventListener('click', this.onClick, true);
		layer.removeEventListener('touchstart', this.onTouchStart, false);
		layer.removeEventListener('touchmove', this.onTouchMove, false);
		layer.removeEventListener('touchend', this.onTouchEnd, false);
		layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	};


	/**
	 * Check whether FastClick is needed.
	 *
	 * @param {Element} layer The layer to listen on
	 */
	FastClick.notNeeded = function(layer) {
		var metaViewport;
		var chromeVersion;
		var blackberryVersion;
		var firefoxVersion;

		// Devices that don't support touch don't need FastClick
		if (typeof window.ontouchstart === 'undefined') {
			return true;
		}

		// Chrome version - zero for other browsers
		chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (chromeVersion) {

			if (deviceIsAndroid) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// Chrome 32 and above with width=device-width or less don't need FastClick
					if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}

			// Chrome desktop doesn't need FastClick (issue #15)
			} else {
				return true;
			}
		}

		if (deviceIsBlackBerry10) {
			blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

			// BlackBerry 10.3+ does not require Fastclick library.
			// https://github.com/ftlabs/fastclick/issues/251
			if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
				metaViewport = document.querySelector('meta[name=viewport]');

				if (metaViewport) {
					// user-scalable=no eliminates click delay.
					if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
						return true;
					}
					// width=device-width (or less than device-width) eliminates click delay.
					if (document.documentElement.scrollWidth <= window.outerWidth) {
						return true;
					}
				}
			}
		}

		// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
		if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		// Firefox version - zero for other browsers
		firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

		if (firefoxVersion >= 27) {
			// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

			metaViewport = document.querySelector('meta[name=viewport]');
			if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
				return true;
			}
		}

		// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
		// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
		if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
			return true;
		}

		return false;
	};


	/**
	 * Factory method for creating a FastClick object
	 *
	 * @param {Element} layer The layer to listen on
	 * @param {Object} [options={}] The options to override the defaults
	 */
	FastClick.attach = function(layer, options) {
		return new FastClick(layer, options);
	};


	if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {

		// AMD. Register as an anonymous module.
		define(function() {
			return FastClick;
		});
	} else if (typeof module !== 'undefined' && module.exports) {
		module.exports = FastClick.attach;
		module.exports.FastClick = FastClick;
	} else {
		window.FastClick = FastClick;
	}
}());

//! moment.js
//! version : 2.12.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
!function(a,b){"object"==typeof exports&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):a.moment=b()}(this,function(){"use strict";function a(){return Zc.apply(null,arguments)}function b(a){Zc=a}function c(a){return a instanceof Array||"[object Array]"===Object.prototype.toString.call(a)}function d(a){return a instanceof Date||"[object Date]"===Object.prototype.toString.call(a)}function e(a,b){var c,d=[];for(c=0;c<a.length;++c)d.push(b(a[c],c));return d}function f(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function g(a,b){for(var c in b)f(b,c)&&(a[c]=b[c]);return f(b,"toString")&&(a.toString=b.toString),f(b,"valueOf")&&(a.valueOf=b.valueOf),a}function h(a,b,c,d){return Ia(a,b,c,d,!0).utc()}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function j(a){return null==a._pf&&(a._pf=i()),a._pf}function k(a){if(null==a._isValid){var b=j(a);a._isValid=!(isNaN(a._d.getTime())||!(b.overflow<0)||b.empty||b.invalidMonth||b.invalidWeekday||b.nullInput||b.invalidFormat||b.userInvalidated),a._strict&&(a._isValid=a._isValid&&0===b.charsLeftOver&&0===b.unusedTokens.length&&void 0===b.bigHour)}return a._isValid}function l(a){var b=h(NaN);return null!=a?g(j(b),a):j(b).userInvalidated=!0,b}function m(a){return void 0===a}function n(a,b){var c,d,e;if(m(b._isAMomentObject)||(a._isAMomentObject=b._isAMomentObject),m(b._i)||(a._i=b._i),m(b._f)||(a._f=b._f),m(b._l)||(a._l=b._l),m(b._strict)||(a._strict=b._strict),m(b._tzm)||(a._tzm=b._tzm),m(b._isUTC)||(a._isUTC=b._isUTC),m(b._offset)||(a._offset=b._offset),m(b._pf)||(a._pf=j(b)),m(b._locale)||(a._locale=b._locale),$c.length>0)for(c in $c)d=$c[c],e=b[d],m(e)||(a[d]=e);return a}function o(b){n(this,b),this._d=new Date(null!=b._d?b._d.getTime():NaN),_c===!1&&(_c=!0,a.updateOffset(this),_c=!1)}function p(a){return a instanceof o||null!=a&&null!=a._isAMomentObject}function q(a){return 0>a?Math.ceil(a):Math.floor(a)}function r(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=q(b)),c}function s(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&r(a[d])!==r(b[d]))&&g++;return g+f}function t(b){a.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+b)}function u(a,b){var c=!0;return g(function(){return c&&(t(a+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),c=!1),b.apply(this,arguments)},b)}function v(a,b){ad[a]||(t(b),ad[a]=!0)}function w(a){return a instanceof Function||"[object Function]"===Object.prototype.toString.call(a)}function x(a){return"[object Object]"===Object.prototype.toString.call(a)}function y(a){var b,c;for(c in a)b=a[c],w(b)?this[c]=b:this["_"+c]=b;this._config=a,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function z(a,b){var c,d=g({},a);for(c in b)f(b,c)&&(x(a[c])&&x(b[c])?(d[c]={},g(d[c],a[c]),g(d[c],b[c])):null!=b[c]?d[c]=b[c]:delete d[c]);return d}function A(a){null!=a&&this.set(a)}function B(a){return a?a.toLowerCase().replace("_","-"):a}function C(a){for(var b,c,d,e,f=0;f<a.length;){for(e=B(a[f]).split("-"),b=e.length,c=B(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=D(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&s(e,c,!0)>=b-1)break;b--}f++}return null}function D(a){var b=null;if(!cd[a]&&"undefined"!=typeof module&&module&&module.exports)try{b=bd._abbr,require("./locale/"+a),E(b)}catch(c){}return cd[a]}function E(a,b){var c;return a&&(c=m(b)?H(a):F(a,b),c&&(bd=c)),bd._abbr}function F(a,b){return null!==b?(b.abbr=a,null!=cd[a]?(v("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),b=z(cd[a]._config,b)):null!=b.parentLocale&&(null!=cd[b.parentLocale]?b=z(cd[b.parentLocale]._config,b):v("parentLocaleUndefined","specified parentLocale is not defined yet")),cd[a]=new A(b),E(a),cd[a]):(delete cd[a],null)}function G(a,b){if(null!=b){var c;null!=cd[a]&&(b=z(cd[a]._config,b)),c=new A(b),c.parentLocale=cd[a],cd[a]=c,E(a)}else null!=cd[a]&&(null!=cd[a].parentLocale?cd[a]=cd[a].parentLocale:null!=cd[a]&&delete cd[a]);return cd[a]}function H(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return bd;if(!c(a)){if(b=D(a))return b;a=[a]}return C(a)}function I(){return Object.keys(cd)}function J(a,b){var c=a.toLowerCase();dd[c]=dd[c+"s"]=dd[b]=a}function K(a){return"string"==typeof a?dd[a]||dd[a.toLowerCase()]:void 0}function L(a){var b,c,d={};for(c in a)f(a,c)&&(b=K(c),b&&(d[b]=a[c]));return d}function M(b,c){return function(d){return null!=d?(O(this,b,d),a.updateOffset(this,c),this):N(this,b)}}function N(a,b){return a.isValid()?a._d["get"+(a._isUTC?"UTC":"")+b]():NaN}function O(a,b,c){a.isValid()&&a._d["set"+(a._isUTC?"UTC":"")+b](c)}function P(a,b){var c;if("object"==typeof a)for(c in a)this.set(c,a[c]);else if(a=K(a),w(this[a]))return this[a](b);return this}function Q(a,b,c){var d=""+Math.abs(a),e=b-d.length,f=a>=0;return(f?c?"+":"":"-")+Math.pow(10,Math.max(0,e)).toString().substr(1)+d}function R(a,b,c,d){var e=d;"string"==typeof d&&(e=function(){return this[d]()}),a&&(hd[a]=e),b&&(hd[b[0]]=function(){return Q(e.apply(this,arguments),b[1],b[2])}),c&&(hd[c]=function(){return this.localeData().ordinal(e.apply(this,arguments),a)})}function S(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function T(a){var b,c,d=a.match(ed);for(b=0,c=d.length;c>b;b++)hd[d[b]]?d[b]=hd[d[b]]:d[b]=S(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function U(a,b){return a.isValid()?(b=V(b,a.localeData()),gd[b]=gd[b]||T(b),gd[b](a)):a.localeData().invalidDate()}function V(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(fd.lastIndex=0;d>=0&&fd.test(a);)a=a.replace(fd,c),fd.lastIndex=0,d-=1;return a}function W(a,b,c){zd[a]=w(b)?b:function(a,d){return a&&c?c:b}}function X(a,b){return f(zd,a)?zd[a](b._strict,b._locale):new RegExp(Y(a))}function Y(a){return Z(a.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e}))}function Z(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function $(a,b){var c,d=b;for("string"==typeof a&&(a=[a]),"number"==typeof b&&(d=function(a,c){c[b]=r(a)}),c=0;c<a.length;c++)Ad[a[c]]=d}function _(a,b){$(a,function(a,c,d,e){d._w=d._w||{},b(a,d._w,d,e)})}function aa(a,b,c){null!=b&&f(Ad,a)&&Ad[a](b,c._a,c,a)}function ba(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function ca(a,b){return c(this._months)?this._months[a.month()]:this._months[Kd.test(b)?"format":"standalone"][a.month()]}function da(a,b){return c(this._monthsShort)?this._monthsShort[a.month()]:this._monthsShort[Kd.test(b)?"format":"standalone"][a.month()]}function ea(a,b,c){var d,e,f;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),d=0;12>d;d++){if(e=h([2e3,d]),c&&!this._longMonthsParse[d]&&(this._longMonthsParse[d]=new RegExp("^"+this.months(e,"").replace(".","")+"$","i"),this._shortMonthsParse[d]=new RegExp("^"+this.monthsShort(e,"").replace(".","")+"$","i")),c||this._monthsParse[d]||(f="^"+this.months(e,"")+"|^"+this.monthsShort(e,""),this._monthsParse[d]=new RegExp(f.replace(".",""),"i")),c&&"MMMM"===b&&this._longMonthsParse[d].test(a))return d;if(c&&"MMM"===b&&this._shortMonthsParse[d].test(a))return d;if(!c&&this._monthsParse[d].test(a))return d}}function fa(a,b){var c;if(!a.isValid())return a;if("string"==typeof b)if(/^\d+$/.test(b))b=r(b);else if(b=a.localeData().monthsParse(b),"number"!=typeof b)return a;return c=Math.min(a.date(),ba(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a}function ga(b){return null!=b?(fa(this,b),a.updateOffset(this,!0),this):N(this,"Month")}function ha(){return ba(this.year(),this.month())}function ia(a){return this._monthsParseExact?(f(this,"_monthsRegex")||ka.call(this),a?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&a?this._monthsShortStrictRegex:this._monthsShortRegex}function ja(a){return this._monthsParseExact?(f(this,"_monthsRegex")||ka.call(this),a?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&a?this._monthsStrictRegex:this._monthsRegex}function ka(){function a(a,b){return b.length-a.length}var b,c,d=[],e=[],f=[];for(b=0;12>b;b++)c=h([2e3,b]),d.push(this.monthsShort(c,"")),e.push(this.months(c,"")),f.push(this.months(c,"")),f.push(this.monthsShort(c,""));for(d.sort(a),e.sort(a),f.sort(a),b=0;12>b;b++)d[b]=Z(d[b]),e[b]=Z(e[b]),f[b]=Z(f[b]);this._monthsRegex=new RegExp("^("+f.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+e.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+d.join("|")+")$","i")}function la(a){var b,c=a._a;return c&&-2===j(a).overflow&&(b=c[Cd]<0||c[Cd]>11?Cd:c[Dd]<1||c[Dd]>ba(c[Bd],c[Cd])?Dd:c[Ed]<0||c[Ed]>24||24===c[Ed]&&(0!==c[Fd]||0!==c[Gd]||0!==c[Hd])?Ed:c[Fd]<0||c[Fd]>59?Fd:c[Gd]<0||c[Gd]>59?Gd:c[Hd]<0||c[Hd]>999?Hd:-1,j(a)._overflowDayOfYear&&(Bd>b||b>Dd)&&(b=Dd),j(a)._overflowWeeks&&-1===b&&(b=Id),j(a)._overflowWeekday&&-1===b&&(b=Jd),j(a).overflow=b),a}function ma(a){var b,c,d,e,f,g,h=a._i,i=Pd.exec(h)||Qd.exec(h);if(i){for(j(a).iso=!0,b=0,c=Sd.length;c>b;b++)if(Sd[b][1].exec(i[1])){e=Sd[b][0],d=Sd[b][2]!==!1;break}if(null==e)return void(a._isValid=!1);if(i[3]){for(b=0,c=Td.length;c>b;b++)if(Td[b][1].exec(i[3])){f=(i[2]||" ")+Td[b][0];break}if(null==f)return void(a._isValid=!1)}if(!d&&null!=f)return void(a._isValid=!1);if(i[4]){if(!Rd.exec(i[4]))return void(a._isValid=!1);g="Z"}a._f=e+(f||"")+(g||""),Ba(a)}else a._isValid=!1}function na(b){var c=Ud.exec(b._i);return null!==c?void(b._d=new Date(+c[1])):(ma(b),void(b._isValid===!1&&(delete b._isValid,a.createFromInputFallback(b))))}function oa(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 100>a&&a>=0&&isFinite(h.getFullYear())&&h.setFullYear(a),h}function pa(a){var b=new Date(Date.UTC.apply(null,arguments));return 100>a&&a>=0&&isFinite(b.getUTCFullYear())&&b.setUTCFullYear(a),b}function qa(a){return ra(a)?366:365}function ra(a){return a%4===0&&a%100!==0||a%400===0}function sa(){return ra(this.year())}function ta(a,b,c){var d=7+b-c,e=(7+pa(a,0,d).getUTCDay()-b)%7;return-e+d-1}function ua(a,b,c,d,e){var f,g,h=(7+c-d)%7,i=ta(a,d,e),j=1+7*(b-1)+h+i;return 0>=j?(f=a-1,g=qa(f)+j):j>qa(a)?(f=a+1,g=j-qa(a)):(f=a,g=j),{year:f,dayOfYear:g}}function va(a,b,c){var d,e,f=ta(a.year(),b,c),g=Math.floor((a.dayOfYear()-f-1)/7)+1;return 1>g?(e=a.year()-1,d=g+wa(e,b,c)):g>wa(a.year(),b,c)?(d=g-wa(a.year(),b,c),e=a.year()+1):(e=a.year(),d=g),{week:d,year:e}}function wa(a,b,c){var d=ta(a,b,c),e=ta(a+1,b,c);return(qa(a)-d+e)/7}function xa(a,b,c){return null!=a?a:null!=b?b:c}function ya(b){var c=new Date(a.now());return b._useUTC?[c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()]:[c.getFullYear(),c.getMonth(),c.getDate()]}function za(a){var b,c,d,e,f=[];if(!a._d){for(d=ya(a),a._w&&null==a._a[Dd]&&null==a._a[Cd]&&Aa(a),a._dayOfYear&&(e=xa(a._a[Bd],d[Bd]),a._dayOfYear>qa(e)&&(j(a)._overflowDayOfYear=!0),c=pa(e,0,a._dayOfYear),a._a[Cd]=c.getUTCMonth(),a._a[Dd]=c.getUTCDate()),b=0;3>b&&null==a._a[b];++b)a._a[b]=f[b]=d[b];for(;7>b;b++)a._a[b]=f[b]=null==a._a[b]?2===b?1:0:a._a[b];24===a._a[Ed]&&0===a._a[Fd]&&0===a._a[Gd]&&0===a._a[Hd]&&(a._nextDay=!0,a._a[Ed]=0),a._d=(a._useUTC?pa:oa).apply(null,f),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()-a._tzm),a._nextDay&&(a._a[Ed]=24)}}function Aa(a){var b,c,d,e,f,g,h,i;b=a._w,null!=b.GG||null!=b.W||null!=b.E?(f=1,g=4,c=xa(b.GG,a._a[Bd],va(Ja(),1,4).year),d=xa(b.W,1),e=xa(b.E,1),(1>e||e>7)&&(i=!0)):(f=a._locale._week.dow,g=a._locale._week.doy,c=xa(b.gg,a._a[Bd],va(Ja(),f,g).year),d=xa(b.w,1),null!=b.d?(e=b.d,(0>e||e>6)&&(i=!0)):null!=b.e?(e=b.e+f,(b.e<0||b.e>6)&&(i=!0)):e=f),1>d||d>wa(c,f,g)?j(a)._overflowWeeks=!0:null!=i?j(a)._overflowWeekday=!0:(h=ua(c,d,e,f,g),a._a[Bd]=h.year,a._dayOfYear=h.dayOfYear)}function Ba(b){if(b._f===a.ISO_8601)return void ma(b);b._a=[],j(b).empty=!0;var c,d,e,f,g,h=""+b._i,i=h.length,k=0;for(e=V(b._f,b._locale).match(ed)||[],c=0;c<e.length;c++)f=e[c],d=(h.match(X(f,b))||[])[0],d&&(g=h.substr(0,h.indexOf(d)),g.length>0&&j(b).unusedInput.push(g),h=h.slice(h.indexOf(d)+d.length),k+=d.length),hd[f]?(d?j(b).empty=!1:j(b).unusedTokens.push(f),aa(f,d,b)):b._strict&&!d&&j(b).unusedTokens.push(f);j(b).charsLeftOver=i-k,h.length>0&&j(b).unusedInput.push(h),j(b).bigHour===!0&&b._a[Ed]<=12&&b._a[Ed]>0&&(j(b).bigHour=void 0),b._a[Ed]=Ca(b._locale,b._a[Ed],b._meridiem),za(b),la(b)}function Ca(a,b,c){var d;return null==c?b:null!=a.meridiemHour?a.meridiemHour(b,c):null!=a.isPM?(d=a.isPM(c),d&&12>b&&(b+=12),d||12!==b||(b=0),b):b}function Da(a){var b,c,d,e,f;if(0===a._f.length)return j(a).invalidFormat=!0,void(a._d=new Date(NaN));for(e=0;e<a._f.length;e++)f=0,b=n({},a),null!=a._useUTC&&(b._useUTC=a._useUTC),b._f=a._f[e],Ba(b),k(b)&&(f+=j(b).charsLeftOver,f+=10*j(b).unusedTokens.length,j(b).score=f,(null==d||d>f)&&(d=f,c=b));g(a,c||b)}function Ea(a){if(!a._d){var b=L(a._i);a._a=e([b.year,b.month,b.day||b.date,b.hour,b.minute,b.second,b.millisecond],function(a){return a&&parseInt(a,10)}),za(a)}}function Fa(a){var b=new o(la(Ga(a)));return b._nextDay&&(b.add(1,"d"),b._nextDay=void 0),b}function Ga(a){var b=a._i,e=a._f;return a._locale=a._locale||H(a._l),null===b||void 0===e&&""===b?l({nullInput:!0}):("string"==typeof b&&(a._i=b=a._locale.preparse(b)),p(b)?new o(la(b)):(c(e)?Da(a):e?Ba(a):d(b)?a._d=b:Ha(a),k(a)||(a._d=null),a))}function Ha(b){var f=b._i;void 0===f?b._d=new Date(a.now()):d(f)?b._d=new Date(+f):"string"==typeof f?na(b):c(f)?(b._a=e(f.slice(0),function(a){return parseInt(a,10)}),za(b)):"object"==typeof f?Ea(b):"number"==typeof f?b._d=new Date(f):a.createFromInputFallback(b)}function Ia(a,b,c,d,e){var f={};return"boolean"==typeof c&&(d=c,c=void 0),f._isAMomentObject=!0,f._useUTC=f._isUTC=e,f._l=c,f._i=a,f._f=b,f._strict=d,Fa(f)}function Ja(a,b,c,d){return Ia(a,b,c,d,!1)}function Ka(a,b){var d,e;if(1===b.length&&c(b[0])&&(b=b[0]),!b.length)return Ja();for(d=b[0],e=1;e<b.length;++e)(!b[e].isValid()||b[e][a](d))&&(d=b[e]);return d}function La(){var a=[].slice.call(arguments,0);return Ka("isBefore",a)}function Ma(){var a=[].slice.call(arguments,0);return Ka("isAfter",a)}function Na(a){var b=L(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=H(),this._bubble()}function Oa(a){return a instanceof Na}function Pa(a,b){R(a,0,0,function(){var a=this.utcOffset(),c="+";return 0>a&&(a=-a,c="-"),c+Q(~~(a/60),2)+b+Q(~~a%60,2)})}function Qa(a,b){var c=(b||"").match(a)||[],d=c[c.length-1]||[],e=(d+"").match(Zd)||["-",0,0],f=+(60*e[1])+r(e[2]);return"+"===e[0]?f:-f}function Ra(b,c){var e,f;return c._isUTC?(e=c.clone(),f=(p(b)||d(b)?+b:+Ja(b))-+e,e._d.setTime(+e._d+f),a.updateOffset(e,!1),e):Ja(b).local()}function Sa(a){return 15*-Math.round(a._d.getTimezoneOffset()/15)}function Ta(b,c){var d,e=this._offset||0;return this.isValid()?null!=b?("string"==typeof b?b=Qa(wd,b):Math.abs(b)<16&&(b=60*b),!this._isUTC&&c&&(d=Sa(this)),this._offset=b,this._isUTC=!0,null!=d&&this.add(d,"m"),e!==b&&(!c||this._changeInProgress?ib(this,cb(b-e,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?e:Sa(this):null!=b?this:NaN}function Ua(a,b){return null!=a?("string"!=typeof a&&(a=-a),this.utcOffset(a,b),this):-this.utcOffset()}function Va(a){return this.utcOffset(0,a)}function Wa(a){return this._isUTC&&(this.utcOffset(0,a),this._isUTC=!1,a&&this.subtract(Sa(this),"m")),this}function Xa(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Qa(vd,this._i)),this}function Ya(a){return this.isValid()?(a=a?Ja(a).utcOffset():0,(this.utcOffset()-a)%60===0):!1}function Za(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function $a(){if(!m(this._isDSTShifted))return this._isDSTShifted;var a={};if(n(a,this),a=Ga(a),a._a){var b=a._isUTC?h(a._a):Ja(a._a);this._isDSTShifted=this.isValid()&&s(a._a,b.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function _a(){return this.isValid()?!this._isUTC:!1}function ab(){return this.isValid()?this._isUTC:!1}function bb(){return this.isValid()?this._isUTC&&0===this._offset:!1}function cb(a,b){var c,d,e,g=a,h=null;return Oa(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=$d.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:r(h[Dd])*c,h:r(h[Ed])*c,m:r(h[Fd])*c,s:r(h[Gd])*c,ms:r(h[Hd])*c}):(h=_d.exec(a))?(c="-"===h[1]?-1:1,g={y:db(h[2],c),M:db(h[3],c),w:db(h[4],c),d:db(h[5],c),h:db(h[6],c),m:db(h[7],c),s:db(h[8],c)}):null==g?g={}:"object"==typeof g&&("from"in g||"to"in g)&&(e=fb(Ja(g.from),Ja(g.to)),g={},g.ms=e.milliseconds,g.M=e.months),d=new Na(g),Oa(a)&&f(a,"_locale")&&(d._locale=a._locale),d}function db(a,b){var c=a&&parseFloat(a.replace(",","."));return(isNaN(c)?0:c)*b}function eb(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function fb(a,b){var c;return a.isValid()&&b.isValid()?(b=Ra(b,a),a.isBefore(b)?c=eb(a,b):(c=eb(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c):{milliseconds:0,months:0}}function gb(a){return 0>a?-1*Math.round(-1*a):Math.round(a)}function hb(a,b){return function(c,d){var e,f;return null===d||isNaN(+d)||(v(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),f=c,c=d,d=f),c="string"==typeof c?+c:c,e=cb(c,d),ib(this,e,a),this}}function ib(b,c,d,e){var f=c._milliseconds,g=gb(c._days),h=gb(c._months);b.isValid()&&(e=null==e?!0:e,f&&b._d.setTime(+b._d+f*d),g&&O(b,"Date",N(b,"Date")+g*d),h&&fa(b,N(b,"Month")+h*d),e&&a.updateOffset(b,g||h))}function jb(a,b){var c=a||Ja(),d=Ra(c,this).startOf("day"),e=this.diff(d,"days",!0),f=-6>e?"sameElse":-1>e?"lastWeek":0>e?"lastDay":1>e?"sameDay":2>e?"nextDay":7>e?"nextWeek":"sameElse",g=b&&(w(b[f])?b[f]():b[f]);return this.format(g||this.localeData().calendar(f,this,Ja(c)))}function kb(){return new o(this)}function lb(a,b){var c=p(a)?a:Ja(a);return this.isValid()&&c.isValid()?(b=K(m(b)?"millisecond":b),"millisecond"===b?+this>+c:+c<+this.clone().startOf(b)):!1}function mb(a,b){var c=p(a)?a:Ja(a);return this.isValid()&&c.isValid()?(b=K(m(b)?"millisecond":b),"millisecond"===b?+c>+this:+this.clone().endOf(b)<+c):!1}function nb(a,b,c){return this.isAfter(a,c)&&this.isBefore(b,c)}function ob(a,b){var c,d=p(a)?a:Ja(a);return this.isValid()&&d.isValid()?(b=K(b||"millisecond"),"millisecond"===b?+this===+d:(c=+d,+this.clone().startOf(b)<=c&&c<=+this.clone().endOf(b))):!1}function pb(a,b){return this.isSame(a,b)||this.isAfter(a,b)}function qb(a,b){return this.isSame(a,b)||this.isBefore(a,b)}function rb(a,b,c){var d,e,f,g;return this.isValid()?(d=Ra(a,this),d.isValid()?(e=6e4*(d.utcOffset()-this.utcOffset()),b=K(b),"year"===b||"month"===b||"quarter"===b?(g=sb(this,d),"quarter"===b?g/=3:"year"===b&&(g/=12)):(f=this-d,g="second"===b?f/1e3:"minute"===b?f/6e4:"hour"===b?f/36e5:"day"===b?(f-e)/864e5:"week"===b?(f-e)/6048e5:f),c?g:q(g)):NaN):NaN}function sb(a,b){var c,d,e=12*(b.year()-a.year())+(b.month()-a.month()),f=a.clone().add(e,"months");return 0>b-f?(c=a.clone().add(e-1,"months"),d=(b-f)/(f-c)):(c=a.clone().add(e+1,"months"),d=(b-f)/(c-f)),-(e+d)}function tb(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function ub(){var a=this.clone().utc();return 0<a.year()&&a.year()<=9999?w(Date.prototype.toISOString)?this.toDate().toISOString():U(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):U(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function vb(b){var c=U(this,b||a.defaultFormat);return this.localeData().postformat(c)}function wb(a,b){return this.isValid()&&(p(a)&&a.isValid()||Ja(a).isValid())?cb({to:this,from:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function xb(a){return this.from(Ja(),a)}function yb(a,b){return this.isValid()&&(p(a)&&a.isValid()||Ja(a).isValid())?cb({from:this,to:a}).locale(this.locale()).humanize(!b):this.localeData().invalidDate()}function zb(a){return this.to(Ja(),a)}function Ab(a){var b;return void 0===a?this._locale._abbr:(b=H(a),null!=b&&(this._locale=b),this)}function Bb(){return this._locale}function Cb(a){switch(a=K(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a&&this.weekday(0),"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this}function Db(a){return a=K(a),void 0===a||"millisecond"===a?this:this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")}function Eb(){return+this._d-6e4*(this._offset||0)}function Fb(){return Math.floor(+this/1e3)}function Gb(){return this._offset?new Date(+this):this._d}function Hb(){var a=this;return[a.year(),a.month(),a.date(),a.hour(),a.minute(),a.second(),a.millisecond()]}function Ib(){var a=this;return{years:a.year(),months:a.month(),date:a.date(),hours:a.hours(),minutes:a.minutes(),seconds:a.seconds(),milliseconds:a.milliseconds()}}function Jb(){return this.isValid()?this.toISOString():null}function Kb(){return k(this)}function Lb(){return g({},j(this))}function Mb(){return j(this).overflow}function Nb(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Ob(a,b){R(0,[a,a.length],0,b)}function Pb(a){return Tb.call(this,a,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Qb(a){return Tb.call(this,a,this.isoWeek(),this.isoWeekday(),1,4)}function Rb(){return wa(this.year(),1,4)}function Sb(){var a=this.localeData()._week;return wa(this.year(),a.dow,a.doy)}function Tb(a,b,c,d,e){var f;return null==a?va(this,d,e).year:(f=wa(a,d,e),b>f&&(b=f),Ub.call(this,a,b,c,d,e))}function Ub(a,b,c,d,e){var f=ua(a,b,c,d,e),g=pa(f.year,0,f.dayOfYear);return this.year(g.getUTCFullYear()),this.month(g.getUTCMonth()),this.date(g.getUTCDate()),this}function Vb(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)}function Wb(a){return va(a,this._week.dow,this._week.doy).week}function Xb(){return this._week.dow}function Yb(){return this._week.doy}function Zb(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")}function $b(a){var b=va(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")}function _b(a,b){return"string"!=typeof a?a:isNaN(a)?(a=b.weekdaysParse(a),"number"==typeof a?a:null):parseInt(a,10)}function ac(a,b){return c(this._weekdays)?this._weekdays[a.day()]:this._weekdays[this._weekdays.isFormat.test(b)?"format":"standalone"][a.day()]}function bc(a){return this._weekdaysShort[a.day()]}function cc(a){return this._weekdaysMin[a.day()]}function dc(a,b,c){var d,e,f;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),d=0;7>d;d++){if(e=Ja([2e3,1]).day(d),c&&!this._fullWeekdaysParse[d]&&(this._fullWeekdaysParse[d]=new RegExp("^"+this.weekdays(e,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[d]=new RegExp("^"+this.weekdaysShort(e,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[d]=new RegExp("^"+this.weekdaysMin(e,"").replace(".",".?")+"$","i")),this._weekdaysParse[d]||(f="^"+this.weekdays(e,"")+"|^"+this.weekdaysShort(e,"")+"|^"+this.weekdaysMin(e,""),this._weekdaysParse[d]=new RegExp(f.replace(".",""),"i")),c&&"dddd"===b&&this._fullWeekdaysParse[d].test(a))return d;if(c&&"ddd"===b&&this._shortWeekdaysParse[d].test(a))return d;if(c&&"dd"===b&&this._minWeekdaysParse[d].test(a))return d;if(!c&&this._weekdaysParse[d].test(a))return d}}function ec(a){if(!this.isValid())return null!=a?this:NaN;var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=_b(a,this.localeData()),this.add(a-b,"d")):b}function fc(a){if(!this.isValid())return null!=a?this:NaN;var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")}function gc(a){return this.isValid()?null==a?this.day()||7:this.day(this.day()%7?a:a-7):null!=a?this:NaN}function hc(a){var b=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")}function ic(){return this.hours()%12||12}function jc(a,b){R(a,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),b)})}function kc(a,b){return b._meridiemParse}function lc(a){return"p"===(a+"").toLowerCase().charAt(0)}function mc(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"}function nc(a,b){b[Hd]=r(1e3*("0."+a))}function oc(){return this._isUTC?"UTC":""}function pc(){return this._isUTC?"Coordinated Universal Time":""}function qc(a){return Ja(1e3*a)}function rc(){return Ja.apply(null,arguments).parseZone()}function sc(a,b,c){var d=this._calendar[a];return w(d)?d.call(b,c):d}function tc(a){var b=this._longDateFormat[a],c=this._longDateFormat[a.toUpperCase()];return b||!c?b:(this._longDateFormat[a]=c.replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a])}function uc(){return this._invalidDate}function vc(a){return this._ordinal.replace("%d",a)}function wc(a){return a}function xc(a,b,c,d){var e=this._relativeTime[c];return w(e)?e(a,b,c,d):e.replace(/%d/i,a)}function yc(a,b){var c=this._relativeTime[a>0?"future":"past"];return w(c)?c(b):c.replace(/%s/i,b)}function zc(a,b,c,d){var e=H(),f=h().set(d,b);return e[c](f,a)}function Ac(a,b,c,d,e){if("number"==typeof a&&(b=a,a=void 0),a=a||"",null!=b)return zc(a,b,c,e);var f,g=[];for(f=0;d>f;f++)g[f]=zc(a,f,c,e);return g}function Bc(a,b){return Ac(a,b,"months",12,"month")}function Cc(a,b){return Ac(a,b,"monthsShort",12,"month")}function Dc(a,b){return Ac(a,b,"weekdays",7,"day")}function Ec(a,b){return Ac(a,b,"weekdaysShort",7,"day")}function Fc(a,b){return Ac(a,b,"weekdaysMin",7,"day")}function Gc(){var a=this._data;return this._milliseconds=xe(this._milliseconds),this._days=xe(this._days),this._months=xe(this._months),a.milliseconds=xe(a.milliseconds),a.seconds=xe(a.seconds),a.minutes=xe(a.minutes),a.hours=xe(a.hours),a.months=xe(a.months),a.years=xe(a.years),this}function Hc(a,b,c,d){var e=cb(b,c);return a._milliseconds+=d*e._milliseconds,a._days+=d*e._days,a._months+=d*e._months,a._bubble()}function Ic(a,b){return Hc(this,a,b,1)}function Jc(a,b){return Hc(this,a,b,-1)}function Kc(a){return 0>a?Math.floor(a):Math.ceil(a)}function Lc(){var a,b,c,d,e,f=this._milliseconds,g=this._days,h=this._months,i=this._data;return f>=0&&g>=0&&h>=0||0>=f&&0>=g&&0>=h||(f+=864e5*Kc(Nc(h)+g),g=0,h=0),i.milliseconds=f%1e3,a=q(f/1e3),i.seconds=a%60,b=q(a/60),i.minutes=b%60,c=q(b/60),i.hours=c%24,g+=q(c/24),e=q(Mc(g)),h+=e,g-=Kc(Nc(e)),d=q(h/12),h%=12,i.days=g,i.months=h,i.years=d,this}function Mc(a){return 4800*a/146097}function Nc(a){return 146097*a/4800}function Oc(a){var b,c,d=this._milliseconds;if(a=K(a),"month"===a||"year"===a)return b=this._days+d/864e5,c=this._months+Mc(b),"month"===a?c:c/12;switch(b=this._days+Math.round(Nc(this._months)),a){case"week":return b/7+d/6048e5;case"day":return b+d/864e5;case"hour":return 24*b+d/36e5;case"minute":return 1440*b+d/6e4;case"second":return 86400*b+d/1e3;case"millisecond":return Math.floor(864e5*b)+d;default:throw new Error("Unknown unit "+a)}}function Pc(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*r(this._months/12)}function Qc(a){return function(){return this.as(a)}}function Rc(a){return a=K(a),this[a+"s"]()}function Sc(a){return function(){return this._data[a]}}function Tc(){return q(this.days()/7)}function Uc(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function Vc(a,b,c){var d=cb(a).abs(),e=Ne(d.as("s")),f=Ne(d.as("m")),g=Ne(d.as("h")),h=Ne(d.as("d")),i=Ne(d.as("M")),j=Ne(d.as("y")),k=e<Oe.s&&["s",e]||1>=f&&["m"]||f<Oe.m&&["mm",f]||1>=g&&["h"]||g<Oe.h&&["hh",g]||1>=h&&["d"]||h<Oe.d&&["dd",h]||1>=i&&["M"]||i<Oe.M&&["MM",i]||1>=j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,Uc.apply(null,k)}function Wc(a,b){return void 0===Oe[a]?!1:void 0===b?Oe[a]:(Oe[a]=b,!0)}function Xc(a){var b=this.localeData(),c=Vc(this,!a,b);return a&&(c=b.pastFuture(+this,c)),b.postformat(c)}function Yc(){var a,b,c,d=Pe(this._milliseconds)/1e3,e=Pe(this._days),f=Pe(this._months);a=q(d/60),b=q(a/60),d%=60,a%=60,c=q(f/12),f%=12;var g=c,h=f,i=e,j=b,k=a,l=d,m=this.asSeconds();return m?(0>m?"-":"")+"P"+(g?g+"Y":"")+(h?h+"M":"")+(i?i+"D":"")+(j||k||l?"T":"")+(j?j+"H":"")+(k?k+"M":"")+(l?l+"S":""):"P0D"}var Zc,$c=a.momentProperties=[],_c=!1,ad={};a.suppressDeprecationWarnings=!1;var bd,cd={},dd={},ed=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,fd=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,gd={},hd={},id=/\d/,jd=/\d\d/,kd=/\d{3}/,ld=/\d{4}/,md=/[+-]?\d{6}/,nd=/\d\d?/,od=/\d\d\d\d?/,pd=/\d\d\d\d\d\d?/,qd=/\d{1,3}/,rd=/\d{1,4}/,sd=/[+-]?\d{1,6}/,td=/\d+/,ud=/[+-]?\d+/,vd=/Z|[+-]\d\d:?\d\d/gi,wd=/Z|[+-]\d\d(?::?\d\d)?/gi,xd=/[+-]?\d+(\.\d{1,3})?/,yd=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,zd={},Ad={},Bd=0,Cd=1,Dd=2,Ed=3,Fd=4,Gd=5,Hd=6,Id=7,Jd=8;R("M",["MM",2],"Mo",function(){return this.month()+1}),R("MMM",0,0,function(a){return this.localeData().monthsShort(this,a)}),R("MMMM",0,0,function(a){return this.localeData().months(this,a)}),J("month","M"),W("M",nd),W("MM",nd,jd),W("MMM",function(a,b){return b.monthsShortRegex(a)}),W("MMMM",function(a,b){return b.monthsRegex(a)}),$(["M","MM"],function(a,b){b[Cd]=r(a)-1}),$(["MMM","MMMM"],function(a,b,c,d){var e=c._locale.monthsParse(a,d,c._strict);null!=e?b[Cd]=e:j(c).invalidMonth=a});var Kd=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Ld="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Md="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Nd=yd,Od=yd,Pd=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Qd=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Rd=/Z|[+-]\d\d(?::?\d\d)?/,Sd=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Td=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ud=/^\/?Date\((\-?\d+)/i;a.createFromInputFallback=u("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i+(a._useUTC?" UTC":""))}),R("Y",0,0,function(){var a=this.year();return 9999>=a?""+a:"+"+a}),R(0,["YY",2],0,function(){return this.year()%100}),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),J("year","y"),W("Y",ud),W("YY",nd,jd),W("YYYY",rd,ld),W("YYYYY",sd,md),W("YYYYYY",sd,md),$(["YYYYY","YYYYYY"],Bd),$("YYYY",function(b,c){c[Bd]=2===b.length?a.parseTwoDigitYear(b):r(b);
}),$("YY",function(b,c){c[Bd]=a.parseTwoDigitYear(b)}),$("Y",function(a,b){b[Bd]=parseInt(a,10)}),a.parseTwoDigitYear=function(a){return r(a)+(r(a)>68?1900:2e3)};var Vd=M("FullYear",!1);a.ISO_8601=function(){};var Wd=u("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var a=Ja.apply(null,arguments);return this.isValid()&&a.isValid()?this>a?this:a:l()}),Xd=u("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var a=Ja.apply(null,arguments);return this.isValid()&&a.isValid()?a>this?this:a:l()}),Yd=function(){return Date.now?Date.now():+new Date};Pa("Z",":"),Pa("ZZ",""),W("Z",wd),W("ZZ",wd),$(["Z","ZZ"],function(a,b,c){c._useUTC=!0,c._tzm=Qa(wd,a)});var Zd=/([\+\-]|\d\d)/gi;a.updateOffset=function(){};var $d=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,_d=/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;cb.fn=Na.prototype;var ae=hb(1,"add"),be=hb(-1,"subtract");a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var ce=u("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(a){return void 0===a?this.localeData():this.locale(a)});R(0,["gg",2],0,function(){return this.weekYear()%100}),R(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ob("gggg","weekYear"),Ob("ggggg","weekYear"),Ob("GGGG","isoWeekYear"),Ob("GGGGG","isoWeekYear"),J("weekYear","gg"),J("isoWeekYear","GG"),W("G",ud),W("g",ud),W("GG",nd,jd),W("gg",nd,jd),W("GGGG",rd,ld),W("gggg",rd,ld),W("GGGGG",sd,md),W("ggggg",sd,md),_(["gggg","ggggg","GGGG","GGGGG"],function(a,b,c,d){b[d.substr(0,2)]=r(a)}),_(["gg","GG"],function(b,c,d,e){c[e]=a.parseTwoDigitYear(b)}),R("Q",0,"Qo","quarter"),J("quarter","Q"),W("Q",id),$("Q",function(a,b){b[Cd]=3*(r(a)-1)}),R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),J("week","w"),J("isoWeek","W"),W("w",nd),W("ww",nd,jd),W("W",nd),W("WW",nd,jd),_(["w","ww","W","WW"],function(a,b,c,d){b[d.substr(0,1)]=r(a)});var de={dow:0,doy:6};R("D",["DD",2],"Do","date"),J("date","D"),W("D",nd),W("DD",nd,jd),W("Do",function(a,b){return a?b._ordinalParse:b._ordinalParseLenient}),$(["D","DD"],Dd),$("Do",function(a,b){b[Dd]=r(a.match(nd)[0],10)});var ee=M("Date",!0);R("d",0,"do","day"),R("dd",0,0,function(a){return this.localeData().weekdaysMin(this,a)}),R("ddd",0,0,function(a){return this.localeData().weekdaysShort(this,a)}),R("dddd",0,0,function(a){return this.localeData().weekdays(this,a)}),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),J("day","d"),J("weekday","e"),J("isoWeekday","E"),W("d",nd),W("e",nd),W("E",nd),W("dd",yd),W("ddd",yd),W("dddd",yd),_(["dd","ddd","dddd"],function(a,b,c,d){var e=c._locale.weekdaysParse(a,d,c._strict);null!=e?b.d=e:j(c).invalidWeekday=a}),_(["d","e","E"],function(a,b,c,d){b[d]=r(a)});var fe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ge="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),he="Su_Mo_Tu_We_Th_Fr_Sa".split("_");R("DDD",["DDDD",3],"DDDo","dayOfYear"),J("dayOfYear","DDD"),W("DDD",qd),W("DDDD",kd),$(["DDD","DDDD"],function(a,b,c){c._dayOfYear=r(a)}),R("H",["HH",2],0,"hour"),R("h",["hh",2],0,ic),R("hmm",0,0,function(){return""+ic.apply(this)+Q(this.minutes(),2)}),R("hmmss",0,0,function(){return""+ic.apply(this)+Q(this.minutes(),2)+Q(this.seconds(),2)}),R("Hmm",0,0,function(){return""+this.hours()+Q(this.minutes(),2)}),R("Hmmss",0,0,function(){return""+this.hours()+Q(this.minutes(),2)+Q(this.seconds(),2)}),jc("a",!0),jc("A",!1),J("hour","h"),W("a",kc),W("A",kc),W("H",nd),W("h",nd),W("HH",nd,jd),W("hh",nd,jd),W("hmm",od),W("hmmss",pd),W("Hmm",od),W("Hmmss",pd),$(["H","HH"],Ed),$(["a","A"],function(a,b,c){c._isPm=c._locale.isPM(a),c._meridiem=a}),$(["h","hh"],function(a,b,c){b[Ed]=r(a),j(c).bigHour=!0}),$("hmm",function(a,b,c){var d=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d)),j(c).bigHour=!0}),$("hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d,2)),b[Gd]=r(a.substr(e)),j(c).bigHour=!0}),$("Hmm",function(a,b,c){var d=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d))}),$("Hmmss",function(a,b,c){var d=a.length-4,e=a.length-2;b[Ed]=r(a.substr(0,d)),b[Fd]=r(a.substr(d,2)),b[Gd]=r(a.substr(e))});var ie=/[ap]\.?m?\.?/i,je=M("Hours",!0);R("m",["mm",2],0,"minute"),J("minute","m"),W("m",nd),W("mm",nd,jd),$(["m","mm"],Fd);var ke=M("Minutes",!1);R("s",["ss",2],0,"second"),J("second","s"),W("s",nd),W("ss",nd,jd),$(["s","ss"],Gd);var le=M("Seconds",!1);R("S",0,0,function(){return~~(this.millisecond()/100)}),R(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,function(){return 10*this.millisecond()}),R(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),R(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),R(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),R(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),R(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),J("millisecond","ms"),W("S",qd,id),W("SS",qd,jd),W("SSS",qd,kd);var me;for(me="SSSS";me.length<=9;me+="S")W(me,td);for(me="S";me.length<=9;me+="S")$(me,nc);var ne=M("Milliseconds",!1);R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var oe=o.prototype;oe.add=ae,oe.calendar=jb,oe.clone=kb,oe.diff=rb,oe.endOf=Db,oe.format=vb,oe.from=wb,oe.fromNow=xb,oe.to=yb,oe.toNow=zb,oe.get=P,oe.invalidAt=Mb,oe.isAfter=lb,oe.isBefore=mb,oe.isBetween=nb,oe.isSame=ob,oe.isSameOrAfter=pb,oe.isSameOrBefore=qb,oe.isValid=Kb,oe.lang=ce,oe.locale=Ab,oe.localeData=Bb,oe.max=Xd,oe.min=Wd,oe.parsingFlags=Lb,oe.set=P,oe.startOf=Cb,oe.subtract=be,oe.toArray=Hb,oe.toObject=Ib,oe.toDate=Gb,oe.toISOString=ub,oe.toJSON=Jb,oe.toString=tb,oe.unix=Fb,oe.valueOf=Eb,oe.creationData=Nb,oe.year=Vd,oe.isLeapYear=sa,oe.weekYear=Pb,oe.isoWeekYear=Qb,oe.quarter=oe.quarters=Vb,oe.month=ga,oe.daysInMonth=ha,oe.week=oe.weeks=Zb,oe.isoWeek=oe.isoWeeks=$b,oe.weeksInYear=Sb,oe.isoWeeksInYear=Rb,oe.date=ee,oe.day=oe.days=ec,oe.weekday=fc,oe.isoWeekday=gc,oe.dayOfYear=hc,oe.hour=oe.hours=je,oe.minute=oe.minutes=ke,oe.second=oe.seconds=le,oe.millisecond=oe.milliseconds=ne,oe.utcOffset=Ta,oe.utc=Va,oe.local=Wa,oe.parseZone=Xa,oe.hasAlignedHourOffset=Ya,oe.isDST=Za,oe.isDSTShifted=$a,oe.isLocal=_a,oe.isUtcOffset=ab,oe.isUtc=bb,oe.isUTC=bb,oe.zoneAbbr=oc,oe.zoneName=pc,oe.dates=u("dates accessor is deprecated. Use date instead.",ee),oe.months=u("months accessor is deprecated. Use month instead",ga),oe.years=u("years accessor is deprecated. Use year instead",Vd),oe.zone=u("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Ua);var pe=oe,qe={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},re={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},se="Invalid date",te="%d",ue=/\d{1,2}/,ve={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},we=A.prototype;we._calendar=qe,we.calendar=sc,we._longDateFormat=re,we.longDateFormat=tc,we._invalidDate=se,we.invalidDate=uc,we._ordinal=te,we.ordinal=vc,we._ordinalParse=ue,we.preparse=wc,we.postformat=wc,we._relativeTime=ve,we.relativeTime=xc,we.pastFuture=yc,we.set=y,we.months=ca,we._months=Ld,we.monthsShort=da,we._monthsShort=Md,we.monthsParse=ea,we._monthsRegex=Od,we.monthsRegex=ja,we._monthsShortRegex=Nd,we.monthsShortRegex=ia,we.week=Wb,we._week=de,we.firstDayOfYear=Yb,we.firstDayOfWeek=Xb,we.weekdays=ac,we._weekdays=fe,we.weekdaysMin=cc,we._weekdaysMin=he,we.weekdaysShort=bc,we._weekdaysShort=ge,we.weekdaysParse=dc,we.isPM=lc,we._meridiemParse=ie,we.meridiem=mc,E("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(a){var b=a%10,c=1===r(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.lang=u("moment.lang is deprecated. Use moment.locale instead.",E),a.langData=u("moment.langData is deprecated. Use moment.localeData instead.",H);var xe=Math.abs,ye=Qc("ms"),ze=Qc("s"),Ae=Qc("m"),Be=Qc("h"),Ce=Qc("d"),De=Qc("w"),Ee=Qc("M"),Fe=Qc("y"),Ge=Sc("milliseconds"),He=Sc("seconds"),Ie=Sc("minutes"),Je=Sc("hours"),Ke=Sc("days"),Le=Sc("months"),Me=Sc("years"),Ne=Math.round,Oe={s:45,m:45,h:22,d:26,M:11},Pe=Math.abs,Qe=Na.prototype;Qe.abs=Gc,Qe.add=Ic,Qe.subtract=Jc,Qe.as=Oc,Qe.asMilliseconds=ye,Qe.asSeconds=ze,Qe.asMinutes=Ae,Qe.asHours=Be,Qe.asDays=Ce,Qe.asWeeks=De,Qe.asMonths=Ee,Qe.asYears=Fe,Qe.valueOf=Pc,Qe._bubble=Lc,Qe.get=Rc,Qe.milliseconds=Ge,Qe.seconds=He,Qe.minutes=Ie,Qe.hours=Je,Qe.days=Ke,Qe.weeks=Tc,Qe.months=Le,Qe.years=Me,Qe.humanize=Xc,Qe.toISOString=Yc,Qe.toString=Yc,Qe.toJSON=Yc,Qe.locale=Ab,Qe.localeData=Bb,Qe.toIsoString=u("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Yc),Qe.lang=ce,R("X",0,0,"unix"),R("x",0,0,"valueOf"),W("x",ud),W("X",xd),$("X",function(a,b,c){c._d=new Date(1e3*parseFloat(a,10))}),$("x",function(a,b,c){c._d=new Date(r(a))}),a.version="2.12.0",b(Ja),a.fn=pe,a.min=La,a.max=Ma,a.now=Yd,a.utc=h,a.unix=qc,a.months=Bc,a.isDate=d,a.locale=E,a.invalid=l,a.duration=cb,a.isMoment=p,a.weekdays=Dc,a.parseZone=rc,a.localeData=H,a.isDuration=Oa,a.monthsShort=Cc,a.weekdaysMin=Fc,a.defineLocale=F,a.updateLocale=G,a.locales=I,a.weekdaysShort=Ec,a.normalizeUnits=K,a.relativeTimeThreshold=Wc,a.prototype=pe;var Re=a;return Re});
/*! jQuery v2.2.4 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="2.2.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isPlainObject:function(a){var b;if("object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype||{},"isPrototypeOf"))return!1;for(b in a);return void 0===b||k.call(a,b)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=d.createElement("script"),b.text=a,d.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",O=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,_=/[+~]/,aa=/'|\\/g,ba=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,y=/^.[^:#\[\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return h.call(b,a)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&f.parentNode&&(this.length=1,this[0]=f),this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?void 0!==c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(n(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||n.uniqueSort(e),D.test(a)&&e.reverse()),this.pushStack(e)}});var G=/\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.removeEventListener("DOMContentLoaded",J),a.removeEventListener("load",J),n.ready()}n.ready.promise=function(b){return I||(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(n.ready):(d.addEventListener("DOMContentLoaded",J),a.addEventListener("load",J))),I.promise(b)},n.ready.promise();var K=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)K(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},L=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function M(){this.expando=n.expando+M.uid++}M.uid=1,M.prototype={register:function(a,b){var c=b||{};return a.nodeType?a[this.expando]=c:Object.defineProperty(a,this.expando,{value:c,writable:!0,configurable:!0}),a[this.expando]},cache:function(a){if(!L(a))return{};var b=a[this.expando];return b||(b={},L(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[b]=c;else for(d in b)e[d]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=a[this.expando];if(void 0!==f){if(void 0===b)this.register(a);else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in f?d=[b,e]:(d=e,d=d in f?[d]:d.match(G)||[])),c=d.length;while(c--)delete f[d[c]]}(void 0===b||n.isEmptyObject(f))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!n.isEmptyObject(b)}};var N=new M,O=new M,P=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function R(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(Q,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:P.test(c)?n.parseJSON(c):c;
}catch(e){}O.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return O.hasData(a)||N.hasData(a)},data:function(a,b,c){return O.access(a,b,c)},removeData:function(a,b){O.remove(a,b)},_data:function(a,b,c){return N.access(a,b,c)},_removeData:function(a,b){N.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=O.get(f),1===f.nodeType&&!N.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),R(f,d,e[d])));N.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){O.set(this,a)}):K(this,function(b){var c,d;if(f&&void 0===b){if(c=O.get(f,a)||O.get(f,a.replace(Q,"-$&").toLowerCase()),void 0!==c)return c;if(d=n.camelCase(a),c=O.get(f,d),void 0!==c)return c;if(c=R(f,d,void 0),void 0!==c)return c}else d=n.camelCase(a),this.each(function(){var c=O.get(this,d);O.set(this,d,b),a.indexOf("-")>-1&&void 0!==c&&O.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){O.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=N.get(a,b),c&&(!d||n.isArray(c)?d=N.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return N.get(a,c)||N.access(a,c,{empty:n.Callbacks("once memory").add(function(){N.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=N.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),U=["Top","Right","Bottom","Left"],V=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function W(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&T.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var X=/^(?:checkbox|radio)$/i,Y=/<([\w:-]+)/,Z=/^$|\/(?:java|ecma)script/i,$={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$.optgroup=$.option,$.tbody=$.tfoot=$.colgroup=$.caption=$.thead,$.th=$.td;function _(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function aa(a,b){for(var c=0,d=a.length;d>c;c++)N.set(a[c],"globalEval",!b||N.get(b[c],"globalEval"))}var ba=/<|&#?\w+;/;function ca(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],o=0,p=a.length;p>o;o++)if(f=a[o],f||0===f)if("object"===n.type(f))n.merge(m,f.nodeType?[f]:f);else if(ba.test(f)){g=g||l.appendChild(b.createElement("div")),h=(Y.exec(f)||["",""])[1].toLowerCase(),i=$[h]||$._default,g.innerHTML=i[1]+n.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;n.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",o=0;while(f=m[o++])if(d&&n.inArray(f,d)>-1)e&&e.push(f);else if(j=n.contains(f.ownerDocument,f),g=_(l.appendChild(f),"script"),j&&aa(g),c){k=0;while(f=g[k++])Z.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var da=/^key/,ea=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,fa=/^([^.]*)(?:\.(.+)|)/;function ga(){return!0}function ha(){return!1}function ia(){try{return d.activeElement}catch(a){}}function ja(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ja(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=ha;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof n&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(G)||[""],j=b.length;while(j--)h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=N.hasData(a)&&N.get(a);if(r&&(i=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=fa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&N.remove(a,"handle events")}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(N.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ea.test(f)?this.mouseHooks:da.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=d),3===a.target.nodeType&&(a.target=a.target.parentNode),h.filter?h.filter(a,g):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==ia()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===ia()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ga:ha):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:ha,isPropagationStopped:ha,isImmediatePropagationStopped:ha,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ga,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ga,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ga,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),n.fn.extend({on:function(a,b,c,d){return ja(this,a,b,c,d)},one:function(a,b,c,d){return ja(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=ha),this.each(function(){n.event.remove(this,a,c,b)})}});var ka=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,la=/<script|<style|<link/i,ma=/checked\s*(?:[^=]|=\s*.checked.)/i,na=/^true\/(.*)/,oa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function pa(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function qa(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function ra(a){var b=na.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function sa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(N.hasData(a)&&(f=N.access(a),g=N.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}O.hasData(a)&&(h=O.access(a),i=n.extend({},h),O.set(b,i))}}function ta(a,b){var c=b.nodeName.toLowerCase();"input"===c&&X.test(a.type)?b.checked=a.checked:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}function ua(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&ma.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),ua(f,b,c,d)});if(o&&(e=ca(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=n.map(_(e,"script"),qa),i=h.length;o>m;m++)j=e,m!==p&&(j=n.clone(j,!0,!0),i&&n.merge(h,_(j,"script"))),c.call(a[m],j,m);if(i)for(k=h[h.length-1].ownerDocument,n.map(h,ra),m=0;i>m;m++)j=h[m],Z.test(j.type||"")&&!N.access(j,"globalEval")&&n.contains(k,j)&&(j.src?n._evalUrl&&n._evalUrl(j.src):n.globalEval(j.textContent.replace(oa,"")))}return a}function va(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(_(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&aa(_(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(ka,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=_(h),f=_(a),d=0,e=f.length;e>d;d++)ta(f[d],g[d]);if(b)if(c)for(f=f||_(a),g=g||_(h),d=0,e=f.length;e>d;d++)sa(f[d],g[d]);else sa(a,h);return g=_(h,"script"),g.length>0&&aa(g,!i&&_(a,"script")),h},cleanData:function(a){for(var b,c,d,e=n.event.special,f=0;void 0!==(c=a[f]);f++)if(L(c)){if(b=c[N.expando]){if(b.events)for(d in b.events)e[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);c[N.expando]=void 0}c[O.expando]&&(c[O.expando]=void 0)}}}),n.fn.extend({domManip:ua,detach:function(a){return va(this,a,!0)},remove:function(a){return va(this,a)},text:function(a){return K(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)})},null,a,arguments.length)},append:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.appendChild(a)}})},prepend:function(){return ua(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=pa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return ua(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(_(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return K(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!la.test(a)&&!$[(Y.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(_(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return ua(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(_(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),n(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var wa,xa={HTML:"block",BODY:"block"};function ya(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function za(a){var b=d,c=xa[a];return c||(c=ya(a,b),"none"!==c&&c||(wa=(wa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=wa[0].contentDocument,b.write(),b.close(),c=ya(a,b),wa.detach()),xa[a]=c),c}var Aa=/^margin/,Ba=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ca=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Da=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Ea=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ea.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ea.removeChild(g)}n.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f},reliableMarginRight:function(){var b,c=h.appendChild(d.createElement("div"));return c.style.cssText=h.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",h.style.width="1px",Ea.appendChild(g),b=!parseFloat(a.getComputedStyle(c).marginRight),Ea.removeChild(g),h.removeChild(c),b}})}}();function Fa(a,b,c){var d,e,f,g,h=a.style;return c=c||Ca(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Ba.test(g)&&Aa.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0!==g?g+"":g}function Ga(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ha=/^(none|table(?!-c[ea]).+)/,Ia={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"},Ka=["Webkit","O","Moz","ms"],La=d.createElement("div").style;function Ma(a){if(a in La)return a;var b=a[0].toUpperCase()+a.slice(1),c=Ka.length;while(c--)if(a=Ka[c]+b,a in La)return a}function Na(a,b,c){var d=T.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Oa(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+U[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+U[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+U[f]+"Width",!0,e))):(g+=n.css(a,"padding"+U[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+U[f]+"Width",!0,e)));return g}function Pa(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ca(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Fa(a,b,f),(0>e||null==e)&&(e=a.style[b]),Ba.test(e))return e;d=g&&(l.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Oa(a,b,c||(g?"border":"content"),d,f)+"px"}function Qa(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=N.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&V(d)&&(f[g]=N.access(d,"olddisplay",za(d.nodeName)))):(e=V(d),"none"===c&&e||N.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Fa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=T.exec(c))&&e[1]&&(c=W(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Ma(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Fa(a,b,d)),"normal"===e&&b in Ja&&(e=Ja[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Ha.test(n.css(a,"display"))&&0===a.offsetWidth?Da(a,Ia,function(){return Pa(a,b,d)}):Pa(a,b,d):void 0},set:function(a,c,d){var e,f=d&&Ca(a),g=d&&Oa(a,b,d,"border-box"===n.css(a,"boxSizing",!1,f),f);return g&&(e=T.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=n.css(a,b)),Na(a,c,g)}}}),n.cssHooks.marginLeft=Ga(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Fa(a,"marginLeft"))||a.getBoundingClientRect().left-Da(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),n.cssHooks.marginRight=Ga(l.reliableMarginRight,function(a,b){return b?Da(a,{display:"inline-block"},Fa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+U[d]+b]=f[d]||f[d-2]||f[0];return e}},Aa.test(a)||(n.cssHooks[a+b].set=Na)}),n.fn.extend({css:function(a,b){return K(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ca(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Qa(this,!0)},hide:function(){return Qa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){V(this)?n(this).show():n(this).hide()})}});function Ra(a,b,c,d,e){return new Ra.prototype.init(a,b,c,d,e)}n.Tween=Ra,Ra.prototype={constructor:Ra,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ra.propHooks[this.prop];return a&&a.get?a.get(this):Ra.propHooks._default.get(this)},run:function(a){var b,c=Ra.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ra.propHooks._default.set(this),this}},Ra.prototype.init.prototype=Ra.prototype,Ra.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},Ra.propHooks.scrollTop=Ra.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=Ra.prototype.init,n.fx.step={};var Sa,Ta,Ua=/^(?:toggle|show|hide)$/,Va=/queueHooks$/;function Wa(){return a.setTimeout(function(){Sa=void 0}),Sa=n.now()}function Xa(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=U[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ya(a,b,c){for(var d,e=(_a.tweeners[b]||[]).concat(_a.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Za(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&V(a),q=N.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?N.get(a,"olddisplay")||za(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Ua.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?za(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=N.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;N.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ya(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function $a(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function _a(a,b,c){var d,e,f=0,g=_a.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Sa||Wa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:Sa||Wa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for($a(k,j.opts.specialEasing);g>f;f++)if(d=_a.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,Ya,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(_a,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return W(c.elem,a,T.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],_a.tweeners[c]=_a.tweeners[c]||[],_a.tweeners[c].unshift(b)},prefilters:[Za],prefilter:function(a,b){b?_a.prefilters.unshift(a):_a.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(V).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=_a(this,n.extend({},a),f);(e||N.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=N.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Va.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=N.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Xa(b,!0),a,d,e)}}),n.each({slideDown:Xa("show"),slideUp:Xa("hide"),slideToggle:Xa("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(Sa=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),Sa=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ta||(Ta=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(Ta),Ta=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,b.disabled=!0,l.optDisabled=!c.disabled,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var ab,bb=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return K(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ab:void 0)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)}}),ab={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=bb[b]||n.find.attr;bb[b]=function(a,b,d){var e,f;return d||(f=bb[b],bb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,bb[b]=f),e}});var cb=/^(?:input|select|textarea|button)$/i,db=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return K(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),
void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):cb.test(a.nodeName)||db.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var eb=/[\t\r\n\f]/g;function fb(a){return a.getAttribute&&a.getAttribute("class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,fb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,fb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=fb(c),d=1===c.nodeType&&(" "+e+" ").replace(eb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,fb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=fb(this),b&&N.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":N.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+fb(c)+" ").replace(eb," ").indexOf(b)>-1)return!0;return!1}});var gb=/\r/g,hb=/[\x20\t\r\n\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(gb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(hb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(n.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var ib=/^(?:focusinfocus|focusoutblur)$/;n.extend(n.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!ib.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},f||!o.trigger||o.trigger.apply(e,c)!==!1)){if(!f&&!o.noBubble&&!n.isWindow(e)){for(j=o.delegateType||q,ib.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:o.bindType||q,m=(N.get(h,"events")||{})[b.type]&&N.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&L(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!L(e)||l&&n.isFunction(e[q])&&!n.isWindow(e)&&(i=e[l],i&&(e[l]=null),n.event.triggered=q,e[q](),n.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b)}}),n.fn.extend({trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=N.access(d,b);e||d.addEventListener(a,c,!0),N.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=N.access(d,b)-1;e?N.access(d,b,e):(d.removeEventListener(a,c,!0),N.remove(d,b))}}});var jb=a.location,kb=n.now(),lb=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return c&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var mb=/#.*$/,nb=/([?&])_=[^&]*/,ob=/^(.*?):[ \t]*([^\r\n]*)$/gm,pb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qb=/^(?:GET|HEAD)$/,rb=/^\/\//,sb={},tb={},ub="*/".concat("*"),vb=d.createElement("a");vb.href=jb.href;function wb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function xb(a,b,c,d){var e={},f=a===tb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function yb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function zb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Ab(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:jb.href,type:"GET",isLocal:pb.test(jb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":ub,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?yb(yb(a,n.ajaxSettings),b):yb(n.ajaxSettings,a)},ajaxPrefilter:wb(sb),ajaxTransport:wb(tb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m=n.ajaxSetup({},c),o=m.context||m,p=m.context&&(o.nodeType||o.jquery)?n(o):n.event,q=n.Deferred(),r=n.Callbacks("once memory"),s=m.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,getResponseHeader:function(a){var b;if(2===v){if(!h){h={};while(b=ob.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===v?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return v||(a=u[c]=u[c]||a,t[a]=b),this},overrideMimeType:function(a){return v||(m.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>v)for(b in a)s[b]=[s[b],a[b]];else x.always(a[x.status]);return this},abort:function(a){var b=a||w;return e&&e.abort(b),z(0,b),this}};if(q.promise(x).complete=r.add,x.success=x.done,x.error=x.fail,m.url=((b||m.url||jb.href)+"").replace(mb,"").replace(rb,jb.protocol+"//"),m.type=c.method||c.type||m.method||m.type,m.dataTypes=n.trim(m.dataType||"*").toLowerCase().match(G)||[""],null==m.crossDomain){j=d.createElement("a");try{j.href=m.url,j.href=j.href,m.crossDomain=vb.protocol+"//"+vb.host!=j.protocol+"//"+j.host}catch(y){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=n.param(m.data,m.traditional)),xb(sb,m,c,x),2===v)return x;k=n.event&&m.global,k&&0===n.active++&&n.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!qb.test(m.type),f=m.url,m.hasContent||(m.data&&(f=m.url+=(lb.test(f)?"&":"?")+m.data,delete m.data),m.cache===!1&&(m.url=nb.test(f)?f.replace(nb,"$1_="+kb++):f+(lb.test(f)?"&":"?")+"_="+kb++)),m.ifModified&&(n.lastModified[f]&&x.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&x.setRequestHeader("If-None-Match",n.etag[f])),(m.data&&m.hasContent&&m.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+ub+"; q=0.01":""):m.accepts["*"]);for(l in m.headers)x.setRequestHeader(l,m.headers[l]);if(m.beforeSend&&(m.beforeSend.call(o,x,m)===!1||2===v))return x.abort();w="abort";for(l in{success:1,error:1,complete:1})x[l](m[l]);if(e=xb(tb,m,c,x)){if(x.readyState=1,k&&p.trigger("ajaxSend",[x,m]),2===v)return x;m.async&&m.timeout>0&&(i=a.setTimeout(function(){x.abort("timeout")},m.timeout));try{v=1,e.send(t,z)}catch(y){if(!(2>v))throw y;z(-1,y)}}else z(-1,"No Transport");function z(b,c,d,h){var j,l,t,u,w,y=c;2!==v&&(v=2,i&&a.clearTimeout(i),e=void 0,g=h||"",x.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(u=zb(m,x,d)),u=Ab(m,u,x,j),j?(m.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(n.lastModified[f]=w),w=x.getResponseHeader("etag"),w&&(n.etag[f]=w)),204===b||"HEAD"===m.type?y="nocontent":304===b?y="notmodified":(y=u.state,l=u.data,t=u.error,j=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),x.status=b,x.statusText=(c||y)+"",j?q.resolveWith(o,[l,y,x]):q.rejectWith(o,[x,y,t]),x.statusCode(s),s=void 0,k&&p.trigger(j?"ajaxSuccess":"ajaxError",[x,m,j?l:t]),r.fireWith(o,[x,y]),k&&(p.trigger("ajaxComplete",[x,m]),--n.active||n.event.trigger("ajaxStop")))}return x},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return!n.expr.filters.visible(a)},n.expr.filters.visible=function(a){return a.offsetWidth>0||a.offsetHeight>0||a.getClientRects().length>0};var Bb=/%20/g,Cb=/\[\]$/,Db=/\r?\n/g,Eb=/^(?:submit|button|image|reset|file)$/i,Fb=/^(?:input|select|textarea|keygen)/i;function Gb(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||Cb.test(a)?d(a,e):Gb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Gb(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Gb(c,a[c],b,e);return d.join("&").replace(Bb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&Fb.test(this.nodeName)&&!Eb.test(a)&&(this.checked||!X.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(Db,"\r\n")}}):{name:b.name,value:c.replace(Db,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Hb={0:200,1223:204},Ib=n.ajaxSettings.xhr();l.cors=!!Ib&&"withCredentials"in Ib,l.ajax=Ib=!!Ib,n.ajaxTransport(function(b){var c,d;return l.cors||Ib&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Hb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=n("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Jb=[],Kb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Jb.pop()||n.expando+"_"+kb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Kb.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Kb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Kb,"$1"+e):b.jsonp!==!1&&(b.url+=(lb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Jb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ca([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var Lb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Lb)return Lb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function Mb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(e=d.getBoundingClientRect(),c=Mb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ea})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;n.fn[a]=function(d){return K(this,function(a,d,e){var f=Mb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ga(l.pixelPosition,function(a,c){return c?(c=Fa(a,b),Ba.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return K(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)},size:function(){return this.length}}),n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Nb=a.jQuery,Ob=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Ob),b&&a.jQuery===n&&(a.jQuery=Nb),n},b||(a.jQuery=a.$=n),n});

/*
 AngularJS v1.5.11
 (c) 2010-2017 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(y){'use strict';function G(a,b){b=b||Error;return function(){var d=arguments[0],c;c="["+(a?a+":":"")+d+"] http://errors.angularjs.org/1.5.11/"+(a?a+"/":"")+d;for(d=1;d<arguments.length;d++){c=c+(1==d?"?":"&")+"p"+(d-1)+"=";var f=encodeURIComponent,e;e=arguments[d];e="function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?JSON.stringify(e):e;c+=f(e)}return new b(c)}}function la(a){if(null==a||Ya(a))return!1;if(I(a)||D(a)||F&&a instanceof
F)return!0;var b="length"in Object(a)&&a.length;return ba(b)&&(0<=b&&(b-1 in a||a instanceof Array)||"function"===typeof a.item)}function q(a,b,d){var c,f;if(a)if(C(a))for(c in a)"prototype"===c||"length"===c||"name"===c||a.hasOwnProperty&&!a.hasOwnProperty(c)||b.call(d,a[c],c,a);else if(I(a)||la(a)){var e="object"!==typeof a;c=0;for(f=a.length;c<f;c++)(e||c in a)&&b.call(d,a[c],c,a)}else if(a.forEach&&a.forEach!==q)a.forEach(b,d,a);else if(xc(a))for(c in a)b.call(d,a[c],c,a);else if("function"===
typeof a.hasOwnProperty)for(c in a)a.hasOwnProperty(c)&&b.call(d,a[c],c,a);else for(c in a)ua.call(a,c)&&b.call(d,a[c],c,a);return a}function yc(a,b,d){for(var c=Object.keys(a).sort(),f=0;f<c.length;f++)b.call(d,a[c[f]],c[f]);return c}function zc(a){return function(b,d){a(d,b)}}function ke(){return++sb}function Rb(a,b,d){for(var c=a.$$hashKey,f=0,e=b.length;f<e;++f){var g=b[f];if(E(g)||C(g))for(var h=Object.keys(g),k=0,l=h.length;k<l;k++){var m=h[k],n=g[m];d&&E(n)?ja(n)?a[m]=new Date(n.valueOf()):
Za(n)?a[m]=new RegExp(n):n.nodeName?a[m]=n.cloneNode(!0):Sb(n)?a[m]=n.clone():(E(a[m])||(a[m]=I(n)?[]:{}),Rb(a[m],[n],!0)):a[m]=n}}c?a.$$hashKey=c:delete a.$$hashKey;return a}function R(a){return Rb(a,va.call(arguments,1),!1)}function le(a){return Rb(a,va.call(arguments,1),!0)}function Z(a){return parseInt(a,10)}function Tb(a,b){return R(Object.create(a),b)}function w(){}function $a(a){return a}function ha(a){return function(){return a}}function Ac(a){return C(a.toString)&&a.toString!==ma}function z(a){return"undefined"===
typeof a}function x(a){return"undefined"!==typeof a}function E(a){return null!==a&&"object"===typeof a}function xc(a){return null!==a&&"object"===typeof a&&!Bc(a)}function D(a){return"string"===typeof a}function ba(a){return"number"===typeof a}function ja(a){return"[object Date]"===ma.call(a)}function C(a){return"function"===typeof a}function Za(a){return"[object RegExp]"===ma.call(a)}function Ya(a){return a&&a.window===a}function ab(a){return a&&a.$evalAsync&&a.$watch}function Ka(a){return"boolean"===
typeof a}function me(a){return a&&ba(a.length)&&ne.test(ma.call(a))}function Sb(a){return!(!a||!(a.nodeName||a.prop&&a.attr&&a.find))}function oe(a){var b={};a=a.split(",");var d;for(d=0;d<a.length;d++)b[a[d]]=!0;return b}function wa(a){return Q(a.nodeName||a[0]&&a[0].nodeName)}function bb(a,b){var d=a.indexOf(b);0<=d&&a.splice(d,1);return d}function sa(a,b){function d(a,b){var d=b.$$hashKey,e;if(I(a)){e=0;for(var f=a.length;e<f;e++)b.push(c(a[e]))}else if(xc(a))for(e in a)b[e]=c(a[e]);else if(a&&
"function"===typeof a.hasOwnProperty)for(e in a)a.hasOwnProperty(e)&&(b[e]=c(a[e]));else for(e in a)ua.call(a,e)&&(b[e]=c(a[e]));d?b.$$hashKey=d:delete b.$$hashKey;return b}function c(a){if(!E(a))return a;var b=e.indexOf(a);if(-1!==b)return g[b];if(Ya(a)||ab(a))throw xa("cpws");var b=!1,c=f(a);void 0===c&&(c=I(a)?[]:Object.create(Bc(a)),b=!0);e.push(a);g.push(c);return b?d(a,c):c}function f(a){switch(ma.call(a)){case "[object Int8Array]":case "[object Int16Array]":case "[object Int32Array]":case "[object Float32Array]":case "[object Float64Array]":case "[object Uint8Array]":case "[object Uint8ClampedArray]":case "[object Uint16Array]":case "[object Uint32Array]":return new a.constructor(c(a.buffer),
a.byteOffset,a.length);case "[object ArrayBuffer]":if(!a.slice){var b=new ArrayBuffer(a.byteLength);(new Uint8Array(b)).set(new Uint8Array(a));return b}return a.slice(0);case "[object Boolean]":case "[object Number]":case "[object String]":case "[object Date]":return new a.constructor(a.valueOf());case "[object RegExp]":return b=new RegExp(a.source,a.toString().match(/[^/]*$/)[0]),b.lastIndex=a.lastIndex,b;case "[object Blob]":return new a.constructor([a],{type:a.type})}if(C(a.cloneNode))return a.cloneNode(!0)}
var e=[],g=[];if(b){if(me(b)||"[object ArrayBuffer]"===ma.call(b))throw xa("cpta");if(a===b)throw xa("cpi");I(b)?b.length=0:q(b,function(a,d){"$$hashKey"!==d&&delete b[d]});e.push(a);g.push(b);return d(a,b)}return c(a)}function na(a,b){if(a===b)return!0;if(null===a||null===b)return!1;if(a!==a&&b!==b)return!0;var d=typeof a,c;if(d===typeof b&&"object"===d)if(I(a)){if(!I(b))return!1;if((d=a.length)===b.length){for(c=0;c<d;c++)if(!na(a[c],b[c]))return!1;return!0}}else{if(ja(a))return ja(b)?na(a.getTime(),
b.getTime()):!1;if(Za(a))return Za(b)?a.toString()===b.toString():!1;if(ab(a)||ab(b)||Ya(a)||Ya(b)||I(b)||ja(b)||Za(b))return!1;d=V();for(c in a)if("$"!==c.charAt(0)&&!C(a[c])){if(!na(a[c],b[c]))return!1;d[c]=!0}for(c in b)if(!(c in d)&&"$"!==c.charAt(0)&&x(b[c])&&!C(b[c]))return!1;return!0}return!1}function cb(a,b,d){return a.concat(va.call(b,d))}function db(a,b){var d=2<arguments.length?va.call(arguments,2):[];return!C(b)||b instanceof RegExp?b:d.length?function(){return arguments.length?b.apply(a,
cb(d,arguments,0)):b.apply(a,d)}:function(){return arguments.length?b.apply(a,arguments):b.call(a)}}function pe(a,b){var d=b;"string"===typeof a&&"$"===a.charAt(0)&&"$"===a.charAt(1)?d=void 0:Ya(b)?d="$WINDOW":b&&y.document===b?d="$DOCUMENT":ab(b)&&(d="$SCOPE");return d}function eb(a,b){if(!z(a))return ba(b)||(b=b?2:null),JSON.stringify(a,pe,b)}function Cc(a){return D(a)?JSON.parse(a):a}function Dc(a,b){a=a.replace(qe,"");var d=Date.parse("Jan 01, 1970 00:00:00 "+a)/6E4;return ia(d)?b:d}function Ub(a,
b,d){d=d?-1:1;var c=a.getTimezoneOffset();b=Dc(b,c);d*=b-c;a=new Date(a.getTime());a.setMinutes(a.getMinutes()+d);return a}function ya(a){a=F(a).clone();try{a.empty()}catch(b){}var d=F("<div>").append(a).html();try{return a[0].nodeType===La?Q(d):d.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(a,b){return"<"+Q(b)})}catch(c){return Q(d)}}function Ec(a){try{return decodeURIComponent(a)}catch(b){}}function Fc(a){var b={};q((a||"").split("&"),function(a){var c,f,e;a&&(f=a=a.replace(/\+/g,"%20"),
c=a.indexOf("="),-1!==c&&(f=a.substring(0,c),e=a.substring(c+1)),f=Ec(f),x(f)&&(e=x(e)?Ec(e):!0,ua.call(b,f)?I(b[f])?b[f].push(e):b[f]=[b[f],e]:b[f]=e))});return b}function Vb(a){var b=[];q(a,function(a,c){I(a)?q(a,function(a){b.push(oa(c,!0)+(!0===a?"":"="+oa(a,!0)))}):b.push(oa(c,!0)+(!0===a?"":"="+oa(a,!0)))});return b.length?b.join("&"):""}function tb(a){return oa(a,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function oa(a,b){return encodeURIComponent(a).replace(/%40/gi,
"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,b?"%20":"+")}function re(a,b){var d,c,f=Oa.length;for(c=0;c<f;++c)if(d=Oa[c]+b,D(d=a.getAttribute(d)))return d;return null}function se(a,b){var d,c,f={};q(Oa,function(b){b+="app";!d&&a.hasAttribute&&a.hasAttribute(b)&&(d=a,c=a.getAttribute(b))});q(Oa,function(b){b+="app";var f;!d&&(f=a.querySelector("["+b.replace(":","\\:")+"]"))&&(d=f,c=f.getAttribute(b))});d&&(te?(f.strictDi=null!==re(d,"strict-di"),
b(d,c?[c]:[],f)):y.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match."))}function Gc(a,b,d){E(d)||(d={});d=R({strictDi:!1},d);var c=function(){a=F(a);if(a.injector()){var c=a[0]===y.document?"document":ya(a);throw xa("btstrpd",c.replace(/</,"&lt;").replace(/>/,"&gt;"));}b=b||[];b.unshift(["$provide",function(b){b.value("$rootElement",a)}]);d.debugInfoEnabled&&b.push(["$compileProvider",function(a){a.debugInfoEnabled(!0)}]);
b.unshift("ng");c=fb(b,d.strictDi);c.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},f=/^NG_ENABLE_DEBUG_INFO!/,e=/^NG_DEFER_BOOTSTRAP!/;y&&f.test(y.name)&&(d.debugInfoEnabled=!0,y.name=y.name.replace(f,""));if(y&&!e.test(y.name))return c();y.name=y.name.replace(e,"");$.resumeBootstrap=function(a){q(a,function(a){b.push(a)});return c()};C($.resumeDeferredBootstrap)&&$.resumeDeferredBootstrap()}function ue(){y.name=
"NG_ENABLE_DEBUG_INFO!"+y.name;y.location.reload()}function ve(a){a=$.element(a).injector();if(!a)throw xa("test");return a.get("$$testability")}function Hc(a,b){b=b||"_";return a.replace(we,function(a,c){return(c?b:"")+a.toLowerCase()})}function xe(){var a;if(!Ic){var b=ub();(za=z(b)?y.jQuery:b?y[b]:void 0)&&za.fn.on?(F=za,R(za.fn,{scope:Pa.scope,isolateScope:Pa.isolateScope,controller:Pa.controller,injector:Pa.injector,inheritedData:Pa.inheritedData}),a=za.cleanData,za.cleanData=function(b){for(var c,
f=0,e;null!=(e=b[f]);f++)(c=za._data(e,"events"))&&c.$destroy&&za(e).triggerHandler("$destroy");a(b)}):F=W;$.element=F;Ic=!0}}function gb(a,b,d){if(!a)throw xa("areq",b||"?",d||"required");return a}function Qa(a,b,d){d&&I(a)&&(a=a[a.length-1]);gb(C(a),b,"not a function, got "+(a&&"object"===typeof a?a.constructor.name||"Object":typeof a));return a}function Ra(a,b){if("hasOwnProperty"===a)throw xa("badname",b);}function Jc(a,b,d){if(!b)return a;b=b.split(".");for(var c,f=a,e=b.length,g=0;g<e;g++)c=
b[g],a&&(a=(f=a)[c]);return!d&&C(a)?db(f,a):a}function vb(a){for(var b=a[0],d=a[a.length-1],c,f=1;b!==d&&(b=b.nextSibling);f++)if(c||a[f]!==b)c||(c=F(va.call(a,0,f))),c.push(b);return c||a}function V(){return Object.create(null)}function ye(a){function b(a,b,c){return a[b]||(a[b]=c())}var d=G("$injector"),c=G("ng");a=b(a,"angular",Object);a.$$minErr=a.$$minErr||G;return b(a,"module",function(){var a={};return function(e,g,h){if("hasOwnProperty"===e)throw c("badname","module");g&&a.hasOwnProperty(e)&&
(a[e]=null);return b(a,e,function(){function a(b,d,e,f){f||(f=c);return function(){f[e||"push"]([b,d,arguments]);return H}}function b(a,d){return function(b,f){f&&C(f)&&(f.$$moduleName=e);c.push([a,d,arguments]);return H}}if(!g)throw d("nomod",e);var c=[],f=[],r=[],s=a("$injector","invoke","push",f),H={_invokeQueue:c,_configBlocks:f,_runBlocks:r,requires:g,name:e,provider:b("$provide","provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:a("$provide","value"),constant:a("$provide",
"constant","unshift"),decorator:b("$provide","decorator"),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),component:b("$compileProvider","component"),config:s,run:function(a){r.push(a);return this}};h&&s(h);return H})}})}function ka(a,b){if(I(a)){b=b||[];for(var d=0,c=a.length;d<c;d++)b[d]=a[d]}else if(E(a))for(d in b=b||{},a)if("$"!==d.charAt(0)||"$"!==d.charAt(1))b[d]=a[d];
return b||a}function ze(a){R(a,{bootstrap:Gc,copy:sa,extend:R,merge:le,equals:na,element:F,forEach:q,injector:fb,noop:w,bind:db,toJson:eb,fromJson:Cc,identity:$a,isUndefined:z,isDefined:x,isString:D,isFunction:C,isObject:E,isNumber:ba,isElement:Sb,isArray:I,version:Ae,isDate:ja,lowercase:Q,uppercase:wb,callbacks:{$$counter:0},getTestability:ve,$$minErr:G,$$csp:da,reloadWithDebugInfo:ue});Wb=ye(y);Wb("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:Be});a.provider("$compile",Kc).directive({a:Ce,
input:Lc,textarea:Lc,form:De,script:Ee,select:Fe,option:Ge,ngBind:He,ngBindHtml:Ie,ngBindTemplate:Je,ngClass:Ke,ngClassEven:Le,ngClassOdd:Me,ngCloak:Ne,ngController:Oe,ngForm:Pe,ngHide:Qe,ngIf:Re,ngInclude:Se,ngInit:Te,ngNonBindable:Ue,ngPluralize:Ve,ngRepeat:We,ngShow:Xe,ngStyle:Ye,ngSwitch:Ze,ngSwitchWhen:$e,ngSwitchDefault:af,ngOptions:bf,ngTransclude:cf,ngModel:df,ngList:ef,ngChange:ff,pattern:Mc,ngPattern:Mc,required:Nc,ngRequired:Nc,minlength:Oc,ngMinlength:Oc,maxlength:Pc,ngMaxlength:Pc,ngValue:gf,
ngModelOptions:hf}).directive({ngInclude:jf}).directive(xb).directive(Qc);a.provider({$anchorScroll:kf,$animate:lf,$animateCss:mf,$$animateJs:nf,$$animateQueue:of,$$AnimateRunner:pf,$$animateAsyncRun:qf,$browser:rf,$cacheFactory:sf,$controller:tf,$document:uf,$exceptionHandler:vf,$filter:Rc,$$forceReflow:wf,$interpolate:xf,$interval:yf,$http:zf,$httpParamSerializer:Af,$httpParamSerializerJQLike:Bf,$httpBackend:Cf,$xhrFactory:Df,$jsonpCallbacks:Ef,$location:Ff,$log:Gf,$parse:Hf,$rootScope:If,$q:Jf,
$$q:Kf,$sce:Lf,$sceDelegate:Mf,$sniffer:Nf,$templateCache:Of,$templateRequest:Pf,$$testability:Qf,$timeout:Rf,$window:Sf,$$rAF:Tf,$$jqLite:Uf,$$HashMap:Vf,$$cookieReader:Wf})}])}function hb(a){return a.replace(Xf,function(a,d,c,f){return f?c.toUpperCase():c}).replace(Yf,"Moz$1")}function Sc(a){a=a.nodeType;return 1===a||!a||9===a}function Tc(a,b){var d,c,f=b.createDocumentFragment(),e=[];if(Xb.test(a)){d=f.appendChild(b.createElement("div"));c=(Zf.exec(a)||["",""])[1].toLowerCase();c=pa[c]||pa._default;
d.innerHTML=c[1]+a.replace($f,"<$1></$2>")+c[2];for(c=c[0];c--;)d=d.lastChild;e=cb(e,d.childNodes);d=f.firstChild;d.textContent=""}else e.push(b.createTextNode(a));f.textContent="";f.innerHTML="";q(e,function(a){f.appendChild(a)});return f}function Uc(a,b){var d=a.parentNode;d&&d.replaceChild(b,a);b.appendChild(a)}function W(a){if(a instanceof W)return a;var b;D(a)&&(a=Y(a),b=!0);if(!(this instanceof W)){if(b&&"<"!==a.charAt(0))throw Yb("nosel");return new W(a)}if(b){b=y.document;var d;a=(d=ag.exec(a))?
[b.createElement(d[1])]:(d=Tc(a,b))?d.childNodes:[]}Vc(this,a)}function Zb(a){return a.cloneNode(!0)}function yb(a,b){b||ib(a);if(a.querySelectorAll)for(var d=a.querySelectorAll("*"),c=0,f=d.length;c<f;c++)ib(d[c])}function Wc(a,b,d,c){if(x(c))throw Yb("offargs");var f=(c=zb(a))&&c.events,e=c&&c.handle;if(e)if(b){var g=function(b){var c=f[b];x(d)&&bb(c||[],d);x(d)&&c&&0<c.length||(a.removeEventListener(b,e,!1),delete f[b])};q(b.split(" "),function(a){g(a);Ab[a]&&g(Ab[a])})}else for(b in f)"$destroy"!==
b&&a.removeEventListener(b,e,!1),delete f[b]}function ib(a,b){var d=a.ng339,c=d&&jb[d];c&&(b?delete c.data[b]:(c.handle&&(c.events.$destroy&&c.handle({},"$destroy"),Wc(a)),delete jb[d],a.ng339=void 0))}function zb(a,b){var d=a.ng339,d=d&&jb[d];b&&!d&&(a.ng339=d=++bg,d=jb[d]={events:{},data:{},handle:void 0});return d}function $b(a,b,d){if(Sc(a)){var c=x(d),f=!c&&b&&!E(b),e=!b;a=(a=zb(a,!f))&&a.data;if(c)a[b]=d;else{if(e)return a;if(f)return a&&a[b];R(a,b)}}}function Bb(a,b){return a.getAttribute?
-1<(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+b+" "):!1}function Cb(a,b){b&&a.setAttribute&&q(b.split(" "),function(b){a.setAttribute("class",Y((" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Y(b)+" "," ")))})}function Db(a,b){if(b&&a.setAttribute){var d=(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");q(b.split(" "),function(a){a=Y(a);-1===d.indexOf(" "+a+" ")&&(d+=a+" ")});a.setAttribute("class",Y(d))}}function Vc(a,b){if(b)if(b.nodeType)a[a.length++]=
b;else{var d=b.length;if("number"===typeof d&&b.window!==b){if(d)for(var c=0;c<d;c++)a[a.length++]=b[c]}else a[a.length++]=b}}function Xc(a,b){return Eb(a,"$"+(b||"ngController")+"Controller")}function Eb(a,b,d){9===a.nodeType&&(a=a.documentElement);for(b=I(b)?b:[b];a;){for(var c=0,f=b.length;c<f;c++)if(x(d=F.data(a,b[c])))return d;a=a.parentNode||11===a.nodeType&&a.host}}function Yc(a){for(yb(a,!0);a.firstChild;)a.removeChild(a.firstChild)}function Fb(a,b){b||yb(a);var d=a.parentNode;d&&d.removeChild(a)}
function cg(a,b){b=b||y;if("complete"===b.document.readyState)b.setTimeout(a);else F(b).on("load",a)}function Zc(a,b){var d=Gb[b.toLowerCase()];return d&&$c[wa(a)]&&d}function dg(a,b){var d=function(c,d){c.isDefaultPrevented=function(){return c.defaultPrevented};var e=b[d||c.type],g=e?e.length:0;if(g){if(z(c.immediatePropagationStopped)){var h=c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=!0;c.stopPropagation&&c.stopPropagation();h&&h.call(c)}}c.isImmediatePropagationStopped=
function(){return!0===c.immediatePropagationStopped};var k=e.specialHandlerWrapper||eg;1<g&&(e=ka(e));for(var l=0;l<g;l++)c.isImmediatePropagationStopped()||k(a,c,e[l])}};d.elem=a;return d}function eg(a,b,d){d.call(a,b)}function fg(a,b,d){var c=b.relatedTarget;c&&(c===a||gg.call(a,c))||d.call(a,b)}function Uf(){this.$get=function(){return R(W,{hasClass:function(a,b){a.attr&&(a=a[0]);return Bb(a,b)},addClass:function(a,b){a.attr&&(a=a[0]);return Db(a,b)},removeClass:function(a,b){a.attr&&(a=a[0]);
return Cb(a,b)}})}}function Aa(a,b){var d=a&&a.$$hashKey;if(d)return"function"===typeof d&&(d=a.$$hashKey()),d;d=typeof a;return d="function"===d||"object"===d&&null!==a?a.$$hashKey=d+":"+(b||ke)():d+":"+a}function Sa(a,b){if(b){var d=0;this.nextUid=function(){return++d}}q(a,this.put,this)}function ad(a){a=(Function.prototype.toString.call(a)+" ").replace(hg,"");return a.match(ig)||a.match(jg)}function kg(a){return(a=ad(a))?"function("+(a[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function fb(a,b){function d(a){return function(b,
c){if(E(b))q(b,zc(a));else return a(b,c)}}function c(a,b){Ra(a,"service");if(C(b)||I(b))b=r.instantiate(b);if(!b.$get)throw Ba("pget",a);return n[a+"Provider"]=b}function f(a,b){return function(){var c=u.invoke(b,this);if(z(c))throw Ba("undef",a);return c}}function e(a,b,d){return c(a,{$get:!1!==d?f(a,b):b})}function g(a){gb(z(a)||I(a),"modulesToLoad","not an array");var b=[],c;q(a,function(a){function d(a){var b,c;b=0;for(c=a.length;b<c;b++){var e=a[b],f=r.get(e[0]);f[e[1]].apply(f,e[2])}}if(!m.get(a)){m.put(a,
!0);try{D(a)?(c=Wb(a),b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):C(a)?b.push(r.invoke(a)):I(a)?b.push(r.invoke(a)):Qa(a,"module")}catch(e){throw I(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1===e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Ba("modulerr",a,e.stack||e.message||e);}}});return b}function h(a,c){function d(b,e){if(a.hasOwnProperty(b)){if(a[b]===k)throw Ba("cdep",b+" <- "+l.join(" <- "));return a[b]}try{return l.unshift(b),a[b]=k,a[b]=
c(b,e),a[b]}catch(f){throw a[b]===k&&delete a[b],f;}finally{l.shift()}}function e(a,c,f){var g=[];a=fb.$$annotate(a,b,f);for(var h=0,k=a.length;h<k;h++){var l=a[h];if("string"!==typeof l)throw Ba("itkn",l);g.push(c&&c.hasOwnProperty(l)?c[l]:d(l,f))}return g}return{invoke:function(a,b,c,d){"string"===typeof c&&(d=c,c=null);c=e(a,c,d);I(a)&&(a=a[a.length-1]);d=11>=Ia?!1:"function"===typeof a&&/^(?:class\b|constructor\()/.test(Function.prototype.toString.call(a)+" ");return d?(c.unshift(null),new (Function.prototype.bind.apply(a,
c))):a.apply(b,c)},instantiate:function(a,b,c){var d=I(a)?a[a.length-1]:a;a=e(a,b,c);a.unshift(null);return new (Function.prototype.bind.apply(d,a))},get:d,annotate:fb.$$annotate,has:function(b){return n.hasOwnProperty(b+"Provider")||a.hasOwnProperty(b)}}}b=!0===b;var k={},l=[],m=new Sa([],!0),n={$provide:{provider:d(c),factory:d(e),service:d(function(a,b){return e(a,["$injector",function(a){return a.instantiate(b)}])}),value:d(function(a,b){return e(a,ha(b),!1)}),constant:d(function(a,b){Ra(a,"constant");
n[a]=b;s[a]=b}),decorator:function(a,b){var c=r.get(a+"Provider"),d=c.$get;c.$get=function(){var a=u.invoke(d,c);return u.invoke(b,null,{$delegate:a})}}}},r=n.$injector=h(n,function(a,b){$.isString(b)&&l.push(b);throw Ba("unpr",l.join(" <- "));}),s={},H=h(s,function(a,b){var c=r.get(a+"Provider",b);return u.invoke(c.$get,c,void 0,a)}),u=H;n.$injectorProvider={$get:ha(H)};var p=g(a),u=H.get("$injector");u.strictDi=b;q(p,function(a){a&&u.invoke(a)});return u}function kf(){var a=!0;this.disableAutoScrolling=
function(){a=!1};this.$get=["$window","$location","$rootScope",function(b,d,c){function f(a){var b=null;Array.prototype.some.call(a,function(a){if("a"===wa(a))return b=a,!0});return b}function e(a){if(a){a.scrollIntoView();var c;c=g.yOffset;C(c)?c=c():Sb(c)?(c=c[0],c="fixed"!==b.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):ba(c)||(c=0);c&&(a=a.getBoundingClientRect().top,b.scrollBy(0,a-c))}else b.scrollTo(0,0)}function g(a){a=D(a)?a:ba(a)?a.toString():d.hash();var b;a?(b=h.getElementById(a))?
e(b):(b=f(h.getElementsByName(a)))?e(b):"top"===a&&e(null):e(null)}var h=b.document;a&&c.$watch(function(){return d.hash()},function(a,b){a===b&&""===a||cg(function(){c.$evalAsync(g)})});return g}]}function kb(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;I(a)&&(a=a.join(" "));I(b)&&(b=b.join(" "));return a+" "+b}function lg(a){D(a)&&(a=a.split(" "));var b=V();q(a,function(a){a.length&&(b[a]=!0)});return b}function Ca(a){return E(a)?a:{}}function mg(a,b,d,c){function f(a){try{a.apply(null,
va.call(arguments,1))}finally{if(H--,0===H)for(;u.length;)try{u.pop()()}catch(b){d.error(b)}}}function e(){N=null;g();h()}function g(){p=L();p=z(p)?null:p;na(p,J)&&(p=J);J=p}function h(){if(A!==k.url()||K!==p)A=k.url(),K=p,q(O,function(a){a(k.url(),p)})}var k=this,l=a.location,m=a.history,n=a.setTimeout,r=a.clearTimeout,s={};k.isMock=!1;var H=0,u=[];k.$$completeOutstandingRequest=f;k.$$incOutstandingRequestCount=function(){H++};k.notifyWhenNoOutstandingRequests=function(a){0===H?a():u.push(a)};var p,
K,A=l.href,v=b.find("base"),N=null,L=c.history?function(){try{return m.state}catch(a){}}:w;g();K=p;k.url=function(b,d,e){z(e)&&(e=null);l!==a.location&&(l=a.location);m!==a.history&&(m=a.history);if(b){var f=K===e;if(A===b&&(!c.history||f))return k;var h=A&&Ga(A)===Ga(b);A=b;K=e;!c.history||h&&f?(h||(N=b),d?l.replace(b):h?(d=l,e=b.indexOf("#"),e=-1===e?"":b.substr(e),d.hash=e):l.href=b,l.href!==b&&(N=b)):(m[d?"replaceState":"pushState"](e,"",b),g(),K=p);N&&(N=b);return k}return N||l.href.replace(/%27/g,
"'")};k.state=function(){return p};var O=[],M=!1,J=null;k.onUrlChange=function(b){if(!M){if(c.history)F(a).on("popstate",e);F(a).on("hashchange",e);M=!0}O.push(b);return b};k.$$applicationDestroyed=function(){F(a).off("hashchange popstate",e)};k.$$checkUrlChange=h;k.baseHref=function(){var a=v.attr("href");return a?a.replace(/^(https?:)?\/\/[^/]*/,""):""};k.defer=function(a,b){var c;H++;c=n(function(){delete s[c];f(a)},b||0);s[c]=!0;return c};k.defer.cancel=function(a){return s[a]?(delete s[a],r(a),
f(w),!0):!1}}function rf(){this.$get=["$window","$log","$sniffer","$document",function(a,b,d,c){return new mg(a,c,b,d)}]}function sf(){this.$get=function(){function a(a,c){function f(a){a!==n&&(r?r===a&&(r=a.n):r=a,e(a.n,a.p),e(a,n),n=a,n.n=null)}function e(a,b){a!==b&&(a&&(a.p=b),b&&(b.n=a))}if(a in b)throw G("$cacheFactory")("iid",a);var g=0,h=R({},c,{id:a}),k=V(),l=c&&c.capacity||Number.MAX_VALUE,m=V(),n=null,r=null;return b[a]={put:function(a,b){if(!z(b)){if(l<Number.MAX_VALUE){var c=m[a]||(m[a]=
{key:a});f(c)}a in k||g++;k[a]=b;g>l&&this.remove(r.key);return b}},get:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;f(b)}return k[a]},remove:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;b===n&&(n=b.p);b===r&&(r=b.n);e(b.n,b.p);delete m[a]}a in k&&(delete k[a],g--)},removeAll:function(){k=V();g=0;m=V();n=r=null},destroy:function(){m=h=k=null;delete b[a]},info:function(){return R({},h,{size:g})}}}var b={};a.info=function(){var a={};q(b,function(b,f){a[f]=b.info()});return a};
a.get=function(a){return b[a]};return a}}function Of(){this.$get=["$cacheFactory",function(a){return a("templates")}]}function Kc(a,b){function d(a,b,c){var d=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/,e=V();q(a,function(a,f){if(a in n)e[f]=n[a];else{var g=a.match(d);if(!g)throw fa("iscp",b,f,a,c?"controller bindings definition":"isolate scope definition");e[f]={mode:g[1][0],collection:"*"===g[2],optional:"?"===g[3],attrName:g[4]||f};g[4]&&(n[a]=e[f])}});return e}function c(a){var b=a.charAt(0);if(!b||
b!==Q(b))throw fa("baddir",a);if(a!==a.trim())throw fa("baddir",a);}function f(a){var b=a.require||a.controller&&a.name;!I(b)&&E(b)&&q(b,function(a,c){var d=a.match(l);a.substring(d[0].length)||(b[c]=d[0]+c)});return b}var e={},g=/^\s*directive:\s*([\w-]+)\s+(.*)$/,h=/(([\w-]+)(?::([^;]+))?;?)/,k=oe("ngSrc,ngSrcset,src,srcset"),l=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,m=/^(on[a-z]+|formaction)$/,n=V();this.directive=function A(b,d){gb(b,"name");Ra(b,"directive");D(b)?(c(b),gb(d,"directiveFactory"),e.hasOwnProperty(b)||
(e[b]=[],a.factory(b+"Directive",["$injector","$exceptionHandler",function(a,c){var d=[];q(e[b],function(e,g){try{var h=a.invoke(e);C(h)?h={compile:ha(h)}:!h.compile&&h.link&&(h.compile=ha(h.link));h.priority=h.priority||0;h.index=g;h.name=h.name||b;h.require=f(h);var k=h,l=h.restrict;if(l&&(!D(l)||!/[EACM]/.test(l)))throw fa("badrestrict",l,b);k.restrict=l||"EA";h.$$moduleName=e.$$moduleName;d.push(h)}catch(m){c(m)}});return d}])),e[b].push(d)):q(b,zc(A));return this};this.component=function(a,b){function c(a){function e(b){return C(b)||
I(b)?function(c,d){return a.invoke(b,this,{$element:c,$attrs:d})}:b}var f=b.template||b.templateUrl?b.template:"",g={controller:d,controllerAs:ng(b.controller)||b.controllerAs||"$ctrl",template:e(f),templateUrl:e(b.templateUrl),transclude:b.transclude,scope:{},bindToController:b.bindings||{},restrict:"E",require:b.require};q(b,function(a,b){"$"===b.charAt(0)&&(g[b]=a)});return g}var d=b.controller||function(){};q(b,function(a,b){"$"===b.charAt(0)&&(c[b]=a,C(d)&&(d[b]=a))});c.$inject=["$injector"];
return this.directive(a,c)};this.aHrefSanitizationWhitelist=function(a){return x(a)?(b.aHrefSanitizationWhitelist(a),this):b.aHrefSanitizationWhitelist()};this.imgSrcSanitizationWhitelist=function(a){return x(a)?(b.imgSrcSanitizationWhitelist(a),this):b.imgSrcSanitizationWhitelist()};var r=!0;this.debugInfoEnabled=function(a){return x(a)?(r=a,this):r};var s=!0;this.preAssignBindingsEnabled=function(a){return x(a)?(s=a,this):s};var H=10;this.onChangesTtl=function(a){return arguments.length?(H=a,this):
H};var u=!0;this.commentDirectivesEnabled=function(a){return arguments.length?(u=a,this):u};var p=!0;this.cssClassDirectivesEnabled=function(a){return arguments.length?(p=a,this):p};this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(a,b,c,f,n,M,J,B,T,S){function P(){try{if(!--xa)throw da=void 0,fa("infchng",H);J.$apply(function(){for(var a=[],b=0,c=da.length;b<c;++b)try{da[b]()}catch(d){a.push(d)}da=
void 0;if(a.length)throw a;})}finally{xa++}}function t(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<e;d++)f=c[d],this[f]=b[f]}else this.$attr={};this.$$element=a}function qa(a,b,c){ta.innerHTML="<span "+b+">";b=ta.firstChild.attributes;var d=b[0];b.removeNamedItem(d.name);d.value=c;a.attributes.setNamedItem(d)}function Ja(a,b){try{a.addClass(b)}catch(c){}}function ca(a,b,c,d,e){a instanceof F||(a=F(a));for(var f=/\S+/,g=0,h=a.length;g<h;g++){var k=a[g];k.nodeType===La&&k.nodeValue.match(f)&&
Uc(k,a[g]=y.document.createElement("span"))}var l=Ma(a,b,a,c,d,e);ca.$$addScopeClass(a);var m=null;return function(b,c,d){gb(b,"scope");e&&e.needsNewScope&&(b=b.$parent.$new());d=d||{};var f=d.parentBoundTranscludeFn,g=d.transcludeControllers;d=d.futureParentElement;f&&f.$$boundTransclude&&(f=f.$$boundTransclude);m||(m=(d=d&&d[0])?"foreignobject"!==wa(d)&&ma.call(d).match(/SVG/)?"svg":"html":"html");d="html"!==m?F(ha(m,F("<div>").append(a).html())):c?Pa.clone.call(a):a;if(g)for(var h in g)d.data("$"+
h+"Controller",g[h].instance);ca.$$addScopeInfo(d,b);c&&c(d,b);l&&l(b,d,d,f);return d}}function Ma(a,b,c,d,e,f){function g(a,c,d,e){var f,k,l,m,n,s,A;if(p)for(A=Array(c.length),m=0;m<h.length;m+=3)f=h[m],A[f]=c[f];else A=c;m=0;for(n=h.length;m<n;)k=A[h[m++]],c=h[m++],f=h[m++],c?(c.scope?(l=a.$new(),ca.$$addScopeInfo(F(k),l)):l=a,s=c.transcludeOnThisElement?G(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?G(a,b):null,c(f,l,k,d,s)):f&&f(a,k.childNodes,void 0,e)}for(var h=[],k,l,m,n,p,s=0;s<a.length;s++){k=
new t;l=cc(a[s],[],k,0===s?d:void 0,e);(f=l.length?W(l,a[s],k,b,c,null,[],[],f):null)&&f.scope&&ca.$$addScopeClass(k.$$element);k=f&&f.terminal||!(m=a[s].childNodes)||!m.length?null:Ma(m,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b);if(f||k)h.push(s,f,k),n=!0,p=p||f;f=null}return n?g:null}function G(a,b,c){function d(e,f,g,h,k){e||(e=a.$new(!1,k),e.$$transcluded=!0);return b(e,f,{parentBoundTranscludeFn:c,transcludeControllers:g,futureParentElement:h})}var e=d.$$slots=V(),
f;for(f in b.$$slots)e[f]=b.$$slots[f]?G(a,b.$$slots[f],c):null;return d}function cc(a,b,c,d,e){var f=c.$attr,g;switch(a.nodeType){case 1:g=wa(a);U(b,Da(g),"E",d,e);for(var k,l,m,n,p=a.attributes,s=0,A=p&&p.length;s<A;s++){var r=!1,u=!1;k=p[s];l=k.name;m=Y(k.value);k=Da(l);(n=Ga.test(k))&&(l=l.replace(bd,"").substr(8).replace(/_(.)/g,function(a,b){return b.toUpperCase()}));(k=k.match(Ha))&&Z(k[1])&&(r=l,u=l.substr(0,l.length-5)+"end",l=l.substr(0,l.length-6));k=Da(l.toLowerCase());f[k]=l;if(n||!c.hasOwnProperty(k))c[k]=
m,Zc(a,k)&&(c[k]=!0);pa(a,b,m,k,n);U(b,k,"A",d,e,r,u)}"input"===g&&"hidden"===a.getAttribute("type")&&a.setAttribute("autocomplete","off");if(!Fa)break;f=a.className;E(f)&&(f=f.animVal);if(D(f)&&""!==f)for(;a=h.exec(f);)k=Da(a[2]),U(b,k,"C",d,e)&&(c[k]=Y(a[3])),f=f.substr(a.index+a[0].length);break;case La:if(11===Ia)for(;a.parentNode&&a.nextSibling&&a.nextSibling.nodeType===La;)a.nodeValue+=a.nextSibling.nodeValue,a.parentNode.removeChild(a.nextSibling);ka(b,a.nodeValue);break;case 8:if(!Ea)break;
Ta(a,b,c,d,e)}b.sort(ja);return b}function Ta(a,b,c,d,e){try{var f=g.exec(a.nodeValue);if(f){var h=Da(f[1]);U(b,h,"M",d,e)&&(c[h]=Y(f[2]))}}catch(k){}}function cd(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw fa("uterdir",b,c);1===a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return F(d)}function dd(a,b,c){return function(d,e,f,g,h){e=cd(e[0],b,c);return a(d,e,f,g,h)}}function dc(a,b,c,d,e,f){var g;return a?
ca(b,c,d,e,f):function(){g||(g=ca(b,c,d,e,f),b=c=f=null);return g.apply(this,arguments)}}function W(a,b,d,e,f,g,h,k,l){function m(a,b,c,d){if(a){c&&(a=dd(a,c,d));a.require=v.require;a.directiveName=S;if(u===v||v.$$isolateScope)a=ra(a,{isolateScope:!0});h.push(a)}if(b){c&&(b=dd(b,c,d));b.require=v.require;b.directiveName=S;if(u===v||v.$$isolateScope)b=ra(b,{isolateScope:!0});k.push(b)}}function n(a,e,f,g,l){function m(a,b,c,d){var e;ab(a)||(d=c,c=b,b=a,a=void 0);H&&(e=J);c||(c=H?P.parent():P);if(d){var f=
l.$$slots[d];if(f)return f(a,b,e,c,qa);if(z(f))throw fa("noslot",d,ya(P));}else return l(a,b,e,c,qa)}var p,v,B,M,T,J,S,P;b===f?(g=d,P=d.$$element):(P=F(f),g=new t(P,d));T=e;u?M=e.$new(!0):A&&(T=e.$parent);l&&(S=m,S.$$boundTransclude=l,S.isSlotFilled=function(a){return!!l.$$slots[a]});r&&(J=ba(P,g,S,r,M,e,u));u&&(ca.$$addScopeInfo(P,M,!0,!(O&&(O===u||O===u.$$originalDirective))),ca.$$addScopeClass(P,!0),M.$$isolateBindings=u.$$isolateBindings,v=la(e,g,M,M.$$isolateBindings,u),v.removeWatches&&M.$on("$destroy",
v.removeWatches));for(p in J){v=r[p];B=J[p];var L=v.$$bindings.bindToController;if(s){B.bindingInfo=L?la(T,g,B.instance,L,v):{};var ac=B();ac!==B.instance&&(B.instance=ac,P.data("$"+v.name+"Controller",ac),B.bindingInfo.removeWatches&&B.bindingInfo.removeWatches(),B.bindingInfo=la(T,g,B.instance,L,v))}else B.instance=B(),P.data("$"+v.name+"Controller",B.instance),B.bindingInfo=la(T,g,B.instance,L,v)}q(r,function(a,b){var c=a.require;a.bindToController&&!I(c)&&E(c)&&R(J[b].instance,X(b,c,P,J))});q(J,
function(a){var b=a.instance;if(C(b.$onChanges))try{b.$onChanges(a.bindingInfo.initialChanges)}catch(d){c(d)}if(C(b.$onInit))try{b.$onInit()}catch(e){c(e)}C(b.$doCheck)&&(T.$watch(function(){b.$doCheck()}),b.$doCheck());C(b.$onDestroy)&&T.$on("$destroy",function(){b.$onDestroy()})});p=0;for(v=h.length;p<v;p++)B=h[p],sa(B,B.isolateScope?M:e,P,g,B.require&&X(B.directiveName,B.require,P,J),S);var qa=e;u&&(u.template||null===u.templateUrl)&&(qa=M);a&&a(qa,f.childNodes,void 0,l);for(p=k.length-1;0<=p;p--)B=
k[p],sa(B,B.isolateScope?M:e,P,g,B.require&&X(B.directiveName,B.require,P,J),S);q(J,function(a){a=a.instance;C(a.$postLink)&&a.$postLink()})}l=l||{};for(var p=-Number.MAX_VALUE,A=l.newScopeDirective,r=l.controllerDirectives,u=l.newIsolateScopeDirective,O=l.templateDirective,M=l.nonTlbTranscludeDirective,T=!1,J=!1,H=l.hasElementTranscludeDirective,B=d.$$element=F(b),v,S,P,L=e,qa,x=!1,Ja=!1,w,y=0,D=a.length;y<D;y++){v=a[y];var Ta=v.$$start,Ma=v.$$end;Ta&&(B=cd(b,Ta,Ma));P=void 0;if(p>v.priority)break;
if(w=v.scope)v.templateUrl||(E(w)?($("new/isolated scope",u||A,v,B),u=v):$("new/isolated scope",u,v,B)),A=A||v;S=v.name;if(!x&&(v.replace&&(v.templateUrl||v.template)||v.transclude&&!v.$$tlb)){for(w=y+1;x=a[w++];)if(x.transclude&&!x.$$tlb||x.replace&&(x.templateUrl||x.template)){Ja=!0;break}x=!0}!v.templateUrl&&v.controller&&(r=r||V(),$("'"+S+"' controller",r[S],v,B),r[S]=v);if(w=v.transclude)if(T=!0,v.$$tlb||($("transclusion",M,v,B),M=v),"element"===w)H=!0,p=v.priority,P=B,B=d.$$element=F(ca.$$createComment(S,
d[S])),b=B[0],ga(f,va.call(P,0),b),P[0].$$parentNode=P[0].parentNode,L=dc(Ja,P,e,p,g&&g.name,{nonTlbTranscludeDirective:M});else{var G=V();P=F(Zb(b)).contents();if(E(w)){P=[];var Q=V(),bc=V();q(w,function(a,b){var c="?"===a.charAt(0);a=c?a.substring(1):a;Q[a]=b;G[b]=null;bc[b]=c});q(B.contents(),function(a){var b=Q[Da(wa(a))];b?(bc[b]=!0,G[b]=G[b]||[],G[b].push(a)):P.push(a)});q(bc,function(a,b){if(!a)throw fa("reqslot",b);});for(var U in G)G[U]&&(G[U]=dc(Ja,G[U],e))}B.empty();L=dc(Ja,P,e,void 0,
void 0,{needsNewScope:v.$$isolateScope||v.$$newScope});L.$$slots=G}if(v.template)if(J=!0,$("template",O,v,B),O=v,w=C(v.template)?v.template(B,d):v.template,w=Ca(w),v.replace){g=v;P=Xb.test(w)?ed(ha(v.templateNamespace,Y(w))):[];b=P[0];if(1!==P.length||1!==b.nodeType)throw fa("tplrt",S,"");ga(f,B,b);D={$attr:{}};w=cc(b,[],D);var og=a.splice(y+1,a.length-(y+1));(u||A)&&aa(w,u,A);a=a.concat(w).concat(og);ea(d,D);D=a.length}else B.html(w);if(v.templateUrl)J=!0,$("template",O,v,B),O=v,v.replace&&(g=v),
n=ia(a.splice(y,a.length-y),B,d,f,T&&L,h,k,{controllerDirectives:r,newScopeDirective:A!==v&&A,newIsolateScopeDirective:u,templateDirective:O,nonTlbTranscludeDirective:M}),D=a.length;else if(v.compile)try{qa=v.compile(B,d,L);var Z=v.$$originalDirective||v;C(qa)?m(null,db(Z,qa),Ta,Ma):qa&&m(db(Z,qa.pre),db(Z,qa.post),Ta,Ma)}catch(da){c(da,ya(B))}v.terminal&&(n.terminal=!0,p=Math.max(p,v.priority))}n.scope=A&&!0===A.scope;n.transcludeOnThisElement=T;n.templateOnThisElement=J;n.transclude=L;l.hasElementTranscludeDirective=
H;return n}function X(a,b,c,d){var e;if(D(b)){var f=b.match(l);b=b.substring(f[0].length);var g=f[1]||f[3],f="?"===f[2];"^^"===g?c=c.parent():e=(e=d&&d[b])&&e.instance;if(!e){var h="$"+b+"Controller";e=g?c.inheritedData(h):c.data(h)}if(!e&&!f)throw fa("ctreq",b,a);}else if(I(b))for(e=[],g=0,f=b.length;g<f;g++)e[g]=X(a,b[g],c,d);else E(b)&&(e={},q(b,function(b,f){e[f]=X(a,b,c,d)}));return e||null}function ba(a,b,c,d,e,f,g){var h=V(),k;for(k in d){var l=d[k],m={$scope:l===g||l.$$isolateScope?e:f,$element:a,
$attrs:b,$transclude:c},n=l.controller;"@"===n&&(n=b[l.name]);m=M(n,m,!0,l.controllerAs);h[l.name]=m;a.data("$"+l.name+"Controller",m.instance)}return h}function aa(a,b,c){for(var d=0,e=a.length;d<e;d++)a[d]=Tb(a[d],{$$isolateScope:b,$$newScope:c})}function U(b,c,f,g,h,k,l){if(c===h)return null;var m=null;if(e.hasOwnProperty(c)){h=a.get(c+"Directive");for(var n=0,p=h.length;n<p;n++)if(c=h[n],(z(g)||g>c.priority)&&-1!==c.restrict.indexOf(f)){k&&(c=Tb(c,{$$start:k,$$end:l}));if(!c.$$bindings){var s=
m=c,r=c.name,v={isolateScope:null,bindToController:null};E(s.scope)&&(!0===s.bindToController?(v.bindToController=d(s.scope,r,!0),v.isolateScope={}):v.isolateScope=d(s.scope,r,!1));E(s.bindToController)&&(v.bindToController=d(s.bindToController,r,!0));if(v.bindToController&&!s.controller)throw fa("noctrl",r);m=m.$$bindings=v;E(m.isolateScope)&&(c.$$isolateBindings=m.isolateScope)}b.push(c);m=c}}return m}function Z(b){if(e.hasOwnProperty(b))for(var c=a.get(b+"Directive"),d=0,f=c.length;d<f;d++)if(b=
c[d],b.multiElement)return!0;return!1}function ea(a,b){var c=b.$attr,d=a.$attr;q(a,function(d,e){"$"!==e.charAt(0)&&(b[e]&&b[e]!==d&&(d+=("style"===e?";":" ")+b[e]),a.$set(e,d,!0,c[e]))});q(b,function(b,e){a.hasOwnProperty(e)||"$"===e.charAt(0)||(a[e]=b,"class"!==e&&"style"!==e&&(d[e]=c[e]))})}function ia(a,b,c,d,e,g,h,k){var l=[],m,n,p=b[0],s=a.shift(),A=Tb(s,{templateUrl:null,transclude:null,replace:null,$$originalDirective:s}),r=C(s.templateUrl)?s.templateUrl(b,c):s.templateUrl,v=s.templateNamespace;
b.empty();f(r).then(function(f){var u,B;f=Ca(f);if(s.replace){f=Xb.test(f)?ed(ha(v,Y(f))):[];u=f[0];if(1!==f.length||1!==u.nodeType)throw fa("tplrt",s.name,r);f={$attr:{}};ga(d,b,u);var O=cc(u,[],f);E(s.scope)&&aa(O,!0);a=O.concat(a);ea(c,f)}else u=p,b.html(f);a.unshift(A);m=W(a,u,c,e,b,s,g,h,k);q(d,function(a,c){a===u&&(d[c]=b[0])});for(n=Ma(b[0].childNodes,e);l.length;){f=l.shift();B=l.shift();var M=l.shift(),T=l.shift(),O=b[0];if(!f.$$destroyed){if(B!==p){var J=B.className;k.hasElementTranscludeDirective&&
s.replace||(O=Zb(u));ga(M,F(B),O);Ja(F(O),J)}B=m.transcludeOnThisElement?G(f,m.transclude,T):T;m(n,f,O,d,B)}}l=null});return function(a,b,c,d,e){a=e;b.$$destroyed||(l?l.push(b,c,d,a):(m.transcludeOnThisElement&&(a=G(b,m.transclude,e)),m(n,b,c,d,a)))}}function ja(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function $(a,b,c,d){function e(a){return a?" (module: "+a+")":""}if(b)throw fa("multidir",b.name,e(b.$$moduleName),c.name,e(c.$$moduleName),
a,ya(d));}function ka(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=a.parent();var b=!!a.length;b&&ca.$$addBindingClass(a);return function(a,c){var e=c.parent();b||ca.$$addBindingClass(e);ca.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function ha(a,b){a=Q(a||"html");switch(a){case "svg":case "math":var c=y.document.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function oa(a,b){if("srcdoc"===
b)return B.HTML;var c=wa(a);if("src"===b||"ngSrc"===b){if(-1===["img","video","audio","source","track"].indexOf(c))return B.RESOURCE_URL}else if("xlinkHref"===b||"form"===c&&"action"===b)return B.RESOURCE_URL}function pa(a,c,d,e,f){var g=oa(a,e),h=k[e]||f,l=b(d,!f,g,h);if(l){if("multiple"===e&&"select"===wa(a))throw fa("selmulti",ya(a));c.push({priority:100,compile:function(){return{pre:function(a,c,f){c=f.$$observers||(f.$$observers=V());if(m.test(e))throw fa("nodomevents");var k=f[e];k!==d&&(l=
k&&b(k,!0,g,h),d=k);l&&(f[e]=l(a),(c[e]||(c[e]=[])).$$inter=!0,(f.$$observers&&f.$$observers[e].$$scope||a).$watch(l,function(a,b){"class"===e&&a!==b?f.$updateClass(a,b):f.$set(e,a)}))}}}})}}function ga(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]===d){a[g++]=c;h=g+e-1;for(var k=a.length;g<k;g++,h++)h<k?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&(a.context=c);break}f&&f.replaceChild(c,d);a=y.document.createDocumentFragment();for(g=0;g<e;g++)a.appendChild(b[g]);
F.hasData(d)&&(F.data(c,F.data(d)),F(d).off("$destroy"));F.cleanData(a.querySelectorAll("*"));for(g=1;g<e;g++)delete b[g];b[0]=c;b.length=1}function ra(a,b){return R(function(){return a.apply(null,arguments)},a,b)}function sa(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,ya(d))}}function la(a,c,d,e,f){function g(b,c,e){!C(d.$onChanges)||c===e||c!==c&&e!==e||(da||(a.$$postDigest(P),da=[]),m||(m={},da.push(h)),m[b]&&(e=m[b].previousValue),m[b]=new Hb(e,c))}function h(){d.$onChanges(m);m=void 0}var k=[],
l={},m;q(e,function(e,h){var m=e.attrName,p=e.optional,s,A,r,u;switch(e.mode){case "@":p||ua.call(c,m)||(d[h]=c[m]=void 0);p=c.$observe(m,function(a){if(D(a)||Ka(a))g(h,a,d[h]),d[h]=a});c.$$observers[m].$$scope=a;s=c[m];D(s)?d[h]=b(s)(a):Ka(s)&&(d[h]=s);l[h]=new Hb(ec,d[h]);k.push(p);break;case "=":if(!ua.call(c,m)){if(p)break;c[m]=void 0}if(p&&!c[m])break;A=n(c[m]);u=A.literal?na:function(a,b){return a===b||a!==a&&b!==b};r=A.assign||function(){s=d[h]=A(a);throw fa("nonassign",c[m],m,f.name);};s=
d[h]=A(a);p=function(b){u(b,d[h])||(u(b,s)?r(a,b=d[h]):d[h]=b);return s=b};p.$stateful=!0;p=e.collection?a.$watchCollection(c[m],p):a.$watch(n(c[m],p),null,A.literal);k.push(p);break;case "<":if(!ua.call(c,m)){if(p)break;c[m]=void 0}if(p&&!c[m])break;A=n(c[m]);var B=A.literal,M=d[h]=A(a);l[h]=new Hb(ec,d[h]);p=a.$watch(A,function(a,b){if(b===a){if(b===M||B&&na(b,M))return;b=M}g(h,a,b);d[h]=a},B);k.push(p);break;case "&":A=c.hasOwnProperty(m)?n(c[m]):w;if(A===w&&p)break;d[h]=function(b){return A(a,
b)}}});return{initialChanges:l,removeWatches:k.length&&function(){for(var a=0,b=k.length;a<b;++a)k[a]()}}}var za=/^\w/,ta=y.document.createElement("div"),Ea=u,Fa=p,xa=H,da;t.prototype={$normalize:Da,$addClass:function(a){a&&0<a.length&&T.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&T.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=fd(a,b);c&&c.length&&T.addClass(this.$$element,c);(c=fd(b,a))&&c.length&&T.removeClass(this.$$element,c)},$set:function(a,b,d,e){var f=
Zc(this.$$element[0],a),g=gd[a],h=a;f?(this.$$element.prop(a,b),e=f):g&&(this[g]=b,h=g);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=Hc(a,"-"));f=wa(this.$$element);if("a"===f&&("href"===a||"xlinkHref"===a)||"img"===f&&"src"===a)this[a]=b=S(b,"src"===a);else if("img"===f&&"srcset"===a&&x(b)){for(var f="",g=Y(b),k=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,k=/\s/.test(g)?k:/(,)/,g=g.split(k),k=Math.floor(g.length/2),l=0;l<k;l++)var m=2*l,f=f+S(Y(g[m]),!0),f=f+(" "+Y(g[m+1]));g=Y(g[2*
l]).split(/\s/);f+=S(Y(g[0]),!0);2===g.length&&(f+=" "+Y(g[1]));this[a]=b=f}!1!==d&&(null===b||z(b)?this.$$element.removeAttr(e):za.test(e)?this.$$element.attr(e,b):qa(this.$$element[0],e,b));(a=this.$$observers)&&q(a[h],function(a){try{a(b)}catch(d){c(d)}})},$observe:function(a,b){var c=this,d=c.$$observers||(c.$$observers=V()),e=d[a]||(d[a]=[]);e.push(b);J.$evalAsync(function(){e.$$inter||!c.hasOwnProperty(a)||z(c[a])||b(c[a])});return function(){bb(e,b)}}};var Aa=b.startSymbol(),Ba=b.endSymbol(),
Ca="{{"===Aa&&"}}"===Ba?$a:function(a){return a.replace(/\{\{/g,Aa).replace(/}}/g,Ba)},Ga=/^ngAttr[A-Z]/,Ha=/^(.+)Start$/;ca.$$addBindingInfo=r?function(a,b){var c=a.data("$binding")||[];I(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:w;ca.$$addBindingClass=r?function(a){Ja(a,"ng-binding")}:w;ca.$$addScopeInfo=r?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:w;ca.$$addScopeClass=r?function(a,b){Ja(a,b?"ng-isolate-scope":"ng-scope")}:w;ca.$$createComment=function(a,
b){var c="";r&&(c=" "+(a||"")+": ",b&&(c+=b+" "));return y.document.createComment(c)};return ca}]}function Hb(a,b){this.previousValue=a;this.currentValue=b}function Da(a){return hb(a.replace(bd,""))}function fd(a,b){var d="",c=a.split(/\s+/),f=b.split(/\s+/),e=0;a:for(;e<c.length;e++){for(var g=c[e],h=0;h<f.length;h++)if(g===f[h])continue a;d+=(0<d.length?" ":"")+g}return d}function ed(a){a=F(a);var b=a.length;if(1>=b)return a;for(;b--;){var d=a[b];(8===d.nodeType||d.nodeType===La&&""===d.nodeValue.trim())&&
pg.call(a,b,1)}return a}function ng(a,b){if(b&&D(b))return b;if(D(a)){var d=hd.exec(a);if(d)return d[3]}}function tf(){var a={},b=!1;this.has=function(b){return a.hasOwnProperty(b)};this.register=function(b,c){Ra(b,"controller");E(b)?R(a,b):a[b]=c};this.allowGlobals=function(){b=!0};this.$get=["$injector","$window",function(d,c){function f(a,b,c,d){if(!a||!E(a.$scope))throw G("$controller")("noscp",d,b);a.$scope[b]=c}return function(e,g,h,k){var l,m,n;h=!0===h;k&&D(k)&&(n=k);if(D(e)){k=e.match(hd);
if(!k)throw id("ctrlfmt",e);m=k[1];n=n||k[3];e=a.hasOwnProperty(m)?a[m]:Jc(g.$scope,m,!0)||(b?Jc(c,m,!0):void 0);if(!e)throw id("ctrlreg",m);Qa(e,m,!0)}if(h)return h=(I(e)?e[e.length-1]:e).prototype,l=Object.create(h||null),n&&f(g,n,l,m||e.name),R(function(){var a=d.invoke(e,l,g,m);a!==l&&(E(a)||C(a))&&(l=a,n&&f(g,n,l,m||e.name));return l},{instance:l,identifier:n});l=d.instantiate(e,g,m);n&&f(g,n,l,m||e.name);return l}}]}function uf(){this.$get=["$window",function(a){return F(a.document)}]}function vf(){this.$get=
["$log",function(a){return function(b,d){a.error.apply(a,arguments)}}]}function fc(a){return E(a)?ja(a)?a.toISOString():eb(a):a}function Af(){this.$get=function(){return function(a){if(!a)return"";var b=[];yc(a,function(a,c){null===a||z(a)||(I(a)?q(a,function(a){b.push(oa(c)+"="+oa(fc(a)))}):b.push(oa(c)+"="+oa(fc(a))))});return b.join("&")}}}function Bf(){this.$get=function(){return function(a){function b(a,f,e){null===a||z(a)||(I(a)?q(a,function(a,c){b(a,f+"["+(E(a)?c:"")+"]")}):E(a)&&!ja(a)?yc(a,
function(a,c){b(a,f+(e?"":"[")+c+(e?"":"]"))}):d.push(oa(f)+"="+oa(fc(a))))}if(!a)return"";var d=[];b(a,"",!0);return d.join("&")}}}function gc(a,b){if(D(a)){var d=a.replace(qg,"").trim();if(d){var c=b("Content-Type");(c=c&&0===c.indexOf(jd))||(c=(c=d.match(rg))&&sg[c[0]].test(d));c&&(a=Cc(d))}}return a}function kd(a){var b=V(),d;D(a)?q(a.split("\n"),function(a){d=a.indexOf(":");var f=Q(Y(a.substr(0,d)));a=Y(a.substr(d+1));f&&(b[f]=b[f]?b[f]+", "+a:a)}):E(a)&&q(a,function(a,d){var e=Q(d),g=Y(a);e&&
(b[e]=b[e]?b[e]+", "+g:g)});return b}function ld(a){var b;return function(d){b||(b=kd(a));return d?(d=b[Q(d)],void 0===d&&(d=null),d):b}}function md(a,b,d,c){if(C(c))return c(a,b,d);q(c,function(c){a=c(a,b,d)});return a}function zf(){var a=this.defaults={transformResponse:[gc],transformRequest:[function(a){return E(a)&&"[object File]"!==ma.call(a)&&"[object Blob]"!==ma.call(a)&&"[object FormData]"!==ma.call(a)?eb(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},post:ka(hc),put:ka(hc),
patch:ka(hc)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},b=!1;this.useApplyAsync=function(a){return x(a)?(b=!!a,this):b};var d=!0;this.useLegacyPromiseExtensions=function(a){return x(a)?(d=!!a,this):d};var c=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(f,e,g,h,k,l){function m(b){function c(a,b){for(var d=0,e=b.length;d<e;){var f=b[d++],g=b[d++];a=a.then(f,g)}b.length=0;
return a}function e(a,b){var c,d={};q(a,function(a,e){C(a)?(c=a(b),null!=c&&(d[e]=c)):d[e]=a});return d}function f(a){var b=R({},a);b.data=md(a.data,a.headers,a.status,g.transformResponse);a=a.status;return 200<=a&&300>a?b:k.reject(b)}if(!E(b))throw G("$http")("badreq",b);if(!D(b.url))throw G("$http")("badreq",b.url);var g=R({method:"get",transformRequest:a.transformRequest,transformResponse:a.transformResponse,paramSerializer:a.paramSerializer},b);g.headers=function(b){var c=a.headers,d=R({},b.headers),
f,g,h,c=R({},c.common,c[Q(b.method)]);a:for(f in c){g=Q(f);for(h in d)if(Q(h)===g)continue a;d[f]=c[f]}return e(d,ka(b))}(b);g.method=wb(g.method);g.paramSerializer=D(g.paramSerializer)?l.get(g.paramSerializer):g.paramSerializer;var h=[],m=[],s=k.when(g);q(H,function(a){(a.request||a.requestError)&&h.unshift(a.request,a.requestError);(a.response||a.responseError)&&m.push(a.response,a.responseError)});s=c(s,h);s=s.then(function(b){var c=b.headers,d=md(b.data,ld(c),void 0,b.transformRequest);z(d)&&
q(c,function(a,b){"content-type"===Q(b)&&delete c[b]});z(b.withCredentials)&&!z(a.withCredentials)&&(b.withCredentials=a.withCredentials);return n(b,d).then(f,f)});s=c(s,m);d?(s.success=function(a){Qa(a,"fn");s.then(function(b){a(b.data,b.status,b.headers,g)});return s},s.error=function(a){Qa(a,"fn");s.then(null,function(b){a(b.data,b.status,b.headers,g)});return s}):(s.success=nd("success"),s.error=nd("error"));return s}function n(c,d){function g(a){if(a){var c={};q(a,function(a,d){c[d]=function(c){function d(){a(c)}
b?h.$applyAsync(d):h.$$phase?d():h.$apply(d)}});return c}}function l(a,c,d,e){function f(){n(c,a,d,e)}J&&(200<=a&&300>a?J.put(S,[a,c,kd(d),e]):J.remove(S));b?h.$applyAsync(f):(f(),h.$$phase||h.$apply())}function n(a,b,d,e){b=-1<=b?b:0;(200<=b&&300>b?O.resolve:O.reject)({data:a,status:b,headers:ld(d),config:c,statusText:e})}function H(a){n(a.data,a.status,ka(a.headers()),a.statusText)}function L(){var a=m.pendingRequests.indexOf(c);-1!==a&&m.pendingRequests.splice(a,1)}var O=k.defer(),M=O.promise,
J,B,T=c.headers,S=r(c.url,c.paramSerializer(c.params));m.pendingRequests.push(c);M.then(L,L);!c.cache&&!a.cache||!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method||(J=E(c.cache)?c.cache:E(a.cache)?a.cache:s);J&&(B=J.get(S),x(B)?B&&C(B.then)?B.then(H,H):I(B)?n(B[1],B[0],ka(B[2]),B[3]):n(B,200,{},"OK"):J.put(S,M));z(B)&&((B=od(c.url)?e()[c.xsrfCookieName||a.xsrfCookieName]:void 0)&&(T[c.xsrfHeaderName||a.xsrfHeaderName]=B),f(c.method,S,d,l,T,c.timeout,c.withCredentials,c.responseType,g(c.eventHandlers),
g(c.uploadEventHandlers)));return M}function r(a,b){0<b.length&&(a+=(-1===a.indexOf("?")?"?":"&")+b);return a}var s=g("$http");a.paramSerializer=D(a.paramSerializer)?l.get(a.paramSerializer):a.paramSerializer;var H=[];q(c,function(a){H.unshift(D(a)?l.get(a):l.invoke(a))});m.pendingRequests=[];(function(a){q(arguments,function(a){m[a]=function(b,c){return m(R({},c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){q(arguments,function(a){m[a]=function(b,c,d){return m(R({},d||{},
{method:a,url:b,data:c}))}})})("post","put","patch");m.defaults=a;return m}]}function Df(){this.$get=function(){return function(){return new y.XMLHttpRequest}}}function Cf(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(a,b,d,c){return tg(a,c,a.defer,b,d[0])}]}function tg(a,b,d,c,f){function e(a,b,d){a=a.replace("JSON_CALLBACK",b);var e=f.createElement("script"),m=null;e.type="text/javascript";e.src=a;e.async=!0;m=function(a){e.removeEventListener("load",m,!1);e.removeEventListener("error",
m,!1);f.body.removeChild(e);e=null;var g=-1,s="unknown";a&&("load"!==a.type||c.wasCalled(b)||(a={type:"error"}),s=a.type,g="error"===a.type?404:200);d&&d(g,s)};e.addEventListener("load",m,!1);e.addEventListener("error",m,!1);f.body.appendChild(e);return m}return function(f,h,k,l,m,n,r,s,H,u){function p(){v&&v();N&&N.abort()}function K(b,c,e,f,g){x(O)&&d.cancel(O);v=N=null;b(c,e,f,g);a.$$completeOutstandingRequest(w)}a.$$incOutstandingRequestCount();h=h||a.url();if("jsonp"===Q(f))var A=c.createCallback(h),
v=e(h,A,function(a,b){var d=200===a&&c.getResponse(A);K(l,a,d,"",b);c.removeCallback(A)});else{var N=b(f,h);N.open(f,h,!0);q(m,function(a,b){x(a)&&N.setRequestHeader(b,a)});N.onload=function(){var a=N.statusText||"",b="response"in N?N.response:N.responseText,c=1223===N.status?204:N.status;0===c&&(c=b?200:"file"===ta(h).protocol?404:0);K(l,c,b,N.getAllResponseHeaders(),a)};f=function(){K(l,-1,null,null,"")};N.onerror=f;N.onabort=f;N.ontimeout=f;q(H,function(a,b){N.addEventListener(b,a)});q(u,function(a,
b){N.upload.addEventListener(b,a)});r&&(N.withCredentials=!0);if(s)try{N.responseType=s}catch(L){if("json"!==s)throw L;}N.send(z(k)?null:k)}if(0<n)var O=d(p,n);else n&&C(n.then)&&n.then(p)}}function xf(){var a="{{",b="}}";this.startSymbol=function(b){return b?(a=b,this):a};this.endSymbol=function(a){return a?(b=a,this):b};this.$get=["$parse","$exceptionHandler","$sce",function(d,c,f){function e(a){return"\\\\\\"+a}function g(c){return c.replace(n,a).replace(r,b)}function h(a,b,c,d){var e=a.$watch(function(a){e();
return d(a)},b,c);return e}function k(e,k,n,p){function r(a){try{var b=a;a=n?f.getTrusted(n,b):f.valueOf(b);var d;if(p&&!x(a))d=a;else if(null==a)d="";else{switch(typeof a){case "string":break;case "number":a=""+a;break;default:a=eb(a)}d=a}return d}catch(g){c(Ha.interr(e,g))}}if(!e.length||-1===e.indexOf(a)){var A;k||(k=g(e),A=ha(k),A.exp=e,A.expressions=[],A.$$watchDelegate=h);return A}p=!!p;var v,q,L=0,O=[],M=[];A=e.length;for(var J=[],B=[];L<A;)if(-1!==(v=e.indexOf(a,L))&&-1!==(q=e.indexOf(b,v+
l)))L!==v&&J.push(g(e.substring(L,v))),L=e.substring(v+l,q),O.push(L),M.push(d(L,r)),L=q+m,B.push(J.length),J.push("");else{L!==A&&J.push(g(e.substring(L)));break}n&&1<J.length&&Ha.throwNoconcat(e);if(!k||O.length){var T=function(a){for(var b=0,c=O.length;b<c;b++){if(p&&z(a[b]))return;J[B[b]]=a[b]}return J.join("")};return R(function(a){var b=0,d=O.length,f=Array(d);try{for(;b<d;b++)f[b]=M[b](a);return T(f)}catch(g){c(Ha.interr(e,g))}},{exp:e,expressions:O,$$watchDelegate:function(a,b){var c;return a.$watchGroup(M,
function(d,e){var f=T(d);C(b)&&b.call(this,f,d!==e?c:f,a);c=f})}})}}var l=a.length,m=b.length,n=new RegExp(a.replace(/./g,e),"g"),r=new RegExp(b.replace(/./g,e),"g");k.startSymbol=function(){return a};k.endSymbol=function(){return b};return k}]}function yf(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(a,b,d,c,f){function e(e,k,l,m){function n(){r?e.apply(null,s):e(p)}var r=4<arguments.length,s=r?va.call(arguments,4):[],H=b.setInterval,u=b.clearInterval,p=0,K=x(m)&&!m,A=(K?c:d).defer(),
v=A.promise;l=x(l)?l:0;v.$$intervalId=H(function(){K?f.defer(n):a.$evalAsync(n);A.notify(p++);0<l&&p>=l&&(A.resolve(p),u(v.$$intervalId),delete g[v.$$intervalId]);K||a.$apply()},k);g[v.$$intervalId]=A;return v}var g={};e.cancel=function(a){return a&&a.$$intervalId in g?(g[a.$$intervalId].reject("canceled"),b.clearInterval(a.$$intervalId),delete g[a.$$intervalId],!0):!1};return e}]}function ic(a){a=a.split("/");for(var b=a.length;b--;)a[b]=tb(a[b]);return a.join("/")}function pd(a,b){var d=ta(a);b.$$protocol=
d.protocol;b.$$host=d.hostname;b.$$port=Z(d.port)||ug[d.protocol]||null}function qd(a,b){if(vg.test(a))throw lb("badpath",a);var d="/"!==a.charAt(0);d&&(a="/"+a);var c=ta(a);b.$$path=decodeURIComponent(d&&"/"===c.pathname.charAt(0)?c.pathname.substring(1):c.pathname);b.$$search=Fc(c.search);b.$$hash=decodeURIComponent(c.hash);b.$$path&&"/"!==b.$$path.charAt(0)&&(b.$$path="/"+b.$$path)}function ra(a,b){if(b.slice(0,a.length)===a)return b.substr(a.length)}function Ga(a){var b=a.indexOf("#");return-1===
b?a:a.substr(0,b)}function mb(a){return a.replace(/(#.+)|#$/,"$1")}function jc(a,b,d){this.$$html5=!0;d=d||"";pd(a,this);this.$$parse=function(a){var d=ra(b,a);if(!D(d))throw lb("ipthprfx",a,b);qd(d,this);this.$$path||(this.$$path="/");this.$$compose()};this.$$compose=function(){var a=Vb(this.$$search),d=this.$$hash?"#"+tb(this.$$hash):"";this.$$url=ic(this.$$path)+(a?"?"+a:"")+d;this.$$absUrl=b+this.$$url.substr(1)};this.$$parseLinkUrl=function(c,f){if(f&&"#"===f[0])return this.hash(f.slice(1)),
!0;var e,g;x(e=ra(a,c))?(g=e,g=d&&x(e=ra(d,e))?b+(ra("/",e)||e):a+g):x(e=ra(b,c))?g=b+e:b===c+"/"&&(g=b);g&&this.$$parse(g);return!!g}}function kc(a,b,d){pd(a,this);this.$$parse=function(c){var f=ra(a,c)||ra(b,c),e;z(f)||"#"!==f.charAt(0)?this.$$html5?e=f:(e="",z(f)&&(a=c,this.replace())):(e=ra(d,f),z(e)&&(e=f));qd(e,this);c=this.$$path;var f=a,g=/^\/[A-Z]:(\/.*)/;e.slice(0,f.length)===f&&(e=e.replace(f,""));g.exec(e)||(c=(e=g.exec(c))?e[1]:c);this.$$path=c;this.$$compose()};this.$$compose=function(){var b=
Vb(this.$$search),f=this.$$hash?"#"+tb(this.$$hash):"";this.$$url=ic(this.$$path)+(b?"?"+b:"")+f;this.$$absUrl=a+(this.$$url?d+this.$$url:"")};this.$$parseLinkUrl=function(b,d){return Ga(a)===Ga(b)?(this.$$parse(b),!0):!1}}function rd(a,b,d){this.$$html5=!0;kc.apply(this,arguments);this.$$parseLinkUrl=function(c,f){if(f&&"#"===f[0])return this.hash(f.slice(1)),!0;var e,g;a===Ga(c)?e=c:(g=ra(b,c))?e=a+d+g:b===c+"/"&&(e=b);e&&this.$$parse(e);return!!e};this.$$compose=function(){var b=Vb(this.$$search),
f=this.$$hash?"#"+tb(this.$$hash):"";this.$$url=ic(this.$$path)+(b?"?"+b:"")+f;this.$$absUrl=a+d+this.$$url}}function Ib(a){return function(){return this[a]}}function sd(a,b){return function(d){if(z(d))return this[a];this[a]=b(d);this.$$compose();return this}}function Ff(){var a="",b={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(b){return x(b)?(a=b,this):a};this.html5Mode=function(a){if(Ka(a))return b.enabled=a,this;if(E(a)){Ka(a.enabled)&&(b.enabled=a.enabled);Ka(a.requireBase)&&
(b.requireBase=a.requireBase);if(Ka(a.rewriteLinks)||D(a.rewriteLinks))b.rewriteLinks=a.rewriteLinks;return this}return b};this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(d,c,f,e,g){function h(a,b,d){var e=l.url(),f=l.$$state;try{c.url(a,b,d),l.$$state=c.state()}catch(g){throw l.url(e),l.$$state=f,g;}}function k(a,b){d.$broadcast("$locationChangeSuccess",l.absUrl(),a,l.$$state,b)}var l,m;m=c.baseHref();var n=c.url(),r;if(b.enabled){if(!m&&b.requireBase)throw lb("nobase");
r=n.substring(0,n.indexOf("/",n.indexOf("//")+2))+(m||"/");m=f.history?jc:rd}else r=Ga(n),m=kc;var s=r.substr(0,Ga(r).lastIndexOf("/")+1);l=new m(r,s,"#"+a);l.$$parseLinkUrl(n,n);l.$$state=c.state();var H=/^\s*(javascript|mailto):/i;e.on("click",function(a){var f=b.rewriteLinks;if(f&&!a.ctrlKey&&!a.metaKey&&!a.shiftKey&&2!==a.which&&2!==a.button){for(var h=F(a.target);"a"!==wa(h[0]);)if(h[0]===e[0]||!(h=h.parent())[0])return;if(!D(f)||!z(h.attr(f))){var f=h.prop("href"),k=h.attr("href")||h.attr("xlink:href");
E(f)&&"[object SVGAnimatedString]"===f.toString()&&(f=ta(f.animVal).href);H.test(f)||!f||h.attr("target")||a.isDefaultPrevented()||!l.$$parseLinkUrl(f,k)||(a.preventDefault(),l.absUrl()!==c.url()&&(d.$apply(),g.angular["ff-684208-preventDefault"]=!0))}}});mb(l.absUrl())!==mb(n)&&c.url(l.absUrl(),!0);var u=!0;c.onUrlChange(function(a,b){z(ra(s,a))?g.location.href=a:(d.$evalAsync(function(){var c=l.absUrl(),e=l.$$state,f;a=mb(a);l.$$parse(a);l.$$state=b;f=d.$broadcast("$locationChangeStart",a,c,b,e).defaultPrevented;
l.absUrl()===a&&(f?(l.$$parse(c),l.$$state=e,h(c,!1,e)):(u=!1,k(c,e)))}),d.$$phase||d.$digest())});d.$watch(function(){var a=mb(c.url()),b=mb(l.absUrl()),e=c.state(),g=l.$$replace,m=a!==b||l.$$html5&&f.history&&e!==l.$$state;if(u||m)u=!1,d.$evalAsync(function(){var b=l.absUrl(),c=d.$broadcast("$locationChangeStart",b,a,l.$$state,e).defaultPrevented;l.absUrl()===b&&(c?(l.$$parse(a),l.$$state=e):(m&&h(b,g,e===l.$$state?null:l.$$state),k(a,e)))});l.$$replace=!1});return l}]}function Gf(){var a=!0,b=
this;this.debugEnabled=function(b){return x(b)?(a=b,this):a};this.$get=["$window",function(d){function c(a){a instanceof Error&&(a.stack?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function f(a){var b=d.console||{},f=b[a]||b.log||w;a=!1;try{a=!!f.apply}catch(k){}return a?function(){var a=[];q(arguments,function(b){a.push(c(b))});return f.apply(b,a)}:function(a,b){f(a,null==b?"":b)}}return{log:f("log"),
info:f("info"),warn:f("warn"),error:f("error"),debug:function(){var c=f("debug");return function(){a&&c.apply(b,arguments)}}()}}]}function Ua(a,b){if("__defineGetter__"===a||"__defineSetter__"===a||"__lookupGetter__"===a||"__lookupSetter__"===a||"__proto__"===a)throw ea("isecfld",b);return a}function wg(a){return a+""}function Ea(a,b){if(a){if(a.constructor===a)throw ea("isecfn",b);if(a.window===a)throw ea("isecwindow",b);if(a.children&&(a.nodeName||a.prop&&a.attr&&a.find))throw ea("isecdom",b);if(a===
Object)throw ea("isecobj",b);}return a}function td(a,b){if(a){if(a.constructor===a)throw ea("isecfn",b);if(a===xg||a===yg||a===zg)throw ea("isecff",b);}}function Jb(a,b){if(a&&(a===ud||a===vd||a===wd||a===xd||a===yd||a===zd||a===Ag||a===Bg||a===Kb||a===Cg||a===Ad||a===Dg))throw ea("isecaf",b);}function Eg(a,b){return"undefined"!==typeof a?a:b}function Bd(a,b){return"undefined"===typeof a?b:"undefined"===typeof b?a:a+b}function X(a,b){var d,c,f;switch(a.type){case t.Program:d=!0;q(a.body,function(a){X(a.expression,
b);d=d&&a.expression.constant});a.constant=d;break;case t.Literal:a.constant=!0;a.toWatch=[];break;case t.UnaryExpression:X(a.argument,b);a.constant=a.argument.constant;a.toWatch=a.argument.toWatch;break;case t.BinaryExpression:X(a.left,b);X(a.right,b);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.left.toWatch.concat(a.right.toWatch);break;case t.LogicalExpression:X(a.left,b);X(a.right,b);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.constant?[]:[a];break;case t.ConditionalExpression:X(a.test,
b);X(a.alternate,b);X(a.consequent,b);a.constant=a.test.constant&&a.alternate.constant&&a.consequent.constant;a.toWatch=a.constant?[]:[a];break;case t.Identifier:a.constant=!1;a.toWatch=[a];break;case t.MemberExpression:X(a.object,b);a.computed&&X(a.property,b);a.constant=a.object.constant&&(!a.computed||a.property.constant);a.toWatch=[a];break;case t.CallExpression:d=f=a.filter?!b(a.callee.name).$stateful:!1;c=[];q(a.arguments,function(a){X(a,b);d=d&&a.constant;a.constant||c.push.apply(c,a.toWatch)});
a.constant=d;a.toWatch=f?c:[a];break;case t.AssignmentExpression:X(a.left,b);X(a.right,b);a.constant=a.left.constant&&a.right.constant;a.toWatch=[a];break;case t.ArrayExpression:d=!0;c=[];q(a.elements,function(a){X(a,b);d=d&&a.constant;a.constant||c.push.apply(c,a.toWatch)});a.constant=d;a.toWatch=c;break;case t.ObjectExpression:d=!0;c=[];q(a.properties,function(a){X(a.value,b);d=d&&a.value.constant&&!a.computed;a.value.constant||c.push.apply(c,a.value.toWatch)});a.constant=d;a.toWatch=c;break;case t.ThisExpression:a.constant=
!1;a.toWatch=[];break;case t.LocalsExpression:a.constant=!1,a.toWatch=[]}}function Cd(a){if(1===a.length){a=a[0].expression;var b=a.toWatch;return 1!==b.length?b:b[0]!==a?b:void 0}}function Dd(a){return a.type===t.Identifier||a.type===t.MemberExpression}function Ed(a){if(1===a.body.length&&Dd(a.body[0].expression))return{type:t.AssignmentExpression,left:a.body[0].expression,right:{type:t.NGValueParameter},operator:"="}}function Fd(a){return 0===a.body.length||1===a.body.length&&(a.body[0].expression.type===
t.Literal||a.body[0].expression.type===t.ArrayExpression||a.body[0].expression.type===t.ObjectExpression)}function Gd(a,b){this.astBuilder=a;this.$filter=b}function Hd(a,b){this.astBuilder=a;this.$filter=b}function Lb(a){return"constructor"===a}function lc(a){return C(a.valueOf)?a.valueOf():Fg.call(a)}function Hf(){var a=V(),b=V(),d={"true":!0,"false":!1,"null":null,undefined:void 0},c,f;this.addLiteral=function(a,b){d[a]=b};this.setIdentifierFns=function(a,b){c=a;f=b;return this};this.$get=["$filter",
function(e){function g(c,d,f){var g,k,H;f=f||K;switch(typeof c){case "string":H=c=c.trim();var q=f?b:a;g=q[H];if(!g){":"===c.charAt(0)&&":"===c.charAt(1)&&(k=!0,c=c.substring(2));g=f?p:u;var B=new mc(g);g=(new nc(B,e,g)).parse(c);g.constant?g.$$watchDelegate=r:k?g.$$watchDelegate=g.literal?n:m:g.inputs&&(g.$$watchDelegate=l);f&&(g=h(g));q[H]=g}return s(g,d);case "function":return s(c,d);default:return s(w,d)}}function h(a){function b(c,d,e,f){var g=K;K=!0;try{return a(c,d,e,f)}finally{K=g}}if(!a)return a;
b.$$watchDelegate=a.$$watchDelegate;b.assign=h(a.assign);b.constant=a.constant;b.literal=a.literal;for(var c=0;a.inputs&&c<a.inputs.length;++c)a.inputs[c]=h(a.inputs[c]);b.inputs=a.inputs;return b}function k(a,b){return null==a||null==b?a===b:"object"===typeof a&&(a=lc(a),"object"===typeof a)?!1:a===b||a!==a&&b!==b}function l(a,b,c,d,e){var f=d.inputs,g;if(1===f.length){var h=k,f=f[0];return a.$watch(function(a){var b=f(a);k(b,h)||(g=d(a,void 0,void 0,[b]),h=b&&lc(b));return g},b,c,e)}for(var l=[],
m=[],n=0,s=f.length;n<s;n++)l[n]=k,m[n]=null;return a.$watch(function(a){for(var b=!1,c=0,e=f.length;c<e;c++){var h=f[c](a);if(b||(b=!k(h,l[c])))m[c]=h,l[c]=h&&lc(h)}b&&(g=d(a,void 0,void 0,m));return g},b,c,e)}function m(a,b,c,d){var e,f;return e=a.$watch(function(a){return d(a)},function(a,c,d){f=a;C(b)&&b.apply(this,arguments);x(a)&&d.$$postDigest(function(){x(f)&&e()})},c)}function n(a,b,c,d){function e(a){var b=!0;q(a,function(a){x(a)||(b=!1)});return b}var f,g;return f=a.$watch(function(a){return d(a)},
function(a,c,d){g=a;C(b)&&b.call(this,a,c,d);e(a)&&d.$$postDigest(function(){e(g)&&f()})},c)}function r(a,b,c,d){var e=a.$watch(function(a){e();return d(a)},b,c);return e}function s(a,b){if(!b)return a;var c=a.$$watchDelegate,d=!1,c=c!==n&&c!==m?function(c,e,f,g){f=d&&g?g[0]:a(c,e,f,g);return b(f,c,e)}:function(c,d,e,f){e=a(c,d,e,f);c=b(e,c,d);return x(e)?c:e};a.$$watchDelegate&&a.$$watchDelegate!==l?c.$$watchDelegate=a.$$watchDelegate:b.$stateful||(c.$$watchDelegate=l,d=!a.inputs,c.inputs=a.inputs?
a.inputs:[a]);return c}var H=da().noUnsafeEval,u={csp:H,expensiveChecks:!1,literals:sa(d),isIdentifierStart:C(c)&&c,isIdentifierContinue:C(f)&&f},p={csp:H,expensiveChecks:!0,literals:sa(d),isIdentifierStart:C(c)&&c,isIdentifierContinue:C(f)&&f},K=!1;g.$$runningExpensiveChecks=function(){return K};return g}]}function Jf(){this.$get=["$rootScope","$exceptionHandler",function(a,b){return Id(function(b){a.$evalAsync(b)},b)}]}function Kf(){this.$get=["$browser","$exceptionHandler",function(a,b){return Id(function(b){a.defer(b)},
b)}]}function Id(a,b){function d(){var a=new g;a.resolve=f(a,a.resolve);a.reject=f(a,a.reject);a.notify=f(a,a.notify);return a}function c(){this.$$state={status:0}}function f(a,b){return function(c){b.call(a,c)}}function e(c){!c.processScheduled&&c.pending&&(c.processScheduled=!0,a(function(){var a,d,e;e=c.pending;c.processScheduled=!1;c.pending=void 0;for(var f=0,g=e.length;f<g;++f){d=e[f][0];a=e[f][c.status];try{C(a)?d.resolve(a(c.value)):1===c.status?d.resolve(c.value):d.reject(c.value)}catch(h){d.reject(h),
b(h)}}}))}function g(){this.promise=new c}function h(a){var b=new g;b.reject(a);return b.promise}function k(a,b,c){var d=null;try{C(c)&&(d=c())}catch(e){return h(e)}return d&&C(d.then)?d.then(function(){return b(a)},h):b(a)}function l(a,b,c,d){var e=new g;e.resolve(a);return e.promise.then(b,c,d)}function m(a){if(!C(a))throw n("norslvr",a);var b=new g;a(function(a){b.resolve(a)},function(a){b.reject(a)});return b.promise}var n=G("$q",TypeError);R(c.prototype,{then:function(a,b,c){if(z(a)&&z(b)&&z(c))return this;
var d=new g;this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([d,a,b,c]);0<this.$$state.status&&e(this.$$state);return d.promise},"catch":function(a){return this.then(null,a)},"finally":function(a,b){return this.then(function(b){return k(b,r,a)},function(b){return k(b,h,a)},b)}});R(g.prototype,{resolve:function(a){this.promise.$$state.status||(a===this.promise?this.$$reject(n("qcycle",a)):this.$$resolve(a))},$$resolve:function(a){function c(a){k||(k=!0,h.$$resolve(a))}function d(a){k||
(k=!0,h.$$reject(a))}var g,h=this,k=!1;try{if(E(a)||C(a))g=a&&a.then;C(g)?(this.promise.$$state.status=-1,g.call(a,c,d,f(this,this.notify))):(this.promise.$$state.value=a,this.promise.$$state.status=1,e(this.promise.$$state))}catch(l){d(l),b(l)}},reject:function(a){this.promise.$$state.status||this.$$reject(a)},$$reject:function(a){this.promise.$$state.value=a;this.promise.$$state.status=2;e(this.promise.$$state)},notify:function(c){var d=this.promise.$$state.pending;0>=this.promise.$$state.status&&
d&&d.length&&a(function(){for(var a,e,f=0,g=d.length;f<g;f++){e=d[f][0];a=d[f][3];try{e.notify(C(a)?a(c):c)}catch(h){b(h)}}})}});var r=l;m.prototype=c.prototype;m.defer=d;m.reject=h;m.when=l;m.resolve=r;m.all=function(a){var b=new g,c=0,d=I(a)?[]:{};q(a,function(a,e){c++;l(a).then(function(a){d[e]=a;--c||b.resolve(d)},function(a){b.reject(a)})});0===c&&b.resolve(d);return b.promise};m.race=function(a){var b=d();q(a,function(a){l(a).then(b.resolve,b.reject)});return b.promise};return m}function Tf(){this.$get=
["$window","$timeout",function(a,b){var d=a.requestAnimationFrame||a.webkitRequestAnimationFrame,c=a.cancelAnimationFrame||a.webkitCancelAnimationFrame||a.webkitCancelRequestAnimationFrame,f=!!d,e=f?function(a){var b=d(a);return function(){c(b)}}:function(a){var c=b(a,16.66,!1);return function(){b.cancel(c)}};e.supported=f;return e}]}function If(){function a(a){function b(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=
0;this.$id=++sb;this.$$ChildScope=null}b.prototype=a;return b}var b=10,d=G("$rootScope"),c=null,f=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$exceptionHandler","$parse","$browser",function(e,g,h){function k(a){a.currentScope.$$destroyed=!0}function l(a){9===Ia&&(a.$$childHead&&l(a.$$childHead),a.$$nextSibling&&l(a.$$nextSibling));a.$parent=a.$$nextSibling=a.$$prevSibling=a.$$childHead=a.$$childTail=a.$root=a.$$watchers=null}function m(){this.$id=++sb;this.$$phase=
this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null}function n(a){if(K.$$phase)throw d("inprog",K.$$phase);K.$$phase=a}function r(a,b){do a.$$watchersCount+=b;while(a=a.$parent)}function s(a,b,c){do a.$$listenerCount[c]-=b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function H(){}function u(){for(;t.length;)try{t.shift()()}catch(a){e(a)}f=
null}function p(){null===f&&(f=h.defer(function(){K.$apply(u)}))}m.prototype={constructor:m,$new:function(b,c){var d;c=c||this;b?(d=new m,d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=a(this)),d=new this.$$ChildScope);d.$parent=c;d.$$prevSibling=c.$$childTail;c.$$childHead?(c.$$childTail.$$nextSibling=d,c.$$childTail=d):c.$$childHead=c.$$childTail=d;(b||c!==this)&&d.$on("$destroy",k);return d},$watch:function(a,b,d,e){var f=g(a);if(f.$$watchDelegate)return f.$$watchDelegate(this,b,d,
f,a);var h=this,k=h.$$watchers,l={fn:b,last:H,get:f,exp:e||a,eq:!!d};c=null;C(b)||(l.fn=w);k||(k=h.$$watchers=[],k.$$digestWatchIndex=-1);k.unshift(l);k.$$digestWatchIndex++;r(this,1);return function(){var a=bb(k,l);0<=a&&(r(h,-1),a<k.$$digestWatchIndex&&k.$$digestWatchIndex--);c=null}},$watchGroup:function(a,b){function c(){h=!1;k?(k=!1,b(e,e,g)):b(e,d,g)}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,k=!0;if(!a.length){var l=!0;g.$evalAsync(function(){l&&b(e,e,g)});return function(){l=
!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});q(a,function(a,b){var k=g.$watch(a,function(a,f){e[b]=a;d[b]=f;h||(h=!0,g.$evalAsync(c))});f.push(k)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,b){function c(a){e=a;var b,d,g,h;if(!z(e)){if(E(e))if(la(e))for(f!==n&&(f=n,s=f.length=0,l++),a=e.length,s!==a&&(l++,f.length=s=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(l++,f[b]=g);else{f!==r&&(f=r={},s=0,l++);a=0;for(b in e)ua.call(e,
b)&&(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(l++,f[b]=g)):(s++,f[b]=g,l++));if(s>a)for(b in l++,f)ua.call(e,b)||(s--,delete f[b])}else f!==e&&(f=e,l++);return l}}c.$stateful=!0;var d=this,e,f,h,k=1<b.length,l=0,m=g(a,c),n=[],r={},p=!0,s=0;return this.$watch(m,function(){p?(p=!1,b(e,e,d)):b(e,h,d);if(k)if(E(e))if(la(e)){h=Array(e.length);for(var a=0;a<e.length;a++)h[a]=e[a]}else for(a in h={},e)ua.call(e,a)&&(h[a]=e[a]);else h=e})},$digest:function(){var a,g,k,l,m,r,p,s=b,q,t=[],N,x;n("$digest");
h.$$checkUrlChange();this===K&&null!==f&&(h.defer.cancel(f),u());c=null;do{p=!1;q=this;for(r=0;r<A.length;r++){try{x=A[r],x.scope.$eval(x.expression,x.locals)}catch(z){e(z)}c=null}A.length=0;a:do{if(r=q.$$watchers)for(r.$$digestWatchIndex=r.length;r.$$digestWatchIndex--;)try{if(a=r[r.$$digestWatchIndex])if(m=a.get,(g=m(q))!==(k=a.last)&&!(a.eq?na(g,k):ia(g)&&ia(k)))p=!0,c=a,a.last=a.eq?sa(g,null):g,l=a.fn,l(g,k===H?g:k,q),5>s&&(N=4-s,t[N]||(t[N]=[]),t[N].push({msg:C(a.exp)?"fn: "+(a.exp.name||a.exp.toString()):
a.exp,newVal:g,oldVal:k}));else if(a===c){p=!1;break a}}catch(w){e(w)}if(!(r=q.$$watchersCount&&q.$$childHead||q!==this&&q.$$nextSibling))for(;q!==this&&!(r=q.$$nextSibling);)q=q.$parent}while(q=r);if((p||A.length)&&!s--)throw K.$$phase=null,d("infdig",b,t);}while(p||A.length);for(K.$$phase=null;L<v.length;)try{v[L++]()}catch(y){e(y)}v.length=L=0},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this===K&&h.$$applicationDestroyed();r(this,
-this.$$watchersCount);for(var b in this.$$listenerCount)s(this,this.$$listenerCount[b],b);a&&a.$$childHead===this&&(a.$$childHead=this.$$nextSibling);a&&a.$$childTail===this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=w;this.$on=this.$watch=this.$watchGroup=function(){return w};this.$$listeners=
{};this.$$nextSibling=null;l(this)}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a,b){K.$$phase||A.length||h.defer(function(){A.length&&K.$digest()});A.push({scope:this,expression:g(a),locals:b})},$$postDigest:function(a){v.push(a)},$apply:function(a){try{n("$apply");try{return this.$eval(a)}finally{K.$$phase=null}}catch(b){e(b)}finally{try{K.$digest()}catch(c){throw e(c),c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&t.push(b);a=g(a);p()},$on:function(a,b){var c=
this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(c[d]=null,s(e,1,a))}},$emit:function(a,b){var c=[],d,f=this,g=!1,h={name:a,targetScope:f,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=cb([h],arguments,1),l,m;do{d=f.$$listeners[a]||c;h.currentScope=f;l=0;for(m=d.length;l<
m;l++)if(d[l])try{d[l].apply(null,k)}catch(n){e(n)}else d.splice(l,1),l--,m--;if(g)return h.currentScope=null,h;f=f.$parent}while(f);h.currentScope=null;return h},$broadcast:function(a,b){var c=this,d=this,f={name:a,targetScope:this,preventDefault:function(){f.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return f;for(var g=cb([f],arguments,1),h,k;c=d;){f.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){e(l)}else d.splice(h,
1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}f.currentScope=null;return f}};var K=new m,A=K.$$asyncQueue=[],v=K.$$postDigestQueue=[],t=K.$$applyAsyncQueue=[],L=0;return K}]}function Be(){var a=/^\s*(https?|ftp|mailto|tel|file):/,b=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(b){return x(b)?(a=b,this):a};this.imgSrcSanitizationWhitelist=function(a){return x(a)?(b=a,this):b};
this.$get=function(){return function(d,c){var f=c?b:a,e;e=ta(d).href;return""===e||e.match(f)?d:"unsafe:"+e}}}function Gg(a){if("self"===a)return a;if(D(a)){if(-1<a.indexOf("***"))throw Fa("iwcard",a);a=Jd(a).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*");return new RegExp("^"+a+"$")}if(Za(a))return new RegExp("^"+a.source+"$");throw Fa("imatcher");}function Kd(a){var b=[];x(a)&&q(a,function(a){b.push(Gg(a))});return b}function Mf(){this.SCE_CONTEXTS=ga;var a=["self"],b=[];this.resourceUrlWhitelist=
function(b){arguments.length&&(a=Kd(b));return a};this.resourceUrlBlacklist=function(a){arguments.length&&(b=Kd(a));return b};this.$get=["$injector",function(d){function c(a,b){return"self"===a?od(b):!!a.exec(b.href)}function f(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var e=function(a){throw Fa("unsafe");
};d.has("$sanitize")&&(e=d.get("$sanitize"));var g=f(),h={};h[ga.HTML]=f(g);h[ga.CSS]=f(g);h[ga.URL]=f(g);h[ga.JS]=f(g);h[ga.RESOURCE_URL]=f(h[ga.URL]);return{trustAs:function(a,b){var c=h.hasOwnProperty(a)?h[a]:null;if(!c)throw Fa("icontext",a,b);if(null===b||z(b)||""===b)return b;if("string"!==typeof b)throw Fa("itype",a);return new c(b)},getTrusted:function(d,f){if(null===f||z(f)||""===f)return f;var g=h.hasOwnProperty(d)?h[d]:null;if(g&&f instanceof g)return f.$$unwrapTrustedValue();if(d===ga.RESOURCE_URL){var g=
ta(f.toString()),n,r,s=!1;n=0;for(r=a.length;n<r;n++)if(c(a[n],g)){s=!0;break}if(s)for(n=0,r=b.length;n<r;n++)if(c(b[n],g)){s=!1;break}if(s)return f;throw Fa("insecurl",f.toString());}if(d===ga.HTML)return e(f);throw Fa("unsafe");},valueOf:function(a){return a instanceof g?a.$$unwrapTrustedValue():a}}}]}function Lf(){var a=!0;this.enabled=function(b){arguments.length&&(a=!!b);return a};this.$get=["$parse","$sceDelegate",function(b,d){if(a&&8>Ia)throw Fa("iequirks");var c=ka(ga);c.isEnabled=function(){return a};
c.trustAs=d.trustAs;c.getTrusted=d.getTrusted;c.valueOf=d.valueOf;a||(c.trustAs=c.getTrusted=function(a,b){return b},c.valueOf=$a);c.parseAs=function(a,d){var e=b(d);return e.literal&&e.constant?e:b(d,function(b){return c.getTrusted(a,b)})};var f=c.parseAs,e=c.getTrusted,g=c.trustAs;q(ga,function(a,b){var d=Q(b);c[hb("parse_as_"+d)]=function(b){return f(a,b)};c[hb("get_trusted_"+d)]=function(b){return e(a,b)};c[hb("trust_as_"+d)]=function(b){return g(a,b)}});return c}]}function Nf(){this.$get=["$window",
"$document",function(a,b){var d={},c=!(a.chrome&&(a.chrome.app&&a.chrome.app.runtime||!a.chrome.app&&a.chrome.runtime&&a.chrome.runtime.id))&&a.history&&a.history.pushState,f=Z((/android (\d+)/.exec(Q((a.navigator||{}).userAgent))||[])[1]),e=/Boxee/i.test((a.navigator||{}).userAgent),g=b[0]||{},h,k=/^(Moz|webkit|ms)(?=[A-Z])/,l=g.body&&g.body.style,m=!1,n=!1;if(l){for(var r in l)if(m=k.exec(r)){h=m[0];h=h[0].toUpperCase()+h.substr(1);break}h||(h="WebkitOpacity"in l&&"webkit");m=!!("transition"in l||
h+"Transition"in l);n=!!("animation"in l||h+"Animation"in l);!f||m&&n||(m=D(l.webkitTransition),n=D(l.webkitAnimation))}return{history:!(!c||4>f||e),hasEvent:function(a){if("input"===a&&11>=Ia)return!1;if(z(d[a])){var b=g.createElement("div");d[a]="on"+a in b}return d[a]},csp:da(),vendorPrefix:h,transitions:m,animations:n,android:f}}]}function Pf(){var a;this.httpOptions=function(b){return b?(a=b,this):a};this.$get=["$templateCache","$http","$q","$sce",function(b,d,c,f){function e(g,h){e.totalPendingRequests++;
if(!D(g)||z(b.get(g)))g=f.getTrustedResourceUrl(g);var k=d.defaults&&d.defaults.transformResponse;I(k)?k=k.filter(function(a){return a!==gc}):k===gc&&(k=null);return d.get(g,R({cache:b,transformResponse:k},a))["finally"](function(){e.totalPendingRequests--}).then(function(a){b.put(g,a.data);return a.data},function(a){if(!h)throw Hg("tpload",g,a.status,a.statusText);return c.reject(a)})}e.totalPendingRequests=0;return e}]}function Qf(){this.$get=["$rootScope","$browser","$location",function(a,b,d){return{findBindings:function(a,
b,d){a=a.getElementsByClassName("ng-binding");var g=[];q(a,function(a){var c=$.element(a).data("$binding");c&&q(c,function(c){d?(new RegExp("(^|\\s)"+Jd(b)+"(\\s|\\||$)")).test(c)&&g.push(a):-1!==c.indexOf(b)&&g.push(a)})});return g},findModels:function(a,b,d){for(var g=["ng-","data-ng-","ng\\:"],h=0;h<g.length;++h){var k=a.querySelectorAll("["+g[h]+"model"+(d?"=":"*=")+'"'+b+'"]');if(k.length)return k}},getLocation:function(){return d.url()},setLocation:function(b){b!==d.url()&&(d.url(b),a.$digest())},
whenStable:function(a){b.notifyWhenNoOutstandingRequests(a)}}}]}function Rf(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(a,b,d,c,f){function e(e,k,l){C(e)||(l=k,k=e,e=w);var m=va.call(arguments,3),n=x(l)&&!l,r=(n?c:d).defer(),s=r.promise,q;q=b.defer(function(){try{r.resolve(e.apply(null,m))}catch(b){r.reject(b),f(b)}finally{delete g[s.$$timeoutId]}n||a.$apply()},k);s.$$timeoutId=q;g[q]=r;return s}var g={};e.cancel=function(a){return a&&a.$$timeoutId in g?(g[a.$$timeoutId].reject("canceled"),
delete g[a.$$timeoutId],b.defer.cancel(a.$$timeoutId)):!1};return e}]}function ta(a){Ia&&(aa.setAttribute("href",a),a=aa.href);aa.setAttribute("href",a);return{href:aa.href,protocol:aa.protocol?aa.protocol.replace(/:$/,""):"",host:aa.host,search:aa.search?aa.search.replace(/^\?/,""):"",hash:aa.hash?aa.hash.replace(/^#/,""):"",hostname:aa.hostname,port:aa.port,pathname:"/"===aa.pathname.charAt(0)?aa.pathname:"/"+aa.pathname}}function od(a){a=D(a)?ta(a):a;return a.protocol===Ld.protocol&&a.host===Ld.host}
function Sf(){this.$get=ha(y)}function Md(a){function b(a){try{return decodeURIComponent(a)}catch(b){return a}}var d=a[0]||{},c={},f="";return function(){var a,g,h,k,l;try{a=d.cookie||""}catch(m){a=""}if(a!==f)for(f=a,a=f.split("; "),c={},h=0;h<a.length;h++)g=a[h],k=g.indexOf("="),0<k&&(l=b(g.substring(0,k)),z(c[l])&&(c[l]=b(g.substring(k+1))));return c}}function Wf(){this.$get=Md}function Rc(a){function b(d,c){if(E(d)){var f={};q(d,function(a,c){f[c]=b(c,a)});return f}return a.factory(d+"Filter",
c)}this.register=b;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];b("currency",Nd);b("date",Od);b("filter",Ig);b("json",Jg);b("limitTo",Kg);b("lowercase",Lg);b("number",Pd);b("orderBy",Qd);b("uppercase",Mg)}function Ig(){return function(a,b,d,c){if(!la(a)){if(null==a)return a;throw G("filter")("notarray",a);}c=c||"$";var f;switch(oc(b)){case "function":break;case "boolean":case "null":case "number":case "string":f=!0;case "object":b=Ng(b,d,c,f);break;default:return a}return Array.prototype.filter.call(a,
b)}}function Ng(a,b,d,c){var f=E(a)&&d in a;!0===b?b=na:C(b)||(b=function(a,b){if(z(a))return!1;if(null===a||null===b)return a===b;if(E(b)||E(a)&&!Ac(a))return!1;a=Q(""+a);b=Q(""+b);return-1!==a.indexOf(b)});return function(e){return f&&!E(e)?Na(e,a[d],b,d,!1):Na(e,a,b,d,c)}}function Na(a,b,d,c,f,e){var g=oc(a),h=oc(b);if("string"===h&&"!"===b.charAt(0))return!Na(a,b.substring(1),d,c,f);if(I(a))return a.some(function(a){return Na(a,b,d,c,f)});switch(g){case "object":var k;if(f){for(k in a)if("$"!==
k.charAt(0)&&Na(a[k],b,d,c,!0))return!0;return e?!1:Na(a,b,d,c,!1)}if("object"===h){for(k in b)if(e=b[k],!C(e)&&!z(e)&&(g=k===c,!Na(g?a:a[k],e,d,c,g,g)))return!1;return!0}return d(a,b);case "function":return!1;default:return d(a,b)}}function oc(a){return null===a?"null":typeof a}function Nd(a){var b=a.NUMBER_FORMATS;return function(a,c,f){z(c)&&(c=b.CURRENCY_SYM);z(f)&&(f=b.PATTERNS[1].maxFrac);return null==a?a:Rd(a,b.PATTERNS[1],b.GROUP_SEP,b.DECIMAL_SEP,f).replace(/\u00A4/g,c)}}function Pd(a){var b=
a.NUMBER_FORMATS;return function(a,c){return null==a?a:Rd(a,b.PATTERNS[0],b.GROUP_SEP,b.DECIMAL_SEP,c)}}function Og(a){var b=0,d,c,f,e,g;-1<(c=a.indexOf(Sd))&&(a=a.replace(Sd,""));0<(f=a.search(/e/i))?(0>c&&(c=f),c+=+a.slice(f+1),a=a.substring(0,f)):0>c&&(c=a.length);for(f=0;a.charAt(f)===pc;f++);if(f===(g=a.length))d=[0],c=1;else{for(g--;a.charAt(g)===pc;)g--;c-=f;d=[];for(e=0;f<=g;f++,e++)d[e]=+a.charAt(f)}c>Td&&(d=d.splice(0,Td-1),b=c-1,c=1);return{d:d,e:b,i:c}}function Pg(a,b,d,c){var f=a.d,e=
f.length-a.i;b=z(b)?Math.min(Math.max(d,e),c):+b;d=b+a.i;c=f[d];if(0<d){f.splice(Math.max(a.i,d));for(var g=d;g<f.length;g++)f[g]=0}else for(e=Math.max(0,e),a.i=1,f.length=Math.max(1,d=b+1),f[0]=0,g=1;g<d;g++)f[g]=0;if(5<=c)if(0>d-1){for(c=0;c>d;c--)f.unshift(0),a.i++;f.unshift(1);a.i++}else f[d-1]++;for(;e<Math.max(0,b);e++)f.push(0);if(b=f.reduceRight(function(a,b,c,d){b+=a;d[c]=b%10;return Math.floor(b/10)},0))f.unshift(b),a.i++}function Rd(a,b,d,c,f){if(!D(a)&&!ba(a)||isNaN(a))return"";var e=
!isFinite(a),g=!1,h=Math.abs(a)+"",k="";if(e)k="\u221e";else{g=Og(h);Pg(g,f,b.minFrac,b.maxFrac);k=g.d;h=g.i;f=g.e;e=[];for(g=k.reduce(function(a,b){return a&&!b},!0);0>h;)k.unshift(0),h++;0<h?e=k.splice(h,k.length):(e=k,k=[0]);h=[];for(k.length>=b.lgSize&&h.unshift(k.splice(-b.lgSize,k.length).join(""));k.length>b.gSize;)h.unshift(k.splice(-b.gSize,k.length).join(""));k.length&&h.unshift(k.join(""));k=h.join(d);e.length&&(k+=c+e.join(""));f&&(k+="e+"+f)}return 0>a&&!g?b.negPre+k+b.negSuf:b.posPre+
k+b.posSuf}function Mb(a,b,d,c){var f="";if(0>a||c&&0>=a)c?a=-a+1:(a=-a,f="-");for(a=""+a;a.length<b;)a=pc+a;d&&(a=a.substr(a.length-b));return f+a}function U(a,b,d,c,f){d=d||0;return function(e){e=e["get"+a]();if(0<d||e>-d)e+=d;0===e&&-12===d&&(e=12);return Mb(e,b,c,f)}}function nb(a,b,d){return function(c,f){var e=c["get"+a](),g=wb((d?"STANDALONE":"")+(b?"SHORT":"")+a);return f[g][e]}}function Ud(a){var b=(new Date(a,0,1)).getDay();return new Date(a,0,(4>=b?5:12)-b)}function Vd(a){return function(b){var d=
Ud(b.getFullYear());b=+new Date(b.getFullYear(),b.getMonth(),b.getDate()+(4-b.getDay()))-+d;b=1+Math.round(b/6048E5);return Mb(b,a)}}function qc(a,b){return 0>=a.getFullYear()?b.ERAS[0]:b.ERAS[1]}function Od(a){function b(a){var b;if(b=a.match(d)){a=new Date(0);var e=0,g=0,h=b[8]?a.setUTCFullYear:a.setFullYear,k=b[8]?a.setUTCHours:a.setHours;b[9]&&(e=Z(b[9]+b[10]),g=Z(b[9]+b[11]));h.call(a,Z(b[1]),Z(b[2])-1,Z(b[3]));e=Z(b[4]||0)-e;g=Z(b[5]||0)-g;h=Z(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||
0)));k.call(a,e,g,h,b)}return a}var d=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(c,d,e){var g="",h=[],k,l;d=d||"mediumDate";d=a.DATETIME_FORMATS[d]||d;D(c)&&(c=Qg.test(c)?Z(c):b(c));ba(c)&&(c=new Date(c));if(!ja(c)||!isFinite(c.getTime()))return c;for(;d;)(l=Rg.exec(d))?(h=cb(h,l,1),d=h.pop()):(h.push(d),d=null);var m=c.getTimezoneOffset();e&&(m=Dc(e,m),c=Ub(c,e,!0));q(h,function(b){k=Sg[b];g+=k?k(c,a.DATETIME_FORMATS,m):
"''"===b?"'":b.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function Jg(){return function(a,b){z(b)&&(b=2);return eb(a,b)}}function Kg(){return function(a,b,d){b=Infinity===Math.abs(Number(b))?Number(b):Z(b);if(ia(b))return a;ba(a)&&(a=a.toString());if(!la(a))return a;d=!d||isNaN(d)?0:Z(d);d=0>d?Math.max(0,a.length+d):d;return 0<=b?rc(a,d,d+b):0===d?rc(a,b,a.length):rc(a,Math.max(0,d+b),d)}}function rc(a,b,d){return D(a)?a.slice(b,d):va.call(a,b,d)}function Qd(a){function b(b){return b.map(function(b){var c=
1,d=$a;if(C(b))d=b;else if(D(b)){if("+"===b.charAt(0)||"-"===b.charAt(0))c="-"===b.charAt(0)?-1:1,b=b.substring(1);if(""!==b&&(d=a(b),d.constant))var f=d(),d=function(a){return a[f]}}return{get:d,descending:c}})}function d(a){switch(typeof a){case "number":case "boolean":case "string":return!0;default:return!1}}function c(a,b){var c=0,d=a.type,k=b.type;if(d===k){var k=a.value,l=b.value;"string"===d?(k=k.toLowerCase(),l=l.toLowerCase()):"object"===d&&(E(k)&&(k=a.index),E(l)&&(l=b.index));k!==l&&(c=
k<l?-1:1)}else c=d<k?-1:1;return c}return function(a,e,g,h){if(null==a)return a;if(!la(a))throw G("orderBy")("notarray",a);I(e)||(e=[e]);0===e.length&&(e=["+"]);var k=b(e),l=g?-1:1,m=C(h)?h:c;a=Array.prototype.map.call(a,function(a,b){return{value:a,tieBreaker:{value:b,type:"number",index:b},predicateValues:k.map(function(c){var e=c.get(a);c=typeof e;if(null===e)c="string",e="null";else if("object"===c)a:{if(C(e.valueOf)&&(e=e.valueOf(),d(e)))break a;Ac(e)&&(e=e.toString(),d(e))}return{value:e,type:c,
index:b}})}});a.sort(function(a,b){for(var c=0,d=k.length;c<d;c++){var e=m(a.predicateValues[c],b.predicateValues[c]);if(e)return e*k[c].descending*l}return m(a.tieBreaker,b.tieBreaker)*l});return a=a.map(function(a){return a.value})}}function Va(a){C(a)&&(a={link:a});a.restrict=a.restrict||"AC";return ha(a)}function Wd(a,b,d,c,f){var e=this,g=[];e.$error={};e.$$success={};e.$pending=void 0;e.$name=f(b.name||b.ngForm||"")(d);e.$dirty=!1;e.$pristine=!0;e.$valid=!0;e.$invalid=!1;e.$submitted=!1;e.$$parentForm=
Nb;e.$rollbackViewValue=function(){q(g,function(a){a.$rollbackViewValue()})};e.$commitViewValue=function(){q(g,function(a){a.$commitViewValue()})};e.$addControl=function(a){Ra(a.$name,"input");g.push(a);a.$name&&(e[a.$name]=a);a.$$parentForm=e};e.$$renameControl=function(a,b){var c=a.$name;e[c]===a&&delete e[c];e[b]=a;a.$name=b};e.$removeControl=function(a){a.$name&&e[a.$name]===a&&delete e[a.$name];q(e.$pending,function(b,c){e.$setValidity(c,null,a)});q(e.$error,function(b,c){e.$setValidity(c,null,
a)});q(e.$$success,function(b,c){e.$setValidity(c,null,a)});bb(g,a);a.$$parentForm=Nb};Xd({ctrl:this,$element:a,set:function(a,b,c){var d=a[b];d?-1===d.indexOf(c)&&d.push(c):a[b]=[c]},unset:function(a,b,c){var d=a[b];d&&(bb(d,c),0===d.length&&delete a[b])},$animate:c});e.$setDirty=function(){c.removeClass(a,Wa);c.addClass(a,Ob);e.$dirty=!0;e.$pristine=!1;e.$$parentForm.$setDirty()};e.$setPristine=function(){c.setClass(a,Wa,Ob+" ng-submitted");e.$dirty=!1;e.$pristine=!0;e.$submitted=!1;q(g,function(a){a.$setPristine()})};
e.$setUntouched=function(){q(g,function(a){a.$setUntouched()})};e.$setSubmitted=function(){c.addClass(a,"ng-submitted");e.$submitted=!0;e.$$parentForm.$setSubmitted()}}function sc(a){a.$formatters.push(function(b){return a.$isEmpty(b)?b:b.toString()})}function Xa(a,b,d,c,f,e){var g=Q(b[0].type);if(!f.android){var h=!1;b.on("compositionstart",function(){h=!0});b.on("compositionend",function(){h=!1;l()})}var k,l=function(a){k&&(e.defer.cancel(k),k=null);if(!h){var f=b.val();a=a&&a.type;"password"===
g||d.ngTrim&&"false"===d.ngTrim||(f=Y(f));(c.$viewValue!==f||""===f&&c.$$hasNativeValidators)&&c.$setViewValue(f,a)}};if(f.hasEvent("input"))b.on("input",l);else{var m=function(a,b,c){k||(k=e.defer(function(){k=null;b&&b.value===c||l(a)}))};b.on("keydown",function(a){var b=a.keyCode;91===b||15<b&&19>b||37<=b&&40>=b||m(a,this,this.value)});if(f.hasEvent("paste"))b.on("paste cut",m)}b.on("change",l);if(Yd[g]&&c.$$hasNativeValidators&&g===d.type)b.on("keydown wheel mousedown",function(a){if(!k){var b=
this.validity,c=b.badInput,d=b.typeMismatch;k=e.defer(function(){k=null;b.badInput===c&&b.typeMismatch===d||l(a)})}});c.$render=function(){var a=c.$isEmpty(c.$viewValue)?"":c.$viewValue;b.val()!==a&&b.val(a)}}function Pb(a,b){return function(d,c){var f,e;if(ja(d))return d;if(D(d)){'"'===d.charAt(0)&&'"'===d.charAt(d.length-1)&&(d=d.substring(1,d.length-1));if(Tg.test(d))return new Date(d);a.lastIndex=0;if(f=a.exec(d))return f.shift(),e=c?{yyyy:c.getFullYear(),MM:c.getMonth()+1,dd:c.getDate(),HH:c.getHours(),
mm:c.getMinutes(),ss:c.getSeconds(),sss:c.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},q(f,function(a,c){c<b.length&&(e[b[c]]=+a)}),new Date(e.yyyy,e.MM-1,e.dd,e.HH,e.mm,e.ss||0,1E3*e.sss||0)}return NaN}}function ob(a,b,d,c){return function(f,e,g,h,k,l,m){function n(a){return a&&!(a.getTime&&a.getTime()!==a.getTime())}function r(a){return x(a)&&!ja(a)?d(a)||void 0:a}tc(f,e,g,h);Xa(f,e,g,h,k,l);var s=h&&h.$options&&h.$options.timezone,q;h.$$parserName=a;h.$parsers.push(function(a){if(h.$isEmpty(a))return null;
if(b.test(a))return a=d(a,q),s&&(a=Ub(a,s)),a});h.$formatters.push(function(a){if(a&&!ja(a))throw pb("datefmt",a);if(n(a))return(q=a)&&s&&(q=Ub(q,s,!0)),m("date")(a,c,s);q=null;return""});if(x(g.min)||g.ngMin){var u;h.$validators.min=function(a){return!n(a)||z(u)||d(a)>=u};g.$observe("min",function(a){u=r(a);h.$validate()})}if(x(g.max)||g.ngMax){var p;h.$validators.max=function(a){return!n(a)||z(p)||d(a)<=p};g.$observe("max",function(a){p=r(a);h.$validate()})}}}function tc(a,b,d,c){(c.$$hasNativeValidators=
E(b[0].validity))&&c.$parsers.push(function(a){var c=b.prop("validity")||{};return c.badInput||c.typeMismatch?void 0:a})}function Zd(a){a.$$parserName="number";a.$parsers.push(function(b){if(a.$isEmpty(b))return null;if(Ug.test(b))return parseFloat(b)});a.$formatters.push(function(b){if(!a.$isEmpty(b)){if(!ba(b))throw pb("numfmt",b);b=b.toString()}return b})}function qb(a){x(a)&&!ba(a)&&(a=parseFloat(a));return ia(a)?void 0:a}function uc(a){var b=a.toString(),d=b.indexOf(".");return-1===d?-1<a&&1>
a&&(a=/e-(\d+)$/.exec(b))?Number(a[1]):0:b.length-d-1}function $d(a,b,d,c,f){if(x(c)){a=a(c);if(!a.constant)throw pb("constexpr",d,c);return a(b)}return f}function vc(a,b){a="ngClass"+a;return["$animate",function(d){function c(a,b){var c=[],d=0;a:for(;d<a.length;d++){for(var f=a[d],m=0;m<b.length;m++)if(f===b[m])continue a;c.push(f)}return c}function f(a){var b=[];return I(a)?(q(a,function(a){b=b.concat(f(a))}),b):D(a)?a.split(" "):E(a)?(q(a,function(a,c){a&&(b=b.concat(c.split(" ")))}),b):a}return{restrict:"AC",
link:function(e,g,h){function k(a){a=l(a,1);h.$addClass(a)}function l(a,b){var c=g.data("$classCounts")||V(),d=[];q(a,function(a){if(0<b||c[a])c[a]=(c[a]||0)+b,c[a]===+(0<b)&&d.push(a)});g.data("$classCounts",c);return d.join(" ")}function m(a,b){var e=c(b,a),f=c(a,b),e=l(e,1),f=l(f,-1);e&&e.length&&d.addClass(g,e);f&&f.length&&d.removeClass(g,f)}function n(a){if(!0===b||(e.$index&1)===b){var c=f(a||[]);if(!r)k(c);else if(!na(a,r)){var d=f(r);m(d,c)}}r=I(a)?a.map(function(a){return ka(a)}):ka(a)}
var r;h.$observe("class",function(b){n(e.$eval(h[a]))});"ngClass"!==a&&e.$watch("$index",function(a,c){var d=a&1;if(d!==(c&1)){var e=f(r);d===b?k(e):(d=l(e,-1),h.$removeClass(d))}});e.$watch(h[a],n,!0)}}}]}function Xd(a){function b(a,b){b&&!e[a]?(k.addClass(f,a),e[a]=!0):!b&&e[a]&&(k.removeClass(f,a),e[a]=!1)}function d(a,c){a=a?"-"+Hc(a,"-"):"";b(rb+a,!0===c);b(ae+a,!1===c)}var c=a.ctrl,f=a.$element,e={},g=a.set,h=a.unset,k=a.$animate;e[ae]=!(e[rb]=f.hasClass(rb));c.$setValidity=function(a,e,f){z(e)?
(c.$pending||(c.$pending={}),g(c.$pending,a,f)):(c.$pending&&h(c.$pending,a,f),be(c.$pending)&&(c.$pending=void 0));Ka(e)?e?(h(c.$error,a,f),g(c.$$success,a,f)):(g(c.$error,a,f),h(c.$$success,a,f)):(h(c.$error,a,f),h(c.$$success,a,f));c.$pending?(b(ce,!0),c.$valid=c.$invalid=void 0,d("",null)):(b(ce,!1),c.$valid=be(c.$error),c.$invalid=!c.$valid,d("",c.$valid));e=c.$pending&&c.$pending[a]?void 0:c.$error[a]?!1:c.$$success[a]?!0:null;d(a,e);c.$$parentForm.$setValidity(a,e,c)}}function be(a){if(a)for(var b in a)if(a.hasOwnProperty(b))return!1;
return!0}var Vg=/^\/(.+)\/([a-z]*)$/,ua=Object.prototype.hasOwnProperty,Q=function(a){return D(a)?a.toLowerCase():a},wb=function(a){return D(a)?a.toUpperCase():a},Ia,F,za,va=[].slice,pg=[].splice,Wg=[].push,ma=Object.prototype.toString,Bc=Object.getPrototypeOf,xa=G("ng"),$=y.angular||(y.angular={}),Wb,sb=0;Ia=y.document.documentMode;var ia=Number.isNaN||function(a){return a!==a};w.$inject=[];$a.$inject=[];var I=Array.isArray,ne=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,
Y=function(a){return D(a)?a.trim():a},Jd=function(a){return a.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},da=function(){if(!x(da.rules)){var a=y.document.querySelector("[ng-csp]")||y.document.querySelector("[data-ng-csp]");if(a){var b=a.getAttribute("ng-csp")||a.getAttribute("data-ng-csp");da.rules={noUnsafeEval:!b||-1!==b.indexOf("no-unsafe-eval"),noInlineStyle:!b||-1!==b.indexOf("no-inline-style")}}else{a=da;try{new Function(""),b=!1}catch(d){b=!0}a.rules={noUnsafeEval:b,
noInlineStyle:!1}}}return da.rules},ub=function(){if(x(ub.name_))return ub.name_;var a,b,d=Oa.length,c,f;for(b=0;b<d;++b)if(c=Oa[b],a=y.document.querySelector("["+c.replace(":","\\:")+"jq]")){f=a.getAttribute(c+"jq");break}return ub.name_=f},qe=/:/g,Oa=["ng-","data-ng-","ng:","x-ng-"],te=function(a){var b=a.currentScript,b=b&&b.getAttribute("src");if(!b)return!0;var d=a.createElement("a");d.href=b;if(a.location.origin===d.origin)return!0;switch(d.protocol){case "http:":case "https:":case "ftp:":case "blob:":case "file:":case "data:":return!0;
default:return!1}}(y.document),we=/[A-Z]/g,Ic=!1,La=3,Ae={full:"1.5.11",major:1,minor:5,dot:11,codeName:"princely-quest"};W.expando="ng339";var jb=W.cache={},bg=1;W._data=function(a){return this.cache[a[this.expando]]||{}};var Xf=/([:\-_]+(.))/g,Yf=/^moz([A-Z])/,Ab={mouseleave:"mouseout",mouseenter:"mouseover"},Yb=G("jqLite"),ag=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Xb=/<|&#?\w+;/,Zf=/<([\w:-]+)/,$f=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,pa={option:[1,'<select multiple="multiple">',
"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};pa.optgroup=pa.option;pa.tbody=pa.tfoot=pa.colgroup=pa.caption=pa.thead;pa.th=pa.td;var gg=y.Node.prototype.contains||function(a){return!!(this.compareDocumentPosition(a)&16)},Pa=W.prototype={ready:function(a){function b(){d||(d=!0,a())}var d=!1;"complete"===y.document.readyState?y.setTimeout(b):
(this.on("DOMContentLoaded",b),W(y).on("load",b))},toString:function(){var a=[];q(this,function(b){a.push(""+b)});return"["+a.join(", ")+"]"},eq:function(a){return 0<=a?F(this[a]):F(this[this.length+a])},length:0,push:Wg,sort:[].sort,splice:[].splice},Gb={};q("multiple selected checked disabled readOnly required open".split(" "),function(a){Gb[Q(a)]=a});var $c={};q("input select option textarea button form details".split(" "),function(a){$c[a]=!0});var gd={ngMinlength:"minlength",ngMaxlength:"maxlength",
ngMin:"min",ngMax:"max",ngPattern:"pattern"};q({data:$b,removeData:ib,hasData:function(a){for(var b in jb[a.ng339])return!0;return!1},cleanData:function(a){for(var b=0,d=a.length;b<d;b++)ib(a[b])}},function(a,b){W[b]=a});q({data:$b,inheritedData:Eb,scope:function(a){return F.data(a,"$scope")||Eb(a.parentNode||a,["$isolateScope","$scope"])},isolateScope:function(a){return F.data(a,"$isolateScope")||F.data(a,"$isolateScopeNoTemplate")},controller:Xc,injector:function(a){return Eb(a,"$injector")},removeAttr:function(a,
b){a.removeAttribute(b)},hasClass:Bb,css:function(a,b,d){b=hb(b);if(x(d))a.style[b]=d;else return a.style[b]},attr:function(a,b,d){var c=a.nodeType;if(c!==La&&2!==c&&8!==c)if(c=Q(b),Gb[c])if(x(d))d?(a[b]=!0,a.setAttribute(b,c)):(a[b]=!1,a.removeAttribute(c));else return a[b]||(a.attributes.getNamedItem(b)||w).specified?c:void 0;else if(x(d))a.setAttribute(b,d);else if(a.getAttribute)return a=a.getAttribute(b,2),null===a?void 0:a},prop:function(a,b,d){if(x(d))a[b]=d;else return a[b]},text:function(){function a(a,
d){if(z(d)){var c=a.nodeType;return 1===c||c===La?a.textContent:""}a.textContent=d}a.$dv="";return a}(),val:function(a,b){if(z(b)){if(a.multiple&&"select"===wa(a)){var d=[];q(a.options,function(a){a.selected&&d.push(a.value||a.text)});return 0===d.length?null:d}return a.value}a.value=b},html:function(a,b){if(z(b))return a.innerHTML;yb(a,!0);a.innerHTML=b},empty:Yc},function(a,b){W.prototype[b]=function(b,c){var f,e,g=this.length;if(a!==Yc&&z(2===a.length&&a!==Bb&&a!==Xc?b:c)){if(E(b)){for(f=0;f<g;f++)if(a===
$b)a(this[f],b);else for(e in b)a(this[f],e,b[e]);return this}f=a.$dv;g=z(f)?Math.min(g,1):g;for(e=0;e<g;e++){var h=a(this[e],b,c);f=f?f+h:h}return f}for(f=0;f<g;f++)a(this[f],b,c);return this}});q({removeData:ib,on:function(a,b,d,c){if(x(c))throw Yb("onargs");if(Sc(a)){c=zb(a,!0);var f=c.events,e=c.handle;e||(e=c.handle=dg(a,f));c=0<=b.indexOf(" ")?b.split(" "):[b];for(var g=c.length,h=function(b,c,g){var h=f[b];h||(h=f[b]=[],h.specialHandlerWrapper=c,"$destroy"===b||g||a.addEventListener(b,e,!1));
h.push(d)};g--;)b=c[g],Ab[b]?(h(Ab[b],fg),h(b,void 0,!0)):h(b)}},off:Wc,one:function(a,b,d){a=F(a);a.on(b,function f(){a.off(b,d);a.off(b,f)});a.on(b,d)},replaceWith:function(a,b){var d,c=a.parentNode;yb(a);q(new W(b),function(b){d?c.insertBefore(b,d.nextSibling):c.replaceChild(b,a);d=b})},children:function(a){var b=[];q(a.childNodes,function(a){1===a.nodeType&&b.push(a)});return b},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,b){var d=a.nodeType;if(1===d||11===
d){b=new W(b);for(var d=0,c=b.length;d<c;d++)a.appendChild(b[d])}},prepend:function(a,b){if(1===a.nodeType){var d=a.firstChild;q(new W(b),function(b){a.insertBefore(b,d)})}},wrap:function(a,b){Uc(a,F(b).eq(0).clone()[0])},remove:Fb,detach:function(a){Fb(a,!0)},after:function(a,b){var d=a,c=a.parentNode;if(c){b=new W(b);for(var f=0,e=b.length;f<e;f++){var g=b[f];c.insertBefore(g,d.nextSibling);d=g}}},addClass:Db,removeClass:Cb,toggleClass:function(a,b,d){b&&q(b.split(" "),function(b){var f=d;z(f)&&
(f=!Bb(a,b));(f?Db:Cb)(a,b)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},find:function(a,b){return a.getElementsByTagName?a.getElementsByTagName(b):[]},clone:Zb,triggerHandler:function(a,b,d){var c,f,e=b.type||b,g=zb(a);if(g=(g=g&&g.events)&&g[e])c={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=
!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:w,type:e,target:a},b.type&&(c=R(c,b)),b=ka(g),f=d?[c].concat(d):[c],q(b,function(b){c.isImmediatePropagationStopped()||b.apply(a,f)})}},function(a,b){W.prototype[b]=function(b,c,f){for(var e,g=0,h=this.length;g<h;g++)z(e)?(e=a(this[g],b,c,f),x(e)&&(e=F(e))):Vc(e,a(this[g],b,c,f));return x(e)?e:this}});W.prototype.bind=W.prototype.on;W.prototype.unbind=W.prototype.off;Sa.prototype={put:function(a,
b){this[Aa(a,this.nextUid)]=b},get:function(a){return this[Aa(a,this.nextUid)]},remove:function(a){var b=this[a=Aa(a,this.nextUid)];delete this[a];return b}};var Vf=[function(){this.$get=[function(){return Sa}]}],ig=/^([^(]+?)=>/,jg=/^[^(]*\(\s*([^)]*)\)/m,Xg=/,/,Yg=/^\s*(_?)(\S+?)\1\s*$/,hg=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Ba=G("$injector");fb.$$annotate=function(a,b,d){var c;if("function"===typeof a){if(!(c=a.$inject)){c=[];if(a.length){if(b)throw D(d)&&d||(d=a.name||kg(a)),Ba("strictdi",d);b=
ad(a);q(b[1].split(Xg),function(a){a.replace(Yg,function(a,b,d){c.push(d)})})}a.$inject=c}}else I(a)?(b=a.length-1,Qa(a[b],"fn"),c=a.slice(0,b)):Qa(a,"fn",!0);return c};var de=G("$animate"),nf=function(){this.$get=w},of=function(){var a=new Sa,b=[];this.$get=["$$AnimateRunner","$rootScope",function(d,c){function f(a,b,c){var d=!1;b&&(b=D(b)?b.split(" "):I(b)?b:[],q(b,function(b){b&&(d=!0,a[b]=c)}));return d}function e(){q(b,function(b){var c=a.get(b);if(c){var d=lg(b.attr("class")),e="",f="";q(c,
function(a,b){a!==!!d[b]&&(a?e+=(e.length?" ":"")+b:f+=(f.length?" ":"")+b)});q(b,function(a){e&&Db(a,e);f&&Cb(a,f)});a.remove(b)}});b.length=0}return{enabled:w,on:w,off:w,pin:w,push:function(g,h,k,l){l&&l();k=k||{};k.from&&g.css(k.from);k.to&&g.css(k.to);if(k.addClass||k.removeClass)if(h=k.addClass,l=k.removeClass,k=a.get(g)||{},h=f(k,h,!0),l=f(k,l,!1),h||l)a.put(g,k),b.push(g),1===b.length&&c.$$postDigest(e);g=new d;g.complete();return g}}}]},lf=["$provide",function(a){var b=this;this.$$registeredAnimations=
Object.create(null);this.register=function(d,c){if(d&&"."!==d.charAt(0))throw de("notcsel",d);var f=d+"-animation";b.$$registeredAnimations[d.substr(1)]=f;a.factory(f,c)};this.classNameFilter=function(a){if(1===arguments.length&&(this.$$classNameFilter=a instanceof RegExp?a:null)&&/(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString()))throw de("nongcls","ng-animate");return this.$$classNameFilter};this.$get=["$$animateQueue",function(a){function b(a,c,d){if(d){var h;a:{for(h=0;h<d.length;h++){var k=
d[h];if(1===k.nodeType){h=k;break a}}h=void 0}!h||h.parentNode||h.previousElementSibling||(d=null)}d?d.after(a):c.prepend(a)}return{on:a.on,off:a.off,pin:a.pin,enabled:a.enabled,cancel:function(a){a.end&&a.end()},enter:function(f,e,g,h){e=e&&F(e);g=g&&F(g);e=e||g.parent();b(f,e,g);return a.push(f,"enter",Ca(h))},move:function(f,e,g,h){e=e&&F(e);g=g&&F(g);e=e||g.parent();b(f,e,g);return a.push(f,"move",Ca(h))},leave:function(b,c){return a.push(b,"leave",Ca(c),function(){b.remove()})},addClass:function(b,
c,g){g=Ca(g);g.addClass=kb(g.addclass,c);return a.push(b,"addClass",g)},removeClass:function(b,c,g){g=Ca(g);g.removeClass=kb(g.removeClass,c);return a.push(b,"removeClass",g)},setClass:function(b,c,g,h){h=Ca(h);h.addClass=kb(h.addClass,c);h.removeClass=kb(h.removeClass,g);return a.push(b,"setClass",h)},animate:function(b,c,g,h,k){k=Ca(k);k.from=k.from?R(k.from,c):c;k.to=k.to?R(k.to,g):g;k.tempClasses=kb(k.tempClasses,h||"ng-inline-animate");return a.push(b,"animate",k)}}}]}],qf=function(){this.$get=
["$$rAF",function(a){function b(b){d.push(b);1<d.length||a(function(){for(var a=0;a<d.length;a++)d[a]();d=[]})}var d=[];return function(){var a=!1;b(function(){a=!0});return function(d){a?d():b(d)}}}]},pf=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$document","$timeout",function(a,b,d,c,f){function e(a){this.setHost(a);var b=d();this._doneCallbacks=[];this._tick=function(a){var d=c[0];d&&d.hidden?f(a,0,!1):b(a)};this._state=0}e.chain=function(a,b){function c(){if(d===a.length)b(!0);
else a[d](function(a){!1===a?b(!1):(d++,c())})}var d=0;c()};e.all=function(a,b){function c(f){e=e&&f;++d===a.length&&b(e)}var d=0,e=!0;q(a,function(a){a.done(c)})};e.prototype={setHost:function(a){this.host=a||{}},done:function(a){2===this._state?a():this._doneCallbacks.push(a)},progress:w,getPromise:function(){if(!this.promise){var b=this;this.promise=a(function(a,c){b.done(function(b){!1===b?c():a()})})}return this.promise},then:function(a,b){return this.getPromise().then(a,b)},"catch":function(a){return this.getPromise()["catch"](a)},
"finally":function(a){return this.getPromise()["finally"](a)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end();this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel();this._resolve(!1)},complete:function(a){var b=this;0===b._state&&(b._state=1,b._tick(function(){b._resolve(a)}))},_resolve:function(a){2!==this._state&&(q(this._doneCallbacks,function(b){b(a)}),this._doneCallbacks.length=
0,this._state=2)}};return e}]},mf=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(a,b,d){return function(b,f){function e(){a(function(){g.addClass&&(b.addClass(g.addClass),g.addClass=null);g.removeClass&&(b.removeClass(g.removeClass),g.removeClass=null);g.to&&(b.css(g.to),g.to=null);h||k.complete();h=!0});return k}var g=f||{};g.$$prepared||(g=sa(g));g.cleanupStyles&&(g.from=g.to=null);g.from&&(b.css(g.from),g.from=null);var h,k=new d;return{start:e,end:e}}}]},fa=G("$compile"),ec=new function(){};
Kc.$inject=["$provide","$$sanitizeUriProvider"];Hb.prototype.isFirstChange=function(){return this.previousValue===ec};var bd=/^((?:x|data)[:\-_])/i,id=G("$controller"),hd=/^(\S+)(\s+as\s+([\w$]+))?$/,wf=function(){this.$get=["$document",function(a){return function(b){b?!b.nodeType&&b instanceof F&&(b=b[0]):b=a[0].body;return b.offsetWidth+1}}]},jd="application/json",hc={"Content-Type":jd+";charset=utf-8"},rg=/^\[|^\{(?!\{)/,sg={"[":/]$/,"{":/}$/},qg=/^\)]\}',?\n/,Zg=G("$http"),nd=function(a){return function(){throw Zg("legacy",
a);}},Ha=$.$interpolateMinErr=G("$interpolate");Ha.throwNoconcat=function(a){throw Ha("noconcat",a);};Ha.interr=function(a,b){return Ha("interr",a,b.toString())};var Ef=function(){this.$get=["$window",function(a){function b(a){var b=function(a){b.data=a;b.called=!0};b.id=a;return b}var d=a.angular.callbacks,c={};return{createCallback:function(a){a="_"+(d.$$counter++).toString(36);var e="angular.callbacks."+a,g=b(a);c[e]=d[a]=g;return e},wasCalled:function(a){return c[a].called},getResponse:function(a){return c[a].data},
removeCallback:function(a){delete d[c[a].id];delete c[a]}}}]},$g=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,ug={http:80,https:443,ftp:21},lb=G("$location"),vg=/^\s*[\\/]{2,}/,ah={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:Ib("$$absUrl"),url:function(a){if(z(a))return this.$$url;var b=$g.exec(a);(b[1]||""===a)&&this.path(decodeURIComponent(b[1]));(b[2]||b[1]||""===a)&&this.search(b[3]||"");this.hash(b[5]||"");return this},protocol:Ib("$$protocol"),host:Ib("$$host"),port:Ib("$$port"),path:sd("$$path",function(a){a=
null!==a?a.toString():"";return"/"===a.charAt(0)?a:"/"+a}),search:function(a,b){switch(arguments.length){case 0:return this.$$search;case 1:if(D(a)||ba(a))a=a.toString(),this.$$search=Fc(a);else if(E(a))a=sa(a,{}),q(a,function(b,c){null==b&&delete a[c]}),this.$$search=a;else throw lb("isrcharg");break;default:z(b)||null===b?delete this.$$search[a]:this.$$search[a]=b}this.$$compose();return this},hash:sd("$$hash",function(a){return null!==a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};
q([rd,kc,jc],function(a){a.prototype=Object.create(ah);a.prototype.state=function(b){if(!arguments.length)return this.$$state;if(a!==jc||!this.$$html5)throw lb("nostate");this.$$state=z(b)?null:b;return this}});var ea=G("$parse"),ud=[].constructor,vd=(!1).constructor,wd=Function.constructor,xd=(0).constructor,yd={}.constructor,zd="".constructor,Ag=ud.prototype,Bg=vd.prototype,Kb=wd.prototype,Cg=xd.prototype,Ad=yd.prototype,Dg=zd.prototype,xg=Kb.call,yg=Kb.apply,zg=Kb.bind,Fg=Ad.valueOf,Qb=V();q("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),
function(a){Qb[a]=!0});var bh={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},mc=function(a){this.options=a};mc.prototype={constructor:mc,lex:function(a){this.text=a;this.index=0;for(this.tokens=[];this.index<this.text.length;)if(a=this.text.charAt(this.index),'"'===a||"'"===a)this.readString(a);else if(this.isNumber(a)||"."===a&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(a,"(){}[].,;:?"))this.tokens.push({index:this.index,
text:a}),this.index++;else if(this.isWhitespace(a))this.index++;else{var b=a+this.peek(),d=b+this.peek(2),c=Qb[b],f=Qb[d];Qb[a]||c||f?(a=f?d:c?b:a,this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a,b){return-1!==b.indexOf(a)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a&&"string"===
typeof a},isWhitespace:function(a){return" "===a||"\r"===a||"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdentifierStart:function(a){return this.options.isIdentifierStart?this.options.isIdentifierStart(a,this.codePointAt(a)):this.isValidIdentifierStart(a)},isValidIdentifierStart:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isIdentifierContinue:function(a){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(a,this.codePointAt(a)):this.isValidIdentifierContinue(a)},
isValidIdentifierContinue:function(a,b){return this.isValidIdentifierStart(a,b)||this.isNumber(a)},codePointAt:function(a){return 1===a.length?a.charCodeAt(0):(a.charCodeAt(0)<<10)+a.charCodeAt(1)-56613888},peekMultichar:function(){var a=this.text.charAt(this.index),b=this.peek();if(!b)return a;var d=a.charCodeAt(0),c=b.charCodeAt(0);return 55296<=d&&56319>=d&&56320<=c&&57343>=c?a+b:a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,b,d){d=d||this.index;b=
x(b)?"s "+b+"-"+this.index+" ["+this.text.substring(b,d)+"]":" "+d;throw ea("lexerr",a,b,this.text);},readNumber:function(){for(var a="",b=this.index;this.index<this.text.length;){var d=Q(this.text.charAt(this.index));if("."===d||this.isNumber(d))a+=d;else{var c=this.peek();if("e"===d&&this.isExpOperator(c))a+=d;else if(this.isExpOperator(d)&&c&&this.isNumber(c)&&"e"===a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||c&&this.isNumber(c)||"e"!==a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}this.tokens.push({index:b,
text:a,constant:!0,value:Number(a)})},readIdent:function(){var a=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var b=this.peekMultichar();if(!this.isIdentifierContinue(b))break;this.index+=b.length}this.tokens.push({index:a,text:this.text.slice(a,this.index),identifier:!0})},readString:function(a){var b=this.index;this.index++;for(var d="",c=a,f=!1;this.index<this.text.length;){var e=this.text.charAt(this.index),c=c+e;if(f)"u"===e?(f=this.text.substring(this.index+
1,this.index+5),f.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+f+"]"),this.index+=4,d+=String.fromCharCode(parseInt(f,16))):d+=bh[e]||e,f=!1;else if("\\"===e)f=!0;else{if(e===a){this.index++;this.tokens.push({index:b,text:c,constant:!0,value:d});return}d+=e}this.index++}this.throwError("Unterminated quote",b)}};var t=function(a,b){this.lexer=a;this.options=b};t.Program="Program";t.ExpressionStatement="ExpressionStatement";t.AssignmentExpression="AssignmentExpression";t.ConditionalExpression=
"ConditionalExpression";t.LogicalExpression="LogicalExpression";t.BinaryExpression="BinaryExpression";t.UnaryExpression="UnaryExpression";t.CallExpression="CallExpression";t.MemberExpression="MemberExpression";t.Identifier="Identifier";t.Literal="Literal";t.ArrayExpression="ArrayExpression";t.Property="Property";t.ObjectExpression="ObjectExpression";t.ThisExpression="ThisExpression";t.LocalsExpression="LocalsExpression";t.NGValueParameter="NGValueParameter";t.prototype={ast:function(a){this.text=
a;this.tokens=this.lexer.lex(a);a=this.program();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);return a},program:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.expressionStatement()),!this.expect(";"))return{type:t.Program,body:a}},expressionStatement:function(){return{type:t.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=this.filter(a);return a},
expression:function(){return this.assignment()},assignment:function(){var a=this.ternary();if(this.expect("=")){if(!Dd(a))throw ea("lval");a={type:t.AssignmentExpression,left:a,right:this.assignment(),operator:"="}}return a},ternary:function(){var a=this.logicalOR(),b,d;return this.expect("?")&&(b=this.expression(),this.consume(":"))?(d=this.expression(),{type:t.ConditionalExpression,test:a,alternate:b,consequent:d}):a},logicalOR:function(){for(var a=this.logicalAND();this.expect("||");)a={type:t.LogicalExpression,
operator:"||",left:a,right:this.logicalAND()};return a},logicalAND:function(){for(var a=this.equality();this.expect("&&");)a={type:t.LogicalExpression,operator:"&&",left:a,right:this.equality()};return a},equality:function(){for(var a=this.relational(),b;b=this.expect("==","!=","===","!==");)a={type:t.BinaryExpression,operator:b.text,left:a,right:this.relational()};return a},relational:function(){for(var a=this.additive(),b;b=this.expect("<",">","<=",">=");)a={type:t.BinaryExpression,operator:b.text,
left:a,right:this.additive()};return a},additive:function(){for(var a=this.multiplicative(),b;b=this.expect("+","-");)a={type:t.BinaryExpression,operator:b.text,left:a,right:this.multiplicative()};return a},multiplicative:function(){for(var a=this.unary(),b;b=this.expect("*","/","%");)a={type:t.BinaryExpression,operator:b.text,left:a,right:this.unary()};return a},unary:function(){var a;return(a=this.expect("+","-","!"))?{type:t.UnaryExpression,operator:a.text,prefix:!0,argument:this.unary()}:this.primary()},
primary:function(){var a;this.expect("(")?(a=this.filterChain(),this.consume(")")):this.expect("[")?a=this.arrayDeclaration():this.expect("{")?a=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?a=sa(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?a={type:t.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?a=this.identifier():this.peek().constant?a=this.constant():this.throwError("not a primary expression",
this.peek());for(var b;b=this.expect("(","[",".");)"("===b.text?(a={type:t.CallExpression,callee:a,arguments:this.parseArguments()},this.consume(")")):"["===b.text?(a={type:t.MemberExpression,object:a,property:this.expression(),computed:!0},this.consume("]")):"."===b.text?a={type:t.MemberExpression,object:a,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return a},filter:function(a){a=[a];for(var b={type:t.CallExpression,callee:this.identifier(),arguments:a,filter:!0};this.expect(":");)a.push(this.expression());
return b},parseArguments:function(){var a=[];if(")"!==this.peekToken().text){do a.push(this.filterChain());while(this.expect(","))}return a},identifier:function(){var a=this.consume();a.identifier||this.throwError("is not a valid identifier",a);return{type:t.Identifier,name:a.text}},constant:function(){return{type:t.Literal,value:this.consume().value}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;a.push(this.expression())}while(this.expect(","))}this.consume("]");
return{type:t.ArrayExpression,elements:a}},object:function(){var a=[],b;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;b={type:t.Property,kind:"init"};this.peek().constant?(b.key=this.constant(),b.computed=!1,this.consume(":"),b.value=this.expression()):this.peek().identifier?(b.key=this.identifier(),b.computed=!1,this.peek(":")?(this.consume(":"),b.value=this.expression()):b.value=b.key):this.peek("[")?(this.consume("["),b.key=this.expression(),this.consume("]"),b.computed=!0,this.consume(":"),
b.value=this.expression()):this.throwError("invalid key",this.peek());a.push(b)}while(this.expect(","))}this.consume("}");return{type:t.ObjectExpression,properties:a}},throwError:function(a,b){throw ea("syntax",b.text,a,b.index+1,this.text,this.text.substring(b.index));},consume:function(a){if(0===this.tokens.length)throw ea("ueoe",this.text);var b=this.expect(a);b||this.throwError("is unexpected, expecting ["+a+"]",this.peek());return b},peekToken:function(){if(0===this.tokens.length)throw ea("ueoe",
this.text);return this.tokens[0]},peek:function(a,b,d,c){return this.peekAhead(0,a,b,d,c)},peekAhead:function(a,b,d,c,f){if(this.tokens.length>a){a=this.tokens[a];var e=a.text;if(e===b||e===d||e===c||e===f||!(b||d||c||f))return a}return!1},expect:function(a,b,d,c){return(a=this.peek(a,b,d,c))?(this.tokens.shift(),a):!1},selfReferential:{"this":{type:t.ThisExpression},$locals:{type:t.LocalsExpression}}};Gd.prototype={compile:function(a,b){var d=this,c=this.astBuilder.ast(a);this.state={nextId:0,filters:{},
expensiveChecks:b,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]};X(c,d.$filter);var f="",e;this.stage="assign";if(e=Ed(c))this.state.computing="assign",f=this.nextId(),this.recurse(e,f),this.return_(f),f="fn.assign="+this.generateFunction("assign","s,v,l");e=Cd(c.body);d.stage="inputs";q(e,function(a,b){var c="fn"+b;d.state[c]={vars:[],body:[],own:{}};d.state.computing=c;var e=d.nextId();d.recurse(a,e);d.return_(e);d.state.inputs.push(c);a.watchId=b});this.state.computing=
"fn";this.stage="main";this.recurse(c);f='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+f+this.watchFns()+"return fn;";f=(new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",f))(this.$filter,Ua,Ea,td,wg,Jb,Eg,Bd,a);this.state=this.stage=void 0;f.literal=Fd(c);f.constant=c.constant;return f},USE:"use",STRICT:"strict",watchFns:function(){var a=
[],b=this.state.inputs,d=this;q(b,function(b){a.push("var "+b+"="+d.generateFunction(b,"s"))});b.length&&a.push("fn.inputs=["+b.join(",")+"];");return a.join("")},generateFunction:function(a,b){return"function("+b+"){"+this.varsPrefix(a)+this.body(a)+"};"},filterPrefix:function(){var a=[],b=this;q(this.state.filters,function(d,c){a.push(d+"=$filter("+b.escape(c)+")")});return a.length?"var "+a.join(",")+";":""},varsPrefix:function(a){return this.state[a].vars.length?"var "+this.state[a].vars.join(",")+
";":""},body:function(a){return this.state[a].body.join("")},recurse:function(a,b,d,c,f,e){var g,h,k=this,l,m,n;c=c||w;if(!e&&x(a.watchId))b=b||this.nextId(),this.if_("i",this.lazyAssign(b,this.computedMember("i",a.watchId)),this.lazyRecurse(a,b,d,c,f,!0));else switch(a.type){case t.Program:q(a.body,function(b,c){k.recurse(b.expression,void 0,void 0,function(a){h=a});c!==a.body.length-1?k.current().body.push(h,";"):k.return_(h)});break;case t.Literal:m=this.escape(a.value);this.assign(b,m);c(m);break;
case t.UnaryExpression:this.recurse(a.argument,void 0,void 0,function(a){h=a});m=a.operator+"("+this.ifDefined(h,0)+")";this.assign(b,m);c(m);break;case t.BinaryExpression:this.recurse(a.left,void 0,void 0,function(a){g=a});this.recurse(a.right,void 0,void 0,function(a){h=a});m="+"===a.operator?this.plus(g,h):"-"===a.operator?this.ifDefined(g,0)+a.operator+this.ifDefined(h,0):"("+g+")"+a.operator+"("+h+")";this.assign(b,m);c(m);break;case t.LogicalExpression:b=b||this.nextId();k.recurse(a.left,b);
k.if_("&&"===a.operator?b:k.not(b),k.lazyRecurse(a.right,b));c(b);break;case t.ConditionalExpression:b=b||this.nextId();k.recurse(a.test,b);k.if_(b,k.lazyRecurse(a.alternate,b),k.lazyRecurse(a.consequent,b));c(b);break;case t.Identifier:b=b||this.nextId();d&&(d.context="inputs"===k.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",a.name)+"?l:s"),d.computed=!1,d.name=a.name);Ua(a.name);k.if_("inputs"===k.stage||k.not(k.getHasOwnProperty("l",a.name)),function(){k.if_("inputs"===k.stage||
"s",function(){f&&1!==f&&k.if_(k.not(k.nonComputedMember("s",a.name)),k.lazyAssign(k.nonComputedMember("s",a.name),"{}"));k.assign(b,k.nonComputedMember("s",a.name))})},b&&k.lazyAssign(b,k.nonComputedMember("l",a.name)));(k.state.expensiveChecks||Lb(a.name))&&k.addEnsureSafeObject(b);c(b);break;case t.MemberExpression:g=d&&(d.context=this.nextId())||this.nextId();b=b||this.nextId();k.recurse(a.object,g,void 0,function(){k.if_(k.notNull(g),function(){f&&1!==f&&k.addEnsureSafeAssignContext(g);if(a.computed)h=
k.nextId(),k.recurse(a.property,h),k.getStringValue(h),k.addEnsureSafeMemberName(h),f&&1!==f&&k.if_(k.not(k.computedMember(g,h)),k.lazyAssign(k.computedMember(g,h),"{}")),m=k.ensureSafeObject(k.computedMember(g,h)),k.assign(b,m),d&&(d.computed=!0,d.name=h);else{Ua(a.property.name);f&&1!==f&&k.if_(k.not(k.nonComputedMember(g,a.property.name)),k.lazyAssign(k.nonComputedMember(g,a.property.name),"{}"));m=k.nonComputedMember(g,a.property.name);if(k.state.expensiveChecks||Lb(a.property.name))m=k.ensureSafeObject(m);
k.assign(b,m);d&&(d.computed=!1,d.name=a.property.name)}},function(){k.assign(b,"undefined")});c(b)},!!f);break;case t.CallExpression:b=b||this.nextId();a.filter?(h=k.filter(a.callee.name),l=[],q(a.arguments,function(a){var b=k.nextId();k.recurse(a,b);l.push(b)}),m=h+"("+l.join(",")+")",k.assign(b,m),c(b)):(h=k.nextId(),g={},l=[],k.recurse(a.callee,h,g,function(){k.if_(k.notNull(h),function(){k.addEnsureSafeFunction(h);q(a.arguments,function(a){k.recurse(a,k.nextId(),void 0,function(a){l.push(k.ensureSafeObject(a))})});
g.name?(k.state.expensiveChecks||k.addEnsureSafeObject(g.context),m=k.member(g.context,g.name,g.computed)+"("+l.join(",")+")"):m=h+"("+l.join(",")+")";m=k.ensureSafeObject(m);k.assign(b,m)},function(){k.assign(b,"undefined")});c(b)}));break;case t.AssignmentExpression:h=this.nextId();g={};this.recurse(a.left,void 0,g,function(){k.if_(k.notNull(g.context),function(){k.recurse(a.right,h);k.addEnsureSafeObject(k.member(g.context,g.name,g.computed));k.addEnsureSafeAssignContext(g.context);m=k.member(g.context,
g.name,g.computed)+a.operator+h;k.assign(b,m);c(b||m)})},1);break;case t.ArrayExpression:l=[];q(a.elements,function(a){k.recurse(a,k.nextId(),void 0,function(a){l.push(a)})});m="["+l.join(",")+"]";this.assign(b,m);c(m);break;case t.ObjectExpression:l=[];n=!1;q(a.properties,function(a){a.computed&&(n=!0)});n?(b=b||this.nextId(),this.assign(b,"{}"),q(a.properties,function(a){a.computed?(g=k.nextId(),k.recurse(a.key,g)):g=a.key.type===t.Identifier?a.key.name:""+a.key.value;h=k.nextId();k.recurse(a.value,
h);k.assign(k.member(b,g,a.computed),h)})):(q(a.properties,function(b){k.recurse(b.value,a.constant?void 0:k.nextId(),void 0,function(a){l.push(k.escape(b.key.type===t.Identifier?b.key.name:""+b.key.value)+":"+a)})}),m="{"+l.join(",")+"}",this.assign(b,m));c(b||m);break;case t.ThisExpression:this.assign(b,"s");c("s");break;case t.LocalsExpression:this.assign(b,"l");c("l");break;case t.NGValueParameter:this.assign(b,"v"),c("v")}},getHasOwnProperty:function(a,b){var d=a+"."+b,c=this.current().own;c.hasOwnProperty(d)||
(c[d]=this.nextId(!1,a+"&&("+this.escape(b)+" in "+a+")"));return c[d]},assign:function(a,b){if(a)return this.current().body.push(a,"=",b,";"),a},filter:function(a){this.state.filters.hasOwnProperty(a)||(this.state.filters[a]=this.nextId(!0));return this.state.filters[a]},ifDefined:function(a,b){return"ifDefined("+a+","+this.escape(b)+")"},plus:function(a,b){return"plus("+a+","+b+")"},return_:function(a){this.current().body.push("return ",a,";")},if_:function(a,b,d){if(!0===a)b();else{var c=this.current().body;
c.push("if(",a,"){");b();c.push("}");d&&(c.push("else{"),d(),c.push("}"))}},not:function(a){return"!("+a+")"},notNull:function(a){return a+"!=null"},nonComputedMember:function(a,b){var d=/[^$_a-zA-Z0-9]/g;return/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(b)?a+"."+b:a+'["'+b.replace(d,this.stringEscapeFn)+'"]'},computedMember:function(a,b){return a+"["+b+"]"},member:function(a,b,d){return d?this.computedMember(a,b):this.nonComputedMember(a,b)},addEnsureSafeObject:function(a){this.current().body.push(this.ensureSafeObject(a),
";")},addEnsureSafeMemberName:function(a){this.current().body.push(this.ensureSafeMemberName(a),";")},addEnsureSafeFunction:function(a){this.current().body.push(this.ensureSafeFunction(a),";")},addEnsureSafeAssignContext:function(a){this.current().body.push(this.ensureSafeAssignContext(a),";")},ensureSafeObject:function(a){return"ensureSafeObject("+a+",text)"},ensureSafeMemberName:function(a){return"ensureSafeMemberName("+a+",text)"},ensureSafeFunction:function(a){return"ensureSafeFunction("+a+",text)"},
getStringValue:function(a){this.assign(a,"getStringValue("+a+")")},ensureSafeAssignContext:function(a){return"ensureSafeAssignContext("+a+",text)"},lazyRecurse:function(a,b,d,c,f,e){var g=this;return function(){g.recurse(a,b,d,c,f,e)}},lazyAssign:function(a,b){var d=this;return function(){d.assign(a,b)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)},escape:function(a){if(D(a))return"'"+a.replace(this.stringEscapeRegex,this.stringEscapeFn)+
"'";if(ba(a))return a.toString();if(!0===a)return"true";if(!1===a)return"false";if(null===a)return"null";if("undefined"===typeof a)return"undefined";throw ea("esc");},nextId:function(a,b){var d="v"+this.state.nextId++;a||this.current().vars.push(d+(b?"="+b:""));return d},current:function(){return this.state[this.state.computing]}};Hd.prototype={compile:function(a,b){var d=this,c=this.astBuilder.ast(a);this.expression=a;this.expensiveChecks=b;X(c,d.$filter);var f,e;if(f=Ed(c))e=this.recurse(f);f=Cd(c.body);
var g;f&&(g=[],q(f,function(a,b){var c=d.recurse(a);a.input=c;g.push(c);a.watchId=b}));var h=[];q(c.body,function(a){h.push(d.recurse(a.expression))});f=0===c.body.length?w:1===c.body.length?h[0]:function(a,b){var c;q(h,function(d){c=d(a,b)});return c};e&&(f.assign=function(a,b,c){return e(a,c,b)});g&&(f.inputs=g);f.literal=Fd(c);f.constant=c.constant;return f},recurse:function(a,b,d){var c,f,e=this,g;if(a.input)return this.inputs(a.input,a.watchId);switch(a.type){case t.Literal:return this.value(a.value,
b);case t.UnaryExpression:return f=this.recurse(a.argument),this["unary"+a.operator](f,b);case t.BinaryExpression:return c=this.recurse(a.left),f=this.recurse(a.right),this["binary"+a.operator](c,f,b);case t.LogicalExpression:return c=this.recurse(a.left),f=this.recurse(a.right),this["binary"+a.operator](c,f,b);case t.ConditionalExpression:return this["ternary?:"](this.recurse(a.test),this.recurse(a.alternate),this.recurse(a.consequent),b);case t.Identifier:return Ua(a.name,e.expression),e.identifier(a.name,
e.expensiveChecks||Lb(a.name),b,d,e.expression);case t.MemberExpression:return c=this.recurse(a.object,!1,!!d),a.computed||(Ua(a.property.name,e.expression),f=a.property.name),a.computed&&(f=this.recurse(a.property)),a.computed?this.computedMember(c,f,b,d,e.expression):this.nonComputedMember(c,f,e.expensiveChecks,b,d,e.expression);case t.CallExpression:return g=[],q(a.arguments,function(a){g.push(e.recurse(a))}),a.filter&&(f=this.$filter(a.callee.name)),a.filter||(f=this.recurse(a.callee,!0)),a.filter?
function(a,c,d,e){for(var n=[],r=0;r<g.length;++r)n.push(g[r](a,c,d,e));a=f.apply(void 0,n,e);return b?{context:void 0,name:void 0,value:a}:a}:function(a,c,d,m){var n=f(a,c,d,m),r;if(null!=n.value){Ea(n.context,e.expression);td(n.value,e.expression);r=[];for(var s=0;s<g.length;++s)r.push(Ea(g[s](a,c,d,m),e.expression));r=Ea(n.value.apply(n.context,r),e.expression)}return b?{value:r}:r};case t.AssignmentExpression:return c=this.recurse(a.left,!0,1),f=this.recurse(a.right),function(a,d,g,m){var n=c(a,
d,g,m);a=f(a,d,g,m);Ea(n.value,e.expression);Jb(n.context);n.context[n.name]=a;return b?{value:a}:a};case t.ArrayExpression:return g=[],q(a.elements,function(a){g.push(e.recurse(a))}),function(a,c,d,e){for(var f=[],r=0;r<g.length;++r)f.push(g[r](a,c,d,e));return b?{value:f}:f};case t.ObjectExpression:return g=[],q(a.properties,function(a){a.computed?g.push({key:e.recurse(a.key),computed:!0,value:e.recurse(a.value)}):g.push({key:a.key.type===t.Identifier?a.key.name:""+a.key.value,computed:!1,value:e.recurse(a.value)})}),
function(a,c,d,e){for(var f={},r=0;r<g.length;++r)g[r].computed?f[g[r].key(a,c,d,e)]=g[r].value(a,c,d,e):f[g[r].key]=g[r].value(a,c,d,e);return b?{value:f}:f};case t.ThisExpression:return function(a){return b?{value:a}:a};case t.LocalsExpression:return function(a,c){return b?{value:c}:c};case t.NGValueParameter:return function(a,c,d){return b?{value:d}:d}}},"unary+":function(a,b){return function(d,c,f,e){d=a(d,c,f,e);d=x(d)?+d:0;return b?{value:d}:d}},"unary-":function(a,b){return function(d,c,f,
e){d=a(d,c,f,e);d=x(d)?-d:0;return b?{value:d}:d}},"unary!":function(a,b){return function(d,c,f,e){d=!a(d,c,f,e);return b?{value:d}:d}},"binary+":function(a,b,d){return function(c,f,e,g){var h=a(c,f,e,g);c=b(c,f,e,g);h=Bd(h,c);return d?{value:h}:h}},"binary-":function(a,b,d){return function(c,f,e,g){var h=a(c,f,e,g);c=b(c,f,e,g);h=(x(h)?h:0)-(x(c)?c:0);return d?{value:h}:h}},"binary*":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)*b(c,f,e,g);return d?{value:c}:c}},"binary/":function(a,b,d){return function(c,
f,e,g){c=a(c,f,e,g)/b(c,f,e,g);return d?{value:c}:c}},"binary%":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)%b(c,f,e,g);return d?{value:c}:c}},"binary===":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)===b(c,f,e,g);return d?{value:c}:c}},"binary!==":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)!==b(c,f,e,g);return d?{value:c}:c}},"binary==":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)==b(c,f,e,g);return d?{value:c}:c}},"binary!=":function(a,b,d){return function(c,
f,e,g){c=a(c,f,e,g)!=b(c,f,e,g);return d?{value:c}:c}},"binary<":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)<b(c,f,e,g);return d?{value:c}:c}},"binary>":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)>b(c,f,e,g);return d?{value:c}:c}},"binary<=":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)<=b(c,f,e,g);return d?{value:c}:c}},"binary>=":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)>=b(c,f,e,g);return d?{value:c}:c}},"binary&&":function(a,b,d){return function(c,f,e,g){c=
a(c,f,e,g)&&b(c,f,e,g);return d?{value:c}:c}},"binary||":function(a,b,d){return function(c,f,e,g){c=a(c,f,e,g)||b(c,f,e,g);return d?{value:c}:c}},"ternary?:":function(a,b,d,c){return function(f,e,g,h){f=a(f,e,g,h)?b(f,e,g,h):d(f,e,g,h);return c?{value:f}:f}},value:function(a,b){return function(){return b?{context:void 0,name:void 0,value:a}:a}},identifier:function(a,b,d,c,f){return function(e,g,h,k){e=g&&a in g?g:e;c&&1!==c&&e&&!e[a]&&(e[a]={});g=e?e[a]:void 0;b&&Ea(g,f);return d?{context:e,name:a,
value:g}:g}},computedMember:function(a,b,d,c,f){return function(e,g,h,k){var l=a(e,g,h,k),m,n;null!=l&&(m=b(e,g,h,k),m+="",Ua(m,f),c&&1!==c&&(Jb(l),l&&!l[m]&&(l[m]={})),n=l[m],Ea(n,f));return d?{context:l,name:m,value:n}:n}},nonComputedMember:function(a,b,d,c,f,e){return function(g,h,k,l){g=a(g,h,k,l);f&&1!==f&&(Jb(g),g&&!g[b]&&(g[b]={}));h=null!=g?g[b]:void 0;(d||Lb(b))&&Ea(h,e);return c?{context:g,name:b,value:h}:h}},inputs:function(a,b){return function(d,c,f,e){return e?e[b]:a(d,c,f)}}};var nc=
function(a,b,d){this.lexer=a;this.$filter=b;this.options=d;this.ast=new t(a,d);this.astCompiler=d.csp?new Hd(this.ast,b):new Gd(this.ast,b)};nc.prototype={constructor:nc,parse:function(a){return this.astCompiler.compile(a,this.options.expensiveChecks)}};var Fa=G("$sce"),ga={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Hg=G("$compile"),aa=y.document.createElement("a"),Ld=ta(y.location.href);Md.$inject=["$document"];Rc.$inject=["$provide"];var Td=22,Sd=".",pc="0";Nd.$inject=["$locale"];
Pd.$inject=["$locale"];var Sg={yyyy:U("FullYear",4,0,!1,!0),yy:U("FullYear",2,0,!0,!0),y:U("FullYear",1,0,!1,!0),MMMM:nb("Month"),MMM:nb("Month",!0),MM:U("Month",2,1),M:U("Month",1,1),LLLL:nb("Month",!1,!0),dd:U("Date",2),d:U("Date",1),HH:U("Hours",2),H:U("Hours",1),hh:U("Hours",2,-12),h:U("Hours",1,-12),mm:U("Minutes",2),m:U("Minutes",1),ss:U("Seconds",2),s:U("Seconds",1),sss:U("Milliseconds",3),EEEE:nb("Day"),EEE:nb("Day",!0),a:function(a,b){return 12>a.getHours()?b.AMPMS[0]:b.AMPMS[1]},Z:function(a,
b,d){a=-1*d;return a=(0<=a?"+":"")+(Mb(Math[0<a?"floor":"ceil"](a/60),2)+Mb(Math.abs(a%60),2))},ww:Vd(2),w:Vd(1),G:qc,GG:qc,GGG:qc,GGGG:function(a,b){return 0>=a.getFullYear()?b.ERANAMES[0]:b.ERANAMES[1]}},Rg=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,Qg=/^-?\d+$/;Od.$inject=["$locale"];var Lg=ha(Q),Mg=ha(wb);Qd.$inject=["$parse"];var Ce=ha({restrict:"E",compile:function(a,b){if(!b.href&&!b.xlinkHref)return function(a,b){if("a"===b[0].nodeName.toLowerCase()){var f=
"[object SVGAnimatedString]"===ma.call(b.prop("href"))?"xlink:href":"href";b.on("click",function(a){b.attr(f)||a.preventDefault()})}}}}),xb={};q(Gb,function(a,b){function d(a,d,f){a.$watch(f[c],function(a){f.$set(b,!!a)})}if("multiple"!==a){var c=Da("ng-"+b),f=d;"checked"===a&&(f=function(a,b,f){f.ngModel!==f[c]&&d(a,b,f)});xb[c]=function(){return{restrict:"A",priority:100,link:f}}}});q(gd,function(a,b){xb[b]=function(){return{priority:100,link:function(a,c,f){if("ngPattern"===b&&"/"===f.ngPattern.charAt(0)&&
(c=f.ngPattern.match(Vg))){f.$set("ngPattern",new RegExp(c[1],c[2]));return}a.$watch(f[b],function(a){f.$set(b,a)})}}}});q(["src","srcset","href"],function(a){var b=Da("ng-"+a);xb[b]=function(){return{priority:99,link:function(d,c,f){var e=a,g=a;"href"===a&&"[object SVGAnimatedString]"===ma.call(c.prop("href"))&&(g="xlinkHref",f.$attr[g]="xlink:href",e=null);f.$observe(b,function(b){b?(f.$set(g,b),Ia&&e&&c.prop(e,f[g])):"href"===a&&f.$set(g,null)})}}}});var Nb={$addControl:w,$$renameControl:function(a,
b){a.$name=b},$removeControl:w,$setValidity:w,$setDirty:w,$setPristine:w,$setSubmitted:w};Wd.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var ee=function(a){return["$timeout","$parse",function(b,d){function c(a){return""===a?d('this[""]').assign:d(a).assign||w}return{name:"form",restrict:a?"EAC":"E",require:["form","^^?form"],controller:Wd,compile:function(d,e){d.addClass(Wa).addClass(rb);var g=e.name?"name":a&&e.ngForm?"ngForm":!1;return{pre:function(a,d,e,f){var n=f[0];if(!("action"in
e)){var r=function(b){a.$apply(function(){n.$commitViewValue();n.$setSubmitted()});b.preventDefault()};d[0].addEventListener("submit",r,!1);d.on("$destroy",function(){b(function(){d[0].removeEventListener("submit",r,!1)},0,!1)})}(f[1]||n.$$parentForm).$addControl(n);var s=g?c(n.$name):w;g&&(s(a,n),e.$observe(g,function(b){n.$name!==b&&(s(a,void 0),n.$$parentForm.$$renameControl(n,b),s=c(n.$name),s(a,n))}));d.on("$destroy",function(){n.$$parentForm.$removeControl(n);s(a,void 0);R(n,Nb)})}}}}}]},De=
ee(),Pe=ee(!0),Tg=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,ch=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,dh=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,Ug=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,fe=/^(\d{4,})-(\d{2})-(\d{2})$/,ge=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,
wc=/^(\d{4,})-W(\d\d)$/,he=/^(\d{4,})-(\d\d)$/,ie=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Yd=V();q(["date","datetime-local","month","time","week"],function(a){Yd[a]=!0});var je={text:function(a,b,d,c,f,e){Xa(a,b,d,c,f,e);sc(c)},date:ob("date",fe,Pb(fe,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":ob("datetimelocal",ge,Pb(ge,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:ob("time",ie,Pb(ie,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:ob("week",wc,function(a,b){if(ja(a))return a;
if(D(a)){wc.lastIndex=0;var d=wc.exec(a);if(d){var c=+d[1],f=+d[2],e=d=0,g=0,h=0,k=Ud(c),f=7*(f-1);b&&(d=b.getHours(),e=b.getMinutes(),g=b.getSeconds(),h=b.getMilliseconds());return new Date(c,0,k.getDate()+f,d,e,g,h)}}return NaN},"yyyy-Www"),month:ob("month",he,Pb(he,["yyyy","MM"]),"yyyy-MM"),number:function(a,b,d,c,f,e){tc(a,b,d,c);Xa(a,b,d,c,f,e);Zd(c);var g,h;if(x(d.min)||d.ngMin)c.$validators.min=function(a){return c.$isEmpty(a)||z(g)||a>=g},d.$observe("min",function(a){g=qb(a);c.$validate()});
if(x(d.max)||d.ngMax)c.$validators.max=function(a){return c.$isEmpty(a)||z(h)||a<=h},d.$observe("max",function(a){h=qb(a);c.$validate()})},url:function(a,b,d,c,f,e){Xa(a,b,d,c,f,e);sc(c);c.$$parserName="url";c.$validators.url=function(a,b){var d=a||b;return c.$isEmpty(d)||ch.test(d)}},email:function(a,b,d,c,f,e){Xa(a,b,d,c,f,e);sc(c);c.$$parserName="email";c.$validators.email=function(a,b){var d=a||b;return c.$isEmpty(d)||dh.test(d)}},radio:function(a,b,d,c){z(d.name)&&b.attr("name",++sb);b.on("click",
function(a){b[0].checked&&c.$setViewValue(d.value,a&&a.type)});c.$render=function(){b[0].checked=d.value==c.$viewValue};d.$observe("value",c.$render)},range:function(a,b,d,c,f,e){function g(a,c){b.attr(a,d[a]);d.$observe(a,c)}function h(a){n=qb(a);ia(c.$modelValue)||(m?(a=b.val(),n>a&&(a=n,b.val(a)),c.$setViewValue(a)):c.$validate())}function k(a){r=qb(a);ia(c.$modelValue)||(m?(a=b.val(),r<a&&(b.val(r),a=r<n?n:r),c.$setViewValue(a)):c.$validate())}function l(a){s=qb(a);ia(c.$modelValue)||(m&&c.$viewValue!==
b.val()?c.$setViewValue(b.val()):c.$validate())}tc(a,b,d,c);Zd(c);Xa(a,b,d,c,f,e);var m=c.$$hasNativeValidators&&"range"===b[0].type,n=m?0:void 0,r=m?100:void 0,s=m?1:void 0,q=b[0].validity;a=x(d.min);f=x(d.max);e=x(d.step);var u=c.$render;c.$render=m&&x(q.rangeUnderflow)&&x(q.rangeOverflow)?function(){u();c.$setViewValue(b.val())}:u;a&&(c.$validators.min=m?function(){return!0}:function(a,b){return c.$isEmpty(b)||z(n)||b>=n},g("min",h));f&&(c.$validators.max=m?function(){return!0}:function(a,b){return c.$isEmpty(b)||
z(r)||b<=r},g("max",k));e&&(c.$validators.step=m?function(){return!q.stepMismatch}:function(a,b){var d;if(!(d=c.$isEmpty(b)||z(s))){d=n||0;var e=s,f=Number(b);if((f|0)!==f||(d|0)!==d||(e|0)!==e){var g=Math.max(uc(f),uc(d),uc(e)),g=Math.pow(10,g),f=f*g;d*=g;e*=g}d=0===(f-d)%e}return d},g("step",l))},checkbox:function(a,b,d,c,f,e,g,h){var k=$d(h,a,"ngTrueValue",d.ngTrueValue,!0),l=$d(h,a,"ngFalseValue",d.ngFalseValue,!1);b.on("click",function(a){c.$setViewValue(b[0].checked,a&&a.type)});c.$render=function(){b[0].checked=
c.$viewValue};c.$isEmpty=function(a){return!1===a};c.$formatters.push(function(a){return na(a,k)});c.$parsers.push(function(a){return a?k:l})},hidden:w,button:w,submit:w,reset:w,file:w},Lc=["$browser","$sniffer","$filter","$parse",function(a,b,d,c){return{restrict:"E",require:["?ngModel"],link:{pre:function(f,e,g,h){if(h[0]){var k=Q(g.type);"range"!==k||g.hasOwnProperty("ngInputRange")||(k="text");(je[k]||je.text)(f,e,g,h[0],b,a,d,c)}}}}}],eh=/^(true|false|\d+)$/,gf=function(){return{restrict:"A",
priority:100,compile:function(a,b){return eh.test(b.ngValue)?function(a,b,f){f.$set("value",a.$eval(f.ngValue))}:function(a,b,f){a.$watch(f.ngValue,function(a){f.$set("value",a)})}}}},He=["$compile",function(a){return{restrict:"AC",compile:function(b){a.$$addBindingClass(b);return function(b,c,f){a.$$addBindingInfo(c,f.ngBind);c=c[0];b.$watch(f.ngBind,function(a){c.textContent=z(a)?"":a})}}}}],Je=["$interpolate","$compile",function(a,b){return{compile:function(d){b.$$addBindingClass(d);return function(c,
d,e){c=a(d.attr(e.$attr.ngBindTemplate));b.$$addBindingInfo(d,c.expressions);d=d[0];e.$observe("ngBindTemplate",function(a){d.textContent=z(a)?"":a})}}}}],Ie=["$sce","$parse","$compile",function(a,b,d){return{restrict:"A",compile:function(c,f){var e=b(f.ngBindHtml),g=b(f.ngBindHtml,function(b){return a.valueOf(b)});d.$$addBindingClass(c);return function(b,c,f){d.$$addBindingInfo(c,f.ngBindHtml);b.$watch(g,function(){var d=e(b);c.html(a.getTrustedHtml(d)||"")})}}}}],ff=ha({restrict:"A",require:"ngModel",
link:function(a,b,d,c){c.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),Ke=vc("",!0),Me=vc("Odd",0),Le=vc("Even",1),Ne=Va({compile:function(a,b){b.$set("ngCloak",void 0);a.removeClass("ng-cloak")}}),Oe=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Qc={},fh={blur:!0,focus:!0};q("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var b=Da("ng-"+a);
Qc[b]=["$parse","$rootScope",function(d,c){return{restrict:"A",compile:function(f,e){var g=d(e[b],null,!0);return function(b,d){d.on(a,function(d){var e=function(){g(b,{$event:d})};fh[a]&&c.$$phase?b.$evalAsync(e):b.$apply(e)})}}}}]});var Re=["$animate","$compile",function(a,b){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(d,c,f,e,g){var h,k,l;d.$watch(f.ngIf,function(d){d?k||g(function(d,e){k=e;d[d.length++]=b.$$createComment("end ngIf",
f.ngIf);h={clone:d};a.enter(d,c.parent(),c)}):(l&&(l.remove(),l=null),k&&(k.$destroy(),k=null),h&&(l=vb(h.clone),a.leave(l).done(function(a){!1!==a&&(l=null)}),h=null))})}}}],Se=["$templateRequest","$anchorScroll","$animate",function(a,b,d){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:$.noop,compile:function(c,f){var e=f.ngInclude||f.src,g=f.onload||"",h=f.autoscroll;return function(c,f,m,n,r){var q=0,t,u,p,z=function(){u&&(u.remove(),u=null);t&&(t.$destroy(),t=null);
p&&(d.leave(p).done(function(a){!1!==a&&(u=null)}),u=p,p=null)};c.$watch(e,function(e){var m=function(a){!1===a||!x(h)||h&&!c.$eval(h)||b()},u=++q;e?(a(e,!0).then(function(a){if(!c.$$destroyed&&u===q){var b=c.$new();n.template=a;a=r(b,function(a){z();d.enter(a,null,f).done(m)});t=b;p=a;t.$emit("$includeContentLoaded",e);c.$eval(g)}},function(){c.$$destroyed||u!==q||(z(),c.$emit("$includeContentError",e))}),c.$emit("$includeContentRequested",e)):(z(),n.template=null)})}}}}],jf=["$compile",function(a){return{restrict:"ECA",
priority:-400,require:"ngInclude",link:function(b,d,c,f){ma.call(d[0]).match(/SVG/)?(d.empty(),a(Tc(f.template,y.document).childNodes)(b,function(a){d.append(a)},{futureParentElement:d})):(d.html(f.template),a(d.contents())(b))}}}],Te=Va({priority:450,compile:function(){return{pre:function(a,b,d){a.$eval(d.ngInit)}}}}),ef=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(a,b,d,c){var f=b.attr(d.$attr.ngList)||", ",e="false"!==d.ngTrim,g=e?Y(f):f;c.$parsers.push(function(a){if(!z(a)){var b=
[];a&&q(a.split(g),function(a){a&&b.push(e?Y(a):a)});return b}});c.$formatters.push(function(a){if(I(a))return a.join(f)});c.$isEmpty=function(a){return!a||!a.length}}}},rb="ng-valid",ae="ng-invalid",Wa="ng-pristine",Ob="ng-dirty",ce="ng-pending",pb=G("ngModel"),gh=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(a,b,d,c,f,e,g,h,k,l){this.$modelValue=this.$viewValue=Number.NaN;this.$$rawModelValue=void 0;this.$validators={};
this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success={};this.$pending=void 0;this.$name=l(d.name||"",!1)(a);this.$$parentForm=Nb;var m=f(d.ngModel),n=m.assign,r=m,s=n,t=null,u,p=this;this.$$setOptions=function(a){if((p.$options=a)&&a.getterSetter){var b=f(d.ngModel+"()"),e=f(d.ngModel+"($$$p)");r=function(a){var c=m(a);C(c)&&(c=b(a));
return c};s=function(a,b){C(m(a))?e(a,{$$$p:b}):n(a,b)}}else if(!m.assign)throw pb("nonassign",d.ngModel,ya(c));};this.$render=w;this.$isEmpty=function(a){return z(a)||""===a||null===a||a!==a};this.$$updateEmptyClasses=function(a){p.$isEmpty(a)?(e.removeClass(c,"ng-not-empty"),e.addClass(c,"ng-empty")):(e.removeClass(c,"ng-empty"),e.addClass(c,"ng-not-empty"))};var y=0;Xd({ctrl:this,$element:c,set:function(a,b){a[b]=!0},unset:function(a,b){delete a[b]},$animate:e});this.$setPristine=function(){p.$dirty=
!1;p.$pristine=!0;e.removeClass(c,Ob);e.addClass(c,Wa)};this.$setDirty=function(){p.$dirty=!0;p.$pristine=!1;e.removeClass(c,Wa);e.addClass(c,Ob);p.$$parentForm.$setDirty()};this.$setUntouched=function(){p.$touched=!1;p.$untouched=!0;e.setClass(c,"ng-untouched","ng-touched")};this.$setTouched=function(){p.$touched=!0;p.$untouched=!1;e.setClass(c,"ng-touched","ng-untouched")};this.$rollbackViewValue=function(){g.cancel(t);p.$viewValue=p.$$lastCommittedViewValue;p.$render()};this.$validate=function(){if(!ia(p.$modelValue)){var a=
p.$$rawModelValue,b=p.$valid,c=p.$modelValue,d=p.$options&&p.$options.allowInvalid;p.$$runValidators(a,p.$$lastCommittedViewValue,function(e){d||b===e||(p.$modelValue=e?a:void 0,p.$modelValue!==c&&p.$$writeModelToScope())})}};this.$$runValidators=function(a,b,c){function d(){var c=!0;q(p.$validators,function(d,e){var g=d(a,b);c=c&&g;f(e,g)});return c?!0:(q(p.$asyncValidators,function(a,b){f(b,null)}),!1)}function e(){var c=[],d=!0;q(p.$asyncValidators,function(e,g){var h=e(a,b);if(!h||!C(h.then))throw pb("nopromise",
h);f(g,void 0);c.push(h.then(function(){f(g,!0)},function(){d=!1;f(g,!1)}))});c.length?k.all(c).then(function(){g(d)},w):g(!0)}function f(a,b){h===y&&p.$setValidity(a,b)}function g(a){h===y&&c(a)}y++;var h=y;(function(){var a=p.$$parserName||"parse";if(z(u))f(a,null);else return u||(q(p.$validators,function(a,b){f(b,null)}),q(p.$asyncValidators,function(a,b){f(b,null)})),f(a,u),u;return!0})()?d()?e():g(!1):g(!1)};this.$commitViewValue=function(){var a=p.$viewValue;g.cancel(t);if(p.$$lastCommittedViewValue!==
a||""===a&&p.$$hasNativeValidators)p.$$updateEmptyClasses(a),p.$$lastCommittedViewValue=a,p.$pristine&&this.$setDirty(),this.$$parseAndValidate()};this.$$parseAndValidate=function(){var b=p.$$lastCommittedViewValue;if(u=z(b)?void 0:!0)for(var c=0;c<p.$parsers.length;c++)if(b=p.$parsers[c](b),z(b)){u=!1;break}ia(p.$modelValue)&&(p.$modelValue=r(a));var d=p.$modelValue,e=p.$options&&p.$options.allowInvalid;p.$$rawModelValue=b;e&&(p.$modelValue=b,p.$modelValue!==d&&p.$$writeModelToScope());p.$$runValidators(b,
p.$$lastCommittedViewValue,function(a){e||(p.$modelValue=a?b:void 0,p.$modelValue!==d&&p.$$writeModelToScope())})};this.$$writeModelToScope=function(){s(a,p.$modelValue);q(p.$viewChangeListeners,function(a){try{a()}catch(c){b(c)}})};this.$setViewValue=function(a,b){p.$viewValue=a;p.$options&&!p.$options.updateOnDefault||p.$$debounceViewValueCommit(b)};this.$$debounceViewValueCommit=function(b){var c=0,d=p.$options;d&&x(d.debounce)&&(d=d.debounce,ba(d)?c=d:ba(d[b])?c=d[b]:ba(d["default"])&&(c=d["default"]));
g.cancel(t);c?t=g(function(){p.$commitViewValue()},c):h.$$phase?p.$commitViewValue():a.$apply(function(){p.$commitViewValue()})};a.$watch(function(){var b=r(a);if(b!==p.$modelValue&&(p.$modelValue===p.$modelValue||b===b)){p.$modelValue=p.$$rawModelValue=b;u=void 0;for(var c=p.$formatters,d=c.length,e=b;d--;)e=c[d](e);p.$viewValue!==e&&(p.$$updateEmptyClasses(e),p.$viewValue=p.$$lastCommittedViewValue=e,p.$render(),p.$$runValidators(p.$modelValue,p.$viewValue,w))}return b})}],df=["$rootScope",function(a){return{restrict:"A",
require:["ngModel","^?form","^?ngModelOptions"],controller:gh,priority:1,compile:function(b){b.addClass(Wa).addClass("ng-untouched").addClass(rb);return{pre:function(a,b,f,e){var g=e[0];b=e[1]||g.$$parentForm;g.$$setOptions(e[2]&&e[2].$options);b.$addControl(g);f.$observe("name",function(a){g.$name!==a&&g.$$parentForm.$$renameControl(g,a)});a.$on("$destroy",function(){g.$$parentForm.$removeControl(g)})},post:function(b,c,f,e){var g=e[0];if(g.$options&&g.$options.updateOn)c.on(g.$options.updateOn,
function(a){g.$$debounceViewValueCommit(a&&a.type)});c.on("blur",function(){g.$touched||(a.$$phase?b.$evalAsync(g.$setTouched):b.$apply(g.$setTouched))})}}}}}],hh=/(\s+|^)default(\s+|$)/,hf=function(){return{restrict:"A",controller:["$scope","$attrs",function(a,b){var d=this;this.$options=sa(a.$eval(b.ngModelOptions));x(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Y(this.$options.updateOn.replace(hh,function(){d.$options.updateOnDefault=!0;return" "}))):this.$options.updateOnDefault=
!0}]}},Ue=Va({terminal:!0,priority:1E3}),ih=G("ngOptions"),jh=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,bf=["$compile","$document","$parse",function(a,b,d){function c(a,b,c){function e(a,b,c,d,f){this.selectValue=a;this.viewValue=b;this.label=c;this.group=d;this.disabled=f}function f(a){var b;if(!q&&la(a))b=a;else{b=
[];for(var c in a)a.hasOwnProperty(c)&&"$"!==c.charAt(0)&&b.push(c)}return b}var n=a.match(jh);if(!n)throw ih("iexp",a,ya(b));var r=n[5]||n[7],q=n[6];a=/ as /.test(n[0])&&n[1];var t=n[9];b=d(n[2]?n[1]:r);var u=a&&d(a)||b,p=t&&d(t),x=t?function(a,b){return p(c,b)}:function(a){return Aa(a)},A=function(a,b){return x(a,C(a,b))},v=d(n[2]||n[1]),z=d(n[3]||""),L=d(n[4]||""),w=d(n[8]),y={},C=q?function(a,b){y[q]=b;y[r]=a;return y}:function(a){y[r]=a;return y};return{trackBy:t,getTrackByValue:A,getWatchables:d(w,
function(a){var b=[];a=a||[];for(var d=f(a),e=d.length,g=0;g<e;g++){var h=a===d?g:d[g],l=a[h],h=C(l,h),l=x(l,h);b.push(l);if(n[2]||n[1])l=v(c,h),b.push(l);n[4]&&(h=L(c,h),b.push(h))}return b}),getOptions:function(){for(var a=[],b={},d=w(c)||[],g=f(d),h=g.length,n=0;n<h;n++){var p=d===g?n:g[n],r=C(d[p],p),q=u(c,r),p=x(q,r),s=v(c,r),y=z(c,r),r=L(c,r),q=new e(p,q,s,y,r);a.push(q);b[p]=q}return{items:a,selectValueMap:b,getOptionFromViewValue:function(a){return b[A(a)]},getViewValueFromOption:function(a){return t?
sa(a.viewValue):a.viewValue}}}}}var f=y.document.createElement("option"),e=y.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(a,b,c,d){d[0].registerOption=w},post:function(d,h,k,l){function m(a,b){a.element=b;b.disabled=a.disabled;a.label!==b.label&&(b.label=a.label,b.textContent=a.label);b.value=a.selectValue}function n(){var a=w&&r.readValue();if(w)for(var b=w.items.length-1;0<=b;b--){var c=w.items[b];x(c.group)?Fb(c.element.parentNode):
Fb(c.element)}w=C.getOptions();var d={};A&&h.prepend(u);w.items.forEach(function(a){var b;if(x(a.group)){b=d[a.group];b||(b=e.cloneNode(!1),D.appendChild(b),b.label=null===a.group?"null":a.group,d[a.group]=b);var c=f.cloneNode(!1)}else b=D,c=f.cloneNode(!1);b.appendChild(c);m(a,c)});h[0].appendChild(D);s.$render();s.$isEmpty(a)||(b=r.readValue(),(C.trackBy||t?na(a,b):a===b)||(s.$setViewValue(b),s.$render()))}var r=l[0],s=l[1],t=k.multiple,u;l=0;for(var p=h.children(),z=p.length;l<z;l++)if(""===p[l].value){u=
p.eq(l);break}var A=!!u,v=!1,y=F(f.cloneNode(!1));y.val("?");var w,C=c(k.ngOptions,h,d),D=b[0].createDocumentFragment(),E=function(){A?v&&u.removeAttr("selected"):u.remove()};t?(s.$isEmpty=function(a){return!a||0===a.length},r.writeValue=function(a){w.items.forEach(function(a){a.element.selected=!1});a&&a.forEach(function(a){if(a=w.getOptionFromViewValue(a))a.element.selected=!0})},r.readValue=function(){var a=h.val()||[],b=[];q(a,function(a){(a=w.selectValueMap[a])&&!a.disabled&&b.push(w.getViewValueFromOption(a))});
return b},C.trackBy&&d.$watchCollection(function(){if(I(s.$viewValue))return s.$viewValue.map(function(a){return C.getTrackByValue(a)})},function(){s.$render()})):(r.writeValue=function(a){var b=w.selectValueMap[h.val()],c=w.getOptionFromViewValue(a);b&&b.element.removeAttribute("selected");c?(h[0].value!==c.selectValue&&(y.remove(),E(),h[0].value=c.selectValue,c.element.selected=!0),c.element.setAttribute("selected","selected")):null===a||A?(y.remove(),A||h.prepend(u),h.val(""),v&&(u.prop("selected",
!0),u.attr("selected",!0))):(E(),h.prepend(y),h.val("?"),y.prop("selected",!0),y.attr("selected",!0))},r.readValue=function(){var a=w.selectValueMap[h.val()];return a&&!a.disabled?(E(),y.remove(),w.getViewValueFromOption(a)):null},C.trackBy&&d.$watch(function(){return C.getTrackByValue(s.$viewValue)},function(){s.$render()}));A?(u.remove(),a(u)(d),8===u[0].nodeType?(v=!1,r.registerOption=function(a,b){""===b.val()&&(v=!0,u=b,u.removeClass("ng-scope"),s.$render(),b.on("$destroy",function(){u=void 0;
v=!1}))}):(u.removeClass("ng-scope"),v=!0)):u=F(f.cloneNode(!1));h.empty();n();d.$watchCollection(C.getWatchables,n)}}}}],Ve=["$locale","$interpolate","$log",function(a,b,d){var c=/{}/g,f=/^when(Minus)?(.+)$/;return{link:function(e,g,h){function k(a){g.text(a||"")}var l=h.count,m=h.$attr.when&&g.attr(h.$attr.when),n=h.offset||0,r=e.$eval(m)||{},s={},t=b.startSymbol(),u=b.endSymbol(),p=t+l+"-"+n+u,x=$.noop,A;q(h,function(a,b){var c=f.exec(b);c&&(c=(c[1]?"-":"")+Q(c[2]),r[c]=g.attr(h.$attr[b]))});q(r,
function(a,d){s[d]=b(a.replace(c,p))});e.$watch(l,function(b){var c=parseFloat(b),f=ia(c);f||c in r||(c=a.pluralCat(c-n));c===A||f&&ia(A)||(x(),f=s[c],z(f)?(null!=b&&d.debug("ngPluralize: no rule defined for '"+c+"' in "+m),x=w,k()):x=e.$watch(f,k),A=c)})}}}],We=["$parse","$animate","$compile",function(a,b,d){var c=G("ngRepeat"),f=function(a,b,c,d,f,m,n){a[c]=d;f&&(a[f]=m);a.$index=b;a.$first=0===b;a.$last=b===n-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(b&1))};return{restrict:"A",multiElement:!0,
transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,compile:function(e,g){var h=g.ngRepeat,k=d.$$createComment("end ngRepeat",h),l=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!l)throw c("iexp",h);var m=l[1],n=l[2],r=l[3],s=l[4],l=m.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);if(!l)throw c("iidexp",m);var t=l[3]||l[1],u=l[2];if(r&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(r)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(r)))throw c("badident",
r);var p,x,A,v,w={$id:Aa};s?p=a(s):(A=function(a,b){return Aa(b)},v=function(a){return a});return function(a,d,e,g,l){p&&(x=function(b,c,d){u&&(w[u]=b);w[t]=c;w.$index=d;return p(a,w)});var m=V();a.$watchCollection(n,function(e){var g,n,p=d[0],s,w=V(),z,y,C,D,F,E,G;r&&(a[r]=e);if(la(e))F=e,n=x||A;else for(G in n=x||v,F=[],e)ua.call(e,G)&&"$"!==G.charAt(0)&&F.push(G);z=F.length;G=Array(z);for(g=0;g<z;g++)if(y=e===F?g:F[g],C=e[y],D=n(y,C,g),m[D])E=m[D],delete m[D],w[D]=E,G[g]=E;else{if(w[D])throw q(G,
function(a){a&&a.scope&&(m[a.id]=a)}),c("dupes",h,D,C);G[g]={id:D,scope:void 0,clone:void 0};w[D]=!0}for(s in m){E=m[s];D=vb(E.clone);b.leave(D);if(D[0].parentNode)for(g=0,n=D.length;g<n;g++)D[g].$$NG_REMOVED=!0;E.scope.$destroy()}for(g=0;g<z;g++)if(y=e===F?g:F[g],C=e[y],E=G[g],E.scope){s=p;do s=s.nextSibling;while(s&&s.$$NG_REMOVED);E.clone[0]!==s&&b.move(vb(E.clone),null,p);p=E.clone[E.clone.length-1];f(E.scope,g,t,C,u,y,z)}else l(function(a,c){E.scope=c;var d=k.cloneNode(!1);a[a.length++]=d;b.enter(a,
null,p);p=d;E.clone=a;w[E.id]=E;f(E.scope,g,t,C,u,y,z)});m=w})}}}}],Xe=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngShow,function(b){a[b?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Qe=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngHide,function(b){a[b?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],Ye=Va(function(a,b,d){a.$watch(d.ngStyle,function(a,
d){d&&a!==d&&q(d,function(a,c){b.css(c,"")});a&&b.css(a)},!0)}),Ze=["$animate","$compile",function(a,b){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(d,c,f,e){var g=[],h=[],k=[],l=[],m=function(a,b){return function(c){!1!==c&&a.splice(b,1)}};d.$watch(f.ngSwitch||f.on,function(c){for(var d,f;k.length;)a.cancel(k.pop());d=0;for(f=l.length;d<f;++d){var t=vb(h[d].clone);l[d].$destroy();(k[d]=a.leave(t)).done(m(k,d))}h.length=0;l.length=0;(g=e.cases["!"+c]||e.cases["?"])&&
q(g,function(c){c.transclude(function(d,e){l.push(e);var f=c.element;d[d.length++]=b.$$createComment("end ngSwitchWhen");h.push({clone:d});a.enter(d,f.parent(),f)})})})}}}],$e=Va({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,b,d,c,f){a=d.ngSwitchWhen.split(d.ngSwitchWhenSeparator).sort().filter(function(a,b,c){return c[b-1]!==a});q(a,function(a){c.cases["!"+a]=c.cases["!"+a]||[];c.cases["!"+a].push({transclude:f,element:b})})}}),af=Va({transclude:"element",
priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,b,d,c,f){c.cases["?"]=c.cases["?"]||[];c.cases["?"].push({transclude:f,element:b})}}),kh=G("ngTransclude"),cf=["$compile",function(a){return{restrict:"EAC",terminal:!0,compile:function(b){var d=a(b.contents());b.empty();return function(a,b,e,g,h){function k(){d(a,function(a){b.append(a)})}if(!h)throw kh("orphan",ya(b));e.ngTransclude===e.$attr.ngTransclude&&(e.ngTransclude="");e=e.ngTransclude||e.ngTranscludeSlot;h(function(a,c){a.length?
b.append(a):(k(),c.$destroy())},null,e);e&&!h.isSlotFilled(e)&&k()}}}}],Ee=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(b,d){"text/ng-template"===d.type&&a.put(d.id,b[0].text)}}}],lh={$setViewValue:w,$render:w},mh=["$element","$scope",function(a,b){var d=this,c=new Sa;d.ngModelCtrl=lh;d.unknownOption=F(y.document.createElement("option"));d.renderUnknownOption=function(b){b="? "+Aa(b)+" ?";d.unknownOption.val(b);a.prepend(d.unknownOption);a.val(b)};b.$on("$destroy",
function(){d.renderUnknownOption=w});d.removeUnknownOption=function(){d.unknownOption.parent()&&d.unknownOption.remove()};d.readValue=function(){d.removeUnknownOption();return a.val()};d.writeValue=function(b){d.hasOption(b)?(d.removeUnknownOption(),a.val(b),""===b&&d.emptyOption.prop("selected",!0)):null==b&&d.emptyOption?(d.removeUnknownOption(),a.val("")):d.renderUnknownOption(b)};d.addOption=function(a,b){if(8!==b[0].nodeType){Ra(a,'"option value"');""===a&&(d.emptyOption=b);var g=c.get(a)||0;
c.put(a,g+1);d.ngModelCtrl.$render();b[0].hasAttribute("selected")&&(b[0].selected=!0)}};d.removeOption=function(a){var b=c.get(a);b&&(1===b?(c.remove(a),""===a&&(d.emptyOption=void 0)):c.put(a,b-1))};d.hasOption=function(a){return!!c.get(a)};d.registerOption=function(a,b,c,h,k){if(h){var l;c.$observe("value",function(a){x(l)&&d.removeOption(l);l=a;d.addOption(a,b)})}else k?a.$watch(k,function(a,f){c.$set("value",a);f!==a&&d.removeOption(f);d.addOption(a,b)}):d.addOption(c.value,b);b.on("$destroy",
function(){d.removeOption(c.value);d.ngModelCtrl.$render()})}}],Fe=function(){return{restrict:"E",require:["select","?ngModel"],controller:mh,priority:1,link:{pre:function(a,b,d,c){var f=c[1];if(f){var e=c[0];e.ngModelCtrl=f;b.on("change",function(){a.$apply(function(){f.$setViewValue(e.readValue())})});if(d.multiple){e.readValue=function(){var a=[];q(b.find("option"),function(b){b.selected&&a.push(b.value)});return a};e.writeValue=function(a){var c=new Sa(a);q(b.find("option"),function(a){a.selected=
x(c.get(a.value))})};var g,h=NaN;a.$watch(function(){h!==f.$viewValue||na(g,f.$viewValue)||(g=ka(f.$viewValue),f.$render());h=f.$viewValue});f.$isEmpty=function(a){return!a||0===a.length}}}},post:function(a,b,d,c){var f=c[1];if(f){var e=c[0];f.$render=function(){e.writeValue(f.$viewValue)}}}}}},Ge=["$interpolate",function(a){return{restrict:"E",priority:100,compile:function(b,d){var c,f;x(d.ngValue)?c=!0:x(d.value)?c=a(d.value,!0):(f=a(b.text(),!0))||d.$set("value",b.text());return function(a,b,d){var k=
b.parent();(k=k.data("$selectController")||k.parent().data("$selectController"))&&k.registerOption(a,b,d,c,f)}}}}],Nc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){c&&(d.required=!0,c.$validators.required=function(a,b){return!d.required||!c.$isEmpty(b)},d.$observe("required",function(){c.$validate()}))}}},Mc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){if(c){var f,e=d.ngPattern||d.pattern;d.$observe("pattern",function(a){D(a)&&0<a.length&&(a=
new RegExp("^"+a+"$"));if(a&&!a.test)throw G("ngPattern")("noregexp",e,a,ya(b));f=a||void 0;c.$validate()});c.$validators.pattern=function(a,b){return c.$isEmpty(b)||z(f)||f.test(b)}}}}},Pc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,d,c){if(c){var f=-1;d.$observe("maxlength",function(a){a=Z(a);f=ia(a)?-1:a;c.$validate()});c.$validators.maxlength=function(a,b){return 0>f||c.$isEmpty(b)||b.length<=f}}}}},Oc=function(){return{restrict:"A",require:"?ngModel",link:function(a,b,
d,c){if(c){var f=0;d.$observe("minlength",function(a){f=Z(a)||0;c.$validate()});c.$validators.minlength=function(a,b){return c.$isEmpty(b)||b.length>=f}}}}};y.angular.bootstrap?y.console&&console.log("WARNING: Tried to load angular more than once."):(xe(),ze($),$.module("ngLocale",[],["$provide",function(a){function b(a){a+="";var b=a.indexOf(".");return-1==b?0:a.length-b-1}a.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",
mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-\u00a4",negSuf:"",posPre:"\u00a4",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(a,c){var f=a|0,e=c;void 0===e&&(e=Math.min(b(a),3));Math.pow(10,e);return 1==f&&0==
e?"one":"other"}})}]),F(y.document).ready(function(){se(y.document,Gc)}))})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
//# sourceMappingURL=angular.min.js.map

/*
 AngularJS v1.5.11
 (c) 2010-2017 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(E,d){'use strict';function y(t,l,g){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(b,e,a,c,k){function p(){m&&(g.cancel(m),m=null);h&&(h.$destroy(),h=null);n&&(m=g.leave(n),m.done(function(b){!1!==b&&(m=null)}),n=null)}function B(){var a=t.current&&t.current.locals;if(d.isDefined(a&&a.$template)){var a=b.$new(),c=t.current;n=k(a,function(a){g.enter(a,null,n||e).done(function(a){!1===a||!d.isDefined(A)||A&&!b.$eval(A)||l()});p()});h=c.scope=a;h.$emit("$viewContentLoaded");
h.$eval(s)}else p()}var h,n,m,A=a.autoscroll,s=a.onload||"";b.$on("$routeChangeSuccess",B);B()}}}function w(d,l,g){return{restrict:"ECA",priority:-400,link:function(b,e){var a=g.current,c=a.locals;e.html(c.$template);var k=d(e.contents());if(a.controller){c.$scope=b;var p=l(a.controller,c);a.controllerAs&&(b[a.controllerAs]=p);e.data("$ngControllerController",p);e.children().data("$ngControllerController",p)}b[a.resolveAs||"$resolve"]=c;k(b)}}}var x,C,s=d.module("ngRoute",["ng"]).provider("$route",
function(){function t(b,e){return d.extend(Object.create(b),e)}function l(b,d){var a=d.caseInsensitiveMatch,c={originalPath:b,regexp:b},g=c.keys=[];b=b.replace(/([().])/g,"\\$1").replace(/(\/)?:(\w+)(\*\?|[?*])?/g,function(b,a,d,c){b="?"===c||"*?"===c?"?":null;c="*"===c||"*?"===c?"*":null;g.push({name:d,optional:!!b});a=a||"";return""+(b?"":a)+"(?:"+(b?a:"")+(c&&"(.+?)"||"([^/]+)")+(b||"")+")"+(b||"")}).replace(/([/$*])/g,"\\$1");c.regexp=new RegExp("^"+b+"$",a?"i":"");return c}x=d.isArray;C=d.isObject;
var g={};this.when=function(b,e){var a;a=void 0;if(x(e)){a=a||[];for(var c=0,k=e.length;c<k;c++)a[c]=e[c]}else if(C(e))for(c in a=a||{},e)if("$"!==c.charAt(0)||"$"!==c.charAt(1))a[c]=e[c];a=a||e;d.isUndefined(a.reloadOnSearch)&&(a.reloadOnSearch=!0);d.isUndefined(a.caseInsensitiveMatch)&&(a.caseInsensitiveMatch=this.caseInsensitiveMatch);g[b]=d.extend(a,b&&l(b,a));b&&(c="/"===b[b.length-1]?b.substr(0,b.length-1):b+"/",g[c]=d.extend({redirectTo:b},l(c,a)));return this};this.caseInsensitiveMatch=!1;
this.otherwise=function(b){"string"===typeof b&&(b={redirectTo:b});this.when(null,b);return this};this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce",function(b,e,a,c,k,p,l){function h(a){var f=v.current;(x=(r=y())&&f&&r.$$route===f.$$route&&d.equals(r.pathParams,f.pathParams)&&!r.reloadOnSearch&&!z)||!f&&!r||b.$broadcast("$routeChangeStart",r,f).defaultPrevented&&a&&a.preventDefault()}function n(){var u=v.current,f=r;if(x)u.params=f.params,d.copy(u.params,
a),b.$broadcast("$routeUpdate",u);else if(f||u)z=!1,(v.current=f)&&f.redirectTo&&(d.isString(f.redirectTo)?e.path(w(f.redirectTo,f.params)).search(f.params).replace():e.url(f.redirectTo(f.pathParams,e.path(),e.search())).replace()),c.when(f).then(m).then(function(c){f===v.current&&(f&&(f.locals=c,d.copy(f.params,a)),b.$broadcast("$routeChangeSuccess",f,u))},function(a){f===v.current&&b.$broadcast("$routeChangeError",f,u,a)})}function m(a){if(a){var b=d.extend({},a.resolve);d.forEach(b,function(a,
c){b[c]=d.isString(a)?k.get(a):k.invoke(a,null,null,c)});a=s(a);d.isDefined(a)&&(b.$template=a);return c.all(b)}}function s(a){var b,c;d.isDefined(b=a.template)?d.isFunction(b)&&(b=b(a.params)):d.isDefined(c=a.templateUrl)&&(d.isFunction(c)&&(c=c(a.params)),d.isDefined(c)&&(a.loadedTemplateUrl=l.valueOf(c),b=p(c)));return b}function y(){var a,b;d.forEach(g,function(c,g){var q;if(q=!b){var h=e.path();q=c.keys;var l={};if(c.regexp)if(h=c.regexp.exec(h)){for(var k=1,p=h.length;k<p;++k){var m=q[k-1],
n=h[k];m&&n&&(l[m.name]=n)}q=l}else q=null;else q=null;q=a=q}q&&(b=t(c,{params:d.extend({},e.search(),a),pathParams:a}),b.$$route=c)});return b||g[null]&&t(g[null],{params:{},pathParams:{}})}function w(a,b){var c=[];d.forEach((a||"").split(":"),function(a,d){if(0===d)c.push(a);else{var e=a.match(/(\w+)(?:[?*])?(.*)/),g=e[1];c.push(b[g]);c.push(e[2]||"");delete b[g]}});return c.join("")}var z=!1,r,x,v={routes:g,reload:function(){z=!0;var a={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=
!0;z=!1}};b.$evalAsync(function(){h(a);a.defaultPrevented||n()})},updateParams:function(a){if(this.current&&this.current.$$route)a=d.extend({},this.current.params,a),e.path(w(this.current.$$route.originalPath,a)),e.search(a);else throw D("norout");}};b.$on("$locationChangeStart",h);b.$on("$locationChangeSuccess",n);return v}]}),D=d.$$minErr("ngRoute");s.provider("$routeParams",function(){this.$get=function(){return{}}});s.directive("ngView",y);s.directive("ngView",w);y.$inject=["$route","$anchorScroll",
"$animate"];w.$inject=["$compile","$controller","$route"]})(window,window.angular);
//# sourceMappingURL=angular-route.min.js.map

/*
 AngularJS v1.5.11
 (c) 2010-2017 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(s,g){'use strict';function H(g){var l=[];t(l,A).chars(g);return l.join("")}var B=g.$$minErr("$sanitize"),C,l,D,E,q,A,F,t;g.module("ngSanitize",[]).provider("$sanitize",function(){function k(a,e){var b={},c=a.split(","),h;for(h=0;h<c.length;h++)b[e?q(c[h]):c[h]]=!0;return b}function I(a){for(var e={},b=0,c=a.length;b<c;b++){var h=a[b];e[h.name]=h.value}return e}function G(a){return a.replace(/&/g,"&amp;").replace(J,function(a){var b=a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(b-55296)+
(a-56320)+65536)+";"}).replace(K,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function x(a){for(;a;){if(a.nodeType===s.Node.ELEMENT_NODE)for(var e=a.attributes,b=0,c=e.length;b<c;b++){var h=e[b],d=h.name.toLowerCase();if("xmlns:ns1"===d||0===d.lastIndexOf("ns1:",0))a.removeAttributeNode(h),b--,c--}(e=a.firstChild)&&x(e);a=a.nextSibling}}var u=!1;this.$get=["$$sanitizeUri",function(a){u&&l(v,w);return function(e){var b=[];F(e,t(b,function(b,h){return!/^unsafe:/.test(a(b,
h))}));return b.join("")}}];this.enableSvg=function(a){return E(a)?(u=a,this):u};C=g.bind;l=g.extend;D=g.forEach;E=g.isDefined;q=g.lowercase;A=g.noop;F=function(a,e){null===a||void 0===a?a="":"string"!==typeof a&&(a=""+a);f.innerHTML=a;var b=5;do{if(0===b)throw B("uinput");b--;s.document.documentMode&&x(f);a=f.innerHTML;f.innerHTML=a}while(a!==f.innerHTML);for(b=f.firstChild;b;){switch(b.nodeType){case 1:e.start(b.nodeName.toLowerCase(),I(b.attributes));break;case 3:e.chars(b.textContent)}var c;if(!(c=
b.firstChild)&&(1===b.nodeType&&e.end(b.nodeName.toLowerCase()),c=b.nextSibling,!c))for(;null==c;){b=b.parentNode;if(b===f)break;c=b.nextSibling;1===b.nodeType&&e.end(b.nodeName.toLowerCase())}b=c}for(;b=f.firstChild;)f.removeChild(b)};t=function(a,e){var b=!1,c=C(a,a.push);return{start:function(a,d){a=q(a);!b&&z[a]&&(b=a);b||!0!==v[a]||(c("<"),c(a),D(d,function(b,d){var f=q(d),g="img"===a&&"src"===f||"background"===f;!0!==m[f]||!0===n[f]&&!e(b,g)||(c(" "),c(d),c('="'),c(G(b)),c('"'))}),c(">"))},
end:function(a){a=q(a);b||!0!==v[a]||!0===y[a]||(c("</"),c(a),c(">"));a==b&&(b=!1)},chars:function(a){b||c(G(a))}}};var J=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,K=/([^#-~ |!])/g,y=k("area,br,col,hr,img,wbr"),d=k("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),r=k("rp,rt"),p=l({},r,d),d=l({},d,k("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),r=l({},r,k("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),
w=k("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),z=k("script,style"),v=l({},y,d,r,p),n=k("background,cite,href,longdesc,src,xlink:href"),p=k("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),
r=k("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",
!0),m=l({},n,r,p),f;(function(a){if(a.document&&a.document.implementation)a=a.document.implementation.createHTMLDocument("inert");else throw B("noinert");var e=(a.documentElement||a.getDocumentElement()).getElementsByTagName("body");1===e.length?f=e[0]:(e=a.createElement("html"),f=a.createElement("body"),e.appendChild(f),a.appendChild(e))})(s)});g.module("ngSanitize").filter("linky",["$sanitize",function(k){var l=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
q=/^mailto:/i,x=g.$$minErr("linky"),u=g.isDefined,s=g.isFunction,t=g.isObject,y=g.isString;return function(d,g,p){function w(a){a&&m.push(H(a))}function z(a,b){var c,d=v(a);m.push("<a ");for(c in d)m.push(c+'="'+d[c]+'" ');!u(g)||"target"in d||m.push('target="',g,'" ');m.push('href="',a.replace(/"/g,"&quot;"),'">');w(b);m.push("</a>")}if(null==d||""===d)return d;if(!y(d))throw x("notstring",d);for(var v=s(p)?p:t(p)?function(){return p}:function(){return{}},n=d,m=[],f,a;d=n.match(l);)f=d[0],d[2]||
d[4]||(f=(d[3]?"http://":"mailto:")+f),a=d.index,w(n.substr(0,a)),z(f,d[0].replace(q,"")),n=n.substring(a+d[0].length);w(n);return k(m.join(""))}}])})(window,window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map

/*
 AngularJS v1.5.11
 (c) 2010-2017 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(R,b){'use strict';function G(s,g){g=g||{};b.forEach(g,function(b,k){delete g[k]});for(var k in s)!s.hasOwnProperty(k)||"$"===k.charAt(0)&&"$"===k.charAt(1)||(g[k]=s[k]);return g}var y=b.$$minErr("$resource"),N=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;b.module("ngResource",["ng"]).provider("$resource",function(){var s=/^https?:\/\/[^/]*/,g=this;this.defaults={stripTrailingSlashes:!0,cancellable:!1,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",isArray:!0},remove:{method:"DELETE"},
"delete":{method:"DELETE"}}};this.$get=["$http","$log","$q","$timeout",function(k,M,H,I){function z(b,e){return encodeURIComponent(b).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,e?"%20":"+")}function B(b,e){this.template=b;this.defaults=r({},g.defaults,e);this.urlParams={}}function J(A,e,p,m){function c(a,d){var c={};d=r({},e,d);u(d,function(d,e){w(d)&&(d=d(a));var f;if(d&&d.charAt&&"@"===d.charAt(0)){f=a;var l=d.substr(1);if(null==l||""===l||
"hasOwnProperty"===l||!N.test("."+l))throw y("badmember",l);for(var l=l.split("."),h=0,g=l.length;h<g&&b.isDefined(f);h++){var q=l[h];f=null!==f?f[q]:void 0}}else f=d;c[e]=f});return c}function O(a){return a.resource}function h(a){G(a||{},this)}var s=new B(A,m);p=r({},g.defaults.actions,p);h.prototype.toJSON=function(){var a=r({},this);delete a.$promise;delete a.$resolved;delete a.$cancelRequest;return a};u(p,function(a,d){var b=/^(POST|PUT|PATCH)$/i.test(a.method),e=a.timeout,g=K(a.cancellable)?
a.cancellable:s.defaults.cancellable;e&&!P(e)&&(M.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),delete a.timeout,e=null);h[d]=function(f,l,m,A){var q={},p,v,C;switch(arguments.length){case 4:C=A,v=m;case 3:case 2:if(w(l)){if(w(f)){v=f;C=l;break}v=l;C=m}else{q=f;p=l;v=m;break}case 1:w(f)?
v=f:b?p=f:q=f;break;case 0:break;default:throw y("badargs",arguments.length);}var D=this instanceof h,n=D?p:a.isArray?[]:new h(p),t={},z=a.interceptor&&a.interceptor.response||O,B=a.interceptor&&a.interceptor.responseError||void 0,x,E;u(a,function(a,d){switch(d){default:t[d]=Q(a);case "params":case "isArray":case "interceptor":case "cancellable":}});!D&&g&&(x=H.defer(),t.timeout=x.promise,e&&(E=I(x.resolve,e)));b&&(t.data=p);s.setUrlParams(t,r({},c(p,a.params||{}),q),a.url);q=k(t).then(function(f){var c=
f.data;if(c){if(L(c)!==!!a.isArray)throw y("badcfg",d,a.isArray?"array":"object",L(c)?"array":"object",t.method,t.url);if(a.isArray)n.length=0,u(c,function(a){"object"===typeof a?n.push(new h(a)):n.push(a)});else{var b=n.$promise;G(c,n);n.$promise=b}}f.resource=n;return f},function(a){(C||F)(a);return H.reject(a)});q["finally"](function(){n.$resolved=!0;!D&&g&&(n.$cancelRequest=F,I.cancel(E),x=E=t.timeout=null)});q=q.then(function(a){var d=z(a);(v||F)(d,a.headers,a.status,a.statusText);return d},
B);return D?q:(n.$promise=q,n.$resolved=!1,g&&(n.$cancelRequest=x.resolve),n)};h.prototype["$"+d]=function(a,c,b){w(a)&&(b=c,c=a,a={});a=h[d].call(this,a,this,c,b);return a.$promise||a}});h.bind=function(a){a=r({},e,a);return J(A,a,p,m)};return h}var F=b.noop,u=b.forEach,r=b.extend,Q=b.copy,L=b.isArray,K=b.isDefined,w=b.isFunction,P=b.isNumber;B.prototype={setUrlParams:function(b,e,g){var m=this,c=g||m.template,k,h,r="",a=m.urlParams={};u(c.split(/\W/),function(d){if("hasOwnProperty"===d)throw y("badname");
!/^\d+$/.test(d)&&d&&(new RegExp("(^|[^\\\\]):"+d+"(\\W|$)")).test(c)&&(a[d]={isQueryParamValue:(new RegExp("\\?.*=:"+d+"(?:\\W|$)")).test(c)})});c=c.replace(/\\:/g,":");c=c.replace(s,function(a){r=a;return""});e=e||{};u(m.urlParams,function(a,b){k=e.hasOwnProperty(b)?e[b]:m.defaults[b];K(k)&&null!==k?(h=a.isQueryParamValue?z(k,!0):z(k,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+"),c=c.replace(new RegExp(":"+b+"(\\W|$)","g"),function(a,b){return h+b})):c=c.replace(new RegExp("(/?):"+
b+"(\\W|$)","g"),function(a,b,d){return"/"===d.charAt(0)?d:b+d})});m.defaults.stripTrailingSlashes&&(c=c.replace(/\/+$/,"")||"/");c=c.replace(/\/\.(?=\w+($|\?))/,".");b.url=r+c.replace(/\/\\\./,"/.");u(e,function(a,c){m.urlParams[c]||(b.params=b.params||{},b.params[c]=a)})}};return J}]})})(window,window.angular);
//# sourceMappingURL=angular-resource.min.js.map

/*
 AngularJS v1.5.11
 (c) 2010-2017 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(R,B){'use strict';function Da(a,b,c){if(!a)throw Ma("areq",b||"?",c||"required");return a}function Ea(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;X(a)&&(a=a.join(" "));X(b)&&(b=b.join(" "));return a+" "+b}function Na(a){var b={};a&&(a.to||a.from)&&(b.to=a.to,b.from=a.from);return b}function Y(a,b,c){var d="";a=X(a)?a:a&&G(a)&&a.length?a.split(/\s+/):[];s(a,function(a,l){a&&0<a.length&&(d+=0<l?" ":"",d+=c?b+a:a+b)});return d}function Oa(a){if(a instanceof F)switch(a.length){case 0:return a;
case 1:if(1===a[0].nodeType)return a;break;default:return F(ta(a))}if(1===a.nodeType)return F(a)}function ta(a){if(!a[0])return a;for(var b=0;b<a.length;b++){var c=a[b];if(1===c.nodeType)return c}}function Pa(a,b,c){s(b,function(b){a.addClass(b,c)})}function Qa(a,b,c){s(b,function(b){a.removeClass(b,c)})}function Z(a){return function(b,c){c.addClass&&(Pa(a,b,c.addClass),c.addClass=null);c.removeClass&&(Qa(a,b,c.removeClass),c.removeClass=null)}}function oa(a){a=a||{};if(!a.$$prepared){var b=a.domOperation||
P;a.domOperation=function(){a.$$domOperationFired=!0;b();b=P};a.$$prepared=!0}return a}function ha(a,b){Fa(a,b);Ga(a,b)}function Fa(a,b){b.from&&(a.css(b.from),b.from=null)}function Ga(a,b){b.to&&(a.css(b.to),b.to=null)}function V(a,b,c){var d=b.options||{};c=c.options||{};var e=(d.addClass||"")+" "+(c.addClass||""),l=(d.removeClass||"")+" "+(c.removeClass||"");a=Ra(a.attr("class"),e,l);c.preparationClasses&&(d.preparationClasses=$(c.preparationClasses,d.preparationClasses),delete c.preparationClasses);
e=d.domOperation!==P?d.domOperation:null;ua(d,c);e&&(d.domOperation=e);d.addClass=a.addClass?a.addClass:null;d.removeClass=a.removeClass?a.removeClass:null;b.addClass=d.addClass;b.removeClass=d.removeClass;return d}function Ra(a,b,c){function d(a){G(a)&&(a=a.split(" "));var b={};s(a,function(a){a.length&&(b[a]=!0)});return b}var e={};a=d(a);b=d(b);s(b,function(a,b){e[b]=1});c=d(c);s(c,function(a,b){e[b]=1===e[b]?null:-1});var l={addClass:"",removeClass:""};s(e,function(b,c){var d,e;1===b?(d="addClass",
e=!a[c]||a[c+"-remove"]):-1===b&&(d="removeClass",e=a[c]||a[c+"-add"]);e&&(l[d].length&&(l[d]+=" "),l[d]+=c)});return l}function y(a){return a instanceof F?a[0]:a}function Sa(a,b,c){var d="";b&&(d=Y(b,"ng-",!0));c.addClass&&(d=$(d,Y(c.addClass,"-add")));c.removeClass&&(d=$(d,Y(c.removeClass,"-remove")));d.length&&(c.preparationClasses=d,a.addClass(d))}function pa(a,b){var c=b?"-"+b+"s":"";la(a,[ma,c]);return[ma,c]}function va(a,b){var c=b?"paused":"",d=aa+"PlayState";la(a,[d,c]);return[d,c]}function la(a,
b){a.style[b[0]]=b[1]}function $(a,b){return a?b?a+" "+b:a:b}function Ha(a,b,c){var d=Object.create(null),e=a.getComputedStyle(b)||{};s(c,function(a,b){var c=e[a];if(c){var g=c.charAt(0);if("-"===g||"+"===g||0<=g)c=Ta(c);0===c&&(c=null);d[b]=c}});return d}function Ta(a){var b=0;a=a.split(/\s*,\s*/);s(a,function(a){"s"===a.charAt(a.length-1)&&(a=a.substring(0,a.length-1));a=parseFloat(a)||0;b=b?Math.max(a,b):a});return b}function wa(a){return 0===a||null!=a}function Ia(a,b){var c=S,d=a+"s";b?c+="Duration":
d+=" linear all";return[c,d]}function Ja(){var a=Object.create(null);return{flush:function(){a=Object.create(null)},count:function(b){return(b=a[b])?b.total:0},get:function(b){return(b=a[b])&&b.value},put:function(b,c){a[b]?a[b].total++:a[b]={total:1,value:c}}}}function Ka(a,b,c){s(c,function(c){a[c]=xa(a[c])?a[c]:b.style.getPropertyValue(c)})}var S,ya,aa,za;void 0===R.ontransitionend&&void 0!==R.onwebkittransitionend?(S="WebkitTransition",ya="webkitTransitionEnd transitionend"):(S="transition",ya=
"transitionend");void 0===R.onanimationend&&void 0!==R.onwebkitanimationend?(aa="WebkitAnimation",za="webkitAnimationEnd animationend"):(aa="animation",za="animationend");var qa=aa+"Delay",Aa=aa+"Duration",ma=S+"Delay",La=S+"Duration",Ma=B.$$minErr("ng"),Ua={transitionDuration:La,transitionDelay:ma,transitionProperty:S+"Property",animationDuration:Aa,animationDelay:qa,animationIterationCount:aa+"IterationCount"},Va={transitionDuration:La,transitionDelay:ma,animationDuration:Aa,animationDelay:qa},
Ba,ua,s,X,xa,ea,Ca,ba,G,J,F,P;B.module("ngAnimate",[],function(){P=B.noop;Ba=B.copy;ua=B.extend;F=B.element;s=B.forEach;X=B.isArray;G=B.isString;ba=B.isObject;J=B.isUndefined;xa=B.isDefined;Ca=B.isFunction;ea=B.isElement}).directive("ngAnimateSwap",["$animate","$rootScope",function(a,b){return{restrict:"A",transclude:"element",terminal:!0,priority:600,link:function(b,d,e,l,n){var I,g;b.$watchCollection(e.ngAnimateSwap||e["for"],function(e){I&&a.leave(I);g&&(g.$destroy(),g=null);if(e||0===e)g=b.$new(),
n(g,function(b){I=b;a.enter(b,null,d)})})}}}]).directive("ngAnimateChildren",["$interpolate",function(a){return{link:function(b,c,d){function e(a){c.data("$$ngAnimateChildren","on"===a||"true"===a)}var l=d.ngAnimateChildren;G(l)&&0===l.length?c.data("$$ngAnimateChildren",!0):(e(a(l)(b)),d.$observe("ngAnimateChildren",e))}}}]).factory("$$rAFScheduler",["$$rAF",function(a){function b(a){d=d.concat(a);c()}function c(){if(d.length){for(var b=d.shift(),n=0;n<b.length;n++)b[n]();e||a(function(){e||c()})}}
var d,e;d=b.queue=[];b.waitUntilQuiet=function(b){e&&e();e=a(function(){e=null;b();c()})};return b}]).provider("$$animateQueue",["$animateProvider",function(a){function b(a){if(!a)return null;a=a.split(" ");var b=Object.create(null);s(a,function(a){b[a]=!0});return b}function c(a,c){if(a&&c){var d=b(c);return a.split(" ").some(function(a){return d[a]})}}function d(a,b,c,d){return l[a].some(function(a){return a(b,c,d)})}function e(a,b){var c=0<(a.addClass||"").length,d=0<(a.removeClass||"").length;
return b?c&&d:c||d}var l=this.rules={skip:[],cancel:[],join:[]};l.join.push(function(a,b,c){return!b.structural&&e(b)});l.skip.push(function(a,b,c){return!b.structural&&!e(b)});l.skip.push(function(a,b,c){return"leave"===c.event&&b.structural});l.skip.push(function(a,b,c){return c.structural&&2===c.state&&!b.structural});l.cancel.push(function(a,b,c){return c.structural&&b.structural});l.cancel.push(function(a,b,c){return 2===c.state&&b.structural});l.cancel.push(function(a,b,d){if(d.structural)return!1;
a=b.addClass;b=b.removeClass;var e=d.addClass;d=d.removeClass;return J(a)&&J(b)||J(e)&&J(d)?!1:c(a,d)||c(b,e)});this.$get=["$$rAF","$rootScope","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow",function(b,c,g,l,C,Wa,Q,t,H,T){function O(){var a=!1;return function(b){a?b():c.$$postDigest(function(){a=!0;b()})}}function x(a,b,c){var f=y(b),d=y(a),N=[];(a=h[c])&&s(a,function(a){w.call(a.node,f)?N.push(a.callback):"leave"===c&&w.call(a.node,
d)&&N.push(a.callback)});return N}function r(a,b,c){var f=ta(b);return a.filter(function(a){return!(a.node===f&&(!c||a.callback===c))})}function p(a,h,v){function r(c,f,d,h){sa(function(){var c=x(T,a,f);c.length?b(function(){s(c,function(b){b(a,d,h)});"close"!==d||a[0].parentNode||ra.off(a)}):"close"!==d||a[0].parentNode||ra.off(a)});c.progress(f,d,h)}function k(b){var c=a,f=m;f.preparationClasses&&(c.removeClass(f.preparationClasses),f.preparationClasses=null);f.activeClasses&&(c.removeClass(f.activeClasses),
f.activeClasses=null);E(a,m);ha(a,m);m.domOperation();A.complete(!b)}var m=Ba(v),p,T;if(a=Oa(a))p=y(a),T=a.parent();var m=oa(m),A=new Q,sa=O();X(m.addClass)&&(m.addClass=m.addClass.join(" "));m.addClass&&!G(m.addClass)&&(m.addClass=null);X(m.removeClass)&&(m.removeClass=m.removeClass.join(" "));m.removeClass&&!G(m.removeClass)&&(m.removeClass=null);m.from&&!ba(m.from)&&(m.from=null);m.to&&!ba(m.to)&&(m.to=null);if(!p)return k(),A;v=[p.className,m.addClass,m.removeClass].join(" ");if(!Xa(v))return k(),
A;var g=0<=["enter","move","leave"].indexOf(h),w=l[0].hidden,t=!f||w||N.get(p);v=!t&&z.get(p)||{};var H=!!v.state;t||H&&1===v.state||(t=!M(a,T,h));if(t)return w&&r(A,h,"start"),k(),w&&r(A,h,"close"),A;g&&K(a);w={structural:g,element:a,event:h,addClass:m.addClass,removeClass:m.removeClass,close:k,options:m,runner:A};if(H){if(d("skip",a,w,v)){if(2===v.state)return k(),A;V(a,v,w);return v.runner}if(d("cancel",a,w,v))if(2===v.state)v.runner.end();else if(v.structural)v.close();else return V(a,v,w),v.runner;
else if(d("join",a,w,v))if(2===v.state)V(a,w,{});else return Sa(a,g?h:null,m),h=w.event=v.event,m=V(a,v,w),v.runner}else V(a,w,{});(H=w.structural)||(H="animate"===w.event&&0<Object.keys(w.options.to||{}).length||e(w));if(!H)return k(),ka(a),A;var C=(v.counter||0)+1;w.counter=C;L(a,1,w);c.$$postDigest(function(){var b=z.get(p),c=!b,b=b||{},f=0<(a.parent()||[]).length&&("animate"===b.event||b.structural||e(b));if(c||b.counter!==C||!f){c&&(E(a,m),ha(a,m));if(c||g&&b.event!==h)m.domOperation(),A.end();
f||ka(a)}else h=!b.structural&&e(b,!0)?"setClass":b.event,L(a,2),b=Wa(a,h,b.options),A.setHost(b),r(A,h,"start",{}),b.done(function(b){k(!b);(b=z.get(p))&&b.counter===C&&ka(y(a));r(A,h,"close",{})})});return A}function K(a){a=y(a).querySelectorAll("[data-ng-animate]");s(a,function(a){var b=parseInt(a.getAttribute("data-ng-animate"),10),c=z.get(a);if(c)switch(b){case 2:c.runner.end();case 1:z.remove(a)}})}function ka(a){a=y(a);a.removeAttribute("data-ng-animate");z.remove(a)}function k(a,b){return y(a)===
y(b)}function M(a,b,c){c=F(l[0].body);var f=k(a,c)||"HTML"===a[0].nodeName,d=k(a,g),h=!1,r,e=N.get(y(a));(a=F.data(a[0],"$ngAnimatePin"))&&(b=a);for(b=y(b);b;){d||(d=k(b,g));if(1!==b.nodeType)break;a=z.get(b)||{};if(!h){var p=N.get(b);if(!0===p&&!1!==e){e=!0;break}else!1===p&&(e=!1);h=a.structural}if(J(r)||!0===r)a=F.data(b,"$$ngAnimateChildren"),xa(a)&&(r=a);if(h&&!1===r)break;f||(f=k(b,c));if(f&&d)break;if(!d&&(a=F.data(b,"$ngAnimatePin"))){b=y(a);continue}b=b.parentNode}return(!h||r)&&!0!==e&&
d&&f}function L(a,b,c){c=c||{};c.state=b;a=y(a);a.setAttribute("data-ng-animate",b);c=(b=z.get(a))?ua(b,c):c;z.put(a,c)}var z=new C,N=new C,f=null,A=c.$watch(function(){return 0===t.totalPendingRequests},function(a){a&&(A(),c.$$postDigest(function(){c.$$postDigest(function(){null===f&&(f=!0)})}))}),h=Object.create(null),sa=a.classNameFilter(),Xa=sa?function(a){return sa.test(a)}:function(){return!0},E=Z(H),w=R.Node.prototype.contains||function(a){return this===a||!!(this.compareDocumentPosition(a)&
16)},ra={on:function(a,b,c){var f=ta(b);h[a]=h[a]||[];h[a].push({node:f,callback:c});F(b).on("$destroy",function(){z.get(f)||ra.off(a,b,c)})},off:function(a,b,c){if(1!==arguments.length||G(arguments[0])){var f=h[a];f&&(h[a]=1===arguments.length?null:r(f,b,c))}else for(f in b=arguments[0],h)h[f]=r(h[f],b)},pin:function(a,b){Da(ea(a),"element","not an element");Da(ea(b),"parentElement","not an element");a.data("$ngAnimatePin",b)},push:function(a,b,c,f){c=c||{};c.domOperation=f;return p(a,b,c)},enabled:function(a,
b){var c=arguments.length;if(0===c)b=!!f;else if(ea(a)){var d=y(a);1===c?b=!N.get(d):N.put(d,!b)}else b=f=!!a;return b}};return ra}]}]).provider("$$animation",["$animateProvider",function(a){var b=this.drivers=[];this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$HashMap","$$rAFScheduler",function(a,d,e,l,n,I){function g(a){function b(a){if(a.processed)return a;a.processed=!0;var d=a.domNode,p=d.parentNode;e.put(d,a);for(var K;p;){if(K=e.get(p)){K.processed||(K=b(K));break}p=p.parentNode}(K||
c).children.push(a);return a}var c={children:[]},d,e=new n;for(d=0;d<a.length;d++){var g=a[d];e.put(g.domNode,a[d]={domNode:g.domNode,fn:g.fn,children:[]})}for(d=0;d<a.length;d++)b(a[d]);return function(a){var b=[],c=[],d;for(d=0;d<a.children.length;d++)c.push(a.children[d]);a=c.length;var e=0,k=[];for(d=0;d<c.length;d++){var g=c[d];0>=a&&(a=e,e=0,b.push(k),k=[]);k.push(g.fn);g.children.forEach(function(a){e++;c.push(a)});a--}k.length&&b.push(k);return b}(c)}var u=[],C=Z(a);return function(n,Q,t){function H(a){a=
a.hasAttribute("ng-animate-ref")?[a]:a.querySelectorAll("[ng-animate-ref]");var b=[];s(a,function(a){var c=a.getAttribute("ng-animate-ref");c&&c.length&&b.push(a)});return b}function T(a){var b=[],c={};s(a,function(a,d){var h=y(a.element),e=0<=["enter","move"].indexOf(a.event),h=a.structural?H(h):[];if(h.length){var k=e?"to":"from";s(h,function(a){var b=a.getAttribute("ng-animate-ref");c[b]=c[b]||{};c[b][k]={animationID:d,element:F(a)}})}else b.push(a)});var d={},e={};s(c,function(c,k){var r=c.from,
p=c.to;if(r&&p){var z=a[r.animationID],g=a[p.animationID],A=r.animationID.toString();if(!e[A]){var n=e[A]={structural:!0,beforeStart:function(){z.beforeStart();g.beforeStart()},close:function(){z.close();g.close()},classes:O(z.classes,g.classes),from:z,to:g,anchors:[]};n.classes.length?b.push(n):(b.push(z),b.push(g))}e[A].anchors.push({out:r.element,"in":p.element})}else r=r?r.animationID:p.animationID,p=r.toString(),d[p]||(d[p]=!0,b.push(a[r]))});return b}function O(a,b){a=a.split(" ");b=b.split(" ");
for(var c=[],d=0;d<a.length;d++){var e=a[d];if("ng-"!==e.substring(0,3))for(var r=0;r<b.length;r++)if(e===b[r]){c.push(e);break}}return c.join(" ")}function x(a){for(var c=b.length-1;0<=c;c--){var d=e.get(b[c])(a);if(d)return d}}function r(a,b){function c(a){(a=a.data("$$animationRunner"))&&a.setHost(b)}a.from&&a.to?(c(a.from.element),c(a.to.element)):c(a.element)}function p(){var a=n.data("$$animationRunner");!a||"leave"===Q&&t.$$domOperationFired||a.end()}function K(b){n.off("$destroy",p);n.removeData("$$animationRunner");
C(n,t);ha(n,t);t.domOperation();L&&a.removeClass(n,L);n.removeClass("ng-animate");k.complete(!b)}t=oa(t);var ka=0<=["enter","move","leave"].indexOf(Q),k=new l({end:function(){K()},cancel:function(){K(!0)}});if(!b.length)return K(),k;n.data("$$animationRunner",k);var M=Ea(n.attr("class"),Ea(t.addClass,t.removeClass)),L=t.tempClasses;L&&(M+=" "+L,t.tempClasses=null);var z;ka&&(z="ng-"+Q+"-prepare",a.addClass(n,z));u.push({element:n,classes:M,event:Q,structural:ka,options:t,beforeStart:function(){n.addClass("ng-animate");
L&&a.addClass(n,L);z&&(a.removeClass(n,z),z=null)},close:K});n.on("$destroy",p);if(1<u.length)return k;d.$$postDigest(function(){var a=[];s(u,function(b){b.element.data("$$animationRunner")?a.push(b):b.close()});u.length=0;var b=T(a),c=[];s(b,function(a){c.push({domNode:y(a.from?a.from.element:a.element),fn:function(){a.beforeStart();var b,c=a.close;if((a.anchors?a.from.element||a.to.element:a.element).data("$$animationRunner")){var d=x(a);d&&(b=d.start)}b?(b=b(),b.done(function(a){c(!a)}),r(a,b)):
c()}})});I(g(c))});return k}}]}]).provider("$animateCss",["$animateProvider",function(a){var b=Ja(),c=Ja();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(a,e,l,n,I,g,u,C){function B(a,b){var c=a.parentNode;return(c.$$ngAnimateParentKey||(c.$$ngAnimateParentKey=++O))+"-"+a.getAttribute("class")+"-"+b}function Q(r,p,g,n){var k;0<b.count(g)&&(k=c.get(g),k||(p=Y(p,"-stagger"),e.addClass(r,p),k=Ha(a,r,n),k.animationDuration=
Math.max(k.animationDuration,0),k.transitionDuration=Math.max(k.transitionDuration,0),e.removeClass(r,p),c.put(g,k)));return k||{}}function t(a){x.push(a);u.waitUntilQuiet(function(){b.flush();c.flush();for(var a=I(),d=0;d<x.length;d++)x[d](a);x.length=0})}function H(c,e,g){e=b.get(g);e||(e=Ha(a,c,Ua),"infinite"===e.animationIterationCount&&(e.animationIterationCount=1));b.put(g,e);c=e;g=c.animationDelay;e=c.transitionDelay;c.maxDelay=g&&e?Math.max(g,e):g||e;c.maxDuration=Math.max(c.animationDuration*
c.animationIterationCount,c.transitionDuration);return c}var T=Z(e),O=0,x=[];return function(a,c){function d(){k()}function u(){k(!0)}function k(b){if(!(w||F&&O)){w=!0;O=!1;f.$$skipPreparationClasses||e.removeClass(a,ga);e.removeClass(a,ea);va(h,!1);pa(h,!1);s(x,function(a){h.style[a[0]]=""});T(a,f);ha(a,f);Object.keys(A).length&&s(A,function(a,b){a?h.style.setProperty(b,a):h.style.removeProperty(b)});if(f.onDone)f.onDone();fa&&fa.length&&a.off(fa.join(" "),z);var c=a.data("$$animateCss");c&&(n.cancel(c[0].timer),
a.removeData("$$animateCss"));G&&G.complete(!b)}}function M(a){q.blockTransition&&pa(h,a);q.blockKeyframeAnimation&&va(h,!!a)}function L(){G=new l({end:d,cancel:u});t(P);k();return{$$willAnimate:!1,start:function(){return G},end:d}}function z(a){a.stopPropagation();var b=a.originalEvent||a;a=b.$manualTimeStamp||Date.now();b=parseFloat(b.elapsedTime.toFixed(3));Math.max(a-Z,0)>=R&&b>=m&&(F=!0,k())}function N(){function b(){if(!w){M(!1);s(x,function(a){h.style[a[0]]=a[1]});T(a,f);e.addClass(a,ea);if(q.recalculateTimingStyles){na=
h.className+" "+ga;ia=B(h,na);D=H(h,na,ia);ca=D.maxDelay;J=Math.max(ca,0);m=D.maxDuration;if(0===m){k();return}q.hasTransitions=0<D.transitionDuration;q.hasAnimations=0<D.animationDuration}q.applyAnimationDelay&&(ca="boolean"!==typeof f.delay&&wa(f.delay)?parseFloat(f.delay):ca,J=Math.max(ca,0),D.animationDelay=ca,da=[qa,ca+"s"],x.push(da),h.style[da[0]]=da[1]);R=1E3*J;V=1E3*m;if(f.easing){var d,g=f.easing;q.hasTransitions&&(d=S+"TimingFunction",x.push([d,g]),h.style[d]=g);q.hasAnimations&&(d=aa+
"TimingFunction",x.push([d,g]),h.style[d]=g)}D.transitionDuration&&fa.push(ya);D.animationDuration&&fa.push(za);Z=Date.now();var p=R+1.5*V;d=Z+p;var g=a.data("$$animateCss")||[],N=!0;if(g.length){var l=g[0];(N=d>l.expectedEndTime)?n.cancel(l.timer):g.push(k)}N&&(p=n(c,p,!1),g[0]={timer:p,expectedEndTime:d},g.push(k),a.data("$$animateCss",g));if(fa.length)a.on(fa.join(" "),z);f.to&&(f.cleanupStyles&&Ka(A,h,Object.keys(f.to)),Ga(a,f))}}function c(){var b=a.data("$$animateCss");if(b){for(var d=1;d<b.length;d++)b[d]();
a.removeData("$$animateCss")}}if(!w)if(h.parentNode){var d=function(a){if(F)O&&a&&(O=!1,k());else if(O=!a,D.animationDuration)if(a=va(h,O),O)x.push(a);else{var b=x,c=b.indexOf(a);0<=a&&b.splice(c,1)}},g=0<ba&&(D.transitionDuration&&0===W.transitionDuration||D.animationDuration&&0===W.animationDuration)&&Math.max(W.animationDelay,W.transitionDelay);g?n(b,Math.floor(g*ba*1E3),!1):b();v.resume=function(){d(!0)};v.pause=function(){d(!1)}}else k()}var f=c||{};f.$$prepared||(f=oa(Ba(f)));var A={},h=y(a);
if(!h||!h.parentNode||!C.enabled())return L();var x=[],I=a.attr("class"),E=Na(f),w,O,F,G,v,J,R,m,V,Z,fa=[];if(0===f.duration||!g.animations&&!g.transitions)return L();var ja=f.event&&X(f.event)?f.event.join(" "):f.event,$="",U="";ja&&f.structural?$=Y(ja,"ng-",!0):ja&&($=ja);f.addClass&&(U+=Y(f.addClass,"-add"));f.removeClass&&(U.length&&(U+=" "),U+=Y(f.removeClass,"-remove"));f.applyClassesEarly&&U.length&&T(a,f);var ga=[$,U].join(" ").trim(),na=I+" "+ga,ea=Y(ga,"-active"),I=E.to&&0<Object.keys(E.to).length;
if(!(0<(f.keyframeStyle||"").length||I||ga))return L();var ia,W;0<f.stagger?(E=parseFloat(f.stagger),W={transitionDelay:E,animationDelay:E,transitionDuration:0,animationDuration:0}):(ia=B(h,na),W=Q(h,ga,ia,Va));f.$$skipPreparationClasses||e.addClass(a,ga);f.transitionStyle&&(E=[S,f.transitionStyle],la(h,E),x.push(E));0<=f.duration&&(E=0<h.style[S].length,E=Ia(f.duration,E),la(h,E),x.push(E));f.keyframeStyle&&(E=[aa,f.keyframeStyle],la(h,E),x.push(E));var ba=W?0<=f.staggerIndex?f.staggerIndex:b.count(ia):
0;(ja=0===ba)&&!f.skipBlocking&&pa(h,9999);var D=H(h,na,ia),ca=D.maxDelay;J=Math.max(ca,0);m=D.maxDuration;var q={};q.hasTransitions=0<D.transitionDuration;q.hasAnimations=0<D.animationDuration;q.hasTransitionAll=q.hasTransitions&&"all"===D.transitionProperty;q.applyTransitionDuration=I&&(q.hasTransitions&&!q.hasTransitionAll||q.hasAnimations&&!q.hasTransitions);q.applyAnimationDuration=f.duration&&q.hasAnimations;q.applyTransitionDelay=wa(f.delay)&&(q.applyTransitionDuration||q.hasTransitions);q.applyAnimationDelay=
wa(f.delay)&&q.hasAnimations;q.recalculateTimingStyles=0<U.length;if(q.applyTransitionDuration||q.applyAnimationDuration)m=f.duration?parseFloat(f.duration):m,q.applyTransitionDuration&&(q.hasTransitions=!0,D.transitionDuration=m,E=0<h.style[S+"Property"].length,x.push(Ia(m,E))),q.applyAnimationDuration&&(q.hasAnimations=!0,D.animationDuration=m,x.push([Aa,m+"s"]));if(0===m&&!q.recalculateTimingStyles)return L();if(null!=f.delay){var da;"boolean"!==typeof f.delay&&(da=parseFloat(f.delay),J=Math.max(da,
0));q.applyTransitionDelay&&x.push([ma,da+"s"]);q.applyAnimationDelay&&x.push([qa,da+"s"])}null==f.duration&&0<D.transitionDuration&&(q.recalculateTimingStyles=q.recalculateTimingStyles||ja);R=1E3*J;V=1E3*m;f.skipBlocking||(q.blockTransition=0<D.transitionDuration,q.blockKeyframeAnimation=0<D.animationDuration&&0<W.animationDelay&&0===W.animationDuration);f.from&&(f.cleanupStyles&&Ka(A,h,Object.keys(f.from)),Fa(a,f));q.blockTransition||q.blockKeyframeAnimation?M(m):f.skipBlocking||pa(h,!1);return{$$willAnimate:!0,
end:d,start:function(){if(!w)return v={end:d,cancel:u,resume:null,pause:null},G=new l(v),t(N),G}}}}]}]).provider("$$animateCssDriver",["$$animationProvider",function(a){a.drivers.push("$$animateCssDriver");this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(a,c,d,e,l,n,I){function g(a){return a.replace(/\bng-\S+\b/g,"")}function u(a,b){G(a)&&(a=a.split(" "));G(b)&&(b=b.split(" "));return a.filter(function(a){return-1===b.indexOf(a)}).join(" ")}
function C(c,e,n){function l(a){var b={},c=y(a).getBoundingClientRect();s(["width","height","top","left"],function(a){var d=c[a];switch(a){case "top":d+=t.scrollTop;break;case "left":d+=t.scrollLeft}b[a]=Math.floor(d)+"px"});return b}function p(){var c=g(n.attr("class")||""),d=u(c,k),c=u(k,c),d=a(C,{to:l(n),addClass:"ng-anchor-in "+d,removeClass:"ng-anchor-out "+c,delay:!0});return d.$$willAnimate?d:null}function I(){C.remove();e.removeClass("ng-animate-shim");n.removeClass("ng-animate-shim")}var C=
F(y(e).cloneNode(!0)),k=g(C.attr("class")||"");e.addClass("ng-animate-shim");n.addClass("ng-animate-shim");C.addClass("ng-anchor");H.append(C);var M;c=function(){var c=a(C,{addClass:"ng-anchor-out",delay:!0,from:l(e)});return c.$$willAnimate?c:null}();if(!c&&(M=p(),!M))return I();var L=c||M;return{start:function(){function a(){c&&c.end()}var b,c=L.start();c.done(function(){c=null;if(!M&&(M=p()))return c=M.start(),c.done(function(){c=null;I();b.complete()}),c;I();b.complete()});return b=new d({end:a,
cancel:a})}}}function B(a,b,c,e){var g=Q(a,P),n=Q(b,P),l=[];s(e,function(a){(a=C(c,a.out,a["in"]))&&l.push(a)});if(g||n||0!==l.length)return{start:function(){function a(){s(b,function(a){a.end()})}var b=[];g&&b.push(g.start());n&&b.push(n.start());s(l,function(a){b.push(a.start())});var c=new d({end:a,cancel:a});d.all(b,function(a){c.complete(a)});return c}}}function Q(c){var d=c.element,e=c.options||{};c.structural&&(e.event=c.event,e.structural=!0,e.applyClassesEarly=!0,"leave"===c.event&&(e.onDone=
e.domOperation));e.preparationClasses&&(e.event=$(e.event,e.preparationClasses));c=a(d,e);return c.$$willAnimate?c:null}if(!l.animations&&!l.transitions)return P;var t=I[0].body;c=y(e);var H=F(c.parentNode&&11===c.parentNode.nodeType||t.contains(c)?c:t);return function(a){return a.from&&a.to?B(a.from,a.to,a.classes,a.anchors):Q(a)}}]}]).provider("$$animateJs",["$animateProvider",function(a){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(b,c,d){function e(c){c=X(c)?c:c.split(" ");for(var d=
[],e={},l=0;l<c.length;l++){var s=c[l],B=a.$$registeredAnimations[s];B&&!e[s]&&(d.push(b.get(B)),e[s]=!0)}return d}var l=Z(d);return function(a,b,d,u){function C(){u.domOperation();l(a,u)}function B(a,b,d,e,f){switch(d){case "animate":b=[b,e.from,e.to,f];break;case "setClass":b=[b,F,G,f];break;case "addClass":b=[b,F,f];break;case "removeClass":b=[b,G,f];break;default:b=[b,f]}b.push(e);if(a=a.apply(a,b))if(Ca(a.start)&&(a=a.start()),a instanceof c)a.done(f);else if(Ca(a))return a;return P}function y(a,
b,d,e,f){var g=[];s(e,function(e){var k=e[f];k&&g.push(function(){var e,f,g=!1,h=function(a){g||(g=!0,(f||P)(a),e.complete(!a))};e=new c({end:function(){h()},cancel:function(){h(!0)}});f=B(k,a,b,d,function(a){h(!1===a)});return e})});return g}function t(a,b,d,e,f){var g=y(a,b,d,e,f);if(0===g.length){var h,k;"beforeSetClass"===f?(h=y(a,"removeClass",d,e,"beforeRemoveClass"),k=y(a,"addClass",d,e,"beforeAddClass")):"setClass"===f&&(h=y(a,"removeClass",d,e,"removeClass"),k=y(a,"addClass",d,e,"addClass"));
h&&(g=g.concat(h));k&&(g=g.concat(k))}if(0!==g.length)return function(a){var b=[];g.length&&s(g,function(a){b.push(a())});b.length?c.all(b,a):a();return function(a){s(b,function(b){a?b.cancel():b.end()})}}}var H=!1;3===arguments.length&&ba(d)&&(u=d,d=null);u=oa(u);d||(d=a.attr("class")||"",u.addClass&&(d+=" "+u.addClass),u.removeClass&&(d+=" "+u.removeClass));var F=u.addClass,G=u.removeClass,x=e(d),r,p;if(x.length){var K,J;"leave"===b?(J="leave",K="afterLeave"):(J="before"+b.charAt(0).toUpperCase()+
b.substr(1),K=b);"enter"!==b&&"move"!==b&&(r=t(a,b,u,x,J));p=t(a,b,u,x,K)}if(r||p){var k;return{$$willAnimate:!0,end:function(){k?k.end():(H=!0,C(),ha(a,u),k=new c,k.complete(!0));return k},start:function(){function b(c){H=!0;C();ha(a,u);k.complete(c)}if(k)return k;k=new c;var d,e=[];r&&e.push(function(a){d=r(a)});e.length?e.push(function(a){C();a(!0)}):C();p&&e.push(function(a){d=p(a)});k.setHost({end:function(){H||((d||P)(void 0),b(void 0))},cancel:function(){H||((d||P)(!0),b(!0))}});c.chain(e,
b);return k}}}}}]}]).provider("$$animateJsDriver",["$$animationProvider",function(a){a.drivers.push("$$animateJsDriver");this.$get=["$$animateJs","$$AnimateRunner",function(a,c){function d(c){return a(c.element,c.event,c.classes,c.options)}return function(a){if(a.from&&a.to){var b=d(a.from),n=d(a.to);if(b||n)return{start:function(){function a(){return function(){s(d,function(a){a.end()})}}var d=[];b&&d.push(b.start());n&&d.push(n.start());c.all(d,function(a){e.complete(a)});var e=new c({end:a(),cancel:a()});
return e}}}else return d(a)}}]}])})(window,window.angular);
//# sourceMappingURL=angular-animate.min.js.map

/*
 AngularJS v1.5.11
 (c) 2010-2017 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(x,n){'use strict';function s(f,k){var e=!1,a=!1;this.ngClickOverrideEnabled=function(b){return n.isDefined(b)?(b&&!a&&(a=!0,t.$$moduleName="ngTouch",k.directive("ngClick",t),f.decorator("ngClickDirective",["$delegate",function(a){if(e)a.shift();else for(var b=a.length-1;0<=b;){if("ngTouch"===a[b].$$moduleName){a.splice(b,1);break}b--}return a}])),e=b,this):e};this.$get=function(){return{ngClickOverrideEnabled:function(){return e}}}}function v(f,k,e){p.directive(f,["$parse","$swipe",function(a,
b){return function(l,u,g){function h(c){if(!d)return!1;var a=Math.abs(c.y-d.y);c=(c.x-d.x)*k;return r&&75>a&&0<c&&30<c&&.3>a/c}var m=a(g[f]),d,r,c=["touch"];n.isDefined(g.ngSwipeDisableMouse)||c.push("mouse");b.bind(u,{start:function(c,a){d=c;r=!0},cancel:function(c){r=!1},end:function(c,d){h(c)&&l.$apply(function(){u.triggerHandler(e);m(l,{$event:d})})}},c)}}])}var p=n.module("ngTouch",[]);p.provider("$touch",s);s.$inject=["$provide","$compileProvider"];p.factory("$swipe",[function(){function f(a){a=
a.originalEvent||a;var b=a.touches&&a.touches.length?a.touches:[a];a=a.changedTouches&&a.changedTouches[0]||b[0];return{x:a.clientX,y:a.clientY}}function k(a,b){var l=[];n.forEach(a,function(a){(a=e[a][b])&&l.push(a)});return l.join(" ")}var e={mouse:{start:"mousedown",move:"mousemove",end:"mouseup"},touch:{start:"touchstart",move:"touchmove",end:"touchend",cancel:"touchcancel"},pointer:{start:"pointerdown",move:"pointermove",end:"pointerup",cancel:"pointercancel"}};return{bind:function(a,b,l){var e,
g,h,m,d=!1;l=l||["mouse","touch","pointer"];a.on(k(l,"start"),function(c){h=f(c);d=!0;g=e=0;m=h;b.start&&b.start(h,c)});var r=k(l,"cancel");if(r)a.on(r,function(c){d=!1;b.cancel&&b.cancel(c)});a.on(k(l,"move"),function(c){if(d&&h){var a=f(c);e+=Math.abs(a.x-m.x);g+=Math.abs(a.y-m.y);m=a;10>e&&10>g||(g>e?(d=!1,b.cancel&&b.cancel(c)):(c.preventDefault(),b.move&&b.move(a,c)))}});a.on(k(l,"end"),function(c){d&&(d=!1,b.end&&b.end(f(c),c))})}}}]);var t=["$parse","$timeout","$rootElement",function(f,k,e){function a(a,
d,b){for(var c=0;c<a.length;c+=2){var g=a[c+1],e=b;if(25>Math.abs(a[c]-d)&&25>Math.abs(g-e))return a.splice(c,c+2),!0}return!1}function b(b){if(!(2500<Date.now()-u)){var d=b.touches&&b.touches.length?b.touches:[b],e=d[0].clientX,d=d[0].clientY;if(!(1>e&&1>d||h&&h[0]===e&&h[1]===d)){h&&(h=null);var c=b.target;"label"===n.lowercase(c.nodeName||c[0]&&c[0].nodeName)&&(h=[e,d]);a(g,e,d)||(b.stopPropagation(),b.preventDefault(),b.target&&b.target.blur&&b.target.blur())}}}function l(a){a=a.touches&&a.touches.length?
a.touches:[a];var b=a[0].clientX,e=a[0].clientY;g.push(b,e);k(function(){for(var a=0;a<g.length;a+=2)if(g[a]===b&&g[a+1]===e){g.splice(a,a+2);break}},2500,!1)}var u,g,h;return function(h,d,k){var c=f(k.ngClick),w=!1,q,p,s,t;d.on("touchstart",function(a){w=!0;q=a.target?a.target:a.srcElement;3===q.nodeType&&(q=q.parentNode);d.addClass("ng-click-active");p=Date.now();a=a.originalEvent||a;a=(a.touches&&a.touches.length?a.touches:[a])[0];s=a.clientX;t=a.clientY});d.on("touchcancel",function(a){w=!1;d.removeClass("ng-click-active")});
d.on("touchend",function(c){var h=Date.now()-p,f=c.originalEvent||c,m=(f.changedTouches&&f.changedTouches.length?f.changedTouches:f.touches&&f.touches.length?f.touches:[f])[0],f=m.clientX,m=m.clientY,v=Math.sqrt(Math.pow(f-s,2)+Math.pow(m-t,2));w&&750>h&&12>v&&(g||(e[0].addEventListener("click",b,!0),e[0].addEventListener("touchstart",l,!0),g=[]),u=Date.now(),a(g,f,m),q&&q.blur(),n.isDefined(k.disabled)&&!1!==k.disabled||d.triggerHandler("click",[c]));w=!1;d.removeClass("ng-click-active")});d.onclick=
function(a){};d.on("click",function(a,b){h.$apply(function(){c(h,{$event:b||a})})});d.on("mousedown",function(a){d.addClass("ng-click-active")});d.on("mousemove mouseup",function(a){d.removeClass("ng-click-active")})}}];v("ngSwipeLeft",-1,"swipeleft");v("ngSwipeRight",1,"swiperight")})(window,window.angular);
//# sourceMappingURL=angular-touch.min.js.map

!function(t,e){"function"==typeof define&&define.amd?define(e):"object"==typeof exports?module.exports=e(require,exports,module):t.Tether=e()}(this,function(t,e,o){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function n(t){var e=getComputedStyle(t)||{},o=e.position,i=[];if("fixed"===o)return[t];for(var n=t;n=n.parentNode;){var r=void 0;try{r=getComputedStyle(n)}catch(s){}if("undefined"==typeof r||null===r)return i.push(n),i;var a=r,f=a.overflow,h=a.overflowX,l=a.overflowY;/(auto|scroll)/.test(f+l+h)&&("absolute"!==o||["relative","absolute","fixed"].indexOf(r.position)>=0)&&i.push(n)}return i.push(document.body),i}function r(t){var e=void 0;t===document?(e=document,t=document.documentElement):e=t.ownerDocument;var o=e.documentElement,i={},n=t.getBoundingClientRect();for(var r in n)i[r]=n[r];var s=x(e);return i.top-=s.top,i.left-=s.left,"undefined"==typeof i.width&&(i.width=document.body.scrollWidth-i.left-i.right),"undefined"==typeof i.height&&(i.height=document.body.scrollHeight-i.top-i.bottom),i.top=i.top-o.clientTop,i.left=i.left-o.clientLeft,i.right=e.body.clientWidth-i.width-i.left,i.bottom=e.body.clientHeight-i.height-i.top,i}function s(t){return t.offsetParent||document.documentElement}function a(){var t=document.createElement("div");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");f(e.style,{position:"absolute",top:0,left:0,pointerEvents:"none",visibility:"hidden",width:"200px",height:"150px",overflow:"hidden"}),e.appendChild(t),document.body.appendChild(e);var o=t.offsetWidth;e.style.overflow="scroll";var i=t.offsetWidth;o===i&&(i=e.clientWidth),document.body.removeChild(e);var n=o-i;return{width:n,height:n}}function f(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=[];return Array.prototype.push.apply(e,arguments),e.slice(1).forEach(function(e){if(e)for(var o in e)({}).hasOwnProperty.call(e,o)&&(t[o]=e[o])}),t}function h(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.remove(e)});else{var o=new RegExp("(^| )"+e.split(" ").join("|")+"( |$)","gi"),i=u(t).replace(o," ");p(t,i)}}function l(t,e){if("undefined"!=typeof t.classList)e.split(" ").forEach(function(e){e.trim()&&t.classList.add(e)});else{h(t,e);var o=u(t)+(" "+e);p(t,o)}}function d(t,e){if("undefined"!=typeof t.classList)return t.classList.contains(e);var o=u(t);return new RegExp("(^| )"+e+"( |$)","gi").test(o)}function u(t){return t.className instanceof SVGAnimatedString?t.className.baseVal:t.className}function p(t,e){t.setAttribute("class",e)}function c(t,e,o){o.forEach(function(o){-1===e.indexOf(o)&&d(t,o)&&h(t,o)}),e.forEach(function(e){d(t,e)||l(t,e)})}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function g(t,e){var o=arguments.length<=2||void 0===arguments[2]?1:arguments[2];return t+o>=e&&e>=t-o}function m(){return"undefined"!=typeof performance&&"undefined"!=typeof performance.now?performance.now():+new Date}function v(){for(var t={top:0,left:0},e=arguments.length,o=Array(e),i=0;e>i;i++)o[i]=arguments[i];return o.forEach(function(e){var o=e.top,i=e.left;"string"==typeof o&&(o=parseFloat(o,10)),"string"==typeof i&&(i=parseFloat(i,10)),t.top+=o,t.left+=i}),t}function y(t,e){return"string"==typeof t.left&&-1!==t.left.indexOf("%")&&(t.left=parseFloat(t.left,10)/100*e.width),"string"==typeof t.top&&-1!==t.top.indexOf("%")&&(t.top=parseFloat(t.top,10)/100*e.height),t}function b(t,e){return"scrollParent"===e?e=t.scrollParents[0]:"window"===e&&(e=[pageXOffset,pageYOffset,innerWidth+pageXOffset,innerHeight+pageYOffset]),e===document&&(e=e.documentElement),"undefined"!=typeof e.nodeType&&!function(){var t=r(e),o=t,i=getComputedStyle(e);e=[o.left,o.top,t.width+o.left,t.height+o.top],U.forEach(function(t,o){t=t[0].toUpperCase()+t.substr(1),"Top"===t||"Left"===t?e[o]+=parseFloat(i["border"+t+"Width"]):e[o]-=parseFloat(i["border"+t+"Width"])})}(),e}var w=function(){function t(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,o,i){return o&&t(e.prototype,o),i&&t(e,i),e}}(),C=void 0;"undefined"==typeof C&&(C={modules:[]});var O=function(){var t=0;return function(){return++t}}(),E={},x=function(t){var e=t._tetherZeroElement;"undefined"==typeof e&&(e=t.createElement("div"),e.setAttribute("data-tether-id",O()),f(e.style,{top:0,left:0,position:"absolute"}),t.body.appendChild(e),t._tetherZeroElement=e);var o=e.getAttribute("data-tether-id");if("undefined"==typeof E[o]){E[o]={};var i=e.getBoundingClientRect();for(var n in i)E[o][n]=i[n];T(function(){delete E[o]})}return E[o]},A=[],T=function(t){A.push(t)},S=function(){for(var t=void 0;t=A.pop();)t()},W=function(){function t(){i(this,t)}return w(t,[{key:"on",value:function(t,e,o){var i=arguments.length<=3||void 0===arguments[3]?!1:arguments[3];"undefined"==typeof this.bindings&&(this.bindings={}),"undefined"==typeof this.bindings[t]&&(this.bindings[t]=[]),this.bindings[t].push({handler:e,ctx:o,once:i})}},{key:"once",value:function(t,e,o){this.on(t,e,o,!0)}},{key:"off",value:function(t,e){if("undefined"==typeof this.bindings||"undefined"==typeof this.bindings[t])if("undefined"==typeof e)delete this.bindings[t];else for(var o=0;o<this.bindings[t].length;)this.bindings[t][o].handler===e?this.bindings[t].splice(o,1):++o}},{key:"trigger",value:function(t){if("undefined"!=typeof this.bindings&&this.bindings[t]){for(var e=0,o=arguments.length,i=Array(o>1?o-1:0),n=1;o>n;n++)i[n-1]=arguments[n];for(;e<this.bindings[t].length;){var r=this.bindings[t][e],s=r.handler,a=r.ctx,f=r.once,h=a;"undefined"==typeof h&&(h=this),s.apply(h,i),f?this.bindings[t].splice(e,1):++e}}}}]),t}();C.Utils={getScrollParents:n,getBounds:r,getOffsetParent:s,extend:f,addClass:l,removeClass:h,hasClass:d,updateClasses:c,defer:T,flush:S,uniqueId:O,Evented:W,getScrollBarSize:a};var M=function(){function t(t,e){var o=[],i=!0,n=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(o.push(s.value),!e||o.length!==e);i=!0);}catch(f){n=!0,r=f}finally{try{!i&&a["return"]&&a["return"]()}finally{if(n)throw r}}return o}return function(e,o){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),w=function(){function t(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,o,i){return o&&t(e.prototype,o),i&&t(e,i),e}}();if("undefined"==typeof C)throw new Error("You must include the utils.js file before tether.js");var P=C.Utils,n=P.getScrollParents,r=P.getBounds,s=P.getOffsetParent,f=P.extend,l=P.addClass,h=P.removeClass,c=P.updateClasses,T=P.defer,S=P.flush,a=P.getScrollBarSize,k=function(){if("undefined"==typeof document)return"";for(var t=document.createElement("div"),e=["transform","webkitTransform","OTransform","MozTransform","msTransform"],o=0;o<e.length;++o){var i=e[o];if(void 0!==t.style[i])return i}}(),B=[],_=function(){B.forEach(function(t){t.position(!1)}),S()};!function(){var t=null,e=null,o=null,i=function n(){return"undefined"!=typeof e&&e>16?(e=Math.min(e-16,250),void(o=setTimeout(n,250))):void("undefined"!=typeof t&&m()-t<10||("undefined"!=typeof o&&(clearTimeout(o),o=null),t=m(),_(),e=m()-t))};"undefined"!=typeof window&&"undefined"!=typeof window.addEventListener&&["resize","scroll","touchmove"].forEach(function(t){window.addEventListener(t,i)})}();var z={center:"center",left:"right",right:"left"},L={middle:"middle",top:"bottom",bottom:"top"},Y={top:0,left:0,middle:"50%",center:"50%",bottom:"100%",right:"100%"},H=function(t,e){var o=t.left,i=t.top;return"auto"===o&&(o=z[e.left]),"auto"===i&&(i=L[e.top]),{left:o,top:i}},F=function(t){var e=t.left,o=t.top;return"undefined"!=typeof Y[t.left]&&(e=Y[t.left]),"undefined"!=typeof Y[t.top]&&(o=Y[t.top]),{left:e,top:o}},X=function(t){var e=t.split(" "),o=M(e,2),i=o[0],n=o[1];return{top:i,left:n}},j=X,N=function(){function t(e){var o=this;i(this,t),this.position=this.position.bind(this),B.push(this),this.history=[],this.setOptions(e,!1),C.modules.forEach(function(t){"undefined"!=typeof t.initialize&&t.initialize.call(o)}),this.position()}return w(t,[{key:"getClass",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"":arguments[0],e=this.options.classes;return"undefined"!=typeof e&&e[t]?this.options.classes[t]:this.options.classPrefix?this.options.classPrefix+"-"+t:t}},{key:"setOptions",value:function(t){var e=this,o=arguments.length<=1||void 0===arguments[1]?!0:arguments[1],i={offset:"0 0",targetOffset:"0 0",targetAttachment:"auto auto",classPrefix:"tether"};this.options=f(i,t);var r=this.options,s=r.element,a=r.target,h=r.targetModifier;if(this.element=s,this.target=a,this.targetModifier=h,"viewport"===this.target?(this.target=document.body,this.targetModifier="visible"):"scroll-handle"===this.target&&(this.target=document.body,this.targetModifier="scroll-handle"),["element","target"].forEach(function(t){if("undefined"==typeof e[t])throw new Error("Tether Error: Both element and target must be defined");"undefined"!=typeof e[t].jquery?e[t]=e[t][0]:"string"==typeof e[t]&&(e[t]=document.querySelector(e[t]))}),l(this.element,this.getClass("element")),this.options.addTargetClasses!==!1&&l(this.target,this.getClass("target")),!this.options.attachment)throw new Error("Tether Error: You must provide an attachment");this.targetAttachment=j(this.options.targetAttachment),this.attachment=j(this.options.attachment),this.offset=X(this.options.offset),this.targetOffset=X(this.options.targetOffset),"undefined"!=typeof this.scrollParents&&this.disable(),"scroll-handle"===this.targetModifier?this.scrollParents=[this.target]:this.scrollParents=n(this.target),this.options.enabled!==!1&&this.enable(o)}},{key:"getTargetBounds",value:function(){if("undefined"==typeof this.targetModifier)return r(this.target);if("visible"===this.targetModifier){if(this.target===document.body)return{top:pageYOffset,left:pageXOffset,height:innerHeight,width:innerWidth};var t=r(this.target),e={height:t.height,width:t.width,top:t.top,left:t.left};return e.height=Math.min(e.height,t.height-(pageYOffset-t.top)),e.height=Math.min(e.height,t.height-(t.top+t.height-(pageYOffset+innerHeight))),e.height=Math.min(innerHeight,e.height),e.height-=2,e.width=Math.min(e.width,t.width-(pageXOffset-t.left)),e.width=Math.min(e.width,t.width-(t.left+t.width-(pageXOffset+innerWidth))),e.width=Math.min(innerWidth,e.width),e.width-=2,e.top<pageYOffset&&(e.top=pageYOffset),e.left<pageXOffset&&(e.left=pageXOffset),e}if("scroll-handle"===this.targetModifier){var t=void 0,o=this.target;o===document.body?(o=document.documentElement,t={left:pageXOffset,top:pageYOffset,height:innerHeight,width:innerWidth}):t=r(o);var i=getComputedStyle(o),n=o.scrollWidth>o.clientWidth||[i.overflow,i.overflowX].indexOf("scroll")>=0||this.target!==document.body,s=0;n&&(s=15);var a=t.height-parseFloat(i.borderTopWidth)-parseFloat(i.borderBottomWidth)-s,e={width:15,height:.975*a*(a/o.scrollHeight),left:t.left+t.width-parseFloat(i.borderLeftWidth)-15},f=0;408>a&&this.target===document.body&&(f=-11e-5*Math.pow(a,2)-.00727*a+22.58),this.target!==document.body&&(e.height=Math.max(e.height,24));var h=this.target.scrollTop/(o.scrollHeight-a);return e.top=h*(a-e.height-f)+t.top+parseFloat(i.borderTopWidth),this.target===document.body&&(e.height=Math.max(e.height,24)),e}}},{key:"clearCache",value:function(){this._cache={}}},{key:"cache",value:function(t,e){return"undefined"==typeof this._cache&&(this._cache={}),"undefined"==typeof this._cache[t]&&(this._cache[t]=e.call(this)),this._cache[t]}},{key:"enable",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];this.options.addTargetClasses!==!1&&l(this.target,this.getClass("enabled")),l(this.element,this.getClass("enabled")),this.enabled=!0,this.scrollParents.forEach(function(e){e!==document&&e.addEventListener("scroll",t.position)}),e&&this.position()}},{key:"disable",value:function(){var t=this;h(this.target,this.getClass("enabled")),h(this.element,this.getClass("enabled")),this.enabled=!1,"undefined"!=typeof this.scrollParents&&this.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.position)})}},{key:"destroy",value:function(){var t=this;this.disable(),B.forEach(function(e,o){return e===t?void B.splice(o,1):void 0})}},{key:"updateAttachClasses",value:function(t,e){var o=this;t=t||this.attachment,e=e||this.targetAttachment;var i=["left","top","bottom","right","middle","center"];"undefined"!=typeof this._addAttachClasses&&this._addAttachClasses.length&&this._addAttachClasses.splice(0,this._addAttachClasses.length),"undefined"==typeof this._addAttachClasses&&(this._addAttachClasses=[]);var n=this._addAttachClasses;t.top&&n.push(this.getClass("element-attached")+"-"+t.top),t.left&&n.push(this.getClass("element-attached")+"-"+t.left),e.top&&n.push(this.getClass("target-attached")+"-"+e.top),e.left&&n.push(this.getClass("target-attached")+"-"+e.left);var r=[];i.forEach(function(t){r.push(o.getClass("element-attached")+"-"+t),r.push(o.getClass("target-attached")+"-"+t)}),T(function(){"undefined"!=typeof o._addAttachClasses&&(c(o.element,o._addAttachClasses,r),o.options.addTargetClasses!==!1&&c(o.target,o._addAttachClasses,r),delete o._addAttachClasses)})}},{key:"position",value:function(){var t=this,e=arguments.length<=0||void 0===arguments[0]?!0:arguments[0];if(this.enabled){this.clearCache();var o=H(this.targetAttachment,this.attachment);this.updateAttachClasses(this.attachment,o);var i=this.cache("element-bounds",function(){return r(t.element)}),n=i.width,f=i.height;if(0===n&&0===f&&"undefined"!=typeof this.lastSize){var h=this.lastSize;n=h.width,f=h.height}else this.lastSize={width:n,height:f};var l=this.cache("target-bounds",function(){return t.getTargetBounds()}),d=l,u=y(F(this.attachment),{width:n,height:f}),p=y(F(o),d),c=y(this.offset,{width:n,height:f}),g=y(this.targetOffset,d);u=v(u,c),p=v(p,g);for(var m=l.left+p.left-u.left,b=l.top+p.top-u.top,w=0;w<C.modules.length;++w){var O=C.modules[w],E=O.position.call(this,{left:m,top:b,targetAttachment:o,targetPos:l,elementPos:i,offset:u,targetOffset:p,manualOffset:c,manualTargetOffset:g,scrollbarSize:A,attachment:this.attachment});if(E===!1)return!1;"undefined"!=typeof E&&"object"==typeof E&&(b=E.top,m=E.left)}var x={page:{top:b,left:m},viewport:{top:b-pageYOffset,bottom:pageYOffset-b-f+innerHeight,left:m-pageXOffset,right:pageXOffset-m-n+innerWidth}},A=void 0;return document.body.scrollWidth>window.innerWidth&&(A=this.cache("scrollbar-size",a),x.viewport.bottom-=A.height),document.body.scrollHeight>window.innerHeight&&(A=this.cache("scrollbar-size",a),x.viewport.right-=A.width),(-1===["","static"].indexOf(document.body.style.position)||-1===["","static"].indexOf(document.body.parentElement.style.position))&&(x.page.bottom=document.body.scrollHeight-b-f,x.page.right=document.body.scrollWidth-m-n),"undefined"!=typeof this.options.optimizations&&this.options.optimizations.moveElement!==!1&&"undefined"==typeof this.targetModifier&&!function(){var e=t.cache("target-offsetparent",function(){return s(t.target)}),o=t.cache("target-offsetparent-bounds",function(){return r(e)}),i=getComputedStyle(e),n=o,a={};if(["Top","Left","Bottom","Right"].forEach(function(t){a[t.toLowerCase()]=parseFloat(i["border"+t+"Width"])}),o.right=document.body.scrollWidth-o.left-n.width+a.right,o.bottom=document.body.scrollHeight-o.top-n.height+a.bottom,x.page.top>=o.top+a.top&&x.page.bottom>=o.bottom&&x.page.left>=o.left+a.left&&x.page.right>=o.right){var f=e.scrollTop,h=e.scrollLeft;x.offset={top:x.page.top-o.top+f-a.top,left:x.page.left-o.left+h-a.left}}}(),this.move(x),this.history.unshift(x),this.history.length>3&&this.history.pop(),e&&S(),!0}}},{key:"move",value:function(t){var e=this;if("undefined"!=typeof this.element.parentNode){var o={};for(var i in t){o[i]={};for(var n in t[i]){for(var r=!1,a=0;a<this.history.length;++a){var h=this.history[a];if("undefined"!=typeof h[i]&&!g(h[i][n],t[i][n])){r=!0;break}}r||(o[i][n]=!0)}}var l={top:"",left:"",right:"",bottom:""},d=function(t,o){var i="undefined"!=typeof e.options.optimizations,n=i?e.options.optimizations.gpu:null;if(n!==!1){var r=void 0,s=void 0;t.top?(l.top=0,r=o.top):(l.bottom=0,r=-o.bottom),t.left?(l.left=0,s=o.left):(l.right=0,s=-o.right),l[k]="translateX("+Math.round(s)+"px) translateY("+Math.round(r)+"px)","msTransform"!==k&&(l[k]+=" translateZ(0)")}else t.top?l.top=o.top+"px":l.bottom=o.bottom+"px",t.left?l.left=o.left+"px":l.right=o.right+"px"},u=!1;if((o.page.top||o.page.bottom)&&(o.page.left||o.page.right)?(l.position="absolute",d(o.page,t.page)):(o.viewport.top||o.viewport.bottom)&&(o.viewport.left||o.viewport.right)?(l.position="fixed",d(o.viewport,t.viewport)):"undefined"!=typeof o.offset&&o.offset.top&&o.offset.left?!function(){l.position="absolute";var i=e.cache("target-offsetparent",function(){return s(e.target)});s(e.element)!==i&&T(function(){e.element.parentNode.removeChild(e.element),i.appendChild(e.element)}),d(o.offset,t.offset),u=!0}():(l.position="absolute",d({top:!0,left:!0},t.page)),!u){for(var p=!0,c=this.element.parentNode;c&&"BODY"!==c.tagName;){if("static"!==getComputedStyle(c).position){p=!1;break}c=c.parentNode}p||(this.element.parentNode.removeChild(this.element),document.body.appendChild(this.element))}var m={},v=!1;for(var n in l){var y=l[n],b=this.element.style[n];b!==y&&(v=!0,m[n]=y)}v&&T(function(){f(e.element.style,m)})}}}]),t}();N.modules=[],C.position=_;var R=f(N,C),M=function(){function t(t,e){var o=[],i=!0,n=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(o.push(s.value),!e||o.length!==e);i=!0);}catch(f){n=!0,r=f}finally{try{!i&&a["return"]&&a["return"]()}finally{if(n)throw r}}return o}return function(e,o){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),P=C.Utils,r=P.getBounds,f=P.extend,c=P.updateClasses,T=P.defer,U=["left","top","right","bottom"];C.modules.push({position:function(t){var e=this,o=t.top,i=t.left,n=t.targetAttachment;if(!this.options.constraints)return!0;var s=this.cache("element-bounds",function(){return r(e.element)}),a=s.height,h=s.width;if(0===h&&0===a&&"undefined"!=typeof this.lastSize){var l=this.lastSize;h=l.width,a=l.height}var d=this.cache("target-bounds",function(){return e.getTargetBounds()}),u=d.height,p=d.width,g=[this.getClass("pinned"),this.getClass("out-of-bounds")];this.options.constraints.forEach(function(t){var e=t.outOfBoundsClass,o=t.pinnedClass;e&&g.push(e),o&&g.push(o)}),g.forEach(function(t){["left","top","right","bottom"].forEach(function(e){g.push(t+"-"+e)})});var m=[],v=f({},n),y=f({},this.attachment);return this.options.constraints.forEach(function(t){var r=t.to,s=t.attachment,f=t.pin;"undefined"==typeof s&&(s="");var l=void 0,d=void 0;if(s.indexOf(" ")>=0){var c=s.split(" "),g=M(c,2);d=g[0],l=g[1]}else l=d=s;var w=b(e,r);("target"===d||"both"===d)&&(o<w[1]&&"top"===v.top&&(o+=u,v.top="bottom"),o+a>w[3]&&"bottom"===v.top&&(o-=u,v.top="top")),"together"===d&&("top"===v.top&&("bottom"===y.top&&o<w[1]?(o+=u,v.top="bottom",o+=a,y.top="top"):"top"===y.top&&o+a>w[3]&&o-(a-u)>=w[1]&&(o-=a-u,v.top="bottom",y.top="bottom")),"bottom"===v.top&&("top"===y.top&&o+a>w[3]?(o-=u,v.top="top",o-=a,y.top="bottom"):"bottom"===y.top&&o<w[1]&&o+(2*a-u)<=w[3]&&(o+=a-u,v.top="top",y.top="top")),"middle"===v.top&&(o+a>w[3]&&"top"===y.top?(o-=a,y.top="bottom"):o<w[1]&&"bottom"===y.top&&(o+=a,y.top="top"))),("target"===l||"both"===l)&&(i<w[0]&&"left"===v.left&&(i+=p,v.left="right"),i+h>w[2]&&"right"===v.left&&(i-=p,v.left="left")),"together"===l&&(i<w[0]&&"left"===v.left?"right"===y.left?(i+=p,v.left="right",i+=h,y.left="left"):"left"===y.left&&(i+=p,v.left="right",i-=h,y.left="right"):i+h>w[2]&&"right"===v.left?"left"===y.left?(i-=p,v.left="left",i-=h,y.left="right"):"right"===y.left&&(i-=p,v.left="left",i+=h,y.left="left"):"center"===v.left&&(i+h>w[2]&&"left"===y.left?(i-=h,y.left="right"):i<w[0]&&"right"===y.left&&(i+=h,y.left="left"))),("element"===d||"both"===d)&&(o<w[1]&&"bottom"===y.top&&(o+=a,y.top="top"),o+a>w[3]&&"top"===y.top&&(o-=a,y.top="bottom")),("element"===l||"both"===l)&&(i<w[0]&&("right"===y.left?(i+=h,y.left="left"):"center"===y.left&&(i+=h/2,y.left="left")),i+h>w[2]&&("left"===y.left?(i-=h,y.left="right"):"center"===y.left&&(i-=h/2,y.left="right"))),"string"==typeof f?f=f.split(",").map(function(t){return t.trim()}):f===!0&&(f=["top","left","right","bottom"]),f=f||[];var C=[],O=[];o<w[1]&&(f.indexOf("top")>=0?(o=w[1],C.push("top")):O.push("top")),o+a>w[3]&&(f.indexOf("bottom")>=0?(o=w[3]-a,C.push("bottom")):O.push("bottom")),i<w[0]&&(f.indexOf("left")>=0?(i=w[0],C.push("left")):O.push("left")),i+h>w[2]&&(f.indexOf("right")>=0?(i=w[2]-h,C.push("right")):O.push("right")),C.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.pinnedClass?e.options.pinnedClass:e.getClass("pinned"),m.push(t),C.forEach(function(e){m.push(t+"-"+e)})}(),O.length&&!function(){var t=void 0;t="undefined"!=typeof e.options.outOfBoundsClass?e.options.outOfBoundsClass:e.getClass("out-of-bounds"),m.push(t),O.forEach(function(e){m.push(t+"-"+e)})}(),(C.indexOf("left")>=0||C.indexOf("right")>=0)&&(y.left=v.left=!1),(C.indexOf("top")>=0||C.indexOf("bottom")>=0)&&(y.top=v.top=!1),(v.top!==n.top||v.left!==n.left||y.top!==e.attachment.top||y.left!==e.attachment.left)&&e.updateAttachClasses(y,v)}),T(function(){e.options.addTargetClasses!==!1&&c(e.target,m,g),c(e.element,m,g)}),{top:o,left:i}}});var P=C.Utils,r=P.getBounds,c=P.updateClasses,T=P.defer;C.modules.push({position:function(t){var e=this,o=t.top,i=t.left,n=this.cache("element-bounds",function(){return r(e.element)}),s=n.height,a=n.width,f=this.getTargetBounds(),h=o+s,l=i+a,d=[];o<=f.bottom&&h>=f.top&&["left","right"].forEach(function(t){var e=f[t];(e===i||e===l)&&d.push(t)}),i<=f.right&&l>=f.left&&["top","bottom"].forEach(function(t){var e=f[t];(e===o||e===h)&&d.push(t)});var u=[],p=[],g=["left","top","right","bottom"];return u.push(this.getClass("abutted")),g.forEach(function(t){u.push(e.getClass("abutted")+"-"+t)}),d.length&&p.push(this.getClass("abutted")),d.forEach(function(t){p.push(e.getClass("abutted")+"-"+t)}),T(function(){e.options.addTargetClasses!==!1&&c(e.target,p,u),c(e.element,p,u)}),!0}});var M=function(){function t(t,e){var o=[],i=!0,n=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(o.push(s.value),!e||o.length!==e);i=!0);}catch(f){n=!0,r=f}finally{try{!i&&a["return"]&&a["return"]()}finally{if(n)throw r}}return o}return function(e,o){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,o);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();return C.modules.push({position:function(t){var e=t.top,o=t.left;if(this.options.shift){var i=this.options.shift;"function"==typeof this.options.shift&&(i=this.options.shift.call(this,{top:e,left:o}));var n=void 0,r=void 0;if("string"==typeof i){i=i.split(" "),i[1]=i[1]||i[0];var s=i,a=M(s,2);n=a[0],r=a[1],n=parseFloat(n,10),r=parseFloat(r,10)}else n=i.top,r=i.left;return e+=n,o+=r,{top:e,left:o}}}}),R});
/*!
 * Bootstrap v4.0.0-alpha.2 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>=3)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v3.0.0")}(jQuery),+function(a){"use strict";function b(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function, not "+typeof b);a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}}),b&&(Object.setPrototypeOf?Object.setPrototypeOf(a,b):a.__proto__=b)}function c(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var d=function(a,b,c){for(var d=!0;d;){var e=a,f=b,g=c;d=!1,null===e&&(e=Function.prototype);var h=Object.getOwnPropertyDescriptor(e,f);if(void 0!==h){if("value"in h)return h.value;var i=h.get;if(void 0===i)return;return i.call(g)}var j=Object.getPrototypeOf(e);if(null===j)return;a=j,b=f,c=g,d=!0,h=j=void 0}},e=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),f=function(a){function b(a){return{}.toString.call(a).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function c(a){return(a[0]||a).nodeType}function d(){return{bindType:h.end,delegateType:h.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}}}function e(){if(window.QUnit)return!1;var a=document.createElement("bootstrap");for(var b in i)if(void 0!==a.style[b])return{end:i[b]};return!1}function f(b){var c=this,d=!1;return a(this).one(j.TRANSITION_END,function(){d=!0}),setTimeout(function(){d||j.triggerTransitionEnd(c)},b),this}function g(){h=e(),a.fn.emulateTransitionEnd=f,j.supportsTransitionEnd()&&(a.event.special[j.TRANSITION_END]=d())}var h=!1,i={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},j={TRANSITION_END:"bsTransitionEnd",getUID:function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},getSelectorFromElement:function(a){var b=a.getAttribute("data-target");return b||(b=a.getAttribute("href")||"",b=/^#[a-z]/i.test(b)?b:null),b},reflow:function(a){new Function("bs","return bs")(a.offsetHeight)},triggerTransitionEnd:function(b){a(b).trigger(h.end)},supportsTransitionEnd:function(){return Boolean(h)},typeCheckConfig:function(a,d,e){for(var f in e)if(e.hasOwnProperty(f)){var g=e[f],h=d[f],i=void 0;if(i=h&&c(h)?"element":b(h),!new RegExp(g).test(i))throw new Error(a.toUpperCase()+": "+('Option "'+f+'" provided type "'+i+'" ')+('but expected type "'+g+'".'))}}};return g(),j}(jQuery),g=(function(a){var b="alert",d="4.0.0-alpha",g="bs.alert",h="."+g,i=".data-api",j=a.fn[b],k=150,l={DISMISS:'[data-dismiss="alert"]'},m={CLOSE:"close"+h,CLOSED:"closed"+h,CLICK_DATA_API:"click"+h+i},n={ALERT:"alert",FADE:"fade",IN:"in"},o=function(){function b(a){c(this,b),this._element=a}return e(b,[{key:"close",value:function(a){a=a||this._element;var b=this._getRootElement(a),c=this._triggerCloseEvent(b);c.isDefaultPrevented()||this._removeElement(b)}},{key:"dispose",value:function(){a.removeData(this._element,g),this._element=null}},{key:"_getRootElement",value:function(b){var c=f.getSelectorFromElement(b),d=!1;return c&&(d=a(c)[0]),d||(d=a(b).closest("."+n.ALERT)[0]),d}},{key:"_triggerCloseEvent",value:function(b){var c=a.Event(m.CLOSE);return a(b).trigger(c),c}},{key:"_removeElement",value:function(b){return a(b).removeClass(n.IN),f.supportsTransitionEnd()&&a(b).hasClass(n.FADE)?void a(b).one(f.TRANSITION_END,a.proxy(this._destroyElement,this,b)).emulateTransitionEnd(k):void this._destroyElement(b)}},{key:"_destroyElement",value:function(b){a(b).detach().trigger(m.CLOSED).remove()}}],[{key:"_jQueryInterface",value:function(c){return this.each(function(){var d=a(this),e=d.data(g);e||(e=new b(this),d.data(g,e)),"close"===c&&e[c](this)})}},{key:"_handleDismiss",value:function(a){return function(b){b&&b.preventDefault(),a.close(this)}}},{key:"VERSION",get:function(){return d}}]),b}();return a(document).on(m.CLICK_DATA_API,l.DISMISS,o._handleDismiss(new o)),a.fn[b]=o._jQueryInterface,a.fn[b].Constructor=o,a.fn[b].noConflict=function(){return a.fn[b]=j,o._jQueryInterface},o}(jQuery),function(a){var b="button",d="4.0.0-alpha",f="bs.button",g="."+f,h=".data-api",i=a.fn[b],j={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},k={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},l={CLICK_DATA_API:"click"+g+h,FOCUS_BLUR_DATA_API:"focus"+g+h+" "+("blur"+g+h)},m=function(){function b(a){c(this,b),this._element=a}return e(b,[{key:"toggle",value:function(){var b=!0,c=a(this._element).closest(k.DATA_TOGGLE)[0];if(c){var d=a(this._element).find(k.INPUT)[0];if(d){if("radio"===d.type)if(d.checked&&a(this._element).hasClass(j.ACTIVE))b=!1;else{var e=a(c).find(k.ACTIVE)[0];e&&a(e).removeClass(j.ACTIVE)}b&&(d.checked=!a(this._element).hasClass(j.ACTIVE),a(this._element).trigger("change"))}}else this._element.setAttribute("aria-pressed",!a(this._element).hasClass(j.ACTIVE));b&&a(this._element).toggleClass(j.ACTIVE)}},{key:"dispose",value:function(){a.removeData(this._element,f),this._element=null}}],[{key:"_jQueryInterface",value:function(c){return this.each(function(){var d=a(this).data(f);d||(d=new b(this),a(this).data(f,d)),"toggle"===c&&d[c]()})}},{key:"VERSION",get:function(){return d}}]),b}();return a(document).on(l.CLICK_DATA_API,k.DATA_TOGGLE_CARROT,function(b){b.preventDefault();var c=b.target;a(c).hasClass(j.BUTTON)||(c=a(c).closest(k.BUTTON)),m._jQueryInterface.call(a(c),"toggle")}).on(l.FOCUS_BLUR_DATA_API,k.DATA_TOGGLE_CARROT,function(b){var c=a(b.target).closest(k.BUTTON)[0];a(c).toggleClass(j.FOCUS,/^focus(in)?$/.test(b.type))}),a.fn[b]=m._jQueryInterface,a.fn[b].Constructor=m,a.fn[b].noConflict=function(){return a.fn[b]=i,m._jQueryInterface},m}(jQuery),function(a){var b="carousel",d="4.0.0-alpha",g="bs.carousel",h="."+g,i=".data-api",j=a.fn[b],k=600,l={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},m={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},n={NEXT:"next",PREVIOUS:"prev"},o={SLIDE:"slide"+h,SLID:"slid"+h,KEYDOWN:"keydown"+h,MOUSEENTER:"mouseenter"+h,MOUSELEAVE:"mouseleave"+h,LOAD_DATA_API:"load"+h+i,CLICK_DATA_API:"click"+h+i},p={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"right",LEFT:"left",ITEM:"carousel-item"},q={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".next, .prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},r=function(){function i(b,d){c(this,i),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(d),this._element=a(b)[0],this._indicatorsElement=a(this._element).find(q.INDICATORS)[0],this._addEventListeners()}return e(i,[{key:"next",value:function(){this._isSliding||this._slide(n.NEXT)}},{key:"nextWhenVisible",value:function(){document.hidden||this.next()}},{key:"prev",value:function(){this._isSliding||this._slide(n.PREVIOUS)}},{key:"pause",value:function(b){b||(this._isPaused=!0),a(this._element).find(q.NEXT_PREV)[0]&&f.supportsTransitionEnd()&&(f.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}},{key:"cycle",value:function(b){b||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval(a.proxy(document.visibilityState?this.nextWhenVisible:this.next,this),this._config.interval))}},{key:"to",value:function(b){var c=this;this._activeElement=a(this._element).find(q.ACTIVE_ITEM)[0];var d=this._getItemIndex(this._activeElement);if(!(b>this._items.length-1||0>b)){if(this._isSliding)return void a(this._element).one(o.SLID,function(){return c.to(b)});if(d===b)return this.pause(),void this.cycle();var e=b>d?n.NEXT:n.PREVIOUS;this._slide(e,this._items[b])}}},{key:"dispose",value:function(){a(this._element).off(h),a.removeData(this._element,g),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null}},{key:"_getConfig",value:function(c){return c=a.extend({},l,c),f.typeCheckConfig(b,c,m),c}},{key:"_addEventListeners",value:function(){this._config.keyboard&&a(this._element).on(o.KEYDOWN,a.proxy(this._keydown,this)),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||a(this._element).on(o.MOUSEENTER,a.proxy(this.pause,this)).on(o.MOUSELEAVE,a.proxy(this.cycle,this))}},{key:"_keydown",value:function(a){if(a.preventDefault(),!/input|textarea/i.test(a.target.tagName))switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}}},{key:"_getItemIndex",value:function(b){return this._items=a.makeArray(a(b).parent().find(q.ITEM)),this._items.indexOf(b)}},{key:"_getItemByDirection",value:function(a,b){var c=a===n.NEXT,d=a===n.PREVIOUS,e=this._getItemIndex(b),f=this._items.length-1,g=d&&0===e||c&&e===f;if(g&&!this._config.wrap)return b;var h=a===n.PREVIOUS?-1:1,i=(e+h)%this._items.length;return-1===i?this._items[this._items.length-1]:this._items[i]}},{key:"_triggerSlideEvent",value:function(b,c){var d=a.Event(o.SLIDE,{relatedTarget:b,direction:c});return a(this._element).trigger(d),d}},{key:"_setActiveIndicatorElement",value:function(b){if(this._indicatorsElement){a(this._indicatorsElement).find(q.ACTIVE).removeClass(p.ACTIVE);var c=this._indicatorsElement.children[this._getItemIndex(b)];c&&a(c).addClass(p.ACTIVE)}}},{key:"_slide",value:function(b,c){var d=this,e=a(this._element).find(q.ACTIVE_ITEM)[0],g=c||e&&this._getItemByDirection(b,e),h=Boolean(this._interval),i=b===n.NEXT?p.LEFT:p.RIGHT;if(g&&a(g).hasClass(p.ACTIVE))return void(this._isSliding=!1);var j=this._triggerSlideEvent(g,i);if(!j.isDefaultPrevented()&&e&&g){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(g);var l=a.Event(o.SLID,{relatedTarget:g,direction:i});f.supportsTransitionEnd()&&a(this._element).hasClass(p.SLIDE)?(a(g).addClass(b),f.reflow(g),a(e).addClass(i),a(g).addClass(i),a(e).one(f.TRANSITION_END,function(){a(g).removeClass(i).removeClass(b),a(g).addClass(p.ACTIVE),a(e).removeClass(p.ACTIVE).removeClass(b).removeClass(i),d._isSliding=!1,setTimeout(function(){return a(d._element).trigger(l)},0)}).emulateTransitionEnd(k)):(a(e).removeClass(p.ACTIVE),a(g).addClass(p.ACTIVE),this._isSliding=!1,a(this._element).trigger(l)),h&&this.cycle()}}}],[{key:"_jQueryInterface",value:function(b){return this.each(function(){var c=a(this).data(g),d=a.extend({},l,a(this).data());"object"==typeof b&&a.extend(d,b);var e="string"==typeof b?b:d.slide;if(c||(c=new i(this,d),a(this).data(g,c)),"number"==typeof b)c.to(b);else if("string"==typeof e){if(void 0===c[e])throw new Error('No method named "'+e+'"');c[e]()}else d.interval&&(c.pause(),c.cycle())})}},{key:"_dataApiClickHandler",value:function(b){var c=f.getSelectorFromElement(this);if(c){var d=a(c)[0];if(d&&a(d).hasClass(p.CAROUSEL)){var e=a.extend({},a(d).data(),a(this).data()),h=this.getAttribute("data-slide-to");h&&(e.interval=!1),i._jQueryInterface.call(a(d),e),h&&a(d).data(g).to(h),b.preventDefault()}}}},{key:"VERSION",get:function(){return d}},{key:"Default",get:function(){return l}}]),i}();return a(document).on(o.CLICK_DATA_API,q.DATA_SLIDE,r._dataApiClickHandler),a(window).on(o.LOAD_DATA_API,function(){a(q.DATA_RIDE).each(function(){var b=a(this);r._jQueryInterface.call(b,b.data())})}),a.fn[b]=r._jQueryInterface,a.fn[b].Constructor=r,a.fn[b].noConflict=function(){return a.fn[b]=j,r._jQueryInterface},r}(jQuery),function(a){var b="collapse",d="4.0.0-alpha",g="bs.collapse",h="."+g,i=".data-api",j=a.fn[b],k=600,l={toggle:!0,parent:""},m={toggle:"boolean",parent:"string"},n={SHOW:"show"+h,SHOWN:"shown"+h,HIDE:"hide"+h,HIDDEN:"hidden"+h,CLICK_DATA_API:"click"+h+i},o={IN:"in",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},p={WIDTH:"width",HEIGHT:"height"},q={ACTIVES:".panel > .in, .panel > .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},r=function(){function h(b,d){c(this,h),this._isTransitioning=!1,this._element=b,this._config=this._getConfig(d),this._triggerArray=a.makeArray(a('[data-toggle="collapse"][href="#'+b.id+'"],'+('[data-toggle="collapse"][data-target="#'+b.id+'"]'))),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return e(h,[{key:"toggle",value:function(){a(this._element).hasClass(o.IN)?this.hide():this.show()}},{key:"show",value:function(){var b=this;if(!this._isTransitioning&&!a(this._element).hasClass(o.IN)){var c=void 0,d=void 0;if(this._parent&&(c=a.makeArray(a(q.ACTIVES)),c.length||(c=null)),!(c&&(d=a(c).data(g),d&&d._isTransitioning))){var e=a.Event(n.SHOW);if(a(this._element).trigger(e),!e.isDefaultPrevented()){c&&(h._jQueryInterface.call(a(c),"hide"),d||a(c).data(g,null));var i=this._getDimension();a(this._element).removeClass(o.COLLAPSE).addClass(o.COLLAPSING),this._element.style[i]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&a(this._triggerArray).removeClass(o.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var j=function(){a(b._element).removeClass(o.COLLAPSING).addClass(o.COLLAPSE).addClass(o.IN),b._element.style[i]="",b.setTransitioning(!1),a(b._element).trigger(n.SHOWN)};if(!f.supportsTransitionEnd())return void j();var l=i[0].toUpperCase()+i.slice(1),m="scroll"+l;a(this._element).one(f.TRANSITION_END,j).emulateTransitionEnd(k),this._element.style[i]=this._element[m]+"px"}}}}},{key:"hide",value:function(){var b=this;if(!this._isTransitioning&&a(this._element).hasClass(o.IN)){var c=a.Event(n.HIDE);if(a(this._element).trigger(c),!c.isDefaultPrevented()){var d=this._getDimension(),e=d===p.WIDTH?"offsetWidth":"offsetHeight";this._element.style[d]=this._element[e]+"px",f.reflow(this._element),a(this._element).addClass(o.COLLAPSING).removeClass(o.COLLAPSE).removeClass(o.IN),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&a(this._triggerArray).addClass(o.COLLAPSED).attr("aria-expanded",!1),this.setTransitioning(!0);var g=function(){b.setTransitioning(!1),a(b._element).removeClass(o.COLLAPSING).addClass(o.COLLAPSE).trigger(n.HIDDEN)};return this._element.style[d]=0,f.supportsTransitionEnd()?void a(this._element).one(f.TRANSITION_END,g).emulateTransitionEnd(k):void g()}}}},{key:"setTransitioning",value:function(a){this._isTransitioning=a}},{key:"dispose",value:function(){a.removeData(this._element,g),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null}},{key:"_getConfig",value:function(c){return c=a.extend({},l,c),c.toggle=Boolean(c.toggle),f.typeCheckConfig(b,c,m),c}},{key:"_getDimension",value:function(){var b=a(this._element).hasClass(p.WIDTH);return b?p.WIDTH:p.HEIGHT}},{key:"_getParent",value:function(){var b=this,c=a(this._config.parent)[0],d='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return a(c).find(d).each(function(a,c){b._addAriaAndCollapsedClass(h._getTargetFromElement(c),[c])}),c}},{key:"_addAriaAndCollapsedClass",value:function(b,c){if(b){var d=a(b).hasClass(o.IN);b.setAttribute("aria-expanded",d),c.length&&a(c).toggleClass(o.COLLAPSED,!d).attr("aria-expanded",d)}}}],[{key:"_getTargetFromElement",value:function(b){var c=f.getSelectorFromElement(b);return c?a(c)[0]:null}},{key:"_jQueryInterface",value:function(b){return this.each(function(){var c=a(this),d=c.data(g),e=a.extend({},l,c.data(),"object"==typeof b&&b);if(!d&&e.toggle&&/show|hide/.test(b)&&(e.toggle=!1),d||(d=new h(this,e),c.data(g,d)),"string"==typeof b){if(void 0===d[b])throw new Error('No method named "'+b+'"');d[b]()}})}},{key:"VERSION",get:function(){return d}},{key:"Default",get:function(){return l}}]),h}();return a(document).on(n.CLICK_DATA_API,q.DATA_TOGGLE,function(b){b.preventDefault();var c=r._getTargetFromElement(this),d=a(c).data(g),e=d?"toggle":a(this).data();r._jQueryInterface.call(a(c),e)}),a.fn[b]=r._jQueryInterface,a.fn[b].Constructor=r,a.fn[b].noConflict=function(){return a.fn[b]=j,r._jQueryInterface},r}(jQuery),function(a){var b="dropdown",d="4.0.0-alpha",g="bs.dropdown",h="."+g,i=".data-api",j=a.fn[b],k={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,CLICK:"click"+h,CLICK_DATA_API:"click"+h+i,KEYDOWN_DATA_API:"keydown"+h+i},l={BACKDROP:"dropdown-backdrop",DISABLED:"disabled",OPEN:"open"},m={BACKDROP:".dropdown-backdrop",DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",ROLE_MENU:'[role="menu"]',ROLE_LISTBOX:'[role="listbox"]',NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:'[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a'},n=function(){function b(a){c(this,b),this._element=a,this._addEventListeners()}return e(b,[{key:"toggle",value:function(){if(this.disabled||a(this).hasClass(l.DISABLED))return!1;var c=b._getParentFromElement(this),d=a(c).hasClass(l.OPEN);if(b._clearMenus(),d)return!1;if("ontouchstart"in document.documentElement&&!a(c).closest(m.NAVBAR_NAV).length){var e=document.createElement("div");e.className=l.BACKDROP,a(e).insertBefore(this),a(e).on("click",b._clearMenus)}var f={relatedTarget:this},g=a.Event(k.SHOW,f);return a(c).trigger(g),g.isDefaultPrevented()?!1:(this.focus(),this.setAttribute("aria-expanded","true"),a(c).toggleClass(l.OPEN),a(c).trigger(a.Event(k.SHOWN,f)),!1)}},{key:"dispose",value:function(){a.removeData(this._element,g),a(this._element).off(h),this._element=null}},{key:"_addEventListeners",value:function(){a(this._element).on(k.CLICK,this.toggle)}}],[{key:"_jQueryInterface",value:function(c){return this.each(function(){var d=a(this).data(g);if(d||a(this).data(g,d=new b(this)),"string"==typeof c){if(void 0===d[c])throw new Error('No method named "'+c+'"');d[c].call(this)}})}},{key:"_clearMenus",value:function(c){if(!c||3!==c.which){var d=a(m.BACKDROP)[0];d&&d.parentNode.removeChild(d);for(var e=a.makeArray(a(m.DATA_TOGGLE)),f=0;f<e.length;f++){var g=b._getParentFromElement(e[f]),h={relatedTarget:e[f]};if(a(g).hasClass(l.OPEN)&&!(c&&"click"===c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(g,c.target))){var i=a.Event(k.HIDE,h);a(g).trigger(i),i.isDefaultPrevented()||(e[f].setAttribute("aria-expanded","false"),a(g).removeClass(l.OPEN).trigger(a.Event(k.HIDDEN,h)))}}}}},{key:"_getParentFromElement",value:function(b){var c=void 0,d=f.getSelectorFromElement(b);return d&&(c=a(d)[0]),c||b.parentNode}},{key:"_dataApiKeydownHandler",value:function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)&&(c.preventDefault(),c.stopPropagation(),!this.disabled&&!a(this).hasClass(l.DISABLED))){var d=b._getParentFromElement(this),e=a(d).hasClass(l.OPEN);if(!e&&27!==c.which||e&&27===c.which){if(27===c.which){var f=a(d).find(m.DATA_TOGGLE)[0];a(f).trigger("focus")}return void a(this).trigger("click")}var g=a.makeArray(a(m.VISIBLE_ITEMS));if(g=g.filter(function(a){return a.offsetWidth||a.offsetHeight}),g.length){var h=g.indexOf(c.target);38===c.which&&h>0&&h--,40===c.which&&h<g.length-1&&h++,~h||(h=0),g[h].focus()}}}},{key:"VERSION",get:function(){return d}}]),b}();return a(document).on(k.KEYDOWN_DATA_API,m.DATA_TOGGLE,n._dataApiKeydownHandler).on(k.KEYDOWN_DATA_API,m.ROLE_MENU,n._dataApiKeydownHandler).on(k.KEYDOWN_DATA_API,m.ROLE_LISTBOX,n._dataApiKeydownHandler).on(k.CLICK_DATA_API,n._clearMenus).on(k.CLICK_DATA_API,m.DATA_TOGGLE,n.prototype.toggle).on(k.CLICK_DATA_API,m.FORM_CHILD,function(a){a.stopPropagation()}),a.fn[b]=n._jQueryInterface,a.fn[b].Constructor=n,a.fn[b].noConflict=function(){return a.fn[b]=j,n._jQueryInterface},n}(jQuery),function(a){var b="modal",d="4.0.0-alpha",g="bs.modal",h="."+g,i=".data-api",j=a.fn[b],k=300,l=150,m={backdrop:!0,keyboard:!0,focus:!0,show:!0},n={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},o={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,FOCUSIN:"focusin"+h,RESIZE:"resize"+h,CLICK_DISMISS:"click.dismiss"+h,KEYDOWN_DISMISS:"keydown.dismiss"+h,MOUSEUP_DISMISS:"mouseup.dismiss"+h,MOUSEDOWN_DISMISS:"mousedown.dismiss"+h,CLICK_DATA_API:"click"+h+i},p={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",IN:"in"},q={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".navbar-fixed-top, .navbar-fixed-bottom, .is-fixed"},r=function(){function i(b,d){c(this,i),this._config=this._getConfig(d),this._element=b,this._dialog=a(b).find(q.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return e(i,[{key:"toggle",value:function(a){return this._isShown?this.hide():this.show(a)}},{key:"show",value:function(b){var c=this,d=a.Event(o.SHOW,{relatedTarget:b});a(this._element).trigger(d),this._isShown||d.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),a(document.body).addClass(p.OPEN),this._setEscapeEvent(),this._setResizeEvent(),a(this._element).on(o.CLICK_DISMISS,q.DATA_DISMISS,a.proxy(this.hide,this)),a(this._dialog).on(o.MOUSEDOWN_DISMISS,function(){a(c._element).one(o.MOUSEUP_DISMISS,function(b){a(b.target).is(c._element)&&(c._ignoreBackdropClick=!0)})}),this._showBackdrop(a.proxy(this._showElement,this,b)))}},{key:"hide",value:function(b){b&&b.preventDefault();var c=a.Event(o.HIDE);a(this._element).trigger(c),this._isShown&&!c.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),a(document).off(o.FOCUSIN),a(this._element).removeClass(p.IN),a(this._element).off(o.CLICK_DISMISS),a(this._dialog).off(o.MOUSEDOWN_DISMISS),f.supportsTransitionEnd()&&a(this._element).hasClass(p.FADE)?a(this._element).one(f.TRANSITION_END,a.proxy(this._hideModal,this)).emulateTransitionEnd(k):this._hideModal())}},{key:"dispose",value:function(){a.removeData(this._element,g),a(window).off(h),a(document).off(h),a(this._element).off(h),a(this._backdrop).off(h),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null}},{key:"_getConfig",value:function(c){return c=a.extend({},m,c),f.typeCheckConfig(b,c,n),c}},{key:"_showElement",value:function(b){var c=this,d=f.supportsTransitionEnd()&&a(this._element).hasClass(p.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.scrollTop=0,d&&f.reflow(this._element),a(this._element).addClass(p.IN),this._config.focus&&this._enforceFocus();var e=a.Event(o.SHOWN,{relatedTarget:b}),g=function(){c._config.focus&&c._element.focus(),a(c._element).trigger(e)};d?a(this._dialog).one(f.TRANSITION_END,g).emulateTransitionEnd(k):g()}},{key:"_enforceFocus",value:function(){var b=this;a(document).off(o.FOCUSIN).on(o.FOCUSIN,function(c){b._element===c.target||a(b._element).has(c.target).length||b._element.focus()})}},{key:"_setEscapeEvent",value:function(){var b=this;this._isShown&&this._config.keyboard?a(this._element).on(o.KEYDOWN_DISMISS,function(a){27===a.which&&b.hide()}):this._isShown||a(this._element).off(o.KEYDOWN_DISMISS)}},{key:"_setResizeEvent",value:function(){this._isShown?a(window).on(o.RESIZE,a.proxy(this._handleUpdate,this)):a(window).off(o.RESIZE)}},{key:"_hideModal",value:function(){var b=this;this._element.style.display="none",this._showBackdrop(function(){a(document.body).removeClass(p.OPEN),b._resetAdjustments(),b._resetScrollbar(),a(b._element).trigger(o.HIDDEN)})}},{key:"_removeBackdrop",value:function(){this._backdrop&&(a(this._backdrop).remove(),this._backdrop=null)}},{key:"_showBackdrop",value:function(b){var c=this,d=a(this._element).hasClass(p.FADE)?p.FADE:"";if(this._isShown&&this._config.backdrop){var e=f.supportsTransitionEnd()&&d;if(this._backdrop=document.createElement("div"),this._backdrop.className=p.BACKDROP,d&&a(this._backdrop).addClass(d),a(this._backdrop).appendTo(document.body),a(this._element).on(o.CLICK_DISMISS,function(a){return c._ignoreBackdropClick?void(c._ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"===c._config.backdrop?c._element.focus():c.hide()))}),e&&f.reflow(this._backdrop),a(this._backdrop).addClass(p.IN),!b)return;if(!e)return void b();a(this._backdrop).one(f.TRANSITION_END,b).emulateTransitionEnd(l)}else if(!this._isShown&&this._backdrop){a(this._backdrop).removeClass(p.IN);var g=function(){c._removeBackdrop(),b&&b()};f.supportsTransitionEnd()&&a(this._element).hasClass(p.FADE)?a(this._backdrop).one(f.TRANSITION_END,g).emulateTransitionEnd(l):g()}else b&&b()}},{key:"_handleUpdate",value:function(){this._adjustDialog()}},{key:"_adjustDialog",value:function(){var a=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&a&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!a&&(this._element.style.paddingRight=this._scrollbarWidth+"px~")}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}},{key:"_checkScrollbar",value:function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this._isBodyOverflowing=document.body.clientWidth<a,this._scrollbarWidth=this._getScrollbarWidth()}},{key:"_setScrollbar",value:function(){var b=parseInt(a(q.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=b+this._scrollbarWidth+"px")}},{key:"_resetScrollbar",value:function(){document.body.style.paddingRight=this._originalBodyPadding}},{key:"_getScrollbarWidth",value:function(){var a=document.createElement("div");a.className=p.SCROLLBAR_MEASURER,document.body.appendChild(a);var b=a.offsetWidth-a.clientWidth;return document.body.removeChild(a),b}}],[{key:"_jQueryInterface",value:function(b,c){return this.each(function(){var d=a(this).data(g),e=a.extend({},i.Default,a(this).data(),"object"==typeof b&&b);if(d||(d=new i(this,e),a(this).data(g,d)),"string"==typeof b){if(void 0===d[b])throw new Error('No method named "'+b+'"');d[b](c)}else e.show&&d.show(c)})}},{key:"VERSION",get:function(){return d}},{key:"Default",get:function(){return m}}]),i}();return a(document).on(o.CLICK_DATA_API,q.DATA_TOGGLE,function(b){var c=this,d=void 0,e=f.getSelectorFromElement(this);e&&(d=a(e)[0]);var h=a(d).data(g)?"toggle":a.extend({},a(d).data(),a(this).data());"A"===this.tagName&&b.preventDefault();var i=a(d).one(o.SHOW,function(b){b.isDefaultPrevented()||i.one(o.HIDDEN,function(){a(c).is(":visible")&&c.focus()})});r._jQueryInterface.call(a(d),h,this)}),a.fn[b]=r._jQueryInterface,a.fn[b].Constructor=r,a.fn[b].noConflict=function(){return a.fn[b]=j,r._jQueryInterface},r}(jQuery),function(a){var b="scrollspy",d="4.0.0-alpha",g="bs.scrollspy",h="."+g,i=".data-api",j=a.fn[b],k={offset:10,method:"auto",target:""},l={offset:"number",method:"string",target:"(string|element)"},m={ACTIVATE:"activate"+h,SCROLL:"scroll"+h,LOAD_DATA_API:"load"+h+i},n={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",NAV_LINK:"nav-link",NAV:"nav",ACTIVE:"active"},o={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",LIST_ITEM:".list-item",LI:"li",LI_DROPDOWN:"li.dropdown",NAV_LINKS:".nav-link",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},p={OFFSET:"offset",POSITION:"position"},q=function(){function i(b,d){c(this,i),this._element=b,this._scrollElement="BODY"===b.tagName?window:b,this._config=this._getConfig(d),this._selector=this._config.target+" "+o.NAV_LINKS+","+(this._config.target+" "+o.DROPDOWN_ITEMS),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,a(this._scrollElement).on(m.SCROLL,a.proxy(this._process,this)),this.refresh(),this._process()}return e(i,[{key:"refresh",value:function(){var b=this,c=this._scrollElement!==this._scrollElement.window?p.POSITION:p.OFFSET,d="auto"===this._config.method?c:this._config.method,e=d===p.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var g=a.makeArray(a(this._selector));g.map(function(b){var c=void 0,g=f.getSelectorFromElement(b);return g&&(c=a(g)[0]),c&&(c.offsetWidth||c.offsetHeight)?[a(c)[d]().top+e,g]:void 0}).filter(function(a){return a}).sort(function(a,b){return a[0]-b[0]}).forEach(function(a){b._offsets.push(a[0]),b._targets.push(a[1])})}},{key:"dispose",value:function(){a.removeData(this._element,g),a(this._scrollElement).off(h),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null}},{key:"_getConfig",value:function(c){if(c=a.extend({},k,c),"string"!=typeof c.target){var d=a(c.target).attr("id");d||(d=f.getUID(b),a(c.target).attr("id",d)),c.target="#"+d}return f.typeCheckConfig(b,c,l),c}},{key:"_getScrollTop",value:function(){return this._scrollElement===window?this._scrollElement.scrollY:this._scrollElement.scrollTop}},{key:"_getScrollHeight",value:function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}},{key:"_process",value:function(){var a=this._getScrollTop()+this._config.offset,b=this._getScrollHeight(),c=this._config.offset+b-this._scrollElement.offsetHeight;if(this._scrollHeight!==b&&this.refresh(),a>=c){var d=this._targets[this._targets.length-1];this._activeTarget!==d&&this._activate(d)}if(this._activeTarget&&a<this._offsets[0])return this._activeTarget=null,void this._clear();for(var e=this._offsets.length;e--;){var f=this._activeTarget!==this._targets[e]&&a>=this._offsets[e]&&(void 0===this._offsets[e+1]||a<this._offsets[e+1]);f&&this._activate(this._targets[e])}}},{key:"_activate",value:function(b){this._activeTarget=b,this._clear();var c=this._selector.split(",");c=c.map(function(a){return a+'[data-target="'+b+'"],'+(a+'[href="'+b+'"]')});var d=a(c.join(","));d.hasClass(n.DROPDOWN_ITEM)?(d.closest(o.DROPDOWN).find(o.DROPDOWN_TOGGLE).addClass(n.ACTIVE),d.addClass(n.ACTIVE)):d.parents(o.LI).find(o.NAV_LINKS).addClass(n.ACTIVE),a(this._scrollElement).trigger(m.ACTIVATE,{relatedTarget:b})}},{key:"_clear",value:function(){a(this._selector).filter(o.ACTIVE).removeClass(n.ACTIVE)}}],[{key:"_jQueryInterface",value:function(b){return this.each(function(){var c=a(this).data(g),d="object"==typeof b&&b||null;if(c||(c=new i(this,d),a(this).data(g,c)),"string"==typeof b){if(void 0===c[b])throw new Error('No method named "'+b+'"');c[b]()}})}},{key:"VERSION",get:function(){return d}},{key:"Default",get:function(){return k}}]),i}();return a(window).on(m.LOAD_DATA_API,function(){for(var b=a.makeArray(a(o.DATA_SPY)),c=b.length;c--;){var d=a(b[c]);q._jQueryInterface.call(d,d.data())}}),a.fn[b]=q._jQueryInterface,a.fn[b].Constructor=q,a.fn[b].noConflict=function(){return a.fn[b]=j,q._jQueryInterface},q}(jQuery),function(a){var b="tab",d="4.0.0-alpha",g="bs.tab",h="."+g,i=".data-api",j=a.fn[b],k=150,l={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,CLICK_DATA_API:"click"+h+i},m={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",FADE:"fade",IN:"in"},n={A:"a",LI:"li",DROPDOWN:".dropdown",UL:"ul:not(.dropdown-menu)",FADE_CHILD:"> .nav-item .fade, > .fade",ACTIVE:".active",ACTIVE_CHILD:"> .nav-item > .active, > .active",
DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},o=function(){function b(a){c(this,b),this._element=a}return e(b,[{key:"show",value:function(){var b=this;if(!this._element.parentNode||this._element.parentNode.nodeType!==Node.ELEMENT_NODE||!a(this._element).hasClass(m.ACTIVE)){var c=void 0,d=void 0,e=a(this._element).closest(n.UL)[0],g=f.getSelectorFromElement(this._element);e&&(d=a.makeArray(a(e).find(n.ACTIVE)),d=d[d.length-1]);var h=a.Event(l.HIDE,{relatedTarget:this._element}),i=a.Event(l.SHOW,{relatedTarget:d});if(d&&a(d).trigger(h),a(this._element).trigger(i),!i.isDefaultPrevented()&&!h.isDefaultPrevented()){g&&(c=a(g)[0]),this._activate(this._element,e);var j=function(){var c=a.Event(l.HIDDEN,{relatedTarget:b._element}),e=a.Event(l.SHOWN,{relatedTarget:d});a(d).trigger(c),a(b._element).trigger(e)};c?this._activate(c,c.parentNode,j):j()}}}},{key:"dispose",value:function(){a.removeClass(this._element,g),this._element=null}},{key:"_activate",value:function(b,c,d){var e=a(c).find(n.ACTIVE_CHILD)[0],g=d&&f.supportsTransitionEnd()&&(e&&a(e).hasClass(m.FADE)||Boolean(a(c).find(n.FADE_CHILD)[0])),h=a.proxy(this._transitionComplete,this,b,e,g,d);e&&g?a(e).one(f.TRANSITION_END,h).emulateTransitionEnd(k):h(),e&&a(e).removeClass(m.IN)}},{key:"_transitionComplete",value:function(b,c,d,e){if(c){a(c).removeClass(m.ACTIVE);var g=a(c).find(n.DROPDOWN_ACTIVE_CHILD)[0];g&&a(g).removeClass(m.ACTIVE),c.setAttribute("aria-expanded",!1)}if(a(b).addClass(m.ACTIVE),b.setAttribute("aria-expanded",!0),d?(f.reflow(b),a(b).addClass(m.IN)):a(b).removeClass(m.FADE),b.parentNode&&a(b.parentNode).hasClass(m.DROPDOWN_MENU)){var h=a(b).closest(n.DROPDOWN)[0];h&&a(h).find(n.DROPDOWN_TOGGLE).addClass(m.ACTIVE),b.setAttribute("aria-expanded",!0)}e&&e()}}],[{key:"_jQueryInterface",value:function(c){return this.each(function(){var d=a(this),e=d.data(g);if(e||(e=e=new b(this),d.data(g,e)),"string"==typeof c){if(void 0===e[c])throw new Error('No method named "'+c+'"');e[c]()}})}},{key:"VERSION",get:function(){return d}}]),b}();return a(document).on(l.CLICK_DATA_API,n.DATA_TOGGLE,function(b){b.preventDefault(),o._jQueryInterface.call(a(this),"show")}),a.fn[b]=o._jQueryInterface,a.fn[b].Constructor=o,a.fn[b].noConflict=function(){return a.fn[b]=j,o._jQueryInterface},o}(jQuery),function(a){if(void 0===window.Tether)throw new Error("Bootstrap tooltips require Tether (http://github.hubspot.com/tether/)");var b="tooltip",d="4.0.0-alpha",g="bs.tooltip",h="."+g,i=a.fn[b],j=150,k="bs-tether",l={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:"0 0",constraints:[]},m={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"string",constraints:"array"},n={TOP:"bottom center",RIGHT:"middle left",BOTTOM:"top center",LEFT:"middle right"},o={IN:"in",OUT:"out"},p={HIDE:"hide"+h,HIDDEN:"hidden"+h,SHOW:"show"+h,SHOWN:"shown"+h,INSERTED:"inserted"+h,CLICK:"click"+h,FOCUSIN:"focusin"+h,FOCUSOUT:"focusout"+h,MOUSEENTER:"mouseenter"+h,MOUSELEAVE:"mouseleave"+h},q={FADE:"fade",IN:"in"},r={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner"},s={element:!1,enabled:!1},t={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},u=function(){function i(a,b){c(this,i),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._tether=null,this.element=a,this.config=this._getConfig(b),this.tip=null,this._setListeners()}return e(i,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(b){if(b){var c=this.constructor.DATA_KEY,d=a(b.currentTarget).data(c);d||(d=new this.constructor(b.currentTarget,this._getDelegateConfig()),a(b.currentTarget).data(c,d)),d._activeTrigger.click=!d._activeTrigger.click,d._isWithActiveTrigger()?d._enter(null,d):d._leave(null,d)}else{if(a(this.getTipElement()).hasClass(q.IN))return void this._leave(null,this);this._enter(null,this)}}},{key:"dispose",value:function(){clearTimeout(this._timeout),this.cleanupTether(),a.removeData(this.element,this.constructor.DATA_KEY),a(this.element).off(this.constructor.EVENT_KEY),this.tip&&a(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._tether=null,this.element=null,this.config=null,this.tip=null}},{key:"show",value:function(){var b=this,c=a.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){a(this.element).trigger(c);var d=a.contains(this.element.ownerDocument.documentElement,this.element);if(c.isDefaultPrevented()||!d)return;var e=this.getTipElement(),g=f.getUID(this.constructor.NAME);e.setAttribute("id",g),this.element.setAttribute("aria-describedby",g),this.setContent(),this.config.animation&&a(e).addClass(q.FADE);var h="function"==typeof this.config.placement?this.config.placement.call(this,e,this.element):this.config.placement,j=this._getAttachment(h);a(e).data(this.constructor.DATA_KEY,this).appendTo(document.body),a(this.element).trigger(this.constructor.Event.INSERTED),this._tether=new Tether({attachment:j,element:e,target:this.element,classes:s,classPrefix:k,offset:this.config.offset,constraints:this.config.constraints,addTargetClasses:!1}),f.reflow(e),this._tether.position(),a(e).addClass(q.IN);var l=function(){var c=b._hoverState;b._hoverState=null,a(b.element).trigger(b.constructor.Event.SHOWN),c===o.OUT&&b._leave(null,b)};if(f.supportsTransitionEnd()&&a(this.tip).hasClass(q.FADE))return void a(this.tip).one(f.TRANSITION_END,l).emulateTransitionEnd(i._TRANSITION_DURATION);l()}}},{key:"hide",value:function(b){var c=this,d=this.getTipElement(),e=a.Event(this.constructor.Event.HIDE),g=function(){c._hoverState!==o.IN&&d.parentNode&&d.parentNode.removeChild(d),c.element.removeAttribute("aria-describedby"),a(c.element).trigger(c.constructor.Event.HIDDEN),c.cleanupTether(),b&&b()};a(this.element).trigger(e),e.isDefaultPrevented()||(a(d).removeClass(q.IN),f.supportsTransitionEnd()&&a(this.tip).hasClass(q.FADE)?a(d).one(f.TRANSITION_END,g).emulateTransitionEnd(j):g(),this._hoverState="")}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"getTipElement",value:function(){return this.tip=this.tip||a(this.config.template)[0]}},{key:"setContent",value:function(){var b=a(this.getTipElement());this.setElementContent(b.find(r.TOOLTIP_INNER),this.getTitle()),b.removeClass(q.FADE).removeClass(q.IN),this.cleanupTether()}},{key:"setElementContent",value:function(b,c){var d=this.config.html;"object"==typeof c&&(c.nodeType||c.jquery)?d?a(c).parent().is(b)||b.empty().append(c):b.text(a(c).text()):b[d?"html":"text"](c)}},{key:"getTitle",value:function(){var a=this.element.getAttribute("data-original-title");return a||(a="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),a}},{key:"cleanupTether",value:function(){this._tether&&this._tether.destroy()}},{key:"_getAttachment",value:function(a){return n[a.toUpperCase()]}},{key:"_setListeners",value:function(){var b=this,c=this.config.trigger.split(" ");c.forEach(function(c){if("click"===c)a(b.element).on(b.constructor.Event.CLICK,b.config.selector,a.proxy(b.toggle,b));else if(c!==t.MANUAL){var d=c===t.HOVER?b.constructor.Event.MOUSEENTER:b.constructor.Event.FOCUSIN,e=c===t.HOVER?b.constructor.Event.MOUSELEAVE:b.constructor.Event.FOCUSOUT;a(b.element).on(d,b.config.selector,a.proxy(b._enter,b)).on(e,b.config.selector,a.proxy(b._leave,b))}}),this.config.selector?this.config=a.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()}},{key:"_fixTitle",value:function(){var a=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==a)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))}},{key:"_enter",value:function(b,c){var d=this.constructor.DATA_KEY;return c=c||a(b.currentTarget).data(d),c||(c=new this.constructor(b.currentTarget,this._getDelegateConfig()),a(b.currentTarget).data(d,c)),b&&(c._activeTrigger["focusin"===b.type?t.FOCUS:t.HOVER]=!0),a(c.getTipElement()).hasClass(q.IN)||c._hoverState===o.IN?void(c._hoverState=o.IN):(clearTimeout(c._timeout),c._hoverState=o.IN,c.config.delay&&c.config.delay.show?void(c._timeout=setTimeout(function(){c._hoverState===o.IN&&c.show()},c.config.delay.show)):void c.show())}},{key:"_leave",value:function(b,c){var d=this.constructor.DATA_KEY;return c=c||a(b.currentTarget).data(d),c||(c=new this.constructor(b.currentTarget,this._getDelegateConfig()),a(b.currentTarget).data(d,c)),b&&(c._activeTrigger["focusout"===b.type?t.FOCUS:t.HOVER]=!1),c._isWithActiveTrigger()?void 0:(clearTimeout(c._timeout),c._hoverState=o.OUT,c.config.delay&&c.config.delay.hide?void(c._timeout=setTimeout(function(){c._hoverState===o.OUT&&c.hide()},c.config.delay.hide)):void c.hide())}},{key:"_isWithActiveTrigger",value:function(){for(var a in this._activeTrigger)if(this._activeTrigger[a])return!0;return!1}},{key:"_getConfig",value:function(c){return c=a.extend({},this.constructor.Default,a(this.element).data(),c),c.delay&&"number"==typeof c.delay&&(c.delay={show:c.delay,hide:c.delay}),f.typeCheckConfig(b,c,this.constructor.DefaultType),c}},{key:"_getDelegateConfig",value:function(){var a={};if(this.config)for(var b in this.config)this.constructor.Default[b]!==this.config[b]&&(a[b]=this.config[b]);return a}}],[{key:"_jQueryInterface",value:function(b){return this.each(function(){var c=a(this).data(g),d="object"==typeof b?b:null;if((c||!/destroy|hide/.test(b))&&(c||(c=new i(this,d),a(this).data(g,c)),"string"==typeof b)){if(void 0===c[b])throw new Error('No method named "'+b+'"');c[b]()}})}},{key:"VERSION",get:function(){return d}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return b}},{key:"DATA_KEY",get:function(){return g}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return h}},{key:"DefaultType",get:function(){return m}}]),i}();return a.fn[b]=u._jQueryInterface,a.fn[b].Constructor=u,a.fn[b].noConflict=function(){return a.fn[b]=i,u._jQueryInterface},u}(jQuery));(function(a){var f="popover",h="4.0.0-alpha",i="bs.popover",j="."+i,k=a.fn[f],l=a.extend({},g.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),m=a.extend({},g.DefaultType,{content:"(string|element|function)"}),n={FADE:"fade",IN:"in"},o={TITLE:".popover-title",CONTENT:".popover-content",ARROW:".popover-arrow"},p={HIDE:"hide"+j,HIDDEN:"hidden"+j,SHOW:"show"+j,SHOWN:"shown"+j,INSERTED:"inserted"+j,CLICK:"click"+j,FOCUSIN:"focusin"+j,FOCUSOUT:"focusout"+j,MOUSEENTER:"mouseenter"+j,MOUSELEAVE:"mouseleave"+j},q=function(g){function k(){c(this,k),d(Object.getPrototypeOf(k.prototype),"constructor",this).apply(this,arguments)}return b(k,g),e(k,[{key:"isWithContent",value:function(){return this.getTitle()||this._getContent()}},{key:"getTipElement",value:function(){return this.tip=this.tip||a(this.config.template)[0]}},{key:"setContent",value:function(){var b=a(this.getTipElement());this.setElementContent(b.find(o.TITLE),this.getTitle()),this.setElementContent(b.find(o.CONTENT),this._getContent()),b.removeClass(n.FADE).removeClass(n.IN),this.cleanupTether()}},{key:"_getContent",value:function(){return this.element.getAttribute("data-content")||("function"==typeof this.config.content?this.config.content.call(this.element):this.config.content)}}],[{key:"_jQueryInterface",value:function(b){return this.each(function(){var c=a(this).data(i),d="object"==typeof b?b:null;if((c||!/destroy|hide/.test(b))&&(c||(c=new k(this,d),a(this).data(i,c)),"string"==typeof b)){if(void 0===c[b])throw new Error('No method named "'+b+'"');c[b]()}})}},{key:"VERSION",get:function(){return h}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return f}},{key:"DATA_KEY",get:function(){return i}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return j}},{key:"DefaultType",get:function(){return m}}]),k}(g);return a.fn[f]=q._jQueryInterface,a.fn[f].Constructor=q,a.fn[f].noConflict=function(){return a.fn[f]=k,q._jQueryInterface},q})(jQuery)}(jQuery);
!function(){"use strict";angular.module("bcbsnc.cloud.directives.bindHtmlCompile",[]).directive("ngBindHtmlCompile",["$compile",function(e){return{restrict:"A",replace:!1,link:function(t,r,n){t.$watch(n.ngBindHtmlCompile,function(n){"undefined"!=typeof n&&(r.html(n),e(r.contents())(t))})}}}])}(),function(){"use strict";angular.module("bcbsnc.cloud.services.component",["bcbsnc.cloud.services.rest","bcbsnc.cloud.factories.directiveHtml"]).service("componentService",["$q","restService","directiveHtmlFactory",function(e,t,r){this.devices=t.devices,this.getComponent=function(n,c,i,o){var s=e.defer();return t.getComponentData(n,c,i,o).then(function(e){s.resolve(r.getDirectiveHtml(e.name,e.values))},function(e,t){s.reject(e,t)}),s.promise}}])}(),function(){"use strict";angular.module("bcbsnc.cloud.factories.directiveHtml",[]).factory("directiveHtmlFactory",["directiveHtml",function(e){return{getDirectiveHtml:function(t,r){if(!e[t])return"";r=r||{};var n=e[t];for(var c in r)n="number"==typeof r[c]?n.split("^"+c+"^").join(r[c]):"string"==typeof r[c]?n.split("^"+c+"^").join("'"+r[c]+"'"):n.split("^"+c+"^").join(JSON.stringify(r[c]).split('"').join("'"));return n}}}])}(),function(){"use strict";angular.module("bcbsnc.cloud.services.page",["bcbsnc.cloud.services.rest","bcbsnc.cloud.factories.directiveHtml"]).service("pageService",["$q","restService","directiveHtmlFactory",function(e,t,r){this.devices=t.devices,this.getPage=function(n,c,i,o,s){var u=e.defer();return t.getPageData(n,c,i,o,s).then(function(e){for(var t="",n=0;n<e.length;n++)t+=r.getDirectiveHtml(e[n].name,e[n].values);u.resolve(t)},function(e,t){u.reject(e,t)}),u.promise}}])}(),function(){"use strict";angular.module("bcbsnc.cloud.services.rest",["angular-cache"]).service("restService",["$http","$q","config","CacheFactory",function(e,t,r,n){e.defaults.cache=n("defaultCache",{cacheFlushInterval:864e5,capacity:10,deleteOnExpire:"aggressive"});var c=r.apiUrl?r.apiUrl+"/"+r.apiVersion:"https://mobile.bcbsnc.com/api",i=r.capraApiUrl?r.capraApiUrl+"/"+r.capraVersion:"https://capra.bcbsnc.com/api";this.devices={MOBILE:"mobile",DESKTOP:"desktop"},this.getPageData=function(r,n,o,s,u){var a=t.defer();return o=o||"en",s=s||{},"undefined"==typeof s.loggedIn||s.loggedIn===!0?(void 0===u&&(u=!1),e.get(c+"/pages/"+r+"/"+o+"/"+n.toLowerCase()+this.getQueryString(s),{cache:u}).success(function(e){a.resolve(e)}).error(function(e,t){a.reject(e,t)})):(void 0===u&&(u=!1),e.get(i+"/pages/"+r+"/"+o+"/"+n.toLowerCase()+this.getQueryString(s),{cache:u}).success(function(e){a.resolve(e)}).error(function(e,t){a.reject(e,t)})),a.promise},this.getComponentData=function(r,n,o,s){var u=t.defer();return o=o||"en",s=s||{},"undefined"==typeof s.loggedIn||s.loggedIn===!0?e.get(c+"/components/"+r+"/"+o+"/"+n.toLowerCase()+this.getQueryString(s)).success(function(e){u.resolve(e)}).error(function(e,t){u.reject(e,t)}):e.get(i+"/components/"+r+"/"+o+"/"+n.toLowerCase()+this.getQueryString(s)).success(function(e){u.resolve(e)}).error(function(e,t){u.reject(e,t)}),u.promise},this.getData=function(r,n,o){var s=t.defer();return n=n||"en",o=o||{},"undefined"==typeof o.loggedIn||o.loggedIn===!0?e.get(c+"/data/"+n+"/"+r.toLowerCase()).success(function(e){s.resolve(e)}).error(function(e,t){s.reject(e,t)}):e.get(i+"/data/"+n+"/"+r.toLowerCase()).success(function(e){s.resolve(e)}).error(function(e,t){s.reject(e,t)}),s.promise},this.getQueryString=function(e){var t="";for(var r in e)t+=t.length?"&"+r+"="+e[r]:"?"+r+"="+e[r];return t}}])}();
//# sourceMappingURL=angular-cloud-services.min.js.map

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t("undefined"==typeof angular?require("angular"):angular):"function"==typeof define&&define.amd?define("angular-cache",["angular"],t):e.angularCacheModuleName=t(e.angular)}(this,function(e){"use strict";function t(e,t){if(e||(e=function(e){return e}),t||(t=function(e,t){return e===t}),"function"!=typeof e)throw new Error('BinaryHeap([weightFunc][, compareFunc]): "weightFunc" must be a function!');if("function"!=typeof t)throw new Error('BinaryHeap([weightFunc][, compareFunc]): "compareFunc" must be a function!');this.weightFunc=e,this.compareFunc=t,this.heap=[]}function r(e){var t=[],r=void 0;if(!d.isObject(e))return t;for(r in e)e.hasOwnProperty(r)&&t.push(r);return t}function i(e){return e&&"function"==typeof e.then}function s(e){return d.isNumber(e)?e.toString():e}function n(e){var t={},r=void 0;if(!d.isObject(e))return t;for(r in e)e.hasOwnProperty(r)&&(t[r]=r);return t}function o(e,o){if(e in g)throw new Error(e+" already exists!");if(!d.isString(e))throw new Error("cacheId must be a string!");var a={},c={},l=null,h=new t(function(e){return e.expires},d.equals),f=new t(function(e){return e.accessed},d.equals),p=g[e]={$$id:e,destroy:function(){clearInterval(this.$$cacheFlushIntervalId),clearInterval(this.$$recycleFreqId),this.removeAll(),l&&(l().removeItem(this.$$prefix+".keys"),l().removeItem(this.$$prefix)),l=null,a=null,f=null,h=null,this.$$prefix=null,delete g[this.$$id]},disable:function(){this.$$disabled=!0},enable:function(){delete this.$$disabled},get:function(e,t){var r=this;if(Array.isArray(e)){var i=function(){var i=e,s=[];return i.forEach(function(e){var i=r.get(e,t);null!==i&&void 0!==i&&s.push(i)}),{v:s}}();if("object"===("undefined"==typeof i?"undefined":u["typeof"](i)))return i.v}else if(e=s(e),this.$$disabled)return;if(t=t||{},!d.isString(e))throw new Error("key must be a string!");if(t&&!d.isObject(t))throw new Error("options must be an object!");if(t.onExpire&&!d.isFunction(t.onExpire))throw new Error("options.onExpire must be a function!");var n=void 0;if(l){if(c[e])return c[e];var o=l().getItem(this.$$prefix+".data."+e);if(!o)return;n=d.fromJson(o)}else if(d.isObject(a)){if(!(e in a))return;n=a[e]}var h=n.value,p=(new Date).getTime();return l?(f.remove({key:e,accessed:n.accessed}),n.accessed=p,f.push({key:e,accessed:p})):(f.remove(n),n.accessed=p,f.push(n)),"passive"===this.$$deleteOnExpire&&"expires"in n&&n.expires<p?(this.remove(e),this.$$onExpire?this.$$onExpire(e,n.value,t.onExpire):t.onExpire&&t.onExpire.call(this,e,n.value),h=void 0):l&&l().setItem(this.$$prefix+".data."+e,JSON.stringify(n)),h},info:function(e){if(e){var t=void 0;if(l){var r=l().getItem(this.$$prefix+".data."+e);return r?(t=d.fromJson(r),{created:t.created,accessed:t.accessed,expires:t.expires,isExpired:(new Date).getTime()-t.created>(t.maxAge||this.$$maxAge)}):void 0}return d.isObject(a)&&e in a?(t=a[e],{created:t.created,accessed:t.accessed,expires:t.expires,isExpired:(new Date).getTime()-t.created>(t.maxAge||this.$$maxAge)}):void 0}return{id:this.$$id,capacity:this.$$capacity,maxAge:this.$$maxAge,deleteOnExpire:this.$$deleteOnExpire,onExpire:this.$$onExpire,cacheFlushInterval:this.$$cacheFlushInterval,recycleFreq:this.$$recycleFreq,storageMode:this.$$storageMode,storageImpl:l?l():void 0,disabled:!!this.$$disabled,size:f&&f.size()||0}},keys:function(){if(l){var e=l().getItem(this.$$prefix+".keys");return e?d.fromJson(e):[]}return r(a)},keySet:function(){if(l){var e=l().getItem(this.$$prefix+".keys"),t={};if(e)for(var r=d.fromJson(e),i=0;i<r.length;i++)t[r[i]]=r[i];return t}return n(a)},put:function(e,t,r){var n=this;r||(r={});var o="storeOnResolve"in r?!!r.storeOnResolve:this.$$storeOnResolve,u="storeOnReject"in r?!!r.storeOnReject:this.$$storeOnReject,p=function(t,r){return function(i){if(t&&(delete c[e],d.isObject(i)&&"status"in i&&"data"in i?(i=[i.status,i.data,i.headers(),i.statusText],n.put(e,i)):n.put(e,i)),r){if(d.Promise)return d.Promise.reject(i);throw i}return i}};if(!this.$$disabled&&d.isObject(a)&&null!==t&&void 0!==t){if(e=s(e),!d.isString(e))throw new Error("key must be a string!");var m=(new Date).getTime(),$={key:e,value:i(t)?t.then(p(o,!1),p(u,!0)):t,created:void 0===r.created?m:r.created,accessed:void 0===r.accessed?m:r.accessed};if(r.maxAge&&($.maxAge=r.maxAge),void 0===r.expires?$.expires=$.created+($.maxAge||this.$$maxAge):$.expires=r.expires,l){if(i($.value))return c[e]=$.value,c[e];var v=l().getItem(this.$$prefix+".keys"),g=v?d.fromJson(v):[],y=l().getItem(this.$$prefix+".data."+e);y&&this.remove(e),h.push({key:e,expires:$.expires}),f.push({key:e,accessed:$.accessed}),l().setItem(this.$$prefix+".data."+e,JSON.stringify($));for(var x=!1,b=0;b<g.length;b++)if(g[b]===e){x=!0;break}x||g.push(e),l().setItem(this.$$prefix+".keys",JSON.stringify(g))}else a[e]&&this.remove(e),h.push($),f.push($),a[e]=$,delete c[e];return f.size()>this.$$capacity&&this.remove(f.peek().key),t}},remove:function(e){if(e+="",delete c[e],l){var t=l().getItem(this.$$prefix+".data."+e);if(t){var r=d.fromJson(t);f.remove({key:e,accessed:r.accessed}),h.remove({key:e,expires:r.expires}),l().removeItem(this.$$prefix+".data."+e);var i=l().getItem(this.$$prefix+".keys"),s=i?d.fromJson(i):[],n=s.indexOf(e);return n>=0&&s.splice(n,1),l().setItem(this.$$prefix+".keys",JSON.stringify(s)),r.value}}else if(d.isObject(a)){var o=a[e]?a[e].value:void 0;return f.remove(a[e]),h.remove(a[e]),a[e]=null,delete a[e],o}},removeAll:function(){if(l){f.removeAll(),h.removeAll();var e=l().getItem(this.$$prefix+".keys");if(e)for(var t=d.fromJson(e),r=0;r<t.length;r++)this.remove(t[r]);l().setItem(this.$$prefix+".keys",JSON.stringify([]))}else if(d.isObject(a)){f.removeAll(),h.removeAll();for(var i in a)a[i]=null;a={}}else f.removeAll(),h.removeAll(),a={};c={}},removeExpired:function(){for(var e=(new Date).getTime(),t={},r=void 0,i=void 0;(i=h.peek())&&i.expires<=e;)t[i.key]=i.value?i.value:null,h.pop();if(l)for(r in t){var s=l().getItem(this.$$prefix+".data."+r);s&&(t[r]=d.fromJson(s).value,this.remove(r))}else for(r in t)this.remove(r);if(this.$$onExpire)for(r in t)this.$$onExpire(r,t[r]);return t},setCacheFlushInterval:function(e){var t=this;if(null===e)delete t.$$cacheFlushInterval;else{if(!d.isNumber(e))throw new Error("cacheFlushInterval must be a number!");if(0>e)throw new Error("cacheFlushInterval must be greater than zero!");e!==t.$$cacheFlushInterval&&(t.$$cacheFlushInterval=e,clearInterval(t.$$cacheFlushIntervalId),t.$$cacheFlushIntervalId=setInterval(function(){t.removeAll()},t.$$cacheFlushInterval))}},setCapacity:function(e){if(null===e)delete this.$$capacity;else{if(!d.isNumber(e))throw new Error("capacity must be a number!");if(0>e)throw new Error("capacity must be greater than zero!");this.$$capacity=e}for(var t={};f.size()>this.$$capacity;)t[f.peek().key]=this.remove(f.peek().key);return t},setDeleteOnExpire:function(e,t){if(null===e)delete this.$$deleteOnExpire;else{if(!d.isString(e))throw new Error("deleteOnExpire must be a string!");if("none"!==e&&"passive"!==e&&"aggressive"!==e)throw new Error('deleteOnExpire must be "none", "passive" or "aggressive"!');this.$$deleteOnExpire=e}t!==!1&&this.setRecycleFreq(this.$$recycleFreq)},setMaxAge:function(e){if(null===e)this.$$maxAge=Number.MAX_VALUE;else{if(!d.isNumber(e))throw new Error("maxAge must be a number!");if(0>e)throw new Error("maxAge must be greater than zero!");this.$$maxAge=e}var t=void 0,i=void 0,s=void 0;if(h.removeAll(),l){var n=l().getItem(this.$$prefix+".keys");for(i=n?d.fromJson(n):[],t=0;t<i.length;t++){s=i[t];var o=l().getItem(this.$$prefix+".data."+s);if(o){var c=d.fromJson(o);this.$$maxAge===Number.MAX_VALUE?c.expires=Number.MAX_VALUE:c.expires=c.created+(c.maxAge||this.$$maxAge),h.push({key:s,expires:c.expires})}}}else for(i=r(a),t=0;t<i.length;t++)s=i[t],this.$$maxAge===Number.MAX_VALUE?a[s].expires=Number.MAX_VALUE:a[s].expires=a[s].created+(a[s].maxAge||this.$$maxAge),h.push(a[s]);return"aggressive"===this.$$deleteOnExpire?this.removeExpired():{}},setOnExpire:function(e){if(null===e)delete this.$$onExpire;else{if(!d.isFunction(e))throw new Error("onExpire must be a function!");this.$$onExpire=e}},setOptions:function(e,t){if(e=e||{},t=!!t,!d.isObject(e))throw new Error("cacheOptions must be an object!");"storagePrefix"in e?this.$$storagePrefix=e.storagePrefix:t&&(this.$$storagePrefix=v.storagePrefix),this.$$prefix=this.$$storagePrefix+this.$$id,"disabled"in e?this.$$disabled=!!e.disabled:t&&(this.$$disabled=v.disabled),"deleteOnExpire"in e?this.setDeleteOnExpire(e.deleteOnExpire,!1):t&&this.setDeleteOnExpire(v.deleteOnExpire,!1),"recycleFreq"in e?this.setRecycleFreq(e.recycleFreq):t&&this.setRecycleFreq(v.recycleFreq),"maxAge"in e?this.setMaxAge(e.maxAge):t&&this.setMaxAge(v.maxAge),"storeOnResolve"in e?this.$$storeOnResolve=!!e.storeOnResolve:t&&(this.$$storeOnResolve=v.storeOnResolve),"storeOnReject"in e?this.$$storeOnReject=!!e.storeOnReject:t&&(this.$$storeOnReject=v.storeOnReject),"capacity"in e?this.setCapacity(e.capacity):t&&this.setCapacity(v.capacity),"cacheFlushInterval"in e?this.setCacheFlushInterval(e.cacheFlushInterval):t&&this.setCacheFlushInterval(v.cacheFlushInterval),"onExpire"in e?this.setOnExpire(e.onExpire):t&&this.setOnExpire(v.onExpire),"storageMode"in e||"storageImpl"in e?this.setStorageMode(e.storageMode||v.storageMode,e.storageImpl||v.storageImpl):t&&this.setStorageMode(v.storageMode,v.storageImpl)},setRecycleFreq:function(e){if(null===e)delete this.$$recycleFreq;else{if(!d.isNumber(e))throw new Error("recycleFreq must be a number!");if(0>e)throw new Error("recycleFreq must be greater than zero!");this.$$recycleFreq=e}clearInterval(this.$$recycleFreqId),"aggressive"===this.$$deleteOnExpire?!function(e){e.$$recycleFreqId=setInterval(function(){e.removeExpired()},e.$$recycleFreq)}(this):delete this.$$recycleFreqId},setStorageMode:function(e,t){function r(e,t){var r=this.keys(),i=r.length;if(i){for(var s=void 0,a=d.isObject(t),c=0;i>c;c++){if(s=r[c],e){var l=e().getItem(this.$$prefix+".data."+s);l&&(o[s]=d.fromJson(l))}else a&&(o[s]=t[s]);this.remove(s)}n=!0}}if(!d.isString(e))throw new Error("storageMode must be a string!");if("memory"!==e&&"localStorage"!==e&&"sessionStorage"!==e)throw new Error('storageMode must be "memory", "localStorage" or "sessionStorage"!');var i=l,s=a,n=!1,o={};if(this.$$initializing||r.call(this,i,s),this.$$storageMode=e,t){if(!d.isObject(t))throw new Error("storageImpl must be an object!");if(!("setItem"in t&&"function"==typeof t.setItem))throw new Error('storageImpl must implement "setItem(key, value)"!');if(!("getItem"in t&&"function"==typeof t.getItem))throw new Error('storageImpl must implement "getItem(key)"!');if(!("removeItem"in t)||"function"!=typeof t.removeItem)throw new Error('storageImpl must implement "removeItem(key)"!');l=function(){return t}}else if("localStorage"===this.$$storageMode)try{localStorage.setItem("cachefactory","cachefactory"),localStorage.removeItem("cachefactory"),l=function(){return localStorage}}catch(c){l=null,this.$$storageMode="memory"}else if("sessionStorage"===this.$$storageMode)try{sessionStorage.setItem("cachefactory","cachefactory"),sessionStorage.removeItem("cachefactory"),l=function(){return sessionStorage}}catch(c){l=null,this.$$storageMode="memory"}else l=null,this.$$storageMode="memory";if(this.$$initializing&&r.call(this,l,a),n){var u=void 0;for(var h in o)u=o[h],this.put(h,u.value,{created:u.created,accessed:u.accessed,expires:u.expires})}},touch:function(e,t){var r=this;if(e){var i=this.get(e,{onExpire:function(e,t){return r.put(e,t)}});i&&this.put(e,i,t)}else for(var s=this.keys(),n=0;n<s.length;n++)this.touch(s[n],t)},values:function(){for(var e=this.keys(),t=[],r=0;r<e.length;r++)t.push(this.get(e[r]));return t}};return p.$$initializing=!0,p.setOptions(o,!0),p.$$initializing=!1,p}function a(e,t){return o(e,t)}function c(){this.$get=function(){return a.BinaryHeap}}function l(){this.defaults=a.defaults,this.defaults.storagePrefix="angular-cache.caches.",this.$get=["$q",function(e){return a.utils.Promise=e,a}]}e="default"in e?e["default"]:e;var u={};u["typeof"]="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};var h=function(e,t,r){for(var i=e[r],s=t(i);r>0;){var n=Math.floor((r+1)/2)-1,o=e[n];if(s>=t(o))break;e[n]=i,e[r]=o,r=n}},f=function(e,t,r){for(var i=e.length,s=e[r],n=t(s);;){var o=2*(r+1),a=o-1,c=null;if(i>a){var l=e[a],u=t(l);n>u&&(c=a)}if(i>o){var h=e[o],f=t(h);f<(null===c?n:t(e[a]))&&(c=o)}if(null===c)break;e[r]=e[c],e[c]=s,r=c}},p=t.prototype;p.push=function(e){this.heap.push(e),h(this.heap,this.weightFunc,this.heap.length-1)},p.peek=function(){return this.heap[0]},p.pop=function(){var e=this.heap[0],t=this.heap.pop();return this.heap.length>0&&(this.heap[0]=t,f(this.heap,this.weightFunc,0)),e},p.remove=function(e){for(var t=this.heap.length,r=0;t>r;r++)if(this.compareFunc(this.heap[r],e)){var i=this.heap[r],s=this.heap.pop();return r!==t-1&&(this.heap[r]=s,h(this.heap,this.weightFunc,r),f(this.heap,this.weightFunc,r)),i}return null},p.removeAll=function(){this.heap=[]},p.size=function(){return this.heap.length};var m=null;try{m=window.Promise}catch($){}var d={isNumber:function(e){return"number"==typeof e},isString:function(e){return"string"==typeof e},isObject:function(e){return null!==e&&"object"===("undefined"==typeof e?"undefined":u["typeof"](e))},isFunction:function(e){return"function"==typeof e},fromJson:function(e){return JSON.parse(e)},equals:function(e,t){return e===t},Promise:m},v={capacity:Number.MAX_VALUE,maxAge:Number.MAX_VALUE,deleteOnExpire:"none",onExpire:null,cacheFlushInterval:null,recycleFreq:1e3,storageMode:"memory",storageImpl:null,disabled:!1,storagePrefix:"cachefactory.caches.",storeOnResolve:!1,storeOnReject:!1},g={};a.createCache=o,a.defaults=v,a.info=function(){var e=r(g),t={size:e.length,caches:{}};for(var i in v)v.hasOwnProperty(i)&&(t[i]=v[i]);for(var s=0;s<e.length;s++){var n=e[s];t.caches[n]=g[n].info()}return t},a.get=function(e){return g[e]},a.keySet=function(){return n(g)},a.keys=function(){return r(g)},a.destroy=function(e){g[e]&&(g[e].destroy(),delete g[e])},a.destroyAll=function(){for(var e in g)g[e].destroy();g={}},a.clearAll=function(){for(var e in g)g[e].removeAll()},a.removeExpiredFromAll=function(){var e={};for(var t in g)e[t]=g[t].removeExpired();return e},a.enableAll=function(){for(var e in g)g[e].$$disabled=!1},a.disableAll=function(){for(var e in g)g[e].$$disabled=!0},a.touchAll=function(){for(var e in g)g[e].touch()},a.utils=d,a.BinaryHeap=t,a.utils.equals=e.equals,a.utils.isObject=e.isObject,a.utils.fromJson=e.fromJson,e.module("angular-cache",[]).provider("BinaryHeap",c).provider("CacheFactory",l);var y="angular-cache";return y});
//# sourceMappingURL=angular-cache.min.map
;(function (root, factory) {
	if (typeof exports === "object") {
		// CommonJS
		module.exports = exports = factory();
	}
	else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	}
	else {
		// Global (browser)
		root.CryptoJS = factory();
	}
}(this, function () {

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {
	    /*
	     * Local polyfil of Object.create
	     */
	    var create = Object.create || (function () {
	        function F() {};

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }())

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var i = 0; i < thatSigBytes; i += 4) {
	                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            var r = (function (m_w) {
	                var m_w = m_w;
	                var m_z = 0x3ade68b1;
	                var mask = 0xffffffff;

	                return function () {
	                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;
	                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;
	                    var result = ((m_z << 0x10) + m_w) & mask;
	                    result /= 0x100000000;
	                    result += 0.5;
	                    return result * (Math.random() > .5 ? 1 : -1);
	                }
	            });

	            for (var i = 0, rcache; i < nBytes; i += 4) {
	                var _r = r((rcache || Math.random()) * 0x100000000);

	                rcache = _r() * 0x3ade67b7;
	                words.push((_r() * 0x100000000) | 0);
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                var processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * UTF-16 BE encoding strategy.
	     */
	    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
	        /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    /**
	     * UTF-16 LE encoding strategy.
	     */
	    C_enc.Utf16LE = {
	        /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var utf16Chars = [];
	            for (var i = 0; i < sigBytes; i += 2) {
	                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);
	                utf16Chars.push(String.fromCharCode(codePoint));
	            }

	            return utf16Chars.join('');
	        },

	        /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */
	        parse: function (utf16Str) {
	            // Shortcut
	            var utf16StrLength = utf16Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < utf16StrLength; i++) {
	                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));
	            }

	            return WordArray.create(words, utf16StrLength * 2);
	        }
	    };

	    function swapEndian(word) {
	        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);
	    }
	}());


	(function () {
	    // Check if typed arrays are supported
	    if (typeof ArrayBuffer != 'function') {
	        return;
	    }

	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;

	    // Reference original init
	    var superInit = WordArray.init;

	    // Augment WordArray.init to handle typed arrays
	    var subInit = WordArray.init = function (typedArray) {
	        // Convert buffers to uint8
	        if (typedArray instanceof ArrayBuffer) {
	            typedArray = new Uint8Array(typedArray);
	        }

	        // Convert other array views to uint8
	        if (
	            typedArray instanceof Int8Array ||
	            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||
	            typedArray instanceof Int16Array ||
	            typedArray instanceof Uint16Array ||
	            typedArray instanceof Int32Array ||
	            typedArray instanceof Uint32Array ||
	            typedArray instanceof Float32Array ||
	            typedArray instanceof Float64Array
	        ) {
	            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
	        }

	        // Handle Uint8Array
	        if (typedArray instanceof Uint8Array) {
	            // Shortcut
	            var typedArrayByteLength = typedArray.byteLength;

	            // Extract bytes
	            var words = [];
	            for (var i = 0; i < typedArrayByteLength; i++) {
	                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
	            }

	            // Initialize this word array
	            superInit.call(this, words, typedArrayByteLength);
	        } else {
	            // Else call normal init
	            superInit.apply(this, arguments);
	        }
	    };

	    subInit.prototype = WordArray;
	}());


	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var _zl = WordArray.create([
	        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);
	    var _zr = WordArray.create([
	        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);
	    var _sl = WordArray.create([
	         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);
	    var _sr = WordArray.create([
	        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);

	    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
	    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

	    /**
	     * RIPEMD160 hash algorithm.
	     */
	    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
	        _doReset: function () {
	            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
	        },

	        _doProcessBlock: function (M, offset) {

	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                // Swap
	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }
	            // Shortcut
	            var H  = this._hash.words;
	            var hl = _hl.words;
	            var hr = _hr.words;
	            var zl = _zl.words;
	            var zr = _zr.words;
	            var sl = _sl.words;
	            var sr = _sr.words;

	            // Working variables
	            var al, bl, cl, dl, el;
	            var ar, br, cr, dr, er;

	            ar = al = H[0];
	            br = bl = H[1];
	            cr = cl = H[2];
	            dr = dl = H[3];
	            er = el = H[4];
	            // Computation
	            var t;
	            for (var i = 0; i < 80; i += 1) {
	                t = (al +  M[offset+zl[i]])|0;
	                if (i<16){
		            t +=  f1(bl,cl,dl) + hl[0];
	                } else if (i<32) {
		            t +=  f2(bl,cl,dl) + hl[1];
	                } else if (i<48) {
		            t +=  f3(bl,cl,dl) + hl[2];
	                } else if (i<64) {
		            t +=  f4(bl,cl,dl) + hl[3];
	                } else {// if (i<80) {
		            t +=  f5(bl,cl,dl) + hl[4];
	                }
	                t = t|0;
	                t =  rotl(t,sl[i]);
	                t = (t+el)|0;
	                al = el;
	                el = dl;
	                dl = rotl(cl, 10);
	                cl = bl;
	                bl = t;

	                t = (ar + M[offset+zr[i]])|0;
	                if (i<16){
		            t +=  f5(br,cr,dr) + hr[0];
	                } else if (i<32) {
		            t +=  f4(br,cr,dr) + hr[1];
	                } else if (i<48) {
		            t +=  f3(br,cr,dr) + hr[2];
	                } else if (i<64) {
		            t +=  f2(br,cr,dr) + hr[3];
	                } else {// if (i<80) {
		            t +=  f1(br,cr,dr) + hr[4];
	                }
	                t = t|0;
	                t =  rotl(t,sr[i]) ;
	                t = (t+er)|0;
	                ar = er;
	                er = dr;
	                dr = rotl(cr, 10);
	                cr = br;
	                br = t;
	            }
	            // Intermediate hash value
	            t    = (H[1] + cl + dr)|0;
	            H[1] = (H[2] + dl + er)|0;
	            H[2] = (H[3] + el + ar)|0;
	            H[3] = (H[4] + al + br)|0;
	            H[4] = (H[0] + bl + cr)|0;
	            H[0] =  t;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	            );
	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 5; i++) {
	                // Shortcut
	                var H_i = H[i];

	                // Swap
	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });


	    function f1(x, y, z) {
	        return ((x) ^ (y) ^ (z));

	    }

	    function f2(x, y, z) {
	        return (((x)&(y)) | ((~x)&(z)));
	    }

	    function f3(x, y, z) {
	        return (((x) | (~(y))) ^ (z));
	    }

	    function f4(x, y, z) {
	        return (((x) & (z)) | ((y)&(~(z))));
	    }

	    function f5(x, y, z) {
	        return ((x) ^ ((y) |(~(z))));

	    }

	    function rotl(x,n) {
	        return (x<<n) | (x>>>(32-n));
	    }


	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */
	    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */
	    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA1 = C_algo.SHA1;
	    var HMAC = C_algo.HMAC;

	    /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */
	    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA1
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: SHA1,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init HMAC
	            var hmac = HMAC.create(cfg.hasher, password);

	            // Initial values
	            var derivedKey = WordArray.create();
	            var blockIndex = WordArray.create([0x00000001]);

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var blockIndexWords = blockIndex.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                var block = hmac.update(salt).finalize(blockIndex);
	                hmac.reset();

	                // Shortcuts
	                var blockWords = block.words;
	                var blockWordsLength = blockWords.length;

	                // Iterations
	                var intermediate = block;
	                for (var i = 1; i < iterations; i++) {
	                    intermediate = hmac.finalize(intermediate);
	                    hmac.reset();

	                    // Shortcut
	                    var intermediateWords = intermediate.words;

	                    // XOR intermediate with block
	                    for (var j = 0; j < blockWordsLength; j++) {
	                        blockWords[j] ^= intermediateWords[j];
	                    }
	                }

	                derivedKey.concat(block);
	                blockIndexWords[0]++;
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.PBKDF2 = function (password, salt, cfg) {
	        return PBKDF2.create(cfg).compute(password, salt);
	    };
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                var block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var SHA256 = C_algo.SHA256;

	    /**
	     * SHA-224 hash algorithm.
	     */
	    var SHA224 = C_algo.SHA224 = SHA256.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA256._doFinalize.call(this);

	            hash.sigBytes -= 4;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */
	    C.SHA224 = SHA256._createHelper(SHA224);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */
	    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	}());


	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var X32WordArray = C_lib.WordArray;

	    /**
	     * x64 namespace.
	     */
	    var C_x64 = C.x64 = {};

	    /**
	     * A 64-bit word.
	     */
	    var X64Word = C_x64.Word = Base.extend({
	        /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */
	        init: function (high, low) {
	            this.high = high;
	            this.low = low;
	        }

	        /**
	         * Bitwise NOTs this word.
	         *
	         * @return {X64Word} A new x64-Word object after negating.
	         *
	         * @example
	         *
	         *     var negated = x64Word.not();
	         */
	        // not: function () {
	            // var high = ~this.high;
	            // var low = ~this.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ANDs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to AND with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ANDing.
	         *
	         * @example
	         *
	         *     var anded = x64Word.and(anotherX64Word);
	         */
	        // and: function (word) {
	            // var high = this.high & word.high;
	            // var low = this.low & word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise ORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to OR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after ORing.
	         *
	         * @example
	         *
	         *     var ored = x64Word.or(anotherX64Word);
	         */
	        // or: function (word) {
	            // var high = this.high | word.high;
	            // var low = this.low | word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Bitwise XORs this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to XOR with this word.
	         *
	         * @return {X64Word} A new x64-Word object after XORing.
	         *
	         * @example
	         *
	         *     var xored = x64Word.xor(anotherX64Word);
	         */
	        // xor: function (word) {
	            // var high = this.high ^ word.high;
	            // var low = this.low ^ word.low;

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the left.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftL(25);
	         */
	        // shiftL: function (n) {
	            // if (n < 32) {
	                // var high = (this.high << n) | (this.low >>> (32 - n));
	                // var low = this.low << n;
	            // } else {
	                // var high = this.low << (n - 32);
	                // var low = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Shifts this word n bits to the right.
	         *
	         * @param {number} n The number of bits to shift.
	         *
	         * @return {X64Word} A new x64-Word object after shifting.
	         *
	         * @example
	         *
	         *     var shifted = x64Word.shiftR(7);
	         */
	        // shiftR: function (n) {
	            // if (n < 32) {
	                // var low = (this.low >>> n) | (this.high << (32 - n));
	                // var high = this.high >>> n;
	            // } else {
	                // var low = this.high >>> (n - 32);
	                // var high = 0;
	            // }

	            // return X64Word.create(high, low);
	        // },

	        /**
	         * Rotates this word n bits to the left.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotL(25);
	         */
	        // rotL: function (n) {
	            // return this.shiftL(n).or(this.shiftR(64 - n));
	        // },

	        /**
	         * Rotates this word n bits to the right.
	         *
	         * @param {number} n The number of bits to rotate.
	         *
	         * @return {X64Word} A new x64-Word object after rotating.
	         *
	         * @example
	         *
	         *     var rotated = x64Word.rotR(7);
	         */
	        // rotR: function (n) {
	            // return this.shiftR(n).or(this.shiftL(64 - n));
	        // },

	        /**
	         * Adds this word with the passed word.
	         *
	         * @param {X64Word} word The x64-Word to add with this word.
	         *
	         * @return {X64Word} A new x64-Word object after adding.
	         *
	         * @example
	         *
	         *     var added = x64Word.add(anotherX64Word);
	         */
	        // add: function (word) {
	            // var low = (this.low + word.low) | 0;
	            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
	            // var high = (this.high + word.high + carry) | 0;

	            // return X64Word.create(high, low);
	        // }
	    });

	    /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var X64WordArray = C_x64.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 8;
	            }
	        },

	        /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */
	        toX32: function () {
	            // Shortcuts
	            var x64Words = this.words;
	            var x64WordsLength = x64Words.length;

	            // Convert
	            var x32Words = [];
	            for (var i = 0; i < x64WordsLength; i++) {
	                var x64Word = x64Words[i];
	                x32Words.push(x64Word.high);
	                x32Words.push(x64Word.low);
	            }

	            return X32WordArray.create(x32Words, this.sigBytes);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);

	            // Clone "words" array
	            var words = clone.words = this.words.slice(0);

	            // Clone each X64Word object
	            var wordsLength = words.length;
	            for (var i = 0; i < wordsLength; i++) {
	                words[i] = words[i].clone();
	            }

	            return clone;
	        }
	    });
	}());


	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var C_algo = C.algo;

	    // Constants tables
	    var RHO_OFFSETS = [];
	    var PI_INDEXES  = [];
	    var ROUND_CONSTANTS = [];

	    // Compute Constants
	    (function () {
	        // Compute rho offset constants
	        var x = 1, y = 0;
	        for (var t = 0; t < 24; t++) {
	            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;

	            var newX = y % 5;
	            var newY = (2 * x + 3 * y) % 5;
	            x = newX;
	            y = newY;
	        }

	        // Compute pi index constants
	        for (var x = 0; x < 5; x++) {
	            for (var y = 0; y < 5; y++) {
	                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;
	            }
	        }

	        // Compute round constants
	        var LFSR = 0x01;
	        for (var i = 0; i < 24; i++) {
	            var roundConstantMsw = 0;
	            var roundConstantLsw = 0;

	            for (var j = 0; j < 7; j++) {
	                if (LFSR & 0x01) {
	                    var bitPosition = (1 << j) - 1;
	                    if (bitPosition < 32) {
	                        roundConstantLsw ^= 1 << bitPosition;
	                    } else /* if (bitPosition >= 32) */ {
	                        roundConstantMsw ^= 1 << (bitPosition - 32);
	                    }
	                }

	                // Compute next LFSR
	                if (LFSR & 0x80) {
	                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
	                    LFSR = (LFSR << 1) ^ 0x71;
	                } else {
	                    LFSR <<= 1;
	                }
	            }

	            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
	        }
	    }());

	    // Reusable objects for temporary values
	    var T = [];
	    (function () {
	        for (var i = 0; i < 25; i++) {
	            T[i] = X64Word.create();
	        }
	    }());

	    /**
	     * SHA-3 hash algorithm.
	     */
	    var SHA3 = C_algo.SHA3 = Hasher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */
	        cfg: Hasher.cfg.extend({
	            outputLength: 512
	        }),

	        _doReset: function () {
	            var state = this._state = []
	            for (var i = 0; i < 25; i++) {
	                state[i] = new X64Word.init();
	            }

	            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var state = this._state;
	            var nBlockSizeLanes = this.blockSize / 2;

	            // Absorb
	            for (var i = 0; i < nBlockSizeLanes; i++) {
	                // Shortcuts
	                var M2i  = M[offset + 2 * i];
	                var M2i1 = M[offset + 2 * i + 1];

	                // Swap endian
	                M2i = (
	                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |
	                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)
	                );
	                M2i1 = (
	                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |
	                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)
	                );

	                // Absorb message into state
	                var lane = state[i];
	                lane.high ^= M2i1;
	                lane.low  ^= M2i;
	            }

	            // Rounds
	            for (var round = 0; round < 24; round++) {
	                // Theta
	                for (var x = 0; x < 5; x++) {
	                    // Mix column lanes
	                    var tMsw = 0, tLsw = 0;
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        tMsw ^= lane.high;
	                        tLsw ^= lane.low;
	                    }

	                    // Temporary values
	                    var Tx = T[x];
	                    Tx.high = tMsw;
	                    Tx.low  = tLsw;
	                }
	                for (var x = 0; x < 5; x++) {
	                    // Shortcuts
	                    var Tx4 = T[(x + 4) % 5];
	                    var Tx1 = T[(x + 1) % 5];
	                    var Tx1Msw = Tx1.high;
	                    var Tx1Lsw = Tx1.low;

	                    // Mix surrounding columns
	                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
	                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
	                    for (var y = 0; y < 5; y++) {
	                        var lane = state[x + 5 * y];
	                        lane.high ^= tMsw;
	                        lane.low  ^= tLsw;
	                    }
	                }

	                // Rho Pi
	                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
	                    // Shortcuts
	                    var lane = state[laneIndex];
	                    var laneMsw = lane.high;
	                    var laneLsw = lane.low;
	                    var rhoOffset = RHO_OFFSETS[laneIndex];

	                    // Rotate lanes
	                    if (rhoOffset < 32) {
	                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));
	                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));
	                    } else /* if (rhoOffset >= 32) */ {
	                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));
	                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));
	                    }

	                    // Transpose lanes
	                    var TPiLane = T[PI_INDEXES[laneIndex]];
	                    TPiLane.high = tMsw;
	                    TPiLane.low  = tLsw;
	                }

	                // Rho pi at x = y = 0
	                var T0 = T[0];
	                var state0 = state[0];
	                T0.high = state0.high;
	                T0.low  = state0.low;

	                // Chi
	                for (var x = 0; x < 5; x++) {
	                    for (var y = 0; y < 5; y++) {
	                        // Shortcuts
	                        var laneIndex = x + 5 * y;
	                        var lane = state[laneIndex];
	                        var TLane = T[laneIndex];
	                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];
	                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];

	                        // Mix rows
	                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);
	                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);
	                    }
	                }

	                // Iota
	                var lane = state[0];
	                var roundConstant = ROUND_CONSTANTS[round];
	                lane.high ^= roundConstant.high;
	                lane.low  ^= roundConstant.low;;
	            }
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;
	            var blockSizeBits = this.blockSize * 32;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);
	            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var state = this._state;
	            var outputLengthBytes = this.cfg.outputLength / 8;
	            var outputLengthLanes = outputLengthBytes / 8;

	            // Squeeze
	            var hashWords = [];
	            for (var i = 0; i < outputLengthLanes; i++) {
	                // Shortcuts
	                var lane = state[i];
	                var laneMsw = lane.high;
	                var laneLsw = lane.low;

	                // Swap endian
	                laneMsw = (
	                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |
	                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)
	                );
	                laneLsw = (
	                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |
	                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)
	                );

	                // Squeeze state to retrieve hash
	                hashWords.push(laneLsw);
	                hashWords.push(laneMsw);
	            }

	            // Return final computed hash
	            return new WordArray.init(hashWords, outputLengthBytes);
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);

	            var state = clone._state = this._state.slice(0);
	            for (var i = 0; i < 25; i++) {
	                state[i] = state[i].clone();
	            }

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */
	    C.SHA3 = Hasher._createHelper(SHA3);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */
	    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	}(Math));


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Hasher = C_lib.Hasher;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;

	    function X64Word_create() {
	        return X64Word.create.apply(X64Word, arguments);
	    }

	    // Constants
	    var K = [
	        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
	        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
	        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
	        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
	        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
	        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
	        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
	        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
	        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
	        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
	        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
	        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
	        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
	        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
	        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
	        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
	        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
	        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
	        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
	        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
	        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
	        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
	        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
	        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
	        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
	        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
	        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
	        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
	        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
	        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
	        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
	        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
	        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
	        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
	        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
	        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
	        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
	        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
	        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
	        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)
	    ];

	    // Reusable objects
	    var W = [];
	    (function () {
	        for (var i = 0; i < 80; i++) {
	            W[i] = X64Word_create();
	        }
	    }());

	    /**
	     * SHA-512 hash algorithm.
	     */
	    var SHA512 = C_algo.SHA512 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
	                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
	                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
	                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcuts
	            var H = this._hash.words;

	            var H0 = H[0];
	            var H1 = H[1];
	            var H2 = H[2];
	            var H3 = H[3];
	            var H4 = H[4];
	            var H5 = H[5];
	            var H6 = H[6];
	            var H7 = H[7];

	            var H0h = H0.high;
	            var H0l = H0.low;
	            var H1h = H1.high;
	            var H1l = H1.low;
	            var H2h = H2.high;
	            var H2l = H2.low;
	            var H3h = H3.high;
	            var H3l = H3.low;
	            var H4h = H4.high;
	            var H4l = H4.low;
	            var H5h = H5.high;
	            var H5l = H5.low;
	            var H6h = H6.high;
	            var H6l = H6.low;
	            var H7h = H7.high;
	            var H7l = H7.low;

	            // Working variables
	            var ah = H0h;
	            var al = H0l;
	            var bh = H1h;
	            var bl = H1l;
	            var ch = H2h;
	            var cl = H2l;
	            var dh = H3h;
	            var dl = H3l;
	            var eh = H4h;
	            var el = H4l;
	            var fh = H5h;
	            var fl = H5l;
	            var gh = H6h;
	            var gl = H6l;
	            var hh = H7h;
	            var hl = H7l;

	            // Rounds
	            for (var i = 0; i < 80; i++) {
	                // Shortcut
	                var Wi = W[i];

	                // Extend message
	                if (i < 16) {
	                    var Wih = Wi.high = M[offset + i * 2]     | 0;
	                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;
	                } else {
	                    // Gamma0
	                    var gamma0x  = W[i - 15];
	                    var gamma0xh = gamma0x.high;
	                    var gamma0xl = gamma0x.low;
	                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);
	                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));

	                    // Gamma1
	                    var gamma1x  = W[i - 2];
	                    var gamma1xh = gamma1x.high;
	                    var gamma1xl = gamma1x.low;
	                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);
	                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));

	                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	                    var Wi7  = W[i - 7];
	                    var Wi7h = Wi7.high;
	                    var Wi7l = Wi7.low;

	                    var Wi16  = W[i - 16];
	                    var Wi16h = Wi16.high;
	                    var Wi16l = Wi16.low;

	                    var Wil = gamma0l + Wi7l;
	                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);
	                    var Wil = Wil + gamma1l;
	                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);
	                    var Wil = Wil + Wi16l;
	                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);

	                    Wi.high = Wih;
	                    Wi.low  = Wil;
	                }

	                var chh  = (eh & fh) ^ (~eh & gh);
	                var chl  = (el & fl) ^ (~el & gl);
	                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);
	                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);

	                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));
	                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));
	                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));
	                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));

	                // t1 = h + sigma1 + ch + K[i] + W[i]
	                var Ki  = K[i];
	                var Kih = Ki.high;
	                var Kil = Ki.low;

	                var t1l = hl + sigma1l;
	                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);
	                var t1l = t1l + chl;
	                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);
	                var t1l = t1l + Kil;
	                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);
	                var t1l = t1l + Wil;
	                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);

	                // t2 = sigma0 + maj
	                var t2l = sigma0l + majl;
	                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);

	                // Update working variables
	                hh = gh;
	                hl = gl;
	                gh = fh;
	                gl = fl;
	                fh = eh;
	                fl = el;
	                el = (dl + t1l) | 0;
	                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;
	                dh = ch;
	                dl = cl;
	                ch = bh;
	                cl = bl;
	                bh = ah;
	                bl = al;
	                al = (t1l + t2l) | 0;
	                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;
	            }

	            // Intermediate hash value
	            H0l = H0.low  = (H0l + al);
	            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));
	            H1l = H1.low  = (H1l + bl);
	            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));
	            H2l = H2.low  = (H2l + cl);
	            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));
	            H3l = H3.low  = (H3l + dl);
	            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));
	            H4l = H4.low  = (H4l + el);
	            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));
	            H5l = H5.low  = (H5l + fl);
	            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));
	            H6l = H6.low  = (H6l + gl);
	            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));
	            H7l = H7.low  = (H7l + hl);
	            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Convert hash to 32-bit word array before returning
	            var hash = this._hash.toX32();

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        },

	        blockSize: 1024/32
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */
	    C.SHA512 = Hasher._createHelper(SHA512);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */
	    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_x64 = C.x64;
	    var X64Word = C_x64.Word;
	    var X64WordArray = C_x64.WordArray;
	    var C_algo = C.algo;
	    var SHA512 = C_algo.SHA512;

	    /**
	     * SHA-384 hash algorithm.
	     */
	    var SHA384 = C_algo.SHA384 = SHA512.extend({
	        _doReset: function () {
	            this._hash = new X64WordArray.init([
	                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
	                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
	                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
	                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)
	            ]);
	        },

	        _doFinalize: function () {
	            var hash = SHA512._doFinalize.call(this);

	            hash.sigBytes -= 16;

	            return hash;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */
	    C.SHA384 = SHA512._createHelper(SHA384);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */
	    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	}());


	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                var block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                var block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                var modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                var modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                var finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                var wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                var salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


	/**
	 * Cipher Feedback block mode.
	 */
	CryptoJS.mode.CFB = (function () {
	    var CFB = CryptoJS.lib.BlockCipherMode.extend();

	    CFB.Encryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // Remember this block to use with next block
	            this._prevBlock = words.slice(offset, offset + blockSize);
	        }
	    });

	    CFB.Decryptor = CFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher;
	            var blockSize = cipher.blockSize;

	            // Remember this block to use with next block
	            var thisBlock = words.slice(offset, offset + blockSize);

	            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

	            // This block becomes the previous block
	            this._prevBlock = thisBlock;
	        }
	    });

	    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
	        // Shortcut
	        var iv = this._iv;

	        // Generate keystream
	        if (iv) {
	            var keystream = iv.slice(0);

	            // Remove IV for subsequent blocks
	            this._iv = undefined;
	        } else {
	            var keystream = this._prevBlock;
	        }
	        cipher.encryptBlock(keystream, 0);

	        // Encrypt
	        for (var i = 0; i < blockSize; i++) {
	            words[offset + i] ^= keystream[i];
	        }
	    }

	    return CFB;
	}());


	/**
	 * Electronic Codebook block mode.
	 */
	CryptoJS.mode.ECB = (function () {
	    var ECB = CryptoJS.lib.BlockCipherMode.extend();

	    ECB.Encryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.encryptBlock(words, offset);
	        }
	    });

	    ECB.Decryptor = ECB.extend({
	        processBlock: function (words, offset) {
	            this._cipher.decryptBlock(words, offset);
	        }
	    });

	    return ECB;
	}());


	/**
	 * ANSI X.923 padding strategy.
	 */
	CryptoJS.pad.AnsiX923 = {
	    pad: function (data, blockSize) {
	        // Shortcuts
	        var dataSigBytes = data.sigBytes;
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

	        // Compute last byte position
	        var lastBytePos = dataSigBytes + nPaddingBytes - 1;

	        // Pad
	        data.clamp();
	        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);
	        data.sigBytes += nPaddingBytes;
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	/**
	 * ISO 10126 padding strategy.
	 */
	CryptoJS.pad.Iso10126 = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Count padding bytes
	        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	        // Pad
	        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
	             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
	    },

	    unpad: function (data) {
	        // Get number of padding bytes from last byte
	        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	        // Remove padding
	        data.sigBytes -= nPaddingBytes;
	    }
	};


	/**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */
	CryptoJS.pad.Iso97971 = {
	    pad: function (data, blockSize) {
	        // Add 0x80 byte
	        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

	        // Zero pad the rest
	        CryptoJS.pad.ZeroPadding.pad(data, blockSize);
	    },

	    unpad: function (data) {
	        // Remove zero padding
	        CryptoJS.pad.ZeroPadding.unpad(data);

	        // Remove one more byte -- the 0x80 byte
	        data.sigBytes--;
	    }
	};


	/**
	 * Output Feedback block mode.
	 */
	CryptoJS.mode.OFB = (function () {
	    var OFB = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = OFB.Encryptor = OFB.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var keystream = this._keystream;

	            // Generate keystream
	            if (iv) {
	                keystream = this._keystream = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    OFB.Decryptor = Encryptor;

	    return OFB;
	}());


	/**
	 * A noop padding strategy.
	 */
	CryptoJS.pad.NoPadding = {
	    pad: function () {
	    },

	    unpad: function () {
	    }
	};


	(function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var CipherParams = C_lib.CipherParams;
	    var C_enc = C.enc;
	    var Hex = C_enc.Hex;
	    var C_format = C.format;

	    var HexFormatter = C_format.Hex = {
	        /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            return cipherParams.ciphertext.toString(Hex);
	        },

	        /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */
	        parse: function (input) {
	            var ciphertext = Hex.parse(input);
	            return CipherParams.create({ ciphertext: ciphertext });
	        }
	    };
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Permuted Choice 1 constants
	    var PC1 = [
	        57, 49, 41, 33, 25, 17, 9,  1,
	        58, 50, 42, 34, 26, 18, 10, 2,
	        59, 51, 43, 35, 27, 19, 11, 3,
	        60, 52, 44, 36, 63, 55, 47, 39,
	        31, 23, 15, 7,  62, 54, 46, 38,
	        30, 22, 14, 6,  61, 53, 45, 37,
	        29, 21, 13, 5,  28, 20, 12, 4
	    ];

	    // Permuted Choice 2 constants
	    var PC2 = [
	        14, 17, 11, 24, 1,  5,
	        3,  28, 15, 6,  21, 10,
	        23, 19, 12, 4,  26, 8,
	        16, 7,  27, 20, 13, 2,
	        41, 52, 31, 37, 47, 55,
	        30, 40, 51, 45, 33, 48,
	        44, 49, 39, 56, 34, 53,
	        46, 42, 50, 36, 29, 32
	    ];

	    // Cumulative bit shift constants
	    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

	    // SBOXes and round permutation constants
	    var SBOX_P = [
	        {
	            0x0: 0x808200,
	            0x10000000: 0x8000,
	            0x20000000: 0x808002,
	            0x30000000: 0x2,
	            0x40000000: 0x200,
	            0x50000000: 0x808202,
	            0x60000000: 0x800202,
	            0x70000000: 0x800000,
	            0x80000000: 0x202,
	            0x90000000: 0x800200,
	            0xa0000000: 0x8200,
	            0xb0000000: 0x808000,
	            0xc0000000: 0x8002,
	            0xd0000000: 0x800002,
	            0xe0000000: 0x0,
	            0xf0000000: 0x8202,
	            0x8000000: 0x0,
	            0x18000000: 0x808202,
	            0x28000000: 0x8202,
	            0x38000000: 0x8000,
	            0x48000000: 0x808200,
	            0x58000000: 0x200,
	            0x68000000: 0x808002,
	            0x78000000: 0x2,
	            0x88000000: 0x800200,
	            0x98000000: 0x8200,
	            0xa8000000: 0x808000,
	            0xb8000000: 0x800202,
	            0xc8000000: 0x800002,
	            0xd8000000: 0x8002,
	            0xe8000000: 0x202,
	            0xf8000000: 0x800000,
	            0x1: 0x8000,
	            0x10000001: 0x2,
	            0x20000001: 0x808200,
	            0x30000001: 0x800000,
	            0x40000001: 0x808002,
	            0x50000001: 0x8200,
	            0x60000001: 0x200,
	            0x70000001: 0x800202,
	            0x80000001: 0x808202,
	            0x90000001: 0x808000,
	            0xa0000001: 0x800002,
	            0xb0000001: 0x8202,
	            0xc0000001: 0x202,
	            0xd0000001: 0x800200,
	            0xe0000001: 0x8002,
	            0xf0000001: 0x0,
	            0x8000001: 0x808202,
	            0x18000001: 0x808000,
	            0x28000001: 0x800000,
	            0x38000001: 0x200,
	            0x48000001: 0x8000,
	            0x58000001: 0x800002,
	            0x68000001: 0x2,
	            0x78000001: 0x8202,
	            0x88000001: 0x8002,
	            0x98000001: 0x800202,
	            0xa8000001: 0x202,
	            0xb8000001: 0x808200,
	            0xc8000001: 0x800200,
	            0xd8000001: 0x0,
	            0xe8000001: 0x8200,
	            0xf8000001: 0x808002
	        },
	        {
	            0x0: 0x40084010,
	            0x1000000: 0x4000,
	            0x2000000: 0x80000,
	            0x3000000: 0x40080010,
	            0x4000000: 0x40000010,
	            0x5000000: 0x40084000,
	            0x6000000: 0x40004000,
	            0x7000000: 0x10,
	            0x8000000: 0x84000,
	            0x9000000: 0x40004010,
	            0xa000000: 0x40000000,
	            0xb000000: 0x84010,
	            0xc000000: 0x80010,
	            0xd000000: 0x0,
	            0xe000000: 0x4010,
	            0xf000000: 0x40080000,
	            0x800000: 0x40004000,
	            0x1800000: 0x84010,
	            0x2800000: 0x10,
	            0x3800000: 0x40004010,
	            0x4800000: 0x40084010,
	            0x5800000: 0x40000000,
	            0x6800000: 0x80000,
	            0x7800000: 0x40080010,
	            0x8800000: 0x80010,
	            0x9800000: 0x0,
	            0xa800000: 0x4000,
	            0xb800000: 0x40080000,
	            0xc800000: 0x40000010,
	            0xd800000: 0x84000,
	            0xe800000: 0x40084000,
	            0xf800000: 0x4010,
	            0x10000000: 0x0,
	            0x11000000: 0x40080010,
	            0x12000000: 0x40004010,
	            0x13000000: 0x40084000,
	            0x14000000: 0x40080000,
	            0x15000000: 0x10,
	            0x16000000: 0x84010,
	            0x17000000: 0x4000,
	            0x18000000: 0x4010,
	            0x19000000: 0x80000,
	            0x1a000000: 0x80010,
	            0x1b000000: 0x40000010,
	            0x1c000000: 0x84000,
	            0x1d000000: 0x40004000,
	            0x1e000000: 0x40000000,
	            0x1f000000: 0x40084010,
	            0x10800000: 0x84010,
	            0x11800000: 0x80000,
	            0x12800000: 0x40080000,
	            0x13800000: 0x4000,
	            0x14800000: 0x40004000,
	            0x15800000: 0x40084010,
	            0x16800000: 0x10,
	            0x17800000: 0x40000000,
	            0x18800000: 0x40084000,
	            0x19800000: 0x40000010,
	            0x1a800000: 0x40004010,
	            0x1b800000: 0x80010,
	            0x1c800000: 0x0,
	            0x1d800000: 0x4010,
	            0x1e800000: 0x40080010,
	            0x1f800000: 0x84000
	        },
	        {
	            0x0: 0x104,
	            0x100000: 0x0,
	            0x200000: 0x4000100,
	            0x300000: 0x10104,
	            0x400000: 0x10004,
	            0x500000: 0x4000004,
	            0x600000: 0x4010104,
	            0x700000: 0x4010000,
	            0x800000: 0x4000000,
	            0x900000: 0x4010100,
	            0xa00000: 0x10100,
	            0xb00000: 0x4010004,
	            0xc00000: 0x4000104,
	            0xd00000: 0x10000,
	            0xe00000: 0x4,
	            0xf00000: 0x100,
	            0x80000: 0x4010100,
	            0x180000: 0x4010004,
	            0x280000: 0x0,
	            0x380000: 0x4000100,
	            0x480000: 0x4000004,
	            0x580000: 0x10000,
	            0x680000: 0x10004,
	            0x780000: 0x104,
	            0x880000: 0x4,
	            0x980000: 0x100,
	            0xa80000: 0x4010000,
	            0xb80000: 0x10104,
	            0xc80000: 0x10100,
	            0xd80000: 0x4000104,
	            0xe80000: 0x4010104,
	            0xf80000: 0x4000000,
	            0x1000000: 0x4010100,
	            0x1100000: 0x10004,
	            0x1200000: 0x10000,
	            0x1300000: 0x4000100,
	            0x1400000: 0x100,
	            0x1500000: 0x4010104,
	            0x1600000: 0x4000004,
	            0x1700000: 0x0,
	            0x1800000: 0x4000104,
	            0x1900000: 0x4000000,
	            0x1a00000: 0x4,
	            0x1b00000: 0x10100,
	            0x1c00000: 0x4010000,
	            0x1d00000: 0x104,
	            0x1e00000: 0x10104,
	            0x1f00000: 0x4010004,
	            0x1080000: 0x4000000,
	            0x1180000: 0x104,
	            0x1280000: 0x4010100,
	            0x1380000: 0x0,
	            0x1480000: 0x10004,
	            0x1580000: 0x4000100,
	            0x1680000: 0x100,
	            0x1780000: 0x4010004,
	            0x1880000: 0x10000,
	            0x1980000: 0x4010104,
	            0x1a80000: 0x10104,
	            0x1b80000: 0x4000004,
	            0x1c80000: 0x4000104,
	            0x1d80000: 0x4010000,
	            0x1e80000: 0x4,
	            0x1f80000: 0x10100
	        },
	        {
	            0x0: 0x80401000,
	            0x10000: 0x80001040,
	            0x20000: 0x401040,
	            0x30000: 0x80400000,
	            0x40000: 0x0,
	            0x50000: 0x401000,
	            0x60000: 0x80000040,
	            0x70000: 0x400040,
	            0x80000: 0x80000000,
	            0x90000: 0x400000,
	            0xa0000: 0x40,
	            0xb0000: 0x80001000,
	            0xc0000: 0x80400040,
	            0xd0000: 0x1040,
	            0xe0000: 0x1000,
	            0xf0000: 0x80401040,
	            0x8000: 0x80001040,
	            0x18000: 0x40,
	            0x28000: 0x80400040,
	            0x38000: 0x80001000,
	            0x48000: 0x401000,
	            0x58000: 0x80401040,
	            0x68000: 0x0,
	            0x78000: 0x80400000,
	            0x88000: 0x1000,
	            0x98000: 0x80401000,
	            0xa8000: 0x400000,
	            0xb8000: 0x1040,
	            0xc8000: 0x80000000,
	            0xd8000: 0x400040,
	            0xe8000: 0x401040,
	            0xf8000: 0x80000040,
	            0x100000: 0x400040,
	            0x110000: 0x401000,
	            0x120000: 0x80000040,
	            0x130000: 0x0,
	            0x140000: 0x1040,
	            0x150000: 0x80400040,
	            0x160000: 0x80401000,
	            0x170000: 0x80001040,
	            0x180000: 0x80401040,
	            0x190000: 0x80000000,
	            0x1a0000: 0x80400000,
	            0x1b0000: 0x401040,
	            0x1c0000: 0x80001000,
	            0x1d0000: 0x400000,
	            0x1e0000: 0x40,
	            0x1f0000: 0x1000,
	            0x108000: 0x80400000,
	            0x118000: 0x80401040,
	            0x128000: 0x0,
	            0x138000: 0x401000,
	            0x148000: 0x400040,
	            0x158000: 0x80000000,
	            0x168000: 0x80001040,
	            0x178000: 0x40,
	            0x188000: 0x80000040,
	            0x198000: 0x1000,
	            0x1a8000: 0x80001000,
	            0x1b8000: 0x80400040,
	            0x1c8000: 0x1040,
	            0x1d8000: 0x80401000,
	            0x1e8000: 0x400000,
	            0x1f8000: 0x401040
	        },
	        {
	            0x0: 0x80,
	            0x1000: 0x1040000,
	            0x2000: 0x40000,
	            0x3000: 0x20000000,
	            0x4000: 0x20040080,
	            0x5000: 0x1000080,
	            0x6000: 0x21000080,
	            0x7000: 0x40080,
	            0x8000: 0x1000000,
	            0x9000: 0x20040000,
	            0xa000: 0x20000080,
	            0xb000: 0x21040080,
	            0xc000: 0x21040000,
	            0xd000: 0x0,
	            0xe000: 0x1040080,
	            0xf000: 0x21000000,
	            0x800: 0x1040080,
	            0x1800: 0x21000080,
	            0x2800: 0x80,
	            0x3800: 0x1040000,
	            0x4800: 0x40000,
	            0x5800: 0x20040080,
	            0x6800: 0x21040000,
	            0x7800: 0x20000000,
	            0x8800: 0x20040000,
	            0x9800: 0x0,
	            0xa800: 0x21040080,
	            0xb800: 0x1000080,
	            0xc800: 0x20000080,
	            0xd800: 0x21000000,
	            0xe800: 0x1000000,
	            0xf800: 0x40080,
	            0x10000: 0x40000,
	            0x11000: 0x80,
	            0x12000: 0x20000000,
	            0x13000: 0x21000080,
	            0x14000: 0x1000080,
	            0x15000: 0x21040000,
	            0x16000: 0x20040080,
	            0x17000: 0x1000000,
	            0x18000: 0x21040080,
	            0x19000: 0x21000000,
	            0x1a000: 0x1040000,
	            0x1b000: 0x20040000,
	            0x1c000: 0x40080,
	            0x1d000: 0x20000080,
	            0x1e000: 0x0,
	            0x1f000: 0x1040080,
	            0x10800: 0x21000080,
	            0x11800: 0x1000000,
	            0x12800: 0x1040000,
	            0x13800: 0x20040080,
	            0x14800: 0x20000000,
	            0x15800: 0x1040080,
	            0x16800: 0x80,
	            0x17800: 0x21040000,
	            0x18800: 0x40080,
	            0x19800: 0x21040080,
	            0x1a800: 0x0,
	            0x1b800: 0x21000000,
	            0x1c800: 0x1000080,
	            0x1d800: 0x40000,
	            0x1e800: 0x20040000,
	            0x1f800: 0x20000080
	        },
	        {
	            0x0: 0x10000008,
	            0x100: 0x2000,
	            0x200: 0x10200000,
	            0x300: 0x10202008,
	            0x400: 0x10002000,
	            0x500: 0x200000,
	            0x600: 0x200008,
	            0x700: 0x10000000,
	            0x800: 0x0,
	            0x900: 0x10002008,
	            0xa00: 0x202000,
	            0xb00: 0x8,
	            0xc00: 0x10200008,
	            0xd00: 0x202008,
	            0xe00: 0x2008,
	            0xf00: 0x10202000,
	            0x80: 0x10200000,
	            0x180: 0x10202008,
	            0x280: 0x8,
	            0x380: 0x200000,
	            0x480: 0x202008,
	            0x580: 0x10000008,
	            0x680: 0x10002000,
	            0x780: 0x2008,
	            0x880: 0x200008,
	            0x980: 0x2000,
	            0xa80: 0x10002008,
	            0xb80: 0x10200008,
	            0xc80: 0x0,
	            0xd80: 0x10202000,
	            0xe80: 0x202000,
	            0xf80: 0x10000000,
	            0x1000: 0x10002000,
	            0x1100: 0x10200008,
	            0x1200: 0x10202008,
	            0x1300: 0x2008,
	            0x1400: 0x200000,
	            0x1500: 0x10000000,
	            0x1600: 0x10000008,
	            0x1700: 0x202000,
	            0x1800: 0x202008,
	            0x1900: 0x0,
	            0x1a00: 0x8,
	            0x1b00: 0x10200000,
	            0x1c00: 0x2000,
	            0x1d00: 0x10002008,
	            0x1e00: 0x10202000,
	            0x1f00: 0x200008,
	            0x1080: 0x8,
	            0x1180: 0x202000,
	            0x1280: 0x200000,
	            0x1380: 0x10000008,
	            0x1480: 0x10002000,
	            0x1580: 0x2008,
	            0x1680: 0x10202008,
	            0x1780: 0x10200000,
	            0x1880: 0x10202000,
	            0x1980: 0x10200008,
	            0x1a80: 0x2000,
	            0x1b80: 0x202008,
	            0x1c80: 0x200008,
	            0x1d80: 0x0,
	            0x1e80: 0x10000000,
	            0x1f80: 0x10002008
	        },
	        {
	            0x0: 0x100000,
	            0x10: 0x2000401,
	            0x20: 0x400,
	            0x30: 0x100401,
	            0x40: 0x2100401,
	            0x50: 0x0,
	            0x60: 0x1,
	            0x70: 0x2100001,
	            0x80: 0x2000400,
	            0x90: 0x100001,
	            0xa0: 0x2000001,
	            0xb0: 0x2100400,
	            0xc0: 0x2100000,
	            0xd0: 0x401,
	            0xe0: 0x100400,
	            0xf0: 0x2000000,
	            0x8: 0x2100001,
	            0x18: 0x0,
	            0x28: 0x2000401,
	            0x38: 0x2100400,
	            0x48: 0x100000,
	            0x58: 0x2000001,
	            0x68: 0x2000000,
	            0x78: 0x401,
	            0x88: 0x100401,
	            0x98: 0x2000400,
	            0xa8: 0x2100000,
	            0xb8: 0x100001,
	            0xc8: 0x400,
	            0xd8: 0x2100401,
	            0xe8: 0x1,
	            0xf8: 0x100400,
	            0x100: 0x2000000,
	            0x110: 0x100000,
	            0x120: 0x2000401,
	            0x130: 0x2100001,
	            0x140: 0x100001,
	            0x150: 0x2000400,
	            0x160: 0x2100400,
	            0x170: 0x100401,
	            0x180: 0x401,
	            0x190: 0x2100401,
	            0x1a0: 0x100400,
	            0x1b0: 0x1,
	            0x1c0: 0x0,
	            0x1d0: 0x2100000,
	            0x1e0: 0x2000001,
	            0x1f0: 0x400,
	            0x108: 0x100400,
	            0x118: 0x2000401,
	            0x128: 0x2100001,
	            0x138: 0x1,
	            0x148: 0x2000000,
	            0x158: 0x100000,
	            0x168: 0x401,
	            0x178: 0x2100400,
	            0x188: 0x2000001,
	            0x198: 0x2100000,
	            0x1a8: 0x0,
	            0x1b8: 0x2100401,
	            0x1c8: 0x100401,
	            0x1d8: 0x400,
	            0x1e8: 0x2000400,
	            0x1f8: 0x100001
	        },
	        {
	            0x0: 0x8000820,
	            0x1: 0x20000,
	            0x2: 0x8000000,
	            0x3: 0x20,
	            0x4: 0x20020,
	            0x5: 0x8020820,
	            0x6: 0x8020800,
	            0x7: 0x800,
	            0x8: 0x8020000,
	            0x9: 0x8000800,
	            0xa: 0x20800,
	            0xb: 0x8020020,
	            0xc: 0x820,
	            0xd: 0x0,
	            0xe: 0x8000020,
	            0xf: 0x20820,
	            0x80000000: 0x800,
	            0x80000001: 0x8020820,
	            0x80000002: 0x8000820,
	            0x80000003: 0x8000000,
	            0x80000004: 0x8020000,
	            0x80000005: 0x20800,
	            0x80000006: 0x20820,
	            0x80000007: 0x20,
	            0x80000008: 0x8000020,
	            0x80000009: 0x820,
	            0x8000000a: 0x20020,
	            0x8000000b: 0x8020800,
	            0x8000000c: 0x0,
	            0x8000000d: 0x8020020,
	            0x8000000e: 0x8000800,
	            0x8000000f: 0x20000,
	            0x10: 0x20820,
	            0x11: 0x8020800,
	            0x12: 0x20,
	            0x13: 0x800,
	            0x14: 0x8000800,
	            0x15: 0x8000020,
	            0x16: 0x8020020,
	            0x17: 0x20000,
	            0x18: 0x0,
	            0x19: 0x20020,
	            0x1a: 0x8020000,
	            0x1b: 0x8000820,
	            0x1c: 0x8020820,
	            0x1d: 0x20800,
	            0x1e: 0x820,
	            0x1f: 0x8000000,
	            0x80000010: 0x20000,
	            0x80000011: 0x800,
	            0x80000012: 0x8020020,
	            0x80000013: 0x20820,
	            0x80000014: 0x20,
	            0x80000015: 0x8020000,
	            0x80000016: 0x8000000,
	            0x80000017: 0x8000820,
	            0x80000018: 0x8020820,
	            0x80000019: 0x8000020,
	            0x8000001a: 0x8000800,
	            0x8000001b: 0x0,
	            0x8000001c: 0x20800,
	            0x8000001d: 0x820,
	            0x8000001e: 0x20020,
	            0x8000001f: 0x8020800
	        }
	    ];

	    // Masks that select the SBOX input
	    var SBOX_MASK = [
	        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
	        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f
	    ];

	    /**
	     * DES block cipher algorithm.
	     */
	    var DES = C_algo.DES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Select 56 bits according to PC1
	            var keyBits = [];
	            for (var i = 0; i < 56; i++) {
	                var keyBitPos = PC1[i] - 1;
	                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;
	            }

	            // Assemble 16 subkeys
	            var subKeys = this._subKeys = [];
	            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
	                // Create subkey
	                var subKey = subKeys[nSubKey] = [];

	                // Shortcut
	                var bitShift = BIT_SHIFTS[nSubKey];

	                // Select 48 bits according to PC2
	                for (var i = 0; i < 24; i++) {
	                    // Select from the left 28 key bits
	                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);

	                    // Select from the right 28 key bits
	                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);
	                }

	                // Since each subkey is applied to an expanded 32-bit input,
	                // the subkey can be broken into 8 values scaled to 32-bits,
	                // which allows the key to be used without expansion
	                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);
	                for (var i = 1; i < 7; i++) {
	                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);
	                }
	                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);
	            }

	            // Compute inverse subkeys
	            var invSubKeys = this._invSubKeys = [];
	            for (var i = 0; i < 16; i++) {
	                invSubKeys[i] = subKeys[15 - i];
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._subKeys);
	        },

	        decryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._invSubKeys);
	        },

	        _doCryptBlock: function (M, offset, subKeys) {
	            // Get input
	            this._lBlock = M[offset];
	            this._rBlock = M[offset + 1];

	            // Initial permutation
	            exchangeLR.call(this, 4,  0x0f0f0f0f);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeLR.call(this, 1,  0x55555555);

	            // Rounds
	            for (var round = 0; round < 16; round++) {
	                // Shortcuts
	                var subKey = subKeys[round];
	                var lBlock = this._lBlock;
	                var rBlock = this._rBlock;

	                // Feistel function
	                var f = 0;
	                for (var i = 0; i < 8; i++) {
	                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
	                }
	                this._lBlock = rBlock;
	                this._rBlock = lBlock ^ f;
	            }

	            // Undo swap from last round
	            var t = this._lBlock;
	            this._lBlock = this._rBlock;
	            this._rBlock = t;

	            // Final permutation
	            exchangeLR.call(this, 1,  0x55555555);
	            exchangeRL.call(this, 8,  0x00ff00ff);
	            exchangeRL.call(this, 2,  0x33333333);
	            exchangeLR.call(this, 16, 0x0000ffff);
	            exchangeLR.call(this, 4,  0x0f0f0f0f);

	            // Set output
	            M[offset] = this._lBlock;
	            M[offset + 1] = this._rBlock;
	        },

	        keySize: 64/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    // Swap bits across the left and right words
	    function exchangeLR(offset, mask) {
	        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;
	        this._rBlock ^= t;
	        this._lBlock ^= t << offset;
	    }

	    function exchangeRL(offset, mask) {
	        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;
	        this._lBlock ^= t;
	        this._rBlock ^= t << offset;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */
	    C.DES = BlockCipher._createHelper(DES);

	    /**
	     * Triple-DES block cipher algorithm.
	     */
	    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;

	            // Create DES instances
	            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
	            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
	            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
	        },

	        encryptBlock: function (M, offset) {
	            this._des1.encryptBlock(M, offset);
	            this._des2.decryptBlock(M, offset);
	            this._des3.encryptBlock(M, offset);
	        },

	        decryptBlock: function (M, offset) {
	            this._des3.decryptBlock(M, offset);
	            this._des2.encryptBlock(M, offset);
	            this._des1.decryptBlock(M, offset);
	        },

	        keySize: 192/32,

	        ivSize: 64/32,

	        blockSize: 64/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */
	    C.TripleDES = BlockCipher._createHelper(TripleDES);
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    /**
	     * RC4 stream cipher algorithm.
	     */
	    var RC4 = C_algo.RC4 = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var key = this._key;
	            var keyWords = key.words;
	            var keySigBytes = key.sigBytes;

	            // Init sbox
	            var S = this._S = [];
	            for (var i = 0; i < 256; i++) {
	                S[i] = i;
	            }

	            // Key setup
	            for (var i = 0, j = 0; i < 256; i++) {
	                var keyByteIndex = i % keySigBytes;
	                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;

	                j = (j + S[i] + keyByte) % 256;

	                // Swap
	                var t = S[i];
	                S[i] = S[j];
	                S[j] = t;
	            }

	            // Counters
	            this._i = this._j = 0;
	        },

	        _doProcessBlock: function (M, offset) {
	            M[offset] ^= generateKeystreamWord.call(this);
	        },

	        keySize: 256/32,

	        ivSize: 0
	    });

	    function generateKeystreamWord() {
	        // Shortcuts
	        var S = this._S;
	        var i = this._i;
	        var j = this._j;

	        // Generate keystream word
	        var keystreamWord = 0;
	        for (var n = 0; n < 4; n++) {
	            i = (i + 1) % 256;
	            j = (j + S[i]) % 256;

	            // Swap
	            var t = S[i];
	            S[i] = S[j];
	            S[j] = t;

	            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);
	        }

	        // Update counters
	        this._i = i;
	        this._j = j;

	        return keystreamWord;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4 = StreamCipher._createHelper(RC4);

	    /**
	     * Modified RC4 stream cipher algorithm.
	     */
	    var RC4Drop = C_algo.RC4Drop = RC4.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */
	        cfg: RC4.cfg.extend({
	            drop: 192
	        }),

	        _doReset: function () {
	            RC4._doReset.call(this);

	            // Drop
	            for (var i = this.cfg.drop; i > 0; i--) {
	                generateKeystreamWord.call(this);
	            }
	        }
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */
	    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	}());


	/** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */
	CryptoJS.mode.CTRGladman = (function () {
	    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word)
		{
			if (((word >> 24) & 0xff) === 0xff) { //overflow
			var b1 = (word >> 16)&0xff;
			var b2 = (word >> 8)&0xff;
			var b3 = word & 0xff;

			if (b1 === 0xff) // overflow b1
			{
			b1 = 0;
			if (b2 === 0xff)
			{
				b2 = 0;
				if (b3 === 0xff)
				{
					b3 = 0;
				}
				else
				{
					++b3;
				}
			}
			else
			{
				++b2;
			}
			}
			else
			{
			++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
			}
			else
			{
			word += (0x01 << 24);
			}
			return word;
		}

		function incCounter(counter)
		{
			if ((counter[0] = incWord(counter[0])) === 0)
			{
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

	    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }

				incCounter(counter);

				var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTRGladman.Decryptor = Encryptor;

	    return CTRGladman;
	}());




	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm
	     */
	    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |
	                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);
	            }

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */
	    C.Rabbit = StreamCipher._createHelper(Rabbit);
	}());


	/**
	 * Counter block mode.
	 */
	CryptoJS.mode.CTR = (function () {
	    var CTR = CryptoJS.lib.BlockCipherMode.extend();

	    var Encryptor = CTR.Encryptor = CTR.extend({
	        processBlock: function (words, offset) {
	            // Shortcuts
	            var cipher = this._cipher
	            var blockSize = cipher.blockSize;
	            var iv = this._iv;
	            var counter = this._counter;

	            // Generate keystream
	            if (iv) {
	                counter = this._counter = iv.slice(0);

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            }
	            var keystream = counter.slice(0);
	            cipher.encryptBlock(keystream, 0);

	            // Increment counter
	            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0

	            // Encrypt
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= keystream[i];
	            }
	        }
	    });

	    CTR.Decryptor = Encryptor;

	    return CTR;
	}());


	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var StreamCipher = C_lib.StreamCipher;
	    var C_algo = C.algo;

	    // Reusable objects
	    var S  = [];
	    var C_ = [];
	    var G  = [];

	    /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */
	    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
	        _doReset: function () {
	            // Shortcuts
	            var K = this._key.words;
	            var iv = this.cfg.iv;

	            // Generate initial state values
	            var X = this._X = [
	                K[0], (K[3] << 16) | (K[2] >>> 16),
	                K[1], (K[0] << 16) | (K[3] >>> 16),
	                K[2], (K[1] << 16) | (K[0] >>> 16),
	                K[3], (K[2] << 16) | (K[1] >>> 16)
	            ];

	            // Generate initial counter values
	            var C = this._C = [
	                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
	                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
	                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
	                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)
	            ];

	            // Carry bit
	            this._b = 0;

	            // Iterate the system four times
	            for (var i = 0; i < 4; i++) {
	                nextState.call(this);
	            }

	            // Modify the counters
	            for (var i = 0; i < 8; i++) {
	                C[i] ^= X[(i + 4) & 7];
	            }

	            // IV setup
	            if (iv) {
	                // Shortcuts
	                var IV = iv.words;
	                var IV_0 = IV[0];
	                var IV_1 = IV[1];

	                // Generate four subvectors
	                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);
	                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);
	                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
	                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);

	                // Modify counter values
	                C[0] ^= i0;
	                C[1] ^= i1;
	                C[2] ^= i2;
	                C[3] ^= i3;
	                C[4] ^= i0;
	                C[5] ^= i1;
	                C[6] ^= i2;
	                C[7] ^= i3;

	                // Iterate the system four times
	                for (var i = 0; i < 4; i++) {
	                    nextState.call(this);
	                }
	            }
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var X = this._X;

	            // Iterate the system
	            nextState.call(this);

	            // Generate four keystream words
	            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
	            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
	            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
	            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

	            for (var i = 0; i < 4; i++) {
	                // Swap endian
	                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |
	                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);

	                // Encrypt
	                M[offset + i] ^= S[i];
	            }
	        },

	        blockSize: 128/32,

	        ivSize: 64/32
	    });

	    function nextState() {
	        // Shortcuts
	        var X = this._X;
	        var C = this._C;

	        // Save old counter values
	        for (var i = 0; i < 8; i++) {
	            C_[i] = C[i];
	        }

	        // Calculate new counter values
	        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
	        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;
	        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;
	        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;
	        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;
	        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;
	        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;
	        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;
	        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;

	        // Calculate the g-values
	        for (var i = 0; i < 8; i++) {
	            var gx = X[i] + C[i];

	            // Construct high and low argument for squaring
	            var ga = gx & 0xffff;
	            var gb = gx >>> 16;

	            // Calculate high and low result of squaring
	            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;
	            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);

	            // High XOR low
	            G[i] = gh ^ gl;
	        }

	        // Calculate new state values
	        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;
	        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;
	        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;
	        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;
	        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;
	        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;
	        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;
	        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;
	    }

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */
	    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	}());


	/**
	 * Zero padding strategy.
	 */
	CryptoJS.pad.ZeroPadding = {
	    pad: function (data, blockSize) {
	        // Shortcut
	        var blockSizeBytes = blockSize * 4;

	        // Pad
	        data.clamp();
	        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);
	    },

	    unpad: function (data) {
	        // Shortcut
	        var dataWords = data.words;

	        // Unpad
	        var i = data.sigBytes - 1;
	        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {
	            i--;
	        }
	        data.sigBytes = i + 1;
	    }
	};


	return CryptoJS;

}));