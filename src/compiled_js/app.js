(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.app', [
      'ngRoute',
      'ngSanitize',
      'ngAnimate',
      'ngTouch',
      'angular-cache',
      'bcbsnc.cloud.directives.bindHtmlCompile',
      // Constants
      'blueconnect.mobile.config',
      'blueconnect.mobile.directiveHtml',
      'blueconnect.mobile.analyticConstants',
      // Services
      'blueconnect.mobile.services.cordova',
      'blueconnect.mobile.services.adobe',
      'blueconnect.mobile.services.language',
      'blueconnect.mobile.services.message',
      'blueconnect.mobile.services.inquiry',
      'blueconnect.mobile.services.storage',
      'blueconnect.mobile.services.quickAlert',
      'blueconnect.mobile.services.alert',
      'blueconnect.mobile.services.share',
      'blueconnect.mobile.services.help',
      'blueconnect.mobile.services.login',
      'blueconnect.mobile.services.googleMaps',
      'blueconnect.mobile.services.claims',
      'blueconnect.mobile.services.policy',
      'blueconnect.mobile.services.livechat',
      'blueconnect.mobile.services.customerServiceHours',
      'blueconnect.mobile.services.paymentFlowFactory',
      'blueconnect.mobile.services.billingInvoiceHistoryFactory',
      'blueconnect.mobile.services.coachmark',
      'blueconnect.mobile.services.transparencyFactory',
      'blueconnect.mobile.services.geoLocation',
      'blueconnect.mobile.services.backButton',
      'blueconnect.mobile.services.findDoctor',
      // Controllers
      'blueconnect.mobile.controllers.main',
      'blueconnect.mobile.controllers.landing',
      'blueconnect.mobile.controllers.home',
      'blueconnect.mobile.controllers.homeRefresh',
      'blueconnect.mobile.controllers.setup',
      'blueconnect.mobile.controllers.login',
      'blueconnect.mobile.controllers.logout',
      'blueconnect.mobile.controllers.inbox',
      'blueconnect.mobile.controllers.compose',
      'blueconnect.mobile.controllers.inboxSearch',
      'blueconnect.mobile.controllers.help',
      'blueconnect.mobile.controllers.claims',
      'blueconnect.mobile.controllers.benefits',
      'blueconnect.mobile.controllers.about',
      'blueconnect.mobile.controllers.faq',
      'blueconnect.mobile.controllers.healthNav',
      'blueconnect.mobile.controllers.settings',
      'blueconnect.mobile.controllers.idCard',
      'blueconnect.mobile.controllers.customerService',
      'blueconnect.mobile.controllers.feedback',
      'blueconnect.mobile.controllers.billing',
      'blueconnect.mobile.controllers.billing.preferences',
      'blueconnect.mobile.controllers.billinghistory',
      'blueconnect.mobile.controllers.billingpaperless',
      'blueconnect.mobile.controllers.networkLandingLocal',
      'blueconnect.mobile.controllers.paymentFlow',
      'blueconnect.mobile.controllers.payment.method',
      'blueconnect.mobile.controllers.payment.details',
      'blueconnect.mobile.controllers.payment.confirmation',
      'blueconnect.mobile.controllers.payment.review',
      'blueconnect.mobile.controllers.editBillingMethodPage',
      'blueconnect.mobile.controllers.update.autopay',
      'blueconnect.mobile.controllers.stop.autopay',
      'blueconnect.mobile.controllers.editAutopayFlowPage',
      'blueconnect.mobile.controllers.billingInvoiceHistory',
      'blueconnect.mobile.controllers.billingHistoryFilter',
      'blueconnect.mobile.controllers.autopay.method',
      'blueconnect.mobile.controllers.billingHistoryUnderstandInvoice',
      'blueconnect.mobile.controllers.findDoctor',
      'blueconnect.mobile.controllers.findCare',
      'blueconnect.mobile.controllers.findDoctorAuthenticated',
      'blueconnect.mobile.controllers.findDoctorSearch',
      'blueconnect.mobile.controllers.findDoctorBrowser',
      'blueconnect.mobile.controllers.findDoctorSearchResults',
      'blueconnect.mobile.controllers.findDoctorResultsDetails',
      'blueconnect.mobile.controllers.findDoctorFilter',
      'blueconnect.mobile.controllers.upgrade',
      'blueconnect.mobile.controllers.pcp.ManageDependentsPcpController',
      'blueconnect.mobile.controllers.findDoctor',
      'blueconnect.mobile.controllers.findDoctorSearch',
      'blueconnect.mobile.controllers.findDoctorBrowser',
      'blueconnect.mobile.controllers.findDoctorSearchResults',
      'blueconnect.mobile.controllers.findDoctorResultsDetails',
      'blueconnect.mobile.controllers.findDoctorFilter',
      // Filters
      'blueconnect.mobile.filters.capitalize',
      'blueconnect.mobile.filters.padCurrencyAmount',
      'blueconnect.mobile.filters.maskAccount',
      'blueconnect.mobile.filters.addLeadingZeroToSingleDigit',
      'blueconnect.mobile.filters.removeCommas',
      'blueconnect.mobile.filters.toDropDownFilter',
      'blueconnect.mobile.filters.fromDropDownFilter',
      'blueconnect.mobile.filters.billingHistoryFromDateFilter',
      'blueconnect.mobile.filters.billingHistoryToDateFilter',
      'blueconnect.mobile.filters.limitFilter',
      // Directives
      'blueconnect.mobile.directives.goBack',
      'blueconnect.mobile.directives.goInbox',
      'blueconnect.mobile.directives.navbarLoading',
      'blueconnect.mobile.directives.checkBox',
      'blueconnect.mobile.directives.checkBoxGroup',
      'blueconnect.mobile.directives.radioButton',
      'blueconnect.mobile.directives.navbar',
      'blueconnect.mobile.directives.policySelect',
      'blueconnect.mobile.directives.homeCardIdCard',
      'blueconnect.mobile.directives.homeCardBilling',
      'blueconnect.mobile.directives.homeCardBillingError',
      'blueconnect.mobile.directives.homeCardClaims',
      'blueconnect.mobile.directives.homeCardInbox',
      'blueconnect.mobile.directives.homeCardCustomerService',
      'blueconnect.mobile.directives.homeCardSettings',
      'blueconnect.mobile.directives.homeCardInformationAlert',
      'blueconnect.mobile.directives.homeCardFindCare',
      'blueconnect.mobile.directives.findCare',
      'blueconnect.mobile.directives.tabSelect',
      'blueconnect.mobile.directives.glossaryOfTerms',
      'blueconnect.mobile.directives.inboxMessageList',
      'blueconnect.mobile.directives.inboxBottomBar',
      'blueconnect.mobile.directives.idCardBottomBar',
      'blueconnect.mobile.directives.idCardInfo',
      'blueconnect.mobile.directives.idCardMemberDetails',
      'blueconnect.mobile.directives.idCardImageTypes',
      'blueconnect.mobile.directives.idCardNetworkDetails',
      'blueconnect.mobile.directives.inboxMessage',
      'blueconnect.mobile.directives.inboxMessageBottomBar',
      'blueconnect.mobile.directives.inboxCompose',
      'blueconnect.mobile.directives.inboxError',
      'blueconnect.mobile.directives.loginBottomBar',
      'blueconnect.mobile.directives.basicNavbar',
      'blueconnect.mobile.directives.helpItemGroup',
      'blueconnect.mobile.directives.bottomButton',
      'blueconnect.mobile.directives.quickAlertModal',
      'blueconnect.mobile.directives.alertModal',
      'blueconnect.mobile.directives.searchInput',
      'blueconnect.mobile.directives.safeInput',
      'blueconnect.mobile.directives.blueBarLabel',
      'blueconnect.mobile.directives.claimsList',
      'blueconnect.mobile.directives.memberSavingsFooter',
      'blueconnect.mobile.directives.shareModal',
      'blueconnect.mobile.directives.claimsSearchInput',
      'blueconnect.mobile.directives.claimsFilterCriteria',
      'blueconnect.mobile.directives.helpModal',
      'blueconnect.mobile.directives.termsModal',
      'blueconnect.mobile.directives.fullScreenModal',
      'blueconnect.mobile.directives.policyHeaderGray',
      'blueconnect.mobile.directives.policyHeaderBlue',
      'blueconnect.mobile.directives.claimMember',
      'blueconnect.mobile.directives.claimAmounts',
      'blueconnect.mobile.directives.claimInfo',
      'blueconnect.mobile.directives.claimCompose',
      'blueconnect.mobile.directives.documentButtons',
      'blueconnect.mobile.directives.claimBottomBar',
      'blueconnect.mobile.directives.helpIcon',
      'blueconnect.mobile.directives.helpLink',
      'blueconnect.mobile.directives.dynamicHelpIcon',
      'blueconnect.mobile.directives.about',
      'blueconnect.mobile.directives.faq',
      'blueconnect.mobile.directives.healthNav',
      'blueconnect.mobile.directives.toggleSwitch',
      'blueconnect.mobile.directives.homeCardNewsUpdate',
      'blueconnect.mobile.directives.settingsList',
      'blueconnect.mobile.directives.listMessaging',
      'blueconnect.mobile.directives.homeCardBenefits',
      'blueconnect.mobile.directives.homeCardBenefitsSelect',
      'blueconnect.mobile.directives.benefitsDetail',
      'blueconnect.mobile.directives.benefitsSelectDetail',
      'blueconnect.mobile.directives.errorLoadingPage',
      'blueconnect.mobile.directives.homeCardOtherLanguages',
      'blueconnect.mobile.directives.fundData',
      'blueconnect.mobile.directives.idCardCustomerService',
      'blueconnect.mobile.directives.idCard',
      'blueconnect.mobile.directives.customerServiceCard',
      'blueconnect.mobile.directives.customerServiceSecureInbox',
      'blueconnect.mobile.directives.verticalBarGraph',
      'blueconnect.mobile.directives.feedback',
      'blueconnect.mobile.directives.benefitsCoverageDetails',
      'blueconnect.mobile.directives.benefitsBookletsDetails',
      'blueconnect.mobile.directives.medicarePlanBenefits',
      'blueconnect.mobile.directives.medicareDrugBenefits',
      'blueconnect.mobile.directives.medicareDrugBenefitsInitialCoverage',
      'blueconnect.mobile.directives.medicareDrugBenefitsCoverageGap',
      'blueconnect.mobile.directives.medicareFootnotes',
      'blueconnect.mobile.directives.medicareMoreInformationPdf',
      'blueconnect.mobile.directives.medicareSuppPlan',
      'blueconnect.mobile.directives.medicareGroupInfo',
      'blueconnect.mobile.directives.billingSummary',
      'blueconnect.mobile.directives.billingSummaryError',
      'blueconnect.mobile.directives.billingAndPaymentsComingSoon',
      'blueconnect.mobile.directives.prescriptionOnlyInfo',
      'blueconnect.mobile.directives.paymentFlowTotalBalance',
      'blueconnect.mobile.directives.paymentFlowTracker',
      'blueconnect.mobile.directives.paymentFlowPaymentFrequency',
      'blueconnect.mobile.directives.paymentFlowTitleBar',
      'blueconnect.mobile.directives.trackerBillingSummary',
      'blueconnect.mobile.directives.prescriptionOnlyInfo',
      'blueconnect.mobile.directives.dentalOnlyInfo',
      'blueconnect.mobile.directives.lowCostDentalOnlyInfo',
      'blueconnect.mobile.directives.visionOnlyInfo',
      'blueconnect.mobile.directives.contraceptiveOnlyInfo',
      'blueconnect.mobile.directives.paymentFlowPaymentAmount',
      'blueconnect.mobile.directives.paymentFlowRadioGroup',
      'blueconnect.mobile.directives.paymentFlowCheckbox',
      'blueconnect.mobile.directives.paymentFlowInputs',
      'blueconnect.mobile.directives.scrollStart',
      'blueconnect.mobile.directives.scrollEnd',
      'blueconnect.mobile.directives.benefitsNav',
      'blueconnect.mobile.directives.autopayFlowBillingMethod',
      'blueconnect.mobile.directives.paymentFlowBillingMethod',
      'blueconnect.mobile.directives.paymentFlowPaymentMethod',
      'blueconnect.mobile.directives.paymentFlow',
      'blueconnect.mobile.directives.paperlessAgreement',
      'blueconnect.mobile.directives.paymentFlowReusableDirectives',
      'blueconnect.mobile.directives.paymentFlowBankDetails',
      'blueconnect.mobile.directives.paymentFlowCreditCardDetails',
      'blueconnect.mobile.directives.paymentFlowPaymentMethodSelected',
      'blueconnect.mobile.directives.totalRemainingBalance',
      'blueconnect.mobile.directives.termsConditions',
      'blueconnect.mobile.directives.paymentFlowReviewDetails',
      'blueconnect.mobile.directives.maxLengthEnforce',
      'blueconnect.mobile.directives.cvnValidation',
      'blueconnect.mobile.directives.creditCardNumberValidation',
      'blueconnect.mobile.directives.paymentFlowProcessingPayment',
      'blueconnect.mobile.directives.paymentFlowAutopayPromo',
      'blueconnect.mobile.directives.paymentFlowPaymentReceipt',
      'blueconnect.mobile.directives.paymentFlowHelpShare',
      'blueconnect.mobile.directives.paymentFlowStateSelect',
      'blueconnect.mobile.directives.paymentFlowPaperlessSuccess',
      'blueconnect.mobile.directives.paidComponent',
      'blueconnect.mobile.directives.paymentProcessing',
      'blueconnect.mobile.directives.paymentUnsuccessful',
      'blueconnect.mobile.directives.billingSummaryNewMember',
      'blueconnect.mobile.directives.billingStatusPaidInFull',
      'blueconnect.mobile.directives.paymentFlowCtaButton',
      'blueconnect.mobile.directives.paymentFlowCancelButton',
      'blueconnect.mobile.directives.reinstatementSummary',
      'blueconnect.mobile.directives.paymentFlowReinstatementPending',
      'blueconnect.mobile.directives.customerServicePhoneCard',
      'blueconnect.mobile.directives.blockUnderClick',
      'blueconnect.mobile.directives.homeCardBillingAutopayStaticContent',
      'blueconnect.mobile.directives.invoicePayments',
      'blueconnect.mobile.directives.billingServiceDown',
      'blueconnect.mobile.directives.editBillingMethod',
      'blueconnect.mobile.directives.paymentFlowPaymentError',
      'blueconnect.mobile.directives.billingPreferencesDetails',
      'blueconnect.mobile.directives.stopAutopay',
      'blueconnect.mobile.directives.homecardChat',
      'blueconnect.mobile.directive.editAutopayFlowPageMethod',
      'blueconnect.mobile.directive.editAutopayFlowPageDetails',
      'blueconnect.mobile.directive.editAutopayFlowPageReview',
      'blueconnect.mobile.directive.editAutopayFlowPageConfirmation',
      'blueconnect.mobile.directives.billingPreferencesUpdate',
      'blueconnect.mobile.directives.editAutopayFlowPaymentReceipt',
      'blueconnect.mobile.directives.paymentFlowAutoPayPending',
      'blueconnect.mobile.directives.paymentFlowAutoPaySuccess',
      'blueconnect.mobile.directives.planDetails',
      'blueconnect.mobile.directives.billingInvoiceHistoryFilterRibbon',
      'blueconnect.mobile.directives.billingInvoiceHistoryNoInvoices',
      'blueconnect.mobile.directives.paymentFlowAutoPaySetup',
      'blueconnect.mobile.directives.billingHistoryUnderstandInvoice',
      'blueconnect.mobile.directives.billingServiceDown',
      'blueconnect.mobile.directives.paymentFlowPaymentError',
      'blueconnect.mobile.directives.coachmark',
      'blueconnect.mobile.directives.invoiceHistoryCard',
      'blueconnect.mobile.directives.billingButtons',
      'blueconnect.mobile.directives.downloadPDFButton',
      'blueconnect.mobile.directives.paymentFlowFaqsButton',
      'blueconnect.mobile.directives.findDoctorNavbar',
      'blueconnect.mobile.directives.findDoctorAuthenticatedNavbar',
      'blueconnect.mobile.directives.findDoctor',
      'blueconnect.mobile.directives.findDoctorSearch',
      'blueconnect.mobile.directives.planSelect',
      'blueconnect.mobile.directives.findDoctorBrowser',
      'blueconnect.mobile.directives.findDoctorSearchBottomBar',
      'blueconnect.mobile.directives.findDoctorSearchResults',
      'blueconnect.mobile.directives.findDoctorResultsDetails',
      'blueconnect.mobile.directives.resultsDetailsBlocks',
      'blueconnect.mobile.directives.planHeader',
      'blueconnect.mobile.directives.filterDetails',
      'blueconnect.mobile.directives.liveChat',
      'blueconnect.mobile.directives.lookupCitiesInput',
      'blueconnect.mobile.directives.homecardPcp',
      'blueconnect.mobile.directives.pcpDependentPcps',
      'blueconnect.mobile.directives.idCardPlanDetails',
    ])
    .run([
      function() {
        FastClick.attach(document.body);
      }
    ])
    .config([
      '$routeProvider',
      function($routeProvider) {
        $routeProvider
          .when('/network-landing-local', {
            templateUrl: 'views/network-landing-local.html',
            controller: 'NetworkLandingLocalController'
          })
          .when('/', {
            templateUrl: 'views/landing.html',
            controller: 'LandingController'
          })
          .when('/autopay-method', {
            templateUrl: 'views/autopay-flow-page-method.html',
            controller: 'AutopayMethodController'
          })
          .when('/billing-preferences', {
            templateUrl: 'views/billing-preferences.html',
            controller: 'BillingPreferencesController'
          })
          .when('/billing-history', {
            templateUrl: 'views/billing-history.html',
            controller: 'BillingHistoryController'
          })
          .when('/billing-paperless', {
            templateUrl: 'views/billing-paperless.html',
            controller: 'BillingPaperlessController'
          })
          .when('/home', {
            templateUrl: 'views/home.html',
            reloadOnSearch: false,
            controller: 'HomeController'
          })
          .when('/home-refresh', {
            templateUrl: 'views/landing.html',
            controller: 'HomeRefreshController'
          })
          .when('/setup', {
            templateUrl: 'views/setup.html',
            controller: 'SetupController'
          })
          .when('/login', {
            templateUrl: 'views/login.html',
            controller: 'LoginController'
          })
          .when('/logout', {
            templateUrl: 'views/landing.html',
            controller: 'LogoutController'
          })
          .when('/inbox', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/sent', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/bookmarked', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/messages/:id', {
            templateUrl: 'views/inbox.html',
            controller: 'InboxController'
          })
          .when('/inbox/compose', {
            templateUrl: 'views/compose.html',
            controller: 'ComposeController'
          })
          .when('/inbox/compose/:id', {
            templateUrl: 'views/compose.html',
            controller: 'ComposeController'
          })
          .when('/inbox/search', {
            templateUrl: 'views/inbox-search.html',
            controller: 'InboxSearchController'
          })
          .when('/inbox/search/sent', {
            templateUrl: 'views/inbox-search.html',
            controller: 'InboxSearchController'
          })
          .when('/inbox/search/bookmarked', {
            templateUrl: 'views/inbox-search.html',
            controller: 'InboxSearchController'
          })
          .when('/help', {
            templateUrl: 'views/help.html',
            controller: 'HelpController'
          })
          .when('/claims', {
            templateUrl: 'views/claims.html',
            controller: 'ClaimsController'
          })
          .when('/claims/search', {
            templateUrl: 'views/claims-search.html',
            controller: 'ClaimsController'
          })
          .when('/claims/filter', {
            templateUrl: 'views/claims-filter.html',
            controller: 'ClaimsController'
          })
          .when('/claims/:id/:dependentNo', {
            templateUrl: 'views/claims.html',
            controller: 'ClaimsController'
          })
          .when('/benefits', {
            templateUrl: 'views/benefits-in-network.html',
            reloadOnSearch: false,
            controller: 'BenefitsController'
          })
          .when('/medicare-benefits', {
            templateUrl: 'views/medicare-benefits.html',
            reloadOnSearch: false,
            controller: 'BenefitsController'
          })
          .when('/benefits/out-of-network', {
            templateUrl: 'views/benefits-out-of-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/tier1', {
            templateUrl: 'views/benefits-tier1-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/bbt-only', {
            templateUrl: 'views/benefits-bbt-only-info.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/tier2', {
            templateUrl: 'views/benefits-tier2-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/tieroon', {
            templateUrl: 'views/benefits-tier-out-of-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/preferinnetwork', {
            templateUrl: 'views/benefits-prefer-in-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/otherinnetwork', {
            templateUrl: 'views/benefits-other-in-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/otheroutofnetwork', {
            templateUrl: 'views/benefits-other-out-of-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/benefitsselectinnetwork', {
            templateUrl: 'views/benefits-select-in-network.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/benefitsselectoutnetwork', {
            templateUrl: 'views/benefits-select-out-network.html',
            controller: 'BenefitsController'
          })
          .when('/about', {
            templateUrl: 'views/about.html',
            controller: 'AboutController'
          })
          .when('/faq', {
            templateUrl: 'views/faq.html',
            controller: 'FAQController'
          })
          .when('/healthnav', {
            templateUrl: 'views/health-nav.html',
            controller: 'HealthNavController'
          })
          .when('/settings', {
            templateUrl: 'views/settings.html',
            controller: 'SettingsController'
          })
          .when('/id-card', {
            templateUrl: 'views/id-card.html',
            controller: 'IdCardController'
          })
          .when('/customer-service', {
            templateUrl: 'views/customer-service.html',
            controller: 'CustomerServiceController'
          })
          .when('/feedback', {
            templateUrl: 'views/feedback.html',
            controller: 'FeedbackController'
          })
          .when('/benefits/viewcoverage', {
            templateUrl: 'views/benefits-coverage.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/dental-only', {
            templateUrl: 'views/benefits-dental-only.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/low-cost-dental-only', {
            templateUrl: 'views/benefits-low-cost-dental-only.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/vision-only', {
            templateUrl: 'views/benefits-vision-only.html',
            controller: 'BenefitsController'
          })
          .when('/benefits/contraceptive-only', {
            templateUrl: 'views/benefits-contraceptive-only.html',
            controller: 'BenefitsController'
          })
          .when('/billing', {
            templateUrl: 'views/billing-payments-landing.html',
            controller: 'BillingController'
          })
          .when('/edit-billing-method', {
            templateUrl: 'views/edit-billing-method.html',
            controller: 'EditBillingMethodPage'
          })
          .when('/update-autopay', {
            templateUrl: 'views/update-autopay.html',
            controller: 'UpdateAutoPayController'
          })
          .when('/stop-autopay', {
            templateUrl: 'views/stop-autopay.html',
            controller: 'StopAutoPayController'
          })
          .when('/billing-invoice-history', {
            templateUrl: 'views/billing-invoice-history.html',
            controller: 'BillingInvoiceHistory'
          })
          .when('/billing-history-filter', {
            templateUrl: 'views/billing-history-filter.html',
            controller: 'BillingHistoryFilter'
          })
          .when('/understand-invoice', {
            templateUrl: 'views/billing-history-understand-invoice.html',
            controller: 'BillingHistoryUnderstandInvoice'
          })
          .when('/payment/:step', {
            template: function($routeParams) {
              return [
                '<div class="payment-container ' + $routeParams.step + '">',
                '<payment-flow-page',
                'ng-if="billingInfo && step"',
                'localization="loc"',
                'step="' + $routeParams.step + '"',
                'tracker-info="trackerInfo"',
                'billing-info="billingInfo"',
                'validate-form="' + $routeParams.step + 'ValidateForm"',
                'navbar-details="navbarDetails"',
                '>',
                '</payment-flow-page>',
                '</div>'
              ].join(' ');
            },
            controller: 'PaymentFlowController'
          })
          .when('/edit-autopay-flow/:step', {
            templateUrl: 'views/edit-autopay-flow.html',
            controller: 'editAutopayFlow'
          })
          .when('/fad-auth/find-doctor', {
            templateUrl: 'views/find-doctor-authenticated.html',
            controller: 'FindDoctorAuthenticatedController'
          })
          .when('/find-doctor', {
            templateUrl: 'views/find-doctor.html',
            controller: 'FindDoctorController'
          })
          .when('/find-doctor-search', {
            templateUrl: 'views/find-doctor-search.html',
            controller: 'FindDoctorSearchController'
          })
          .when('/find-doctor-browser', {
            templateUrl: 'views/find-doctor-browser.html',
            controller: 'FindDoctorBrowserController'
          })
          .when('/find-doctor-search-results', {
            templateUrl: 'views/find-doctor-search-results.html',
            controller: 'FindDoctorSearchResultsController'
          })
          .when('/find-doctor-results-details', {
            templateUrl: 'views/find-doctor-results-details.html',
            controller: 'FindDoctorResultsDetailsController'
          })
          .when('/find-doctor-filter', {
            templateUrl: 'views/find-doctor-filter.html',
            controller: 'FindDoctorFilterController'
          })
          .when('/upgrade', {
            templateUrl: 'views/upgrade.html',
            controller: 'UpgradeController'
          })
          .when('/pcp-manage-dependents-pcp', {
            templateUrl: 'views/pcp-manage-dependents.html',
            controller: 'ManageDependentsPcpController'
          })
          .when('/find-doctor', {
            templateUrl: 'views/find-doctor.html',
            controller: 'FindDoctorController'
          })
          .when('/find-doctor-search', {
            templateUrl: 'views/find-doctor-search.html',
            controller: 'FindDoctorSearchController'
          })
          .when('/find-doctor-browser', {
            templateUrl: 'views/find-doctor-browser.html',
            controller: 'FindDoctorBrowserController'
          })
          .when('/find-care', {
            templateUrl: 'views/find-care.html',
            controller: 'FindCareController'
          })
          .when('/find-doctor-search-results', {
            templateUrl: 'views/find-doctor-search-results.html',
            controller: 'FindDoctorSearchResultsController'
          })
          .when('/find-doctor-results-details', {
            templateUrl: 'views/find-doctor-results-details.html',
            controller: 'FindDoctorResultsDetailsController'
          })
          .when('/find-doctor-filter', {
            templateUrl: 'views/find-doctor-filter.html',
            controller: 'FindDoctorFilterController'
          });
      }
    ]);
})();

(function() {
    'use strict';
    // constants for analytics
    angular.module('blueconnect.mobile.analyticConstants', [])
    .constant('analyticConstants', {
      BENEFITS_SECTION: 'Benefits',
      BILLING_SECTION: 'Billing',
      CLAIMS_SECTION: 'Claims',
      FAQ_SECTION: 'Faq',
      HEALTHNAV_SECTION: 'HealthNAV',
      HELP_SECTION: 'Help',
      HOME_SECTION: 'Home',
      IDCARD_SECTION: 'Id-card',
      INBOX_SECTION: 'Inbox',
      LOGIN_SECTION: 'Login',
      MENU_SECTION: 'Menu',
      PCP_SECTION: 'PCP',
      SETTINGS_SECTION: 'Settings',
      SMARTSHOPPER_SECTION: 'SmartShopper'
    });
  })();

(function() {
  'use strict';
  angular.module('blueconnect.mobile.directiveHtml', [])
    .constant('directiveHtml', {
      BillingHistory: '<BillingHistory billing-history="^billingHistory^"></BillingHistory>',
      BillingPaperless: '<BillingPaperless billing-paperless="^billingPaperless^"></BillingPaperless>',
      navbarMobile: '<navbar navbar-details="^navbarDetails^" geo-location-details="^geoLocationDetails^" urgent-care-details="^urgentCareDetails^"></navbar>',
      policySelectMobile: '<policy-select ng-if="showPolicySelect"></policy-select>',
      homeCardIdCard: '<home-card-id-card policy-index="^policyIndex^"></home-card-id-card>',
      homeCardBilling: '<home-card-billing payment-details="^paymentDetails^" plan-details="^planDetails^" billing-link="^billingLink^"></home-card-billing>',
      homeCardBillingError: '<home-card-billing-error plan-details="^planDetails^" error="error"></home-card-billing-error>',
      homeCardInbox: '<home-card-inbox inbox-details="^inboxDetails^"></home-card-inbox>',
      homeCardClaims: '<home-card-claims claims-title="^claimsTitle^" policy-selection="^policySelection^" claims="^claims^" total-claims="^totalClaims^"></home-card-claims>',
      tabSelect: '<tab-select tabs="^tabs^"></tab-select>',
      inboxMessageList: '<inbox-message-list messages="^messages^"></inbox-message-list>',
      inboxBottomBar: '<inbox-bottom-bar></inbox-bottom-bar>',
      inboxMessage: '<inbox-message message="^message^"></inbox-message>',
      inboxMessageBottomBar: '<inbox-message-bottom-bar message="^message^"></inbox-message-bottom-bar>',
      inboxCompose: '<inbox-compose message="^message^"></inbox-compose>',
      inboxError: '<inbox-error></inbox-error>',
      basicNavbar: '<basic-navbar navbar-details="^navbarDetails^" left-click="basicNavbarLeftClick()" right-click="basicNavbarRightClick()"></basic-navbar>',
      inboxSearch: '<inbox-search></inbox-search>',
      helpItemGroup: '<help-item-group group-details="^groupDetails^" urgent-care-details= "^urgentCareDetails^" geo-location-details= "^geoLocationDetails^"></help-item-group>',
      bottomButton: '<bottom-button button-details="^buttonDetails^"></bottom-button>',
      searchInput: '<search-input></search-input>',
      blueBarLabel: '<blue-bar-label title="^title^"></blue-bar-label>',
      listMessaging: '<list-messaging title="^title^" page-name="^pageName^"></list-messaging>',
      claimsList: '<claims-list claims="^claims^" policy-selection="^policySelection^" show-ribbon="^showRibbon^" filter-text="^filterText^" has-ccr="^hasCcr^"></claims-list>',
      memberSavingsFooter: '<member-savings-footer member-savings="^memberSavings^"></member-savings-footer>',
      claimsSearchInput: '<claims-search-input></claims-search-input>',
      claimsFilterCriteria: '<claims-filter-criteria members="^members^"></claims-filter-criteria>',
      policyHeaderGray: '<policy-header-gray></policy-header-gray>',
      policyHeaderBlue: '<policy-header-blue></policy-header-blue>',
      claimMember: '<claim-member member-name="^memberName^"></claim-member>',
      claimAmounts: '<claim-amounts amounts="^amounts^"></claim-amounts>',
      claimInfo: '<claim-info info="^info^"></claim-info>',
      claimCompose: '<claim-compose secure-message="^secureMessage^"></claim-compose>',
      idCardCustomerService: '<id-card-customer-service contact-details="^contactDetails^"></id-card-customer-service>',
      idCardInfo: '<id-card-info info="^info^"></id-card-info>',
      idCardPlanDetails: '<id-card-plan-details id-card-policy-details="^idCardPolicyDetails^"></id-card-plan-details>',
      idCardMemberDetails: '<id-card-member-details member-details="^memberDetails^"></id-card-member-details>',
      idCardImageTypes: '<id-card-image-types image-types="^imageTypes^"></id-card-image-types>',
      documentButtons: '<document-buttons buttons="^buttons^"></document-buttons>',
      claimBottomBar: '<claim-bottom-bar claim="^claim^"></claim-bottom-bar>',
      idCardNetworkDetails: '<id-card-network-details network-details="^networkDetails^"></id-card-network-details>',
      idCardBottomBar: '<id-card-bottom-bar></id-card-bottom-bar>',
      about: '<about about-details="^aboutDetails^"></about>',
      setup: '<setup data="^data^"></setup>',
      loginBottomBar: '<login-bottom-bar data="^data^"></login-bottom-bar>',
      faq: '<faq faq-details="^faqDetails^"></faq>',
      healthNav: '<health-nav health-nav-details="^healthNavDetails^"></health-nav>',
      homeCardCustomerService: '<home-card-customer-service customer-details="^customerDetails^" fad-alert-modal="^fadAlertModal^"></home-card-customer-service>',
      homeCardNewsUpdate: '<home-card-news-update news-details="^newsDetails^"></home-card-news-update>',
      homeCardInformationAlert: '<home-card-information-alert information-details="^informationDetails^"></home-card-information-alert>',
      homeCardBenefits: '<home-card-benefits selected-policy="^selectedPolicy^" policy-selection="^policySelection^" benefits="^benefits^"></home-card-benefits>',
      homeCardBenefitsSelect: '<home-card-benefits-select selected-policy="^selectedPolicy^" policy-selection="^policySelection^" benefits="^benefits^"></home-card-benefits-select>',
      benefitsDetail: '<benefits-detail benefits-data="^benefitsData^"></benefits-detail>',
      benefitsSelectDetail: '<benefits-select-detail benefits-data="^benefitsData^"></benefits-select-detail>',
      settingsList: '<settings-list settings-data="^settingsData^"></settings-list>',
      homeCardOtherLanguages: '<home-card-other-languages other-languages="^otherLanguages^"></home-card-other-languages>',
      homeCardSettings: '<home-card-settings settings="^settings^"></home-card-settings>',
      fundData: '<fund-data funds="^funds^"></fund-data>',
      idCard: '<id-card id-card-details="^idCardDetails^"></id-card>',
      verticalBarGraph: '<vertical-bar-graph graph-values="^graphValues^" graph-height="^graphHeight^"></vertical-bar-graph>',
      customerServiceCard: '<customer-service-card customer-service-card-details="^customerServiceCardDetails^" secure-inbox="^secureInbox^" localization="^localization^"></customer-service-card>',
      customerServicePhoneCard: '<customer-service-phone-card card-details="^cardDetails^" localization="^localization^" policy="^policy^"></customer-service-phone-card>',
      customerServiceSecureInbox: '<customer-service-secure-inbox customer-service-secure-inbox-details="^customerServiceSecureInboxDetails^"></customer-service-secure-inbox>',
      feedback: '<feedback data="^data^"></feedback>',
      benefitsBookletsDetails: '<benefits-booklets-details benefit-booklets="^benefitBooklets^"></benefits-booklets-details>',
      benefitsCoverageDetails: '<benefits-coverage-details policy-selection="^policySelection^" coverage-data="^coverageData^"></benefits-coverage-details>',
      medicarePlanBenefits: '<medicare-plan-benefits medicare-plan-benefits-details="^medicarePlanBenefitsDetails^"></medicare-plan-benefits>',
      medicareDrugBenefits: '<medicare-drug-benefits medicare-drug-benefits-details="^medicareDrugBenefitsDetails^"></medicare-drug-benefits>',
      medicareDrugBenefitsInitialCoverage: '<medicare-drug-benefits-initial-coverage medicare-drug-benefits-initial-coverage-details="^medicareDrugBenefitsInitialCoverageDetails^"></medicare-drug-benefits-initial-coverage>',
      medicareDrugBenefitsCoverageGap: '<medicare-drug-benefits-coverage-gap medicare-drug-benefits-coverage-gap-details="^medicareDrugBenefitsCoverageGapDetails^"></medicare-drug-benefits-coverage-gap>',
      medicareFootnotes: '<medicare-footnotes medicare-footnotes-details="^medicareFootnotesDetails^"></medicare-footnotes>',
      medicareMoreInformationPdf: '<medicare-more-information-pdf medicare-more-information-pdf-details="^medicareMoreInformationPdfDetails^"></medicare-more-information-pdf>',
      medicareSuppPlan: '<medicare-supp-plan policy="^policy^" policy-index="^policyIndex^" medicare-supp-plan-details="^medicareSuppPlanDetails^"></medicare-supp-plan>',
      medicareGroupInfo: '<medicare-group-info medicare-group-info-details="^medicareGroupInfoDetails^"></medicare-group-info>',
      billingSummary: '<billing-summary billing-details="^billingDetails^" policy="^policy^"></billing-summary>',
      billingSummaryError: '<billing-summary-error></billing-summary-error>',
      billingComingSoon: '<billing-coming-soon></billing-coming-soon>',
      billingAndPaymentsComingSoon: '<billing-and-payments-coming-soon></billing-and-payments-coming-soon>',
      billingAndPaymentsComingSoonAutopay: '<billing-and-payments-coming-soon-autopay billing-link="^billingLink^"></billing-and-payments-coming-soon-autopay>',
      prescriptionOnlyInfo: '<prescription-only-info data="^data^"></prescription-only-info>',
      paymentFlowTotalBalance: '<payment-flow-total-balance balance-info="^balanceInfo^"></payment-flow-total-balance>',
      paymentFlowTracker: '<payment-flow-tracker tracker-info="^trackerInfo^"></payment-flow-tracker>',
      trackerBillingSummary: '<tracker-billing-summary tracker-billing-data="^trackerBillingData^"></tracker-billing-summary>',
      paymentFlowPaymentFrequency: '<payment-flow-payment-frequency autopay-enrollment="^autopayEnrollment^" balance-info="^balanceInfo^" reinstatement-info="^reinstatement^"></payment-flow-payment-frequency>',
      paymentFlowPaymentMethod: '<payment-flow-payment-method method-info="^methodInfo^"></payment-flow-payment-method>',
      paymentFlowPaymentMethodSelected: '<payment-flow-payment-method-selected method-info="^methodInfo^"></payment-flow-payment-method-selected>',
      autopayFlowBillingMethod: '<autopay-flow-billing-method balance-info="^balanceInfo^"></autopay-flow-billing-method>',
      paymentFlowBillingMethod: '<payment-flow-billing-method balance-info="^balanceInfo^"></payment-flow-billing-method>',
      dentalOnlyInfo: '<dental-only-info data="^data^"></dental-only-info>',
      lowCostDentalOnlyInfo: '<low-cost-dental-only-info data="^data^" geo-location-details="^geoLocationDetails^"></low-cost-dental-only-info>',
      visionOnlyInfo: '<vision-only-info vision-benefits-data="^visionBenefitsData^"></vision-only-info>',
      contraceptiveOnlyInfo: '<contraceptive-only-info data="^data^"></contraceptive-only-info>',
      paymentFlowPaymentAmount: '<payment-flow-payment-amount account-info="^accountInfo^"></payment-flow-payment-amount>',
      paymentFlow: '<payment-flow balance-info="^balanceInfo^"></payment-flow>',
      scrollStart: '<div class="scroll-body">',
      scrollEnd: '</div>',
      paymentFlowTermsConditions: '<payment-flow-terms-conditions terms-conditions="^termsConditions^"></payment-flow-terms-conditions>',
      paymentFlowReviewDetails: '<payment-flow-review-details review-details="^reviewDetails^"></payment-flow-review-details>',
      billingPreferencesDetails: '<billing-preferences-details billing-preferences-data="^billingPreferencesData^" policy="^policy^"></billing-preferences-details>',
      billingPreferencesUpdate: '<billing-preferences-update billing-preferences-update-data="^billingPreferencesUpdateData^" policy="^policy^"></billing-preferences-update>',
      stopAutopay: '<stop-autopay token="^token^" stop-autopay-data="^stopAutopayData^" policy="^policy^"></stop-autopay>',
      paymentFlowAutoPaySuccess: '<payment-flow-auto-pay-success billing-info="^billingInfo^"></payment-flow-auto-pay-success>',
      paymentFlowAutoPaySetup: '<payment-flow-auto-pay-setup billing-info="^billingInfo^"></payment-flow-auto-pay-setup>',
      billingButtons: '<billing-buttons billing-buttons-info="^billingButtonsInfo^"></billing-buttons>',
      findDoctorNavbar: '<find-doctor-navbar navbar-details="^navbarDetails^" find-doctor-search-details="^findDoctorSearchDetails^"></find-doctor-navbar>',
      findDoctor: '<find-doctor find-doctor-details="^findDoctorDetails^" plans="^plans^"></find-doctor>',
      findCare: '<find-care find-care-details="^findCareDetails^" plans="^plans^"></find-care>',
      findDoctorSearch: '<find-doctor-search find-doctor-search-details="^findDoctorSearchDetails^" smart-shopper-details="^smartShopperDetails^"></find-doctor-search>',
      homeCardFindCare: '<home-card-find-care find-care-details="^findCareDetails^" geo-location-details = "^geoLocationDetails^" jwt="^jwt^" signature="^signature^" smart-shopper-details="^smartShopperDetails^"></home-card-find-care>',
      planSelect: '<plan-select plan-select-details="^planSelectDetails^"></plan-select>',
      findDoctorBrowser: '<find-doctor-browser find-doctor-browser-details="^findDoctorBrowserDetails^" smart-shopper-flow="^smartShopperFlow^"></find-doctor-browser>',
      findDoctorAuthenticatedNavbar: '<find-doctor-authenticated-navbar navbar-details="^navbarDetails^" find-doctor-search-details="^findDoctorSearchDetails^" urgent-care-details="^urgentCareDetails^" geo-location-details="^geoLocationDetails^"></find-doctor-authenticated-navbar>',
      findDoctorSearchBottomBar: '<find-doctor-search-bottom-bar bottom-bar-details="^bottomBarDetails^" pcp-details="^pcpDetails^"></find-doctor-search-bottom-bar>',
      findDoctorSearchResults: '<find-doctor-search-results search-results-details="^searchResultsDetails^"></find-doctor-search-results>',
      findDoctorResultsDetails: '<find-doctor-results-details find-doctor-results-details="^findDoctorResultsDetails^" smart-shopper-details="^smartShopperDetails^"></find-doctor-results-details>',
      planHeader: '<plan-header></plan-header>',
      filterDetails: '<filter-details find-doctor-filter-details="^findDoctorFilterDetails^"></filter-details>',
      homeCardChat: '<home-card-chat chat-details="^chatDetails^" live-chat-details="^liveChatDetails^"></home-card-chat>',
      homeCardPcp: '<home-card-pcp pcp-details="^pcpDetails^"></home-card-pcp>',
      pcpDependentPcps: '<pcp-dependent-pcps dependent-pcp-details="^dependentPcpDetails^"></pcp-dependent-pcps>'
    });
}());

(function() {
  angular
    .module('blueconnect.mobile.filters.addLeadingZeroToSingleDigit', [])
    /**
     * @description
     * Adds a leading zero to a number to any single digit numbers, ex 1 becomes 01
     * @param {number|string} input
     * @return {string}
     */
    .filter('leadingZero', function() {
      return function(input) {
        return ('' + input).length === 1 ? '0' + input : '' + input;
      };
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.billingHistoryFromDateFilter', [])
    .filter('billingHistoryFromDateFilter', [
      '$rootScope',
      function billingHistoryFromDateFilter($rootScope) {
        return function(input, startMonth) {
          if (startMonth) {
            var endMonthList;
            endMonthList = input.filter(function(e) { return e.value >= startMonth.value; });
            return endMonthList;
          }else{
            return input;
          }
        }
      }]);
  })();

(function() {
  angular
    .module('blueconnect.mobile.filters.billingHistoryToDateFilter', [])
    .filter('billingHistoryToDateFilter', [
      '$rootScope',
      function billingHistoryToDateFilter($rootScope) {
        return function(input, startMonth) {
          if (startMonth) {
            var endMonthList;
            endMonthList = input.filter(function(e) { return e.value <= startMonth.value; });
            return endMonthList;
          }else{
            return input;
          }
        }
      }]);
  })();

(function() {
  angular
    .module('blueconnect.mobile.filters.capitalize', [])
    .filter('capitalize', function capitalize() {
      return function(inputStr) {
        if (!inputStr) {
          return '';
        }

        return inputStr[0].toUpperCase() + inputStr.slice(1).toLowerCase();
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.fromDropDownFilter', [])
    .filter('fromDropDownFilter', [
      '$rootScope',
      function fromDropDownFilter($rootScope) {
        return function(input, endMonth) {
          if (endMonth) {
            var startMonthList;
            var index;
            var currentYear = $rootScope.loc[moment(endMonth).format('MMMM').toUpperCase()] + moment(endMonth).format(' YYYY');
            function month(selectedMonth){
              return selectedMonth.name == currentYear;
            };
            index = input.findIndex(month) + 1;
            startMonthList = input.slice(0, index);
            return startMonthList;
          }
          else {
            return input;
          }
        }
      }]);
  })();

(function() {
  angular
    .module('blueconnect.mobile.filters.limitFilter', [])
    .filter('limit', function limitNumber() {
      return function(value, options) {
        // Min value.
        var min = Number(options.min);

        // Min value check.
        if (min && min > value) {
          return min;
        }

        // Max value.
        var max = Number(options.max);

        // Max value check.
        if (max && max < value) {
          return max;
        }

        // Return amount.
        return value;
      };
    });
})();

(function () {
  angular
      .module('blueconnect.mobile.filters.maskAccount', [])
      .filter('maskAccount', function maskAccount() {
        return function (acct) {
          if (!acct) {
            return '';
          }
          var beginMask;
          var endMask;
          var mask;

          if (acct.toString().length == 4) {
            var str1 = "XXXXXXXXXXXX";
            var res = str1.concat(acct);
            beginMask = res.substr(0, res.length - 4);
            endMask = res.substr(res.length - 4, 4);
            mask = beginMask.replace(/[0-9, X]/g, '\u2022') + endMask;
            return mask;
          }
          var maskacct = acct.toString();
          beginMask = maskacct.substr(0, maskacct.length - 4);
          endMask = maskacct.substr(maskacct.length - 4, 4);
          mask = beginMask.replace(/[0-9, X]/g, '\u2022') + endMask;
          return mask;
        }
      });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.padCurrencyAmount', [])
    .filter('padCurrencyAmount', function capitalize() {
      return function(amt) {
        if (!amt) {
          return '';
        }

        var amountDue = amt.toString();
        var cents = (amountDue.toString().slice(amountDue.indexOf('.') + 1));
        var dollars = amountDue.toString().slice(0, amountDue.indexOf('.')) || 0;
        return dollars + '.' + cents.padEnd(2, '0');
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.removeCommas', [])
    .filter('removeCommas', function capitalize() {
      return function(amt) {
        if (!amt) {
          return '';
        }

        return amt.replace(/,/g, '');
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.filters.toDropDownFilter', [])
    .filter('toDropDownFilter', [
      '$rootScope',
      function toDropDownFilter($rootScope) {
        return function(input, startMonth) {
          if (startMonth) {
            var endMonthList;
            var index;
            var currentYear = $rootScope.loc[moment(startMonth).format('MMMM').toUpperCase()] + moment(startMonth).format(' YYYY');
            function month(selectedMonth){
              return selectedMonth.name == currentYear;
            };
            index = input.findIndex(month);
            endMonthList = input.slice(index);
            return endMonthList;
          }
          else {
            return input;
          }
        }
      }]);
  })();

/**
 * Service for managing Adobe Mobile Services
 *
 * @namespace Services
 * @class adobeService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.adobe', [])
    .directive('trackAction', [
      function() {
        return {
          restrict: 'A',
          controller: [
            '$scope',
            'adobeService',
            'analyticConstants',
            function($scope, adobeService, analyticConstants) {
              $scope.trackAction = adobeService.trackAction;
              $scope.analyticConstants = analyticConstants;
            },
          ],
          link: function($scope, $elem, $attr) {
            $elem.on('click', function() {
              var trackActionInfo = $scope.$eval($attr.trackAction);
              if (!trackActionInfo) {
                return console.warn('track action called with nothing passed in');
              }
              $scope.trackAction(
                trackActionInfo.action,
                trackActionInfo.section,
                trackActionInfo.details
              );
            });
          },
        };
      },
    ])
    .service('adobeService', [
      '$rootScope',
      '$window',
      'analyticConstants',
      function($rootScope, $window, analyticConstants) {
        var validSections = [];
        var sections = Object.keys(analyticConstants).filter(function(value) {
          return value.includes('SECTION');
        });

        sections.forEach(function(value) {
          validSections.push(analyticConstants[value]);
        });
        /**
         * Returns tracking details from information provided and rootscope variables.
         *
         * @param {Object} [details] Information that should be included in the tracking details.
         * @param {String} section   The section of the app the details correspond to.
         */
        function getTrackingDetails(details, section) {
          var trackingDetails = {
            loggedIn: $rootScope.loggedIn || false,
            language: getRootScopeLanguage(),
            section: getTrackingSection(section)
          };

          if (trackingDetails.loggedIn) {
            if (typeof details === 'string') {
              trackingDetails.query = details;
            }

            if ($rootScope.analyticsInfo) {
              trackingDetails.personId = $rootScope.analyticsInfo.info1;
              trackingDetails.ruid = $rootScope.analyticsInfo.info2;
            }

            if ($rootScope.selectedPolicy) {
              var i = $rootScope.selectedPolicy.index;

              trackingDetails.groupNumber = $rootScope.selectedPolicy.groupNumber;
              trackingDetails.groupName = $rootScope.selectedPolicy.groupName;
              trackingDetails.lobCode = $rootScope.selectedPolicy.lobCode;
              trackingDetails.isActive = $rootScope.selectedPolicy.active;

              if (
                $rootScope.selectedPolicy.policyMembers &&
                i < $rootScope.selectedPolicy.policyMembers.length
              ) {
                trackingDetails.ageRange = getAgeRange(
                  +$rootScope.selectedPolicy.policyMembers[i].ageNumber
                );
                trackingDetails.relationship =
                  getRelationship($rootScope.selectedPolicy.policyMembers[i].subscriberRelationshipCode);
                trackingDetails.gender = $rootScope.selectedPolicy.policyMembers[i].gender;
              }
            }
          }

          if (typeof details !== 'undefined' && typeof details === 'object') {
            trackingDetails = appendProperties(null, details, trackingDetails);
          }

          return trackingDetails;
        }

        // produces a flatten hierarchy of properties since adobe can only handle primitive values
        // input --> level1: {level2: {name2: 'value2'}, name1: 'value1'}
        // output--> level1.level2.name2 = 'value2', level1.name1 = 'value1'
        function appendProperties(prefix, properties, combinedProperties) {
            for (var key in properties) {
              var fullkey = prefix ? prefix + '.' + key : key;
              if (typeof properties[key] === 'object') {
                combinedProperties = appendProperties(fullkey, properties[key], combinedProperties);
              } else {
                combinedProperties[fullkey] = properties[key];
              }
            }

          return combinedProperties;
        }

        /**
         * Returns tracking section from information provided, uses analyticConstants
         *
         * @param {String} currentSection   The section of the app the details correspond to.
         * @see analyticConstants
         */
        function getTrackingSection(currentSection) {
          var section = '*' + currentSection;

          switch (true) {
            case validSections.includes(currentSection):
              section = currentSection;
              break;
            case /Billing/.test(currentSection):
              section = analyticConstants.BILLING_SECTION;
              break;
            case /Healthnav/.test(currentSection):
            case /find/i.test(currentSection):
              section = analyticConstants.HEALTHNAV_SECTION;
              break;
            case /Home/.test(currentSection):
              section = analyticConstants.HOME_SECTION;
              break;
            case /Menu/.test(currentSection):
              section = analyticConstants.MENU_SECTION;
              break;
            case /Id-card/.test(currentSection):
              section = analyticConstants.IDCARD_SECTION;
              break;
            case /Login/.test(currentSection):
              section = analyticConstants.LOGIN_SECTION;
              break;
            case /Setup/.test(currentSection):
              section = analyticConstants.SETTINGS_SECTION;
              break;
            case /inbox/i.test(currentSection):
              section = analyticConstants.INBOX_SECTION;
              break;
            case /Claim/.test(currentSection):
              section = analyticConstants.CLAIMS_SECTION;
              break;
            case /Benefit/.test(currentSection):
              section = analyticConstants.BENEFITS_SECTION;
              break;
            case /About/.test(currentSection):
            case /Feedback/.test(currentSection):
            case /customer-service/i.test(currentSection):
              section = analyticConstants.HELP_SECTION;
              break;
          }
          return section;
        }

        function getRootScopeLanguage() {
          var language = $rootScope.language || $window.navigator.language;
          var languages = {
            en: 'English',
            'en-US': 'English',
            es: 'Spanish',
            'es-US': 'Spanish',
            'es-ES': 'Spanish',
          };
          return languages[language] || language;
        }

        /**
         * Returns age range group that the provided age falls in.
         *
         * @param {number} age The age to categorize.
         *
         */
        function getAgeRange(age) {
          var ageRange = 'Unspecified';

          switch (true) {
            case age > 64:
              ageRange = '65 and Over';
              break;
            case age > 59:
              ageRange = '60 to 64';
              break;
            case age > 49:
              ageRange = '50 to 59';
              break;
            case age > 39:
              ageRange = '40 to 49';
              break;
            case age > 29:
              ageRange = '30 to 39';
              break;
            case age > 17:
              ageRange = '18 to 29';
              break;
            case age < 18:
              ageRange = 'Under 18';
              break;
          }

          return ageRange;
        }

        /**
         * Returns desktop relationship value from mobile one provided.
         *
         * @param {String} currentRelationship   The mobile relationship to convert.
         */
        function getRelationship(currentRelationship) {
          var relationship = '*' + currentRelationship;

          switch (true) {
            case /SUB/.test(currentRelationship):
              relationship = 'self';
              break;
            case /SPS/.test(currentRelationship):
              relationship = 'spouse';
              break;
            case /CHD/.test(currentRelationship):
              relationship = 'dependent';
              break;
            case /DBO/.test(currentRelationship):
              relationship = 'domestic_partner';
              break;
            case /OTH/.test(currentRelationship):
              relationship = 'other';
              break;
          }
          return relationship;
        }

        /**
         * Tracks an action inside the app.
         *
         * @memberof adobeService
         * @method trackAction
         * @param {String} eventName      The name of the event to track.
         * @param {String} section        The section of the app the event is in.
         * @param {Object} [eventDetails] Information object on the event.
         */
        this.trackAction = function(eventName, section, eventDetails) {
          var trackingDetails = getTrackingDetails(eventDetails, section);

          if ($window.ADB) {
            $window.ADB.trackAction(eventName, trackingDetails);
          } else {
            console.log('ADBTrackAction:', eventName, trackingDetails);
          }
        };

        /**
         * Tracks a change in app state.
         *
         * @memberof adobeService
         * @method trackState
         * @param {String} stateName      The name of the state to track.
         * @param {String} section        The section of the app the state is in.
         * @param {Object} [stateDetails] Information object on the state.
         */
        this.trackState = function(stateName, section, stateDetails) {
          var trackingDetails = getTrackingDetails(stateDetails, section);

          // short term debug for page equals billing
          if (stateName === 'billing') {
            trackingDetails.misc = new Error('billing').stack;
          }

          if ($window.ADB) {
            $window.ADB.trackState(stateName, trackingDetails);
          } else {
            console.log('ADBTrackState:', stateName, trackingDetails);
          }
        };
      },
    ]);
})();
/**
 * Service for showing an alert modal.
 *
 * @namespace Services
 * @class alertService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.alert', [])
    .service('alertService', [
      '$q',
      '$rootScope',
      '$sce',
      function($q, $rootScope, $sce) {
        /**
         * Shows an alert modal. It has a manditory confirm button and an optional cancel button.
         *
         * @memberof alertService
         * @method showAlert
         * @param  {String}  title          The text to display in the alert modal header.
         * @param  {String}  body           The text to display in the alert modal body.
         * @param  {Object} [confirmButton] Confirm button settings. It has two variables, title and color ('red','blue' or 'green').
         * @param  {Object} [cancelButton]  Cancel button settings. Uses the same variables as the confirm button.
         * @return {Promise} A promise that resolves or rejects, based on whether the alert was accepted or cancelled.
         */
        this.showAlert = function(title, body, confirmButton, cancelButton, style) {
          var deferred = $q.defer();

          $rootScope.alertModal = {
            title: title,
            body: $sce.trustAsHtml(body),
            confirmButton: confirmButton,
            cancelButton: cancelButton,
            style: style,
            result: function(confirm) {
              if (confirm) {
                angular.element('.alert-modal').modal('hide');
                $rootScope.blurContent = false;
                deferred.resolve();
              }
              else {
                angular.element('.alert-modal').modal('hide');
                $rootScope.blurContent = false;
                deferred.reject();
              }
              toggleModalState(false);
            }
          };


          $rootScope.blurContent = true;
          angular.element('.alert-modal').modal('show');
          toggleModalState(true);
          return deferred.promise;
        };
        /* Hides an alert modal before loading the login page
         *
         * @method closeAlert
         */
        this.closeAlert = function() {
          angular.element('.alert-modal').modal('hide');
          angular.element('.help-modal').modal('hide');
          angular.element('.terms-modal').modal('hide');
          $rootScope.blurContent = false;
          toggleModalState(false);
        };

        function toggleModalState(isModalOpen) {
          $rootScope.isModalOpen = isModalOpen;
        }
      }
    ]);
}());

/**
 * Service for communication with Androids's Fingerprint SDK.
 *
 * @namespace Services
 * @class androidFingerprintAuthService
 */
(function() {
	'use strict';

	angular.module('blueconnect.mobile.services.androidFingerprintAuth', [])
		.service('androidFingerprintAuthService', [
			'$rootScope',
			function($rootScope) {
				var parent = this;

				this.isAvailableSuccess = function (result) {
					// alert("FingerprintAuth available: " + JSON.stringify(result));
					if (result.isAvailable) {
						var encryptConfig = {
							clientId: "myAppName",
							username: "currentUser",
							password: "currentUserPassword",
	            disableBackup: true
						}; // See config object for required parameters
						FingerprintAuth.encrypt(encryptConfig, parent.successCallback, parent.errorCallback);
					}
				};

				this.isAvailableError = function (message) {
					// alert("isAvailableError(): " + message);
				};

				this.successCallback = function(result) {
					$rootScope.fingerprintOK();
				};

				this.errorCallback = function (error) {
					$rootScope.fingerprintNotOK();
				};

				var onPause = function () {
					// CRIT [ TODO: This application has been suspended. Save application state here.]
				};

				var onResume = function () {
					// CRIT [ TODO: This application has been reactivated. Restore application state here.]
				};

				if (typeof cordova !== 'undefined') {
					document.addEventListener('deviceready', function() {

						document.addEventListener( 'pause', onPause.bind( this ), false );
						document.addEventListener( 'resume', onResume.bind( this ), false );

					});
				}
			}
		]);
}());

/**
 * Services for the back button.
 *
 * @namespace Services
 * @class backButtonService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.backButton', [])
  .service('backButtonService', [
    '$rootScope',
    '$location',
    'TransparencyFactory',
    function($rootScope, $location, TransparencyFactory) {
      this.backButtonFunction = function() {
        $rootScope.resultsTermsArr = [];
        $rootScope.filtersDataArr = [];
        $rootScope.resultsDetailsTermArr = [];
        $rootScope.$on('$locationChangeStart', function () {
          // Skip fiter page
          if ($location.path() === '/find-doctor-filter') {
            if (!$rootScope.newFilter) {
              $rootScope.filtersDataArr.shift();
              var filtersData = $rootScope.filtersDataArr[0] || '';
              TransparencyFactory.setFilterTierSelectedTerm(filtersData.tierData || '');
              TransparencyFactory.setFilterSpecialtySelectedTerm(filtersData.specialty || '');
              TransparencyFactory.setFilterGenderSelectedTerm(filtersData.gender || '');
  
              window.history.back();
            } else {
              $rootScope.newFilter = false;
            }
          }
        });
  
        $rootScope.$on('$locationChangeSuccess', function () {
          // Track previous URL for go-back button
          var args = Array.prototype.slice.call(arguments);
          if (!$rootScope.routes) {
            $rootScope.routes = {
              current: args[1],
              previous: args[2],
              history: args.slice(1, 2)
            };
          } else {
            if (!/find-doctor-filter/.test(args[1])) {
              $rootScope.routes = {
                current: args[1],
                previous: args[2],
                history: $rootScope.routes.history.concat([args[1]])
              };
            }
          }
          if ($rootScope.routes && $rootScope.routes.history.length > 7) {
            $rootScope.routes.history = $rootScope.routes.history.slice(1);
          }
          // End of Track previous URL for go-back button
  
          if ($location.path() === '/find-doctor-browser') {
            // reset fromBackButton to false
            if ($rootScope.fromBackButton) {
              $rootScope.fromBackButton = false;
            }
          }
  
          if ($location.path() === '/find-doctor-search-results') {
            if ($rootScope.fromBackButton) {
              $rootScope.fromBackButton = false;
            } else {
              $rootScope.resultsTermsArr.unshift(TransparencyFactory.getResultsTerm());
            }
          }
  
          if ($location.path() === '/find-doctor-results-details') {
            if ($rootScope.detailsFromBackButton) {
              $rootScope.detailsFromBackButton = false;
            } else {
              $rootScope.resultsDetailsTermArr.unshift(TransparencyFactory.getResultsDetailsTerm());
            }
          }
  
          // reset fromBackButton to false
          if (!$rootScope.loggedIn && $location.path() === '/find-doctor-search') {
            $rootScope.fromBackButton = false;
            $rootScope.detailsFromBackButton = false;
          }
  
          // reset history arrays & fromBackButton to initial values
          if ((!$rootScope.loggedIn && $location.path() === '/login') || 
              ($rootScope.loggedIn && $location.path() === '/home') || 
              ($rootScope.loggedIn && $location.path() === '/find-doctor-search')) {
            $rootScope.resultsTermsArr = [];
            $rootScope.filtersDataArr = [];
            $rootScope.resultsDetailsTermArr = [];
            $rootScope.fromBackButton = false;
            $rootScope.detailsFromBackButton = false;
          }
        });
      };
    }
  ]);
}());
(function() {
  angular
    .module('blueconnect.mobile.services.billingInvoiceHistoryFactory', [])
    .factory('BillingInvoiceHistoryFactory', [function() {
      // Moment object dates
      var searchFromDate = null;
      var searchToDate = null;
      var serviceDateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZZ';

      var userSetData = {
        historyType: 'A',
        timeSpan: '3',
        token: null,
        dateList: null,
        startIndex: null,
        endIndex: null,
        startDate: null,
        endDate: null
      };

      return {
        serviceFormattedSearchFromDate: serviceFormattedSearchFromDate,
        getSearchFromDate: getSearchFromDate,
        setSearchFromDate: setSearchFromDate,
        serviceFormattedSearchToDate: serviceFormattedSearchToDate,
        getSearchToDate: getSearchToDate,
        setSearchToDate: setSearchToDate,
        getFilterTimespan: getFilterTimespan,
        getHistoryType: getHistoryType,
        setHistoryType: setHistoryType,
        getUserSetData: getUserSetData,
        getTimeSpan: getTimeSpan,
        setTimeSpan: setTimeSpan,
        getDateList: getDateList,
        setDateList: setDateList,
        getStartIndex: getStartIndex,
        setStartIndex: setStartIndex,
        getEndIndex: getEndIndex,
        setEndIndex: setEndIndex,
        getStartDate: getStartDate,
        setStartDate: setStartDate,
        getEndDate: getEndDate,
        setEndDate: setEndDate,
        getAccountToken: getAccountToken,
        setAccountToken: setAccountToken,
        setMedicareSSAValue: setMedicareSSAValue,
        getMedicareSSAValue: getMedicareSSAValue,
        resetFilter: resetFilter
      };

      /**
       * @return {string}
       */
      function serviceFormattedSearchFromDate() {
        return momentSearchFromDate().format(serviceDateTimeFormat);
      }
      /**
       * @return {Moment}
       */
      function momentSearchFromDate() {
        return searchFromDate || moment(momentSearchToDate()).subtract(3, 'months');
      }
      /**
       *
       */
      function setSearchFromDate(setDate) {
        searchFromDate = setDate;
      }

      function getSearchFromDate() {
        return searchFromDate;
      }

      /**
       * @return {string}
       */
      function serviceFormattedSearchToDate() {
        return momentSearchToDate().add(1, 'M').format(serviceDateTimeFormat);
      }
      /**
       * @return {Moment}
       */
      function momentSearchToDate() {
        return searchToDate || moment();
      }
      /**
       *
       */
      function setSearchToDate(setDate) {
        searchToDate = setDate;
      }
      function getSearchToDate() {
        return searchToDate;
      }
      /**
       * @typedef {InvoiceTimeSpan}
       * @param {Moment} searchFromDate
       * @param {Moment} searchToDate
       * @param {Number} timespan - Months between the searchFromDate and the searchToDate
       */

       /**
       * @return {InvoiceTimespan}
       */
      function getFilterTimespan() {
        return {
          searchFromDate: momentSearchFromDate(),
          searchToDate: momentSearchToDate(),
          timespan: getTimeSpan()
        };
      }

      function getHistoryType() {
        return userSetData.historyType;
      }
      function setHistoryType(type) {
        userSetData.historyType = type;
        return userSetData.historyType;
      }
      function getTimeSpan() {
        return userSetData.timeSpan;
      }
      function setTimeSpan(timespan) {
        userSetData.timeSpan = timespan;
        return userSetData.timeSpan;
      }
      function getDateList() {
        return userSetData.dateList;
      }
      function setDateList(dateList) {
        userSetData.dateList = dateList;
        return userSetData.dateList;
      }
      function getUserSetData() {
        return userSetData;
      }
      function getStartIndex() {
        return userSetData.startIndex;
      }
      function setStartIndex(startIndex) {
        userSetData.startIndex = startIndex;
        return userSetData.startIndex;
      }
      function getEndIndex() {
        return userSetData.endIndex;
      }
      function setEndIndex(endIndex) {
        userSetData.endIndex = endIndex;
        return userSetData.endIndex;
      }
      function getStartDate() {
        return userSetData.startDate;
      }
      function setStartDate(startDate) {
        userSetData.startDate = startDate;
        return userSetData.startDate;
      }
      function getEndDate() {
        return userSetData.endDate;
      }
      function setEndDate(endDate) {
        userSetData.endDate = endDate;
        return userSetData.endDate;
      }
      function getAccountToken() {
        return userSetData.token;
      }
      function setAccountToken(token) {
        userSetData.token = token;
        return userSetData;
      }
      function getMedicareSSAValue() {
        return userSetData.medicareSSA;
      }
      function setMedicareSSAValue(value) {
        userSetData.medicareSSA = value;
        return userSetData;
      }

      /**
       *
       */
      function resetFilter() {
        searchFromDate = null;
        searchToDate = null;
        setHistoryType('A');
        setTimeSpan('3');
      }
    }]);
})();
/**
 * Service for working with claims.
 *
 * @namespace Services
 * @class claimsService
 */

(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.claims', [])
    .service('claimsService', [
      '$rootScope',
      function($rootScope) {
        /**
         * This method generates the service request for the user entering search keywords.
         *
         * @memberof claimsService
         * @method generateSearchQuery
         * @param  {String}  userQuery         The keyword value entered by user for searching.
         * @param  {Date}    policyStartMonth  The currently selected policy's start date.
         * @param  {Date}    policyEndMonth    The currently selected policy's end date.
         */
        this.generateSearchQuery = function(
          userQuery,
          policyStartMonth,
          policyEndMonth
        ) {
          var basicSearch =
            'keyword=' +
            userQuery +
            '&' +
            'fromDate=' +
            '' +
            '&' +
            'toDate=' +
            '';

          return basicSearch;
        };

        /**
         * This method generates the service request for the user entering filter criteria.
         *
         * @memberof claimsService
         * @method generateFilterQuery
         * @param  {Object}  selection         The holding area for those member's selected.
         * @param  {String}  claimsStatus      The selected status for the claim.
         * @param  {Date}    startMonth        The starting filter date.
         * @param  {Date}    endMonth          The ending filter date.
         * @param  {Date}    policyStartMonth  The currently selected policy's start date.
         * @param  {Date}    policyEndMonth    The currently selected policy's end date.
         * @param  {String}  keyword           The currently selected keyword passed in
         */
        this.generateFilterQuery = function(
          selection,
          claimsStatus,
          startMonth,
          endMonth,
          policyStartMonth,
          policyEndMonth,
          keyword
        ) {
          claimsStatus = claimsStatus || '';
          startMonth = startMonth || '';
          endMonth = endMonth || '';
          policyStartMonth = policyStartMonth || '';
          policyEndMonth = policyEndMonth || '';
          keyword = keyword || '';

          var selectionArray = [];
          var queryPath =
            'claimsStatus=' +
            claimsStatus +
            '&' +
            'fromDate=' +
            startMonth +
            '&' +
            'toDate=' +
            endMonth +
            '&' +
            'keyword=' +
            keyword;

          if (selection != undefined) {
            var selectionString = String(selection);
            selectionArray = selectionString.split(',');
            for (var index = 0; index < selectionArray.length; index++) {
              queryPath += '&dependentNo=' + selectionArray[index];
            }
          }

          //console.log('Front End Query: ' + queryPath);

          return queryPath;
        };

        /**
         * This method generates filter date dropdown lists for the searching claims.
         *
         * @memberof claimsService
         * @method generateFilterDates
         * @param  {Object}  selectedPolicy  The currently selected policy.
         */
        this.generateFilterDates = function(selectedPolicy) {
          var filteredDates = {
            startDates: [],
            endDates: [],
          };

          var ONE_DAY = 1000 * 60 * 60 * 24;
          var policyStartDate = new Date(selectedPolicy.effectiveDate);
          var policyEndDate = new Date(selectedPolicy.expirationDate);

          if (
            Math.ceil(
              (policyEndDate.getTime() - policyStartDate.getTime()) / ONE_DAY
            ) <= 31
          ) {
            //Valid for only one month
            filteredDates.startDates.push(createDateValue(policyStartDate));
            filteredDates.endDates.push(createDateValue(policyEndDate));
          } else if (policyEndDate.getFullYear() >= 2099) {
            //Active Policy with no effective end date
            policyEndDate = new Date(policyStartDate.getFullYear(), 11, 31);
            generateDateOptions(policyStartDate, policyEndDate, filteredDates);
          } else {
            generateDateOptions(policyStartDate, policyEndDate, filteredDates);
          }

          return filteredDates;
        };

        /**
         * This sets the default members list to all checked or all not checked.
         *
         * @memberof claimsService
         * @method initializeMemberList
         * @param {Object}  members         The members associated with the current policy.
         * @param {boolean} isChecked       The flag used to determine if all members are selected or not.
         */
        this.initializeMemberList = function(members, isChecked) {
          var membersSelected = [];

          if (isChecked) {
            for (var i = 0; i < members.length; i++) {
              membersSelected.push(members[i].dependentNo);
            }
          }

          return membersSelected;
        };

        /**
         * This is used to reset the filter ribbon text to its default values
         *
         * @memberof claimsService
         * @method displayNoFilterText
         */
        this.displayNoFilterText = function() {
          return $rootScope.loc.CLAIMS_NO_FILTER;
        };

        /**
         * This is used to display the claims count within filter ribbon text.
         *
         * @memberof claimsService
         * @method displayClaimsCount
         * @param {Object}  claims         The collection of claims used to determine count
         */
        this.displayClaimsCount = function(claims) {
          var claimsCount = claims.length;
          var claimsCountText = '';

          if (claimsCount === 1) {
            claimsCountText = claimsCount + ' ' + $rootScope.loc.CLAIM;
          } else if (claimsCount === 0 || claimsCount > 1) {
            claimsCountText = claimsCount + ' ' + $rootScope.loc.CLAIMS;
          }

          return claimsCountText;
        };

        var generateDateOptions = function(startDate, endDate, filteredDates) {
          var nextMonth = new Date(
            startDate.getFullYear(),
            startDate.getMonth(),
            1
          );

          while (nextMonth <= endDate) {
            var startOfMonth = new Date(
              nextMonth.getFullYear(),
              nextMonth.getMonth(),
              1
            );
            var endOfMonth = new Date(
              nextMonth.getFullYear(),
              nextMonth.getMonth() + 1,
              0
            );

            filteredDates.startDates.push(createDateValue(startOfMonth));
            filteredDates.endDates.push(createDateValue(endOfMonth));

            nextMonth.setMonth(nextMonth.getMonth() + 1);
          }
        };

        var createDateValue = function(dateValue) {
          var newDate = {
            id: dateValue.getFullYear() + '-' + dateValue.getMonth(),
            name:
              $rootScope.loc[
                moment(dateValue)
                  .format('MMMM')
                  .toUpperCase()
              ] + moment(dateValue).format(' YYYY'),
            value: moment(dateValue).format('YYYY-MM-DD'),
          };

          return newDate;
        };
      },
    ]);
})();

/**
 * @description Service for showing an alert modal.
 * @namespace Services
 * @class alertService
 */
(function() {
  'use strict';

  angular
  .module('blueconnect.mobile.services.coachmark', [])
  .factory('coachmarkService', [
    '$rootScope',
    '$timeout',
    'restService',
    function($rootScope, $timeout, restService) {
      var coachmarksData = {};
      return {
        getCoachmarkData: function (page) {
          var queryString = "show=" + page + '&policyIndex=' + $rootScope.policyIndex
                            + '&policyExternalId=' + $rootScope.selectedPolicy.externalId +
                            "&policyEffectiveDate=" + $rootScope.selectedPolicy.effectiveDate + "&policyExpirationDate=" + $rootScope.selectedPolicy.expirationDate;

          return restService
            .getData('coachmarks?' + queryString, $rootScope.language || 'en')
            .then(function(result) {
              if (result.data && result.data.pages) {
                coachmarksData[page] = result.data;
              }
              return result;
            });
        },
        /**
         * @description Displays a coachmark for the specified page.
         * @memberof MainController
         * @method showCoachmark
         */
        showCoachmarks: function(page) {
          return this
            .getCoachmarkData(page)
            .then(function(result) {
              return $timeout(function() {
                angular
                  .element('.coachmark')
                  .scope()
                  .show(result);
              }, result.delay || 250);
          });
        }

      };
    }
  ]);
}());
/**
 * @description Services for managing actions only taken with physical devices.
 * @namespace Services
 * @class cordovaService
 */
(function() {
  "use strict";

  angular
    .module("blueconnect.mobile.services.cordova", [
      "blueconnect.mobile.services.touchId"
    ])
    .service('cordovaService', [
      '$rootScope',
      '$q',
      '$http',
      'alertService',
      'loginService',
      'storageService',
      'config',
      function ($rootScope, $q, $http, alertService, loginService, storageService, config) {
        /**
         * @description Checks device platform and OS version to determine if it's an old device.
         * @memberof cordovaService
         * @method checkForLowResDevice
         */

        this.checkForLowResDevice = function() {
          if (typeof cordova === "undefined") {
            return;
          }

          $rootScope.device = device.platform;
          $rootScope.lowResDevice = false;

          switch (device.platform) {
            case "iOS":
              var iosVersion = device.version;
              if (parseFloat(iosVersion) < 8) {
                $rootScope.lowResDevice = true;
              }
              break;
            case "Android":
            case "amazon-fireos":
              var androidVersion = device.version;
              if (androidVersion.indexOf("-") > -1) {
                androidVersion = androidVersion.substr(
                  0,
                  androidVersion.indexOf("-") + 1
                );
              }
              if (parseFloat(androidVersion) < 4.4) {
                $rootScope.lowResDevice = true;
              }
              break;
            default:
              break;
          }
        };

        this.deviceIsBrowser = function() {
          var deviceType = this.checkDeviceType();
          return deviceType.ios === false && deviceType.android === false;
        };

        // Checks for the device type, iphone or android.
        this.checkDeviceType = function () {
          if (typeof cordova === 'undefined' || typeof device === 'undefined') {
            return {
              ios: false,
              android: false
            };
          }

          $rootScope.device = device.platform;
          $rootScope.iphone = device.platform === "iOS";
          $rootScope.android =
            device.platform == "Android" || device.platform == "amazon-fireos";

          var platform = device.platform.toLowerCase();
          return {
            ios: platform === "ios",
            android: platform === "android" || platform === "amazon-fireos"
          };
        };

        /**
         * @description This method is called by the Settings page to update the local database.
         * @memberof cordovaService
         * @method updateAppSettings
         * @params {String} appKeyType The key for the data to be saved.
         * @params {Object} settingContent The data to be saved in the local database.
         * @return {Promise} A promise that resolves when the settings have been saved.
         */
        this.updateAppSettings = function (appKeyType, settingContent) {
          var apiUrl = config.apiUrl || 'https://api.bcbsnc.com';
          return $http.put(apiUrl + '/settings/' + appKeyType, settingContent)
        };

        /**
         * Opens a URL in the browser (internal or external).
         *
         * @memberof cordovaService
         * @method openInBrowser
         * @param  {String}  url       The URL to open.
         * @param  {String}  [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object}  [options] cordova-plugin-inappbrower options.
         * @param  {Boolean} [secure]  Whether or not the connection is through SSO
         */
        this.openInBrowser = function(url, target, options, secure) {
          var self = this;
          var ref = null;
          var page = null;

          switch (true) {
            case url.page === "RxClmDetl":
              page = url.page;
              url = url.ssoLink;
              break;
            case url.indexOf("findavisionprovider") > -1: 
              page = "SSO-VisionVndr";
              break;
            case url === "sso:cvs": 
              page = "SSO-CVS";
              break;  
          }

          alertService
            .showAlert(
              $rootScope.loc.EXTERNAL_LINK,
              $rootScope.loc.EXTERNAL_LINK_WARNING,
              {
                title: $rootScope.loc.CONTINUE,
                color: "blue"
              },
              {
                title: $rootScope.loc.CANCEL
              }
            )
            .then(function() {
              // To view prescription drug claims
              if (page) {
                var apiUrl = config.apiUrl
                  ? config.apiUrl + "/" + config.apiVersion
                  : "https://mobile.bcbsnc.com/api";
                var query = {
                  policyindex: $rootScope.policyIndex,
                  pageTph: page,
                  lobCode: $rootScope.selectedPolicy.lobCode,
                  groupId: $rootScope.selectedPolicy.groupNumber,
                  sourceSystem: $rootScope.selectedPolicy.sourceSystem,
                  policyMemberId:
                    $rootScope.selectedPolicy.alphaPrefix +
                    $rootScope.selectedPolicy.externalId
                };
                $http.post(apiUrl + "/touch-point", query).then(function() {
                  return;
                });
              }

              if (typeof cordova !== "undefined") {
                if (typeof options === "undefined") {
                  options = {
                    location: "yes"
                  };
                }

                var optionsString = "";
                for (var key in options) {
                  if (optionsString.length) {
                    optionsString += ",";
                  }
                  optionsString += key + "=" + options[key];
                }
                if (secure) {
                  $rootScope.$emit("pageLoading");
                  switch (url.split(":")[0]) {
                    case "sso":
                      self.setupSSO(url).then(function(result) {
                        $rootScope.$emit("pageLoaded");
                        ref = cordova.InAppBrowser.open(
                          result,
                          target || "_blank",
                          optionsString
                        );
                      });
                      break;
                    case "appsso":
                      self.setupSSOApp(url).then(function(result) {
                        $rootScope.$emit("pageLoaded");
                        var scheme;
                        var storeUrl;
                        self.checkDeviceType();
                        if ($rootScope.iphone) {
                          scheme = "heqmobile://";
                          storeUrl =
                            "itms://itunes.apple.com/us/app/healthequity-mobile/id642959434?mt=8";
                        } else {
                          scheme = "com.healthequity.healthequitymobile";
                          storeUrl =
                            "http://play.google.com/store/apps/details?id=" +
                            scheme;
                        }
                        appAvailability.check(
                          scheme,
                          function() {
                            self.getHeqApp(result, optionsString);
                          },
                          function() {
                            window.open(storeUrl);
                          }
                        );
                      });
                      break;
                    case "mbsso":
                      self.getSecureDesktopLink(url).then(function(result) {
                        $rootScope.$emit("pageLoaded");
                        ref = cordova.InAppBrowser.open(
                          result,
                          target || "_blank",
                          optionsString
                        );
                      });
                      break;
                    default:
                      ref = cordova.InAppBrowser.open(
                        config.bcbsWebUrl + "/" + url,
                        target || "_blank",
                        optionsString
                      );
                      break;
                  }
                } else {
                  ref = cordova.InAppBrowser.open(
                    url,
                    target || "_blank",
                    optionsString
                  );
                  ref.addEventListener("loadstart", function(event) {
                    if (event.url.match("mobile/close")) {
                      ref.close();
                    }
                  });
                }
              }
            });
        };

        this.setAppSettings = function() {
          return $q.reject(
            "Do not use this method: setAppSettings in cordovaService"
          );
        };
        this.saveAppSetting = function(key, value) {
          return $q.reject(
            "Do not use this method: saveAppSetting in cordovaService"
          );
        };

        /**
         * Stores app settings to encrypted storage.
         *
         * @memberof cordovaService
         * @method storeAppSettings
         * @param {Object} settings The app settings to store.
         */
        this.storeAppSettings = function(settings) {
          if (typeof cordova === "undefined") {
            return $q.reject("cordova is not available");
          }

          return storageService
            .set("appSettings", settings)
            .then(function(result) {
              console.log("App settings saved.");
              return result;
            })
            .catch(function(error) {
              console.warn(error);
              return error;
            });
        };

        /**
         * @description Adds a watcher on login settings to auto save them in secure storage.
         * @memberof cordovaService
         * @method addAppSettingsWatch
         */
        // TODO: make this work with new login storage
        this.addAppSettingsWatch = function() {
          var self = this;

          if (typeof cordova === "undefined") {
            return;
          }

          $rootScope.$watch(
            "appSettings",
            function(newVal, oldVal) {
              if (newVal !== oldVal) {
                self.storeAppSettings(newVal);
              }
            },
            true
          );
        };

        this.getHeqApp = function(result, optionsString) {
          $rootScope.$emit("pageLoaded");
          optionsString += ",hidden=yes";
          var ref = cordova.InAppBrowser.open(result, "_blank", optionsString);
          ref.addEventListener("loaderror", function(error) {
            console.log(error);
          });
          ref.addEventListener("loadstart", function(event) {
            console.log(event.url);
            if (event.url.indexOf("heqmobile") === 0) {
              ref.close();
              window.open(event.url);
            }
          });
        };

        this.getSecureDesktopLink = function (url) {
          var bearerToken = null;
          var urlComponents = url.toLowerCase().split(':');
          var ssourl = urlComponents[0];
          var getHeaders = urlComponents[1];

          $rootScope.$emit('pageLoading');
          return loginService
            .getAuthorization()
            .then(function(authObject) {
              bearerToken = 'Bearer ' + authObject.accessToken;
              return $http.get(config.apiUrl + '/get-sso-json');
            })
            .then(function (result) {
              var headers = result.data[getHeaders];
              return $http({
                method: 'POST',
                url: config.bcbsWebMobileUrl + '/' + ssourl,
                headers: {
                  'Authorization': bearerToken,
                  'ssorelaystate': headers.ssorelaystate,
                  'Content-Type': 'application/x-www-form-urlencoded'
                }
              });
            })
            .then(function (result) {
              $rootScope.$emit('pageLoaded');
              return ('data:text/html;base64,' + btoa(result.data));
            })
            .catch(function(error) {
              console.warn('Error in SSO', error);
              $rootScope.$emit('pageLoaded');
            });
        };

        /**
         * Handles the SSO setup process.
         *
         * @memberof cordovaService
         * @method getSSO
         * @return {Promise} A promise that resolves to a SAML response.
         */
        this.setupSSO = function(url) {
          var self = this;
          var deferred = $q.defer();
          var dataObjIn = null;
          // Use components for dynamic SSO config
          var components = url
            .toLowerCase()
            .substr(4)
            .split(":");
          var vendor = components[0];
          var deepLink = components[1];

          // Step 1.  Get SSO Configuration from Blue Connect
          this.getSSOVendorData()

            // Step 2.  Get Secure Cookies
            .then(function() {
              $rootScope.$emit("pageLoading");
              return $http.get(
                self.getMobileURL(config.bcbsWebUrl) +
                  "/members/secure/index.htm"
              );
            })
            .then(
              function() {
                return true;
              },
              function() {
                return true;
              }
            )

            // Step 3.  Pass Through Convenience Method (if applicable)
            .then(function() {

              $rootScope.$emit("pageLoading");
              if (
                $rootScope.ssoData[vendor].technique === "convenience" ||
                $rootScope.ssoData[vendor].technique === "heq"
              ) {
                if (vendor === "vitals") {
                  dataObjIn = {
                    policyIndex: 0,
                    //urgentcareFlag: 'N',
                    //teleHealthVendor: 'MDLIVE',
                    //fundBalance: 'false',
                    urgentcareFlag: "",
                    teleHealthVendor: "",
                    fundBalance: "",
                    teleHealthRedirectURL:
                      "https://www.bcbsnc.com/members/secure/doctors/telehealth.htm"
                  };
                } else if (vendor === "prime"){
                  if ($rootScope.futurePolicy){
                    dataObjIn = {
                      policyIndex: 1
                    };
                  } else {
                    dataObjIn = {
                      policyIndex: 0
                    };
                  }
                } else {
                  dataObjIn = {
                    policyIndex: 0
                  };
                }

                var url = self.getMobileURL(
                  $rootScope.ssoData[vendor].urlList["configureUrl"]
                );

                return $http({
                  method: "POST",
                  url: url,
                  headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                  },
                  transformRequest: function(obj) {
                    var str = [];
                    for (var p in obj) {
                      str.push(
                        encodeURIComponent(p) + "=" + encodeURIComponent(obj[p])
                      );
                    }
                    return str.join("&");
                  },
                  data: dataObjIn
                });
              } else {
                return true;
              }
            })
            .then(
              function() {
                return true;
              },
              function() {
                return true;
              }
            )

            // Step 4.  Get SAML Response
            .then(function() {
              var url = null;
              $rootScope.$emit("pageLoading");

              url = self.getMobileURL(
                $rootScope.ssoData[vendor].urlList["linkUrl"]
              );

              if (deepLink) {
                url +=
                  "&Target=" +
                  $rootScope.ssoData[vendor].deepLinkList[deepLink];
              }

              return $http({
                method: "POST",
                url: url,
                headers: {
                  "Content-Type": "application/x-www-form-urlencoded"
                }
              });
            })

            // Step 5.  Send Output To InAppBrowser
            .then(function(result) {
              $rootScope.$emit("pageLoading");
              deferred.resolve("data:text/html;base64," + btoa(result.data));
            });

          return deferred.promise;
        };

        /**
         * @description Grabs the SSO vendor configuration data from Blue Connect.
         * @memberof cordovaService
         * @method getSSO
         * @return {Promise}
         */
        this.getSSOVendorData = function() {
          return $q(function(resolve, reject) {
            if ($rootScope.ssoData) {
              return resolve($rootScope.ssoData);
            }
            $http
              .get(config.bcbsWebUrl + "/members/secure/data/ssoVendors.json")
              .then(function(result) {
                $rootScope.ssoData = result.data;

                resolve(result.data);
              })
              .catch(reject);
          });
        };

        /**
         * @description Get the mobile version of a given URL.
         * @memberof cordovaService
         * @method getMobileURL
         * @return {String}
         */
        this.getMobileURL = function(url) {
          return url
            .replace(/(^https?:\/\/)(producer)/i, "$1mobile")
            .replace(/(^https?:\/\/)(www)/gi, "$1mobile");
        };

        /**
         * @description Retrieves the current app version and adds it to root scope.
         * @memberof cordovaService
         * @method getAppVersion
         * @return {Promise} A promise that resolves to function(version).
         */
        this.getAppVersion = getAppVersion;
        function getAppVersion() {
          if (typeof cordova === "undefined") {
            return $q.resolve(
              "not on real/emulated device, skipping version check"
            );
          }

          // wrapping in a $q promise because cordova promises are gross
          return $q(function(resolve, reject) {
            cordova
              .getAppVersion()
              .then(function(version) {
                $rootScope.appVersion = version;
                resolve(version);
              })
              .fail(reject);
          });
        }

        /**
         * @description Confirms that client side application version is valid.
         * @memberof cordovaService
         * @method verifyMinAppVersion
         * @return {Promise} A promise that resolves when client side application version is valid.
         */
        this.verifyMinAppVersion = function() {
          return $q(function(resolve, reject) {
            if (typeof cordova === "undefined") {
              // Get client application version
              return resolve(true);
            }

            getAppVersion()
              .then(function(version) {
                // Place call to Capra to verify application version
                return $http.post(config.capraApiUrl + "/version-validator", {
                  version: version
                });
              })
              .then(function(result) {
                if (result.data.valid) {
                  resolve(result.data);
                } else {
                  // If version is invalid, show modal that can not be closed
                  $rootScope.gotoView("/upgrade");
                }
              })
              .catch(reject);
          });
        };

        /**
         * Handles the SSO setup process.
         *
         * @memberof cordovaService
         * @method getSSO
         * @return {Promise} A promise that resolves to a SAML response.
         */
        this.setupSSOApp = function(url) {
          $rootScope.$emit("pageLoading");
          var urlComponents = url.toLowerCase().split(":");
          var ssourl = urlComponents[0];
          var getHeaders = urlComponents[1];
          var valuesReturn;
          return (
            $http
              .get(config.apiUrl + "/get-sso-json")
              .then(function(result) {
                valuesReturn = {
                  ssourl: ssourl,
                  headers: result.data[getHeaders]
                };
                return loginService.getAuthorization();
              })
              .then(function(authObject) {
                return $http({
                  method: "POST",
                  url: config.bcbsWebMobileUrl + "/mbsso",
                  headers: {
                    Authorization: 'Bearer ' + authObject.accessToken,
                    ssorelaystate: valuesReturn.headers.ssorelaystate,
                    "Content-Type": "application/x-www-form-urlencoded"
                  }
                });
              })
              .then(function() {
                return $http({
                  method: "POST",
                  url: config.heurl,
                  headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                  }
                });
              })
              .then(function(result) {
                $rootScope.$emit('pageLoaded');
                return "data:text/html;base64," + btoa(result.data);
              })
              .catch(function(error) {
                $rootScope.$emit('pageLoaded');
              })
          );
        };
      }
    ]);
})();
/**
 * Service for customer service hours.
 *
 * @namespace Services
 * @class customerServiceHours
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.customerServiceHours', [])
  .service('customerServiceHoursServices', [
    '$rootScope',
    function($rootScope) {
      /**
       * Names available for contacts
       *
       * @memberof customerServiceHoursServices
       * @memberof {object} getCustomerServiceHours
       */
      this.getCustomerServiceTitles = {
        servicesInfo: [{
          name:"customerservicenumber",
          title: $rootScope.loc.GENERAL_CUSTOMER_SERVICE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"ttytddnumber",
          title: $rootScope.loc.GENERAL_CUSTOMER_SERVICE_TTY,
          icon: "tty-icon",
          class: "tty-number",
          url: "/inbox/compose"
        },{
          name:"blueconnectsupport",
          title: $rootScope.loc.BLUE_CONNECT_SUPPORT,
          icon: "fc-phone-nocircle",
          class: "phone-number",
          url: "/inbox/compose"
        },{
          name:"dentalgridnumber",
          title: $rootScope.loc.DENTAL_SUPPORT_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"primemailnumber",
          title: $rootScope.loc.PRIME_MAIL_NUMBER,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"mentalhealthservicenumber",
          title: $rootScope.loc.MENTAL_HEALTH_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"locatenonncprovidernumber",
          title: $rootScope.loc.LOCATE_NON_NC_PROVIDER,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"providerservicenumber",
          title: $rootScope.loc.PROVIDER_SERVICE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"priorreviewcertificationnumber",
          title: $rootScope.loc.PRIOR_REVIEW_CUSTOMER_SERVICE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"wakemedhealthcontactnumber",
          title: $rootScope.loc.WAKE_MED,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"dukemedicinecontactnumber",
          title: $rootScope.loc.DUKE_HEALTH,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"nurselinenumber",
          title: $rootScope.loc.NURSE_SUPPORT,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"rxhelpdesknumber",
          title: $rootScope.loc.PRESCRIPTION_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"carolinashealthcaresystemcontactnumber",
          title: $rootScope.loc.CAROLINAS_HEATLHCARE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"billingpaymentsnumber",
          title: $rootScope.loc.BILLING_PAYMENTS_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"claimssupportnumber",
          title: $rootScope.loc.CLAIMS_SUPPORT_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"claimsbenefitsservicenumber",
          title: $rootScope.loc.CLAIMS_BENEFIT_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        },{
          name:"billingmembershipservicenumber",
          title: $rootScope.loc.BILLING_MEMBERSHIP_LINE,
          icon: "fc-phone-nocircle",
          class:"phone-number",
          url: "/inbox/compose"
        }]
      };


      /**
       * Hours available for customer service contacts
       *
       * @memberof customerServiceHoursServices
       * @memberof {object} getCustomerServiceHours
       *
       * Use '9999' for unknown hours expect Saturday and Sunday
       */
      this.getCustomerServiceHours = {
        servicesHours: [{
          number:"1-888-868-5527",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-709-7092",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-215-4069",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-446-8053",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-705-7050",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-471-2738",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-451-9957",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-351-8283",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-310-4110",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-291-1782",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-281-1785",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-247-4145",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-234-2416",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-206-4697",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-442-7028",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-627-3287",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-494-7647",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2000'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-275-9787",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-258-3334",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-866-916-3475",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2200'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-817-7044",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2300'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-755-0790",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-672-7897",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-672-6584",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1800'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-621-8876",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'2100'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-579-8022",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1700'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-324-4963",
          openEveryday: true,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-305-6638",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.TUESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.WEDNESDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.THURSDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.FRIDAY,open:'0800',close:'1900'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-412-6403",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-988-0059",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-713-7682",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-679-6272",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-484-5029",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-855-282-3517",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-817-6044",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-810-2583",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-422-1582",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-367-6143",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-274-5180",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-359-2422",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-214-4844",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-877-477-2424",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-274-5186",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-888-874-2807",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-672-9897",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-800-214-4484",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-919-350-2227",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        },{
          number:"1-919-385-0555",
          openEveryday: false,
          hours: [
            {day:$rootScope.loc.SUNDAY,open:'0000',close:'0000'},
            {day:$rootScope.loc.MONDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.TUESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.WEDNESDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.THURSDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.FRIDAY,open:'9999',close:'9999'},
            {day:$rootScope.loc.SATURDAY,open:'0000',close:'0000'},
          ]
        }]
      };
    }
  ]);
}());

/**
 * Service to get the provider data from summary.json api call.
 *
 * @namespace Services
 * @class findDoctorService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.findDoctor', [])
    .service('findDoctorService', [
      '$rootScope',
      'config',
      '$http',
      function($rootScope, config, $http) {
        var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

        /**
         *  
         *
         * @memberof findDoctorService
         * @method getDoctorDetails
         */
        this.getDoctorDetails = function(params) {
          return $http.get(url + '/find-doctor-by-zipcode?network_id=' + params.network_id + '&accountId=' + params.accountId + '&planName=' + params.planName + '&locationName=' + params.locationName + '&zipCode=' + params.zipCode + '&name=' + params.doctorName, { cache: false })
            .then(function(response) {
              console.log(response.data);
              return response.data;
            })
            .catch(function(error) {
              console.log(error);
              return error;
            });
        };

        this.changePcp = function(changeReq) {
          const changeurl = url + '/change-pcp?';
          changeReq = Object.keys(changeReq)
            .map(function(key) {
              return key + '=' + changeReq[key];
            })
            .join('&');
          return $http.get(changeurl + changeReq)
            .then(function(response) {
              return response.data;
            })
            .catch(function(error) {
              return error;
            });
        };

        this.changeMultiPcp = function(changeReq) {
          const changeurl = url + '/change-multi-pcp?';
          return $http
            .post(changeurl, changeReq)
            .then(function(response) {
              const changeRes = response.data.map(function(eachMember) {
                return {
                  updateSucceedStatus: eachMember.successIndicator === 'true' ? true : false,
                  dependentNumber: eachMember.applicationMessageText.slice(-2)
                };
              });
              return changeRes;
            })
            .catch(function(error) {
              return error;
            });
        };
      }
    ]);
}());

/**
 * Service for getting geo location.
 *
 * @namespace Services
 * @class geoLocationService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.geoLocation', [])
    .service('geoLocationService', [
      '$q',
      '$rootScope',
      '$http',
      '$window',
      'config',
      function($q, $rootScope, $http, $window, config) {
        var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;
        this.getLocation = function() {
          return $q(function(resolve, reject) {
            navigator.geolocation.getCurrentPosition(
              onGeoSuccess,
              onGeoErrorNotAvailable,
              { timeout: 15000, enableHighAccuracy: true }
            );

            // Function for user allowing location access.
            function onGeoSuccess(position) {
              $http
                .get(
                  url +
                    '/get-nearest-city?lat=' +
                    position.coords.latitude +
                    '&lng=' +
                    position.coords.longitude +
                    (
                      $rootScope.vitalsJWT && $rootScope.vitalsSignature ?
                        ('&signature=' + $rootScope.vitalsSignature.signature + '&jwt=' + $rootScope.vitalsJWT):
                        ''
                    )
                )
                .then(resolve)
                .catch(reject);
            }

            function onGeoErrorNotAvailable(error) {
              resolve('position not found');
            }
          });
        };

        this.openMaps = function(location) {
          if (device.platform == 'iOS') {
            $window.open('maps://?q=' + location, '_system');
          } else {
            $window.open('geo:0,0?q=' + location, '_system');
          }
        };

        // Function to get search area center zip code for search a doctor results Map View.
        this.getNearestCity = function (position) {
          return $http
            .get(
              url +
                '/get-nearest-city?lat=' +
                position.lat() +
                '&lng=' +
                position.lng()
            )
            .then(function(response) {
              var nearestCity = response.data;
              nearestCity.cityFullName = nearestCity.city + ', ' + nearestCity.state_code + ' - ' + nearestCity.zip;
              return nearestCity;
            })
            .catch(function(error) {
              return error;
            });
        };

        // Function to get search area center zip code for search a doctor results Map View.
        this.getNearestCityByZip = function (zipCode) {
          return $http.get(url + '/get-nearest-city-by-zip?zip=' + zipCode)
            .then(function(response) {
              var centerLatLng = {
                lat: +response.data.lat,
                lng: +response.data.lng
              };
              return centerLatLng;
            })
            .catch(function(error) {
              return error;
            });
        };
      },
    ]);
})();

/**
 * Service for google maps api.
 *
 * @namespace Services
 * @class googleMapsService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.googleMaps', [])
  .service('googleMapsService', [
    '$rootScope',
    'config',
    function($rootScope, config) {
      var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

      /**
       * load 
       *
       * @memberof googleMapsService
       * @method getGoogleMapsApi
       */
      this.getGoogleMapsApi = function() {
        $.get(url + '/get-google-maps')
          .done(function( response ) {
            var googleMapsScript = document.createElement("script");
            googleMapsScript.type = "text/javascript";
            googleMapsScript.innerHTML = response;
            $("head").append(googleMapsScript);
            $rootScope.mapsReady = true;
          })
          .fail(function( error ) {
            return error;
          });
      };
    }
  ]);
}());

/**
 * Service for showing a help modal.
 *
 * @namespace Services
 * @class helpService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.help', [])
    .service('helpService', [
      '$rootScope',
      function($rootScope) {
        /**
         * Shows a help modal. it should use the name attribute to pull the correct html
         *
         * @memberof helpService
         * @method showHelp
         * @param  {String}  fileName  The name of the html file to display in the help modal.
         */

        this.showHelp = function(fileName, data) {

          $rootScope.helpModal = {
            helpPath: fileName + '.html',
            data: data
          };

          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;

          angular.element('.help-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);

          // start help body at top of scroll window each time it is opened
          angular.element('.help-modal').find('.modal-body').scrollTop(0);
        };

        this.help = function(info) {
          $rootScope.helpModal = {
            helpIn: info
          };
          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;

          angular.element('.help-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);
          // start help body at top of scroll window each time it is opened
          angular.element('.help-modal').find('.modal-body').scrollTop(0);
        };

        this.terms = function(info) {
          $rootScope.termsModal = {
            termsIn: info
          };
          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;

          angular.element('.terms-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);
          // start help body at top of scroll window each time it is opened
          angular.element('.terms-modal').find('.modal-body').scrollTop(0);
        };

        /**
         * Shows a image in full screen.
         *
         * @memberof helpService
         * @method imageFullScreen
         * @param  {String}  image  The image to display the fullScreen image.
         */

        this.imageFullScreen = function(image) {
          $rootScope.fullScreen = {
            imageIn: image
          };
          angular.element('.header-container').css('z-index', 6);
          angular.element('.navbar').toggleClass('blur', true);
          $rootScope.blurContent = true;
          angular.element('.full-screen-modal').modal('show');
          angular.element('.modal-backdrop').css('z-index', 1000);
        };
      }
    ]);
}());

/**
 * Services for the retrieval and setting of language.
 *
 * @namespace Services
 * @class inquiryService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.inquiry', [])
  .service('inquiryService', [function() {

    /**
     * Returns the IDs of currently availalable inquiry types.
     *
     * @memberof inquiryService
     * @method getInquiryTypes
     * @return {Array} Available inquiry type IDs
     */
    this.getInquiryTypes = function(state) {
      if (state) {
        return [
          'ID_CARD_ISSUE',
          'CLAIMS',
          'WEBSITE_ISSUE',
          'BENEFITS_COVERAGE',
          'OTHER_ISSUE'
        ];
      } else {
        return [
          'ID_CARD_ISSUE',
          'PREMIUM_PAYMENT',
          'CLAIMS',
          'WEBSITE_ISSUE',
          'PRESCRIPTIONS',
          'BENEFITS_COVERAGE',
          'OTHER_ISSUE'
        ];
      }
    };

    /**
     * Returns the Salesforce string for inquiry type.
     *
     * @memberof inquiryService
     * @method getSalesforceInquiryType
     * @param  {String} uid The unique ID of the inquiry type
     * @return {String} The Salesforce string
     */
    this.getSalesforceInquiryType = function(uid) {
      switch(uid) {
        case 'ID_CARD_ISSUE':
          return 'ID Card Issue';
        case 'PREMIUM_PAYMENT':
          return 'Premium Payment';
        case 'CLAIMS':
          return 'Claims';
        case 'WEBSITE_ISSUE':
          return 'Website Issue';
        case 'PRESCRIPTIONS':
          return 'Prescriptions';
        case 'BENEFITS_COVERAGE':
          return 'Benefits/Coverage';
        case 'OTHER_ISSUE':
          return 'Other Issue';
        case 'CANCEL_POLICY':
          return 'Cancel Policy';
        default:
          return uid;
      }
    };

    /**
     * Returns the displayable name for an inquiry type.
     *
     * @memberof inquiryService
     * @method getDisplayName
     * @param  {String} uid The unique ID of the inquiry type
     * @return {String} The displayable name
     */
    this.getDisplayName = function(uid) {
      switch(uid) {
        case 'ID_CARD_ISSUE':
          return 'ID Card Issue';
        case 'PREMIUM_PAYMENT':
          return 'Premium Payment';
        case 'CLAIMS':
          return 'Claims';
        case 'WEBSITE_ISSUE':
          return 'Website Issue';
        case 'PRESCRIPTIONS':
          return 'Prescriptions';
        case 'BENEFITS_COVERAGE':
          return 'Benefits/Coverage';
        case 'OTHER_ISSUE':
          return 'Other Issue';
        case 'CANCEL_POLICY':
          return 'Cancel Policy';
        default:
          return uid;
      }
    };
  }]);
}());

/**
 * Services for the retrieval and setting of language.
 *
 * @namespace Services
 * @class languageService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.language', [
    'bcbsnc.cloud.services.rest'
  ])
  .service('languageService', [
    '$q',
    '$rootScope',
    'restService',
    function($q, $rootScope, restService) {
      $rootScope.loc = $rootScope.loc || {};
      /**
      * The current language.
      *
      * @memberof languageService
      * @member {String} language
      */
      this.language = 'en';

      /**
       * Sets the language of the app. If no language is provided, retrieves the default language.
       *
       * @memberof languageService
       * @method setLanguage
       * @param  {String} [lang] i18n language code
       * @return {Promise} A promise that resolves to function(language)
       */
      this.setLanguage = function(lang) {
        var self = this;
        lang = lang || self.getDefaultLanguage().substr(0, 2);
        self.language = lang;
        $rootScope.$emit('languageChanged', {lang: lang});
        return $q.resolve(lang);
      };

      /**
       * Retrieves the default language from the phone or browser.
       *
       * @memberof languageService
       * @method getDefaultLanguage
       * @return {Promise} A promise that resolves to function(language)
       */
      this.getDefaultLanguage = function() {
        return navigator.language.substr(0, 2);
      };

      /**
       * Retrieves the locale object for the provided language from the data service.
       *
       * @memberof languageService
       * @method getLocale
       * @param  {String} lang i18n language code
       * @return {Promise} A promise that resolves to function(locale)
       */
      this.getLocale = function(lang) {
        return restService.getData('locale', lang, {loggedIn : $rootScope.loggedIn});
      };

      /**
       * Retrieves the internal (offline) locale object for the provided language.
       *
       * @memberof languageService
       * @method getInternalLocale
       * @param  {String} lang i18n language code
       * @return {Object} The internal locale
       */
      this.getInternalLocale = function(lang) {
        lang = lang || this.language;
        var internalLocale = {
          en: {
            LOG_IN: 'Log In',
            REGISTER: 'Register',
            LOG_IN_FIND_A_MED_SERVICE_LINK: 'Find a Doctor, Drug or Facility',
            MENU_FIND_A_MED_SERVICE_LINK: 'Find a Doctor | Drug | Facility',
            DISTANCE_AND_ZIP_CODE: 'Distance and ZIP Code',
            DISTANCE: 'Distance',
            FIND_CARE_NAME: 'Name',
            FIND_CARE_ADDRESS: 'Address',
            FROM_ZIP_CODE: 'From ZIP Code',
            FROM_CITY_COUNTY_OR_ZIP_CODE: 'From City, County, or ZIP Code',
            ERROR_MUST_BE_NC_ZIP_CODE: 'Must be NC ZIP Code',
            ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE: 'Must be a NC City, County, or ZIP Code',
            ERROR_ZIP_CODE_MUST_BE_5_DIGITS: 'ZIP Code must be 5 digits',
            ERROR_REQUIRED: 'Required',
            ERROR_LOCATION_NOT_FOUND: 'Location not found. Please try again.',
            ERROR_ENTER_ZIP_CODE: 'Your current location cannot be found. Please enter a ZIP Code.',
            ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE: 'Your current location cannot be found. Please enter a City, County or ZIP Code.',
            SHARE: 'Share',
            HEALTH_PLAN: 'Health Plan:',
            MILES: 'Miles',
            ENGLISH: 'English',
            ESPANOL: 'Español',
            USER_ID: 'User ID',
            REMEMBER: 'Remember?',
            PASSWORD: 'Password',
            FORGOT: 'Forgot?',
            FORGOT_PASSWORD: 'Forgot your password?',
            STAY_LOGGED_IN: 'Keep me logged in for 75 days',
            OK: 'OK',
            CANCEL: 'Cancel',
            CONTINUE: 'Continue',
            EXTERNAL_LINK: 'Open Web Link',
            EXTERNAL_LINK_WARNING: 'You are leaving Blue Connect Mobile. Would you like to continue?',
            LOGIN_INVALID: 'Please enter a valid user ID and Password',
            NETWORK_ERROR: 'Network Error',
            ERROR_NETWORK_BADCONNECTION: 'No Network Connection',
            NETWORK_ERROR_MESSAGE: 'We\'re experiencing technical difficulties. Please check your internet connection and try again.',
            SERVICE_ERROR_MESSAGE: 'Sorry, we\'re experiencing technical difficulties. Would you like to go back to your Home Page?',
            HELP: 'Help',
            CONFIRM_FINGERPRINT: 'Confirm Your Fingerprint',
            ENABLE_TOUCH_ID: 'Enable Touch ID',
            ENABLE_FACE_ID: 'Enable Face ID',
            ENABLE_FINGERPRINT_AUTH: 'Enable Fingerprint ID',
            SETTINGS_LOGIN_KEY_TOUCH_ID: 'Touch ID',
            SETTINGS_LOGIN_KEY_FACE_ID: 'Face ID',
            FINGERPRINT_AUTH: 'Fingerprint ID',
            ERROR_NOT_ACCESSIBLE: 'Blue Connect Mobile is not accessible at this time. We apologize for the inconvenience.',
            ERROR_CAN_LOGIN_NO_CLAIMS_BENEFITS: 'Some areas of Blue Connect Mobile are unavailable due to technical issues. Thank you for your patience.',
            ERROR_MAINTENANCE: 'Blue Connect Mobile is scheduled for maintenance ',
            ERROR_MAINTENANCE_LINE2: ' and may be unavailable during that time. We apologize for the inconvenience.',
            ERROR_SELECT_FROM_DROPDOWN_LIST: 'You must select a location from the drop-down list.',
          }, es: {
            LOG_IN: 'Ingresar',
            REGISTER: 'Registrarse',
            LOG_IN_FIND_A_MED_SERVICE_LINK: 'Encuentre un médico,medicamento o establecimiento',
            MENU_FIND_A_MED_SERVICE_LINK: 'Encuentre un médico | medicamento | establecimiento médico',
            DISTANCE_AND_ZIP_CODE: 'Distancia y código postal',
            DISTANCE: 'Distancia',
            FIND_CARE_NAME: 'Nombre',
            FIND_CARE_ADDRESS: 'Dirección',
            FROM_ZIP_CODE: 'Desde el código postal',
            FROM_CITY_COUNTY_OR_ZIP_CODE: 'De ciudad, condado o código postal',
            ERROR_MUST_BE_NC_ZIP_CODE: 'Debe ser un código postal de Carolina del Norte',
            ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE: 'Debe ser una ciudad, condado o código postal de Carolina del Norte',
            ERROR_ZIP_CODE_MUST_BE_5_DIGITS: 'El código postal debe tener cinco dígitos',
            ERROR_REQUIRED: ' Información requerida',
            ERROR_LOCATION_NOT_FOUND: 'Ubicación no encontrada. Inténtalo de nuevo por favor.',
            ERROR_ENTER_ZIP_CODE: 'Your current location cannot be found. Please enter a ZIP Code.',
            ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE: 'No se puede encontrar su ubicación actual. Introduzca una ciudad, condado o código postal.',
            SHARE: 'Compartir',
            HEALTH_PLAN: 'Seguro médico:',
            MILES: 'Millas',
            ENGLISH: 'English',
            ESPANOL: 'Español',
            USER_ID: 'Identificación del usuario:',
            REMEMBER: '¿Recuerda?',
            PASSWORD: 'Contraseña',
            FORGOT: '¿La olvidó?',
            FORGOT_PASSWORD: '¿Olvidaste tu contraseña?',
            STAY_LOGGED_IN: 'Mantener mi sesión iniciada durante 75 días',
            OK: 'Aprobado',
            CANCEL: 'Cancelar',
            CONTINUE: 'Continuar',
            ID_CARD_VIEWING_CARD: 'Vea tarjeta',
            EXTERNAL_LINK: 'Abrir enlace de la red',
            EXTERNAL_LINK_WARNING: 'Usted está saliendo de Blue Connect Mobile. ¿Le gustaría continuar?',
            LOGIN_INVALID: 'Introduzca un ID y una contraseña válidos',
            NETWORK_ERROR: 'Error de Red',
            ERROR_NETWORK_BADCONNECTION: 'No hay conexión con la red',
            NETWORK_ERROR_MESSAGE: 'Estamos experimentando dificultades técnicas. Comprueba tu conexión a Internet y vuelve a intentarlo.',
            HELP: 'Ayuda',
            CONFIRM_FINGERPRINT: 'Confirmar su huella digital',
            ENABLE_TOUCH_ID: 'Activar Touch ID',
            ENABLE_FACE_ID: 'Activar Face ID',
            ENABLE_FINGERPRINT_AUTH: 'Activar indentificación de huella digital',
            SETTINGS_LOGIN_KEY_TOUCH_ID: 'Touch ID',
            SETTINGS_LOGIN_KEY_FACE_ID: 'Face ID',
            FINGERPRINT_AUTH: 'ID de huella digital',
            ERROR_NOT_ACCESSIBLE: 'Blue Connect móvil no está disponible en este momento. Lamentamos la inconveniencia que esto pueda causar.',
            ERROR_CAN_LOGIN_NO_CLAIMS_BENEFITS: 'Algunas áreas de la aplicación Blue Connect Mobile no están disponibles debido a problemas técnicos. Gracias por su paciencia.',
            ERROR_MAINTENANCE: 'Blue Connect Mobile tiene programado mantenimiento para el ',
            ERROR_MAINTENANCE_LINE2: ' y es posible que no esté disponible durante esas horas. Nos disculpamos por los inconvenientes que esta situación pueda causar.',
            ERROR_SELECT_FROM_DROPDOWN_LIST: 'Usted debe seleccionar una ubicación de la lista desplegable.',
          }
        };

        return internalLocale[lang.toLowerCase()];
      };
    }
  ]);
}());

/**
 * @description Service for live chat data.
 * @namespace Services
 * @class livechatService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.livechat', [])
    .factory('livechatService', [
      '$window',
      'config',
      'languageService',
      'policyService',
      '$rootScope',
      'alertService',
      function($window, config, languageService, policyService, $rootScope, alertService) {
        var chatMemberIdentifier = getChatMemberIdentifier();
        var memberInitializedLiveChat = false;
        var chatButtons = config.liveagent.authButtons;
        var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

        return {
          memberHasLiveChat: memberHasLiveChat,
          getChatMemberIdentifier: getChatMemberIdentifier,
          getChatButtons: getChatButtons,
          alert: alert,
          openChat: openChat,
          removeLivechat: removeLivechat,
          reloadLivechat: reloadLivechat,
          disconnectLiveChat: disconnectLiveChat,
          registerButton: registerButton,
        };

        function disconnectLiveChat() {
          window.liveagent.disconnect();
          removeLivechat();
        }

        /*remove live agent*/
        function removeLivechat() {
          var scripts = document.getElementsByTagName('script');
          for (var i = 0; i < scripts.length; i++) {
            var src = scripts[i].getAttribute('src');
            if (src && src.includes('livechatDeployment.js')) {
              scripts[i].remove();
            }
          }

          delete window.liveagent;
          delete window.liveAgentDeployment;
        }

        /* reload the script for live chat*/
        function reloadLivechat() {
          var script= document.createElement('script');
          script.type = 'text/javascript';
          script.src= 'js/livechatDeployment.js';
          $("head").append(script);
        }

        function registerButton(button, index){
          if (index === 1){
            $window.liveagent.showWhenOnline($(button).attr('token'), button, false);
          } else {
            $window.liveagent.showWhenOffline($(button).attr('token'), button, false);
          }
        }

        function openChat(buttonToken) {
          var TIPData = $rootScope.getTIPData();
         
          TIPData.ruid = $rootScope.analyticsInfo.info2;
          TIPData.userId = $rootScope.analyticsInfo.info3;

          $window.liveagent.startChat(buttonToken);
          $.post(url + '/livechatstarted', TIPData);
        };

        function alert(){
          

          var confirm;
          alertService.showAlert(
            $rootScope.loc.LIVE_CHAT_CHAT_NOT_AVAILABLE,
            '<div class="home-card-chat-dialog"><p class="home-card-chat-dialog-heading">' + $rootScope.loc.LIVE_CHAT_CHAT_CURRENTLY_NOT_AVAILABLE + '</p>' + $rootScope.loc.LIVE_CHAT_CHAT_NOT_AVAILABLE_PROMPT + '</div>',
            {
              title: $rootScope.loc.OK
            }, confirm, "dark"
          );
        }

        function memberHasLiveChat() {
          return Boolean(getChatMemberIdentifier());
        }

        function getChatButtons() {
          var language = languageService.getDefaultLanguage();
          if (getChatMemberIdentifier()){
            return chatButtons[getChatMemberIdentifier()][language];
          } else {
            return {};
          }
        }

        function getChatMemberIdentifier() {
          var selectedPolicy = policyService.getSelectedPolicy();
          if (!selectedPolicy) {
            return false;
          }
          if (selectedPolicy.individual && selectedPolicy.sourceSystem.toLowerCase() === 'facets') {
            chatMemberIdentifier = 'iu65';
          }
          if (selectedPolicy.state) {
            chatMemberIdentifier = 'shp';
          }
          if (selectedPolicy.sourceSystem === 'Amisys') {
            chatMemberIdentifier = 'medicare';
          }
          if (
            $rootScope.signature &&
            $rootScope.signature.get($rootScope.policyIndex).isSignatureService
          ) {
            chatMemberIdentifier = 'signature';
          }
          return chatMemberIdentifier;
        }
      }
    ]);
}());
(function() {
    function Ba(a) {
        switch (a) {
            case "'":
                return "\x26#39;";
            case "\x26":
                return "\x26amp;";
            case "\x3c":
                return "\x26lt;";
            case "\x3e":
                return "\x26gt;";
            case '"':
                return "\x26quot;";
            case "\u00a9":
                return "\x26copy;";
            case "\u2028":
                return "\x3cbr\x3e";
            case "\u2029":
                return "\x3cp\x3e";
            default:
                return a
        }
    }

    function l() {}

    function t() {}

    function la(a) {
        l.prototype.init.call(this, a, l.TYPE.STANDARD)
    }

    function ma(a) {
        k[a] || (k[a] = new la(a));
        return k[a]
    }

    function S(a, b) {
        l.prototype.init.call(this, b + "_" + a, l.TYPE.AGENT)
    }

    function L(a,
        b) {
        var c = b + "_" + a;
        if (!k[c]) {
            var e = new S(a, b),
                d;
            k[a] && (d = k[a], d.endpoint && e.setEndpoint(d.endpoint), d.prechat && e.setPrechat(d.prechat), d.language && e.setLanguage(d.language), e.setOnlineState(d.onlineState));
            k[c] = e
        }
        return k[c]
    }

    function T(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function U(a, b) {
        t.prototype.init.call(this, a, b)
    }

    function n(a) {
        l.prototype.init.call(this, a, l.TYPE.INVITE);
        this.active = !1;
        this.filterLogic = null;
        this.rules = {};
        this.autoRejectTimeout = this.inviteTimeout = this.inviteDelay = this.ruleTree =
            null
    }

    function u(a) {
        k[a] || (k[a] = new n(a));
        return k[a]
    }

    function A(a, b, c, e, d, g, C, y) {
        t.prototype.init.call(this, a, b);
        this.hasInviteAfterAccept = g;
        this.hasInviteAfterReject = C;
        this.rejectTime = y;
        null !== f.getCssAnimation(b) || "Custom" == c ? this.renderer = new n.RENDERER[c].renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d]) : this.renderer = new n.RENDERER.Appear.renderClass(a, b, n.START_POSITION[e], n.END_POSITION[d])
    }

    function D(a) {
        return u(a) ? u(a).getTracker() : null
    }

    function r() {}

    function J(a, b, c, e) {
        r.prototype.init.call(this,
            a, b, c, e)
    }

    function K(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function M(a, b, c, e) {
        r.prototype.init.call(this, a, b, null, e)
    }

    function E(a, b, c, e) {
        E.prototype.init.call(this, a, b, null, null)
    }

    function h() {}

    function N(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function O(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function V(a, b, c, e, d) {
        h.prototype.init.call(this, a, b, c, e, d)
    }

    function F(a) {
        na++;
        if (1E3 < na) throw Error("Error processing rule filter logic, preventing recursion");
        for (var b = 0, c = 0, e =
                0; e < a.length; e++) "(" == a.charAt(e) ? c++ : ")" == a.charAt(e) && c--, "," == a.charAt(e) && 1 == c && (b = e);
        if (0 == a.indexOf("AND(")) return c = F(a.substring(4, b)), a = F(a.substring(b + 1, a.length - 1)), new W(c, a);
        if (0 == a.indexOf("OR(")) return c = F(a.substring(3, b)), a = F(a.substring(b + 1, a.length - 1)), new X(c, a);
        if (0 == a.indexOf("NOT(")) return c = F(a.substring(4, a.length - 1)), new Y(c);
        if (!isNaN(parseInt(a, 10))) return new Z(parseInt(a, 10));
        throw Error("Encountered unexpected character in filter logic");
    }

    function z() {}

    function Z(a) {
        this.ruleId =
            a;
        z.prototype.init.call(this, null, null)
    }

    function W(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function X(a, b) {
        z.prototype.init.call(this, a, b)
    }

    function Y(a) {
        z.prototype.init.call(this, a, null)
    }

    function Ca(a, b, c, e) {
        var d = document.createElement("div");
        d.id = "liveagent_invite_button_" + a;
        var g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.position = "absolute";
        g.style.right = "-20px";
        g.style.top = "-20px";
        g.src = f.addPrefixToURL(m.contentServerUrl, m.urlPrefix, !0) + "/images/x.png";
        f.addEventListener(g,
            "click",
            function() {
                p.rejectChat(a)
            });
        d.appendChild(g);
        g = document.createElement("img");
        g.style.cursor = "pointer";
        g.style.clear = "right";
        g.src = b;
        g.width = c;
        g.height = e;
        f.addEventListener(g, "click", function() {
            p.startChat(a)
        });
        d.appendChild(g);
        document.body.appendChild(d);
        return d
    }

    function oa(a, b, c) {
        "undefined" == typeof c && (c = !0);
        this.getLabel = function() {
            return a
        };
        this.getValue = function() {
            return b
        };
        this.getDisplayToAgent = function() {
            return c
        };
        var e = new aa;
        this.getMapper = function() {
            return e
        };
        this.doKnowledgeSearch = !1;
        this.getDoKnowledgeSearch = function() {
            return this.doKnowledgeSearch
        };
        this.setDoKnowledgeSearch = function() {
            this.doKnowledgeSearch = !0
        }
    }

    function aa() {
        var a = [],
            b = [];
        this.getEntityMaps = function() {
            return a
        };
        this.getTranscriptFields = function() {
            return b
        }
    }

    function pa(a, b, c, e, d) {
        this.getEntityName = function() {
            return a
        };
        this.getFieldName = function() {
            return b
        };
        this.getFastFill = function() {
            return c
        };
        this.getAutoQuery = function() {
            return e
        };
        this.getExactMatch = function() {
            return d
        }
    }

    function qa(a) {
        this.saveToTranscript =
            "";
        this.showOnCreate = !1;
        this.linkToEntityField = this.linkToEntityName = "";
        var b = new ra;
        this.getEntityName = function() {
            return a
        };
        this.getSaveTranscript = function() {
            return this.saveTranscript
        };
        this.getShowOnCreate = function() {
            return this.showOnCreate
        };
        this.getLinkToEntityName = function() {
            return this.linkToEntityName
        };
        this.getLinkToEntityField = function() {
            return this.linkToEntityField
        };
        this.getEntityMapper = function() {
            return b
        };
        this.setSaveTranscript = function(a) {
            this.saveTranscript = a
        };
        this.setShowOnCreate = function(a) {
            this.showOnCreate =
                a
        };
        this.setLinkToEntityName = function(a) {
            this.linkToEntityName = a
        };
        this.setLinkToEntityField = function(a) {
            this.linkToEntityField = a
        }
    }

    function ra() {
        var a = [];
        this.getEntityFieldsMaps = function() {
            return a
        }
    }

    function sa(a, b, c, e, d) {
        this.getFieldName = function() {
            return a
        };
        this.getLabel = function() {
            return b
        };
        this.getDoFind = function() {
            return c
        };
        this.getIsExactMatch = function() {
            return e
        };
        this.getDoCreate = function() {
            return d
        }
    }

    function P() {
        if (!ta) {
            ta = !0;
            f.log("DOM is ready. Setting up environment.");
            null == v.getOref() &&
                v.setOref(document.referrer);
            null == v.getVisitCount() && v.setVisitCount(1);
            if (window._laq)
                for (var a = 0; a < window._laq.length; a++) window._laq[a].call(window);
            q.connection.setCallback("liveagent._.handlePing");
            ua()
        }
    }

    function ua() {
        var a = [],
            b = {};
        ba && (b.chatted = 1);
        x ? (b.sid = x, f.log("Reusing existing session.")) : (a.push(new q.Noun("VisitorId")), f.log("Requesting new session."));
        a.push(new q.Noun("Settings", {
            buttonIds: "[" + va() + "]",
            updateBreadcrumb: 1,
            urlPrefix: m.urlPrefix
        }));
        q.connection.send(a, b)
    }

    function wa(a,
        b) {
        b.endpointUrl && a.setEndpoint(b.endpointUrl);
        b.prechatUrl && a.setPrechat(b.prechatUrl);
        b.language && a.setLanguage(b.language);
        a.setOnlineState(b.isAvailable)
    }

    function Da() {
        if (q.connection.isRunning())
            if (null == x || ca) ca = !1, ua();
            else {
                f.log("Pinging server to keep presence");
                Q = null;
                var a = {};
                a.sid = x;
                ba && (a.chatted = 1);
                a.r = (new Date).getMilliseconds();
                var b = [new q.Noun("Availability", {
                    ids: "[" + va() + "]"
                })];
                q.connection.send(b, a)
            }
    }

    function da() {
        f.log("Disconnecting from Live Agent");
        q.connection.setIsRunning(!1);
        for (var a in k) k.hasOwnProperty(a) && k[a].setOnlineState(!1)
    }

    function va() {
        var a = [],
            b = {},
            c;
        for (c in k) k.hasOwnProperty(c) && k[c].getType() == l.TYPE.STANDARD && (b[c] = k[c]);
        for (var e in b) a.push(e);
        var b = {},
            d;
        for (d in k) k.hasOwnProperty(d) && k[d].getType() == l.TYPE.AGENT && (b[d] = k[d]);
        for (e in b) a.push(e);
        d = {};
        for (var g in k) k.hasOwnProperty(g) && k[g].getType() == l.TYPE.INVITE && (d[g] = k[g]);
        for (e in d) a.push(e);
        e = "";
        for (g = 0; g < a.length; g++) e += a[g], g < a.length - 1 && (e += ",");
        return e
    }

    function xa(a, b, c, e) {
        document.cookie =
            "liveagent_chatted\x3d1;path\x3d/;";
        ba = !0;
        var d;
        d = "deployment_id\x3d" + m.deploymentId;
        d = d + "\x26org_id\x3d" + m.orgId;
        d += "\x26button_id\x3d";
        d += a;
        c && (d += "\x26agent_id\x3d", d += c);
        e && (d += "\x26do_fallback\x3d1");
        d += "\x26session_id\x3d";
        d += x;
        a = c ? k[c + "_" + a].getEndpoint(d) : k[a].getEndpoint(d);
        c = "height\x3d" + m.chatWindowHeight;
        c = c + ",width\x3d" + m.chatWindowWidth;
        c += ",menubar\x3dno";
        c += ",toolbar\x3dno";
        c += ",location\x3dno";
        c += ",personalbar\x3dno";
        Ea(b, a)
    }
    
    function Ea(a, b) {
        function c(a, b, c) {
            var input =
                document.createElement("input");
                input.name = b;
                input.setAttribute('value', c);
                input.id = b;
            a.appendChild(input);
        }
        var e = v.getVisitCount();
        // null == e && (e = "0");
        e = e || '0';
        var d = document.createElement("form");
        d.style.display = "none";
        c(d, "deploymentId", m.deploymentId);
        c(d, "orgId", m.orgId);
        c(d, "vc", e);
        c(d, "sid", x);
        c(d, "ptid", v.getPermanentId());
        c(d, "det", f.jsonEncode(ya));
        c(d, "oref", v.getOref());
        c(d, "pages", f.jsonEncode(B.getPages()));
        c(d, "sessionStart", (new Date).getTime() - B.getSessionStart());
        c(d, "ent", f.jsonEncode(za));
        ea && c(d, "visitorName", ea);
        d.method = "POST";
        d.setAttribute('id', 'livechat-form');
        d.action = b;
        d.target = a;

        var pageContent = '<html><head></head><body>' + d.outerHTML +
        '</body></html>';
        var pageContentUrl = 'data:text/html;base64,' + btoa(pageContent);

        var ref = cordova.InAppBrowser.open(       
            pageContentUrl,
            "_blank",
            "location=yes,hidenavigationbuttons=yes"
        );

        function eventCallBackFunction(){
            ref.executeScript({code: "document.getElementById('livechat-form').submit()"}, executecallback());
        }

        ref.addEventListener('loadstop', eventCallBackFunction, true);


        function executecallback() {
            ref.removeEventListener('loadstop', eventCallBackFunction, true);    
        }

            
    }

    function fa(a) {
        a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
    }

    function Aa(a) {
        a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
        da()
    }
    if (!window.liveAgentDeployment) {
        window.liveAgentDeployment = !0;
        var p = {};
        window.liveagent && (p = window.liveagent);
        window.liveagent = p;
        var f = {
                getCookie: function(a) {
                    var b = document.cookie,
                        c = b.indexOf(a + "\x3d");
                    if (-1 == c) return null;
                    c += (a + "\x3d").length;
                    a = b.indexOf(";", c); -
                    1 == a && (a = b.length);
                    return b.substring(c, a)
                },
                setCookie: function(a, b, c) {
                    a = a + "\x3d" + b + ";";
                    c && (c = new Date, c.setFullYear(c.getFullYear() + 10), a += "expires\x3d" + c.toGMTString() + ";");
                    document.cookie = a + "path\x3d/;"
                },
                addEventListener: function(a, b, c) {
                    if (a.addEventListener) a.addEventListener(b, c, !1);
                    else if (a.attachEvent) a.attachEvent("on" + b, c, !1);
                    else throw Error("Could not add event listener");
                },
                log: function(a) {
                    R && window.console && window.console.log && window.console.log("LIVE AGENT: " + a)
                },
                logGroupStart: function(a) {
                    R &&
                        window.console && (window.console.group ? window.console.groupCollapsed("LIVE AGENT: " + a) : f.log(a))
                },
                logGroupEnd: function() {
                    R && window.console && window.console.group && window.console.groupEnd()
                },
                getLanguage: function() {
                    return "undefined" != typeof window.navigator.language ? window.navigator.language : "undefined" != typeof window.navigator.userLanguage ? window.navigator.userLanguage : ""
                },
                arrayHasItem: function(a, b) {
                    if (Array.prototype.indexOf) return -1 < a.indexOf(b);
                    for (var c = 0; c < a.length; c++)
                        if (a[c] == b) return !0
                },
                jsonEncode: function(a,
                    b, c) {
                    function e(a) {
                        g.lastIndex = 0;
                        return g.test(a) ? '"' + a.replace(g, function(a) {
                            var b = f[a];
                            return "string" === typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                        }) + '"' : '"' + a + '"'
                    }

                    function d(a, b) {
                        var c, g, f, C, y = w,
                            k, h = b[a];
                        h && "object" === typeof h && "function" === typeof h.toJSON && (h = h.toJSON(a));
                        "function" === typeof m && (h = m.call(b, a, h));
                        switch (typeof h) {
                            case "string":
                                return e(h);
                            case "number":
                                return isFinite(h) ? String(h) : "null";
                            case "boolean":
                            case "null":
                                return String(h);
                            case "object":
                                if (!h) return "null";
                                w += l;
                                k = [];
                                if ("[object Array]" === Object.prototype.toString.apply(h)) {
                                    C = h.length;
                                    for (c = 0; c < C; c += 1) k[c] = d(c, h) || "null";
                                    f = 0 === k.length ? "[]" : w ? "[\n" + w + k.join(",\n" + w) + "\n" + y + "]" : "[" + k.join(",") + "]";
                                    w = y;
                                    return f
                                }
                                if (m && "object" === typeof m)
                                    for (C = m.length, c = 0; c < C; c += 1) "string" === typeof m[c] && (g = m[c], (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f));
                                else
                                    for (g in h) Object.prototype.hasOwnProperty.call(Object(h), g) && (f = d(g, h)) && k.push(e(g) + (w ? ": " : ":") + f);
                                f = 0 === k.length ? "{}" : w ? "{\n" + w + k.join(",\n" + w) + "\n" + y + "}" : "{" +
                                    k.join(",") + "}";
                                w = y;
                                return f
                        }
                    }
                    if ("undefined" !== typeof window.JSON) return window.JSON.stringify(a, b, c);
                    if (void 0 === a || null === a) return "null";
                    var g = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                        f = {
                            "\b": "\\b",
                            "\t": "\\t",
                            "\n": "\\n",
                            "\f": "\\f",
                            "\r": "\\r",
                            '"': '\\"',
                            "\\": "\\\\"
                        },
                        y, w = "",
                        l = "",
                        m = b;
                    if ("number" === typeof c)
                        for (y = 0; y < c; y += 1) l += " ";
                    else "string" === typeof c && (l = c);
                    if (b && "function" !== typeof b && ("object" !== typeof b || "number" !==
                            typeof b.length)) throw Error("Error during JSON.stringify");
                    return d("", {
                        "": a
                    })
                },
                jsonDecode: function(a) {
                    a = String(a);
                    if ("undefined" !== typeof window.JSON) return window.JSON.parse(a);
                    var b = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
                    b.lastIndex = 0;
                    b.test(a) && (a = a.replace(b, function(a) {
                        return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                    }));
                    if (/^[\],:{}\s]*$/.test(a.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
                            "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return eval("(" + a + ")");
                    throw Error("Error during JSON.parse");
                },
                getCssAnimation: function(a) {
                    var b = ["Webkit", "Moz", "O", "ms", "Khtml"];
                    if (void 0 !== a.style.animationName) return "";
                    for (var c = 0; c < b.length; c++)
                        if (void 0 !== a.style[b[c] + "AnimationName"]) return b[c].toLowerCase();
                    return null
                },
                addPrefixToURL: function(a, b, c) {
                    if (!f.isEmpty(a) && !f.isEmpty(b) && 0 !== a.indexOf(b)) {
                        c && (b = f.escapeToHtml(b));
                        var e = /(https?:\/\/)(.*)/i;
                        c = a.replace(e, "$1");
                        a = a.replace(e, "$2");
                        b = b.replace(e,
                            "$2");
                        a = c + b + "/" + a
                    }
                    return a
                },
                getDomainFromUrl: function(a) {
                    if (f.isEmpty(a)) return "";
                    var b;
                    ga || (ga = document.createElement("a"));
                    b = ga;
                    b.href = a;
                    a = a.match(/:(\d+)/g);
                    b = b.protocol + "//" + b.hostname || window.location.protocol + "//" + window.location.hostname;
                    return a ? b + a[0] : b
                },
                isEmpty: function(a) {
                    return null === a || void 0 === a || "" === a
                },
                escapeToHtml: function(a) {
                    return null === a || void 0 === a || "" === a ? "" : a = a.replace(/[&<>"'\u00a9\u2028\u2029]/g, Ba)
                },
                isValidEntityId: function(a) {
                    return a && "string" === typeof a && (18 === a.length ||
                        15 === a.length)
                },
                getKeyPrefix: function(a) {
                    return this.isValidEntityId(a) ? a.substr(0, 3) : null
                },
                isOrganizationId: function(a) {
                    return "00D" === this.getKeyPrefix(a)
                },
                isDeploymentId: function(a) {
                    return "572" === this.getKeyPrefix(a)
                },
                trim: function(a) {
                    return a && a.replace(/^[\s\u0000-\u0020]*|[\s\u0000-\u0020]*$/g, "") || ""
                }
            },
            ga, v = {
                getVisitCount: function() {
                    var a = parseInt(f.getCookie("liveagent_vc"), 10);
                    return isNaN(a) ? null : a
                },
                getOref: function() {
                    return f.getCookie("liveagent_oref")
                },
                getPermanentId: function() {
                    var a =
                        f.getCookie("liveagent_ptid");
                    return null != a ? a : ""
                },
                setVisitCount: function(a) {
                    f.setCookie("liveagent_vc", a, !0)
                },
                setOref: function(a) {
                    return f.setCookie("liveagent_oref", a, !0)
                },
                setPermanentId: function(a) {
                    f.setCookie("liveagent_ptid", a, !0)
                }
            },
            B = new function() {
                function a() {
                    return window.localStorage ? window.localStorage : window.sessionStorage
                }

                function b() {
                    var a = document.createElement("div");
                    a.style.display = "none";
                    document.body.appendChild(a);
                    a.id = "liveagent_userdata_provider";
                    a.addBehavior("#default#userData");
                    a.load("liveagent");
                    return {
                        getItem: function(b) {
                            return a.getAttribute(b)
                        },
                        setItem: function(b, c) {
                            a.setAttribute(b, c);
                            a.save("liveagent")
                        },
                        removeItem: function(b) {
                            a.removeAttribute(b);
                            a.save("liveagent")
                        }
                    }
                }

                function c() {
                    var a = {};
                    return {
                        getItem: function(b) {
                            return a[b]
                        },
                        setItem: function(b, c) {
                            a[b] = c
                        },
                        removeItem: function(b) {
                            delete a[b]
                        }
                    }
                }

                function e() {
                    g.setItem(d.SESSION_ID, x);
                    g.setItem(d.PAGE_COUNT, "0");
                    g.setItem(d.SESSION_START, (new Date).getTime().toString())
                }
                var d = {
                    SESSION_ID: "liveAgentSid",
                    PAGE_COUNT: "liveAgentPc",
                    SESSION_START: "liveAgentStart",
                    PAGE: "liveAgentPage_",
                    PAGE_TIME: "liveAgentPageTime_"
                };
                a.isSupported = function() {
                    try {
                        if (window.localStorage || window.sessionStorage) {
                            var a = window.localStorage ? window.localStorage : window.sessionStorage;
                            a.setItem("liveAgentTestKey", "1");
                            a.removeItem("liveAgentTestKey");
                            return !0
                        }
                        return !1
                    } catch (b) {
                        return !1
                    }
                };
                b.isSupported = function() {
                    return document.createElement("div").addBehavior
                };
                var g;
                g = a.isSupported() ? a() : b.isSupported() ? b() : c();
                this.init = function() {
                    if (g.getItem(d.SESSION_ID)) {
                        if (g.getItem(d.SESSION_ID) !=
                            x) {
                            g.removeItem(d.SESSION_START);
                            for (var a = g.getItem(d.PAGE_COUNT), b = 25 > a ? 0 : a - 25; b < a; b++) g.removeItem(d.PAGE + b), g.removeItem(d.PAGE_TIME + b);
                            e()
                        }
                    } else e();
                    a = parseInt(g.getItem(d.PAGE_COUNT), 10);
                    25 <= a && (g.removeItem(d.PAGE + (a - 25)), g.removeItem(d.PAGE_TIME + (a - 25)));
                    g.setItem(d.PAGE_COUNT, (a + 1).toString());
                    g.setItem(d.PAGE + a.toString(), window.location.href);
                    g.setItem(d.PAGE_TIME + a.toString(), (new Date).getTime())
                };
                this.getPageCount = function() {
                    return parseInt(g.getItem(d.PAGE_COUNT), 10)
                };
                this.getSessionStart =
                    function() {
                        return g.getItem(d.SESSION_START)
                    };
                this.getPages = function() {
                    for (var a = [], b = this.getPageCount(), c = 25 > b ? 0 : b - 25; c < b; c++) a.unshift({
                        location: g.getItem(d.PAGE + c.toString()),
                        time: ((new Date).getTime() - parseInt(g.getItem(d.PAGE_TIME + c.toString()), 10)).toString()
                    });
                    return a
                };
                this.getCurrentPage = function() {
                    return g.getItem(d.PAGE + (this.getPageCount() - 1).toString())
                };
                this.clear = function() {
                    g.clear()
                }
            };
        l.TYPE = {
            STANDARD: "STANDARD",
            INVITE: "INVITE",
            AGENT: "AGENT"
        };
        l.EVENT = {
            BUTTON_AVAILABLE: "BUTTON_AVAILABLE",
            BUTTON_UNAVAILABLE: "BUTTON_UNAVAILABLE",
            BUTTON_ACCEPTED: "BUTTON_ACCEPTED",
            BUTTON_REJECTED: "BUTTON_REJECTED"
        };
        l.prototype.init = function(a, b) {
            this.buttonId = a;
            this.type = b;
            this.onlineState = null;
            this.trackers = [];
            this.language = this.prechat = this.endpoint = null
        };
        l.prototype.getType = function() {
            return this.type
        };
        l.prototype.getOnlineState = function() {
            return this.onlineState
        };
        l.prototype.setOnlineState = function(a) {
            this.onlineState = a;
            for (var b = 0; b < this.trackers.length; b++) this.trackers[b].setState(a)
        };
        l.prototype.addTracker =
            function(a) {
                this.trackers.push(a)
            };
        l.prototype.setPrechat = function(a) {
            this.prechat = a
        };
        l.prototype.setEndpoint = function(a) {
            this.endpoint = a
        };
        l.prototype.getEndpoint = function(a) {
            function b() {
                var b = m.contentServerUrl,
                    c = m.urlPrefix;
                if (null == b) throw Error("You cannot call liveagent.startChat until the asynchronous call to liveagent.init has completed!");
                m.contentServerUrl = f.addPrefixToURL(b, c, !0);
                b = this.endpoint;
                b = !f.isEmpty(b) && -1 < f.getDomainFromUrl(b).indexOf("force") ? f.addPrefixToURL(b, c, !0) : b;
                this.endpoint =
                    b;
                b = (null != this.endpoint ? this.endpoint : m.contentServerUrl + m.chatPage) + "?language\x3d" + (this.language ? this.language : "");
                f.isEmpty(c) || (b += "\x26proxy\x3d" + c + "\x26proxyKey\x3d" + m.prefixKey + "\x26org_id\x3d" + m.orgId + "\x26deployment_id\x3d" + m.deploymentId);
                return b += "#" + a
            }
            var c = null,
                c = null == this.prechat ? b.call(this) : this.prechat + "?endpoint\x3d" + encodeURIComponent(b.call(this));
            return m.contentServerUrl + m.prechatHandler + "?endpoint\x3d" + encodeURIComponent(c)
        };
        l.prototype.setLanguage = function(a) {
            this.language =
                a
        };
        l.prototype.startChat = function(a) {
            return this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED) ? (xa(this.buttonId, a), !0) : !1
        };
        l.prototype.rejectChat = function() {
            return this.dispatchEvent(l.EVENT.BUTTON_REJECTED) ? !0 : !1
        };
        l.prototype.dispatchEvent = function(a) {
            return ha.hasOwnProperty(this.buttonId) ? !1 === ha[this.buttonId].call(this, a) ? !1 : !0 : !0
        };
        t.prototype.init = function(a, b) {
            this.buttonId = a;
            this.element = b
        };
        t.prototype.getId = function() {
            return this.buttonId
        };
        t.prototype.setState = function(a) {
            f.log("Setting state for button " +
                this.buttonId + " to " + (a ? "online" : "offline"));
            return k[this.buttonId].dispatchEvent(a ? l.EVENT.BUTTON_AVAILABLE : l.EVENT.BUTTON_UNAVAILABLE) ? !0 : !1
        };
        la.prototype = new l;
        S.prototype = new l;
        S.prototype.startChat = function(a, b) {
            if (this.dispatchEvent(l.EVENT.BUTTON_ACCEPTED)) {
                var c = this.buttonId.split("_");
                xa(c[1], a, c[0], b);
                return !0
            }
            return !1
        };
        T.prototype = new t;
        T.prototype.setState = function(a) {
            t.prototype.setState.call(this, a) && (this.element.style.display = a ? "" : "none")
        };
        U.prototype = new t;
        U.prototype.setState =
            function(a) {
                t.prototype.setState.call(this, a) && (this.element.style.display = a ? "none" : "")
            };
        var ia = !1,
            G = null,
            ja = {},
            H = {};
        n.prototype = new l;
        n.RENDERER = {
            Slide: {
                renderClass: J
            },
            Fade: {
                renderClass: K
            },
            Appear: {
                renderClass: M
            },
            Custom: {
                renderClass: E
            }
        };
        n.START_POSITION = {
            TopLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopLeftTop: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            Top: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightTop: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: -1,
                yOffset: -1
            },
            TopRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            },
            Right: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            BottomRightRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomRightBottom: {
                xPercent: 1,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            Bottom: {
                xPercent: .5,
                xPosition: -.5,
                xOffset: 0,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftBottom: {
                xPercent: 0,
                xPosition: 0,
                xOffset: 1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: 0,
                yOffset: 1
            },
            BottomLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 1,
                yPosition: -1,
                yOffset: -1
            },
            Left: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: .5,
                yPosition: -.5,
                yOffset: 0
            },
            TopLeftLeft: {
                xPercent: 0,
                xPosition: -1,
                xOffset: -1,
                yPercent: 0,
                yPosition: 0,
                yOffset: 1
            }
        };
        n.END_POSITION = {
            TopLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 0,
                yOffset: 1
            },
            Top: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 0,
                yOffset: 1
            },
            TopRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 0,
                yOffset: 1
            },
            Left: {
                xPercent: 0,
                xOffset: 1,
                yPercent: .5,
                yOffset: 0
            },
            Center: {
                xPercent: .5,
                xOffset: 0,
                yPercent: .5,
                yOffset: 0
            },
            Right: {
                xPercent: 1,
                xOffset: -1,
                yPercent: .5,
                yOffset: 0
            },
            BottomLeft: {
                xPercent: 0,
                xOffset: 1,
                yPercent: 1,
                yOffset: -1
            },
            Bottom: {
                xPercent: .5,
                xOffset: 0,
                yPercent: 1,
                yOffset: -1
            },
            BottomRight: {
                xPercent: 1,
                xOffset: -1,
                yPercent: 1,
                yOffset: -1
            }
        };
        n.prototype.setRules = function(a, b) {
            if (a && b) {
                for (var c in a) {
                    var e = a[c],
                        d = null;
                    switch (e.type) {
                        case h.TYPE.NUMBER_OF_PAGE_VIEWS:
                            d = new N(e.order, this.buttonId, B.getPageCount(), e.operator, parseInt(e.value, 10));
                            break;
                        case h.TYPE.URL_MATCH:
                            d = new N(e.order, this.buttonId, B.getCurrentPage(), e.operator, e.value);
                            break;
                        case h.TYPE.SECONDS_ON_PAGE:
                            d = new O(e.order, this.buttonId, (new Date).getTime(), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.SECONDS_ON_SITE:
                            d = new O(e.order, this.buttonId,
                                parseInt(B.getSessionStart(), 10), e.operator, 1E3 * parseInt(e.value, 10));
                            break;
                        case h.TYPE.CUSTOM_VARIABLE:
                            d = new V(e.order, this.buttonId, e.name, e.operator, e.value), H.hasOwnProperty(e.name) || (H[e.name] = []), H[e.name].push(this.buttonId)
                    }
                    null != d && this.addRule(d)
                }
                this.filterLogic = b;
                this.ruleTree = F(b)
            }
        };
        n.prototype.setOnlineState = function(a) {
            a || null === this.inviteTimeout || (clearTimeout(this.inviteTimeout), this.inviteTimeout = null);
            a || null === this.autoRejectTimeout || (clearTimeout(this.autoRejectTimeout), this.autoRejectTimeout =
                null);
            l.prototype.setOnlineState.call(this, a)
        };
        n.prototype.isActive = function() {
            return this.active
        };
        n.prototype.setActive = function(a) {
            this.active = a
        };
        n.prototype.addTracker = function(a) {
            this.trackers = [];
            l.prototype.addTracker.call(this, a)
        };
        n.prototype.getTracker = function() {
            if (1 != this.trackers.length) throw Error("InviteButtons should have exactly 1 tracker");
            return this.trackers[0]
        };
        n.prototype.startChat = function(a) {
            return this.active && l.prototype.startChat.call(this, a) ? (this.getTracker().accept(), !0) :
                !1
        };
        n.prototype.rejectChat = function() {
            return this.active && l.prototype.rejectChat.call(this) ? (this.getTracker().reject(), !0) : !1
        };
        n.prototype.trigger = function() {
            if (f.getCookie("liveagent_invite_rejected_" + this.buttonId)) return !1;
            var a = !0;
            null != this.ruleTree && (f.logGroupStart("Invite " + this.buttonId + " Rule Evaluation"), f.log("Filter Logic: " + this.filterLogic), a = this.ruleTree.evaluate(this), f.logGroupEnd());
            if (!a && null != this.inviteDelay) {
                var b = this;
                this.inviteTimeout = window.setTimeout(function() {
                        b.setOnlineState(!0)
                    },
                    this.inviteDelay);
                this.inviteDelay = null
            }
            return a
        };
        n.prototype.addRule = function(a) {
            this.rules[a.getId()] = a
        };
        n.prototype.getRule = function(a) {
            return this.rules[a]
        };
        n.prototype.getInviteDelay = function() {
            return this.inviteDelay
        };
        n.prototype.setInviteDelay = function(a) {
            f.log("Setting invite delay to: " + a);
            this.inviteDelay = a
        };
        n.prototype.setAutoRejectTimeout = function(a) {
            this.autoRejectTimeout = a
        };
        A.prototype = new t;
        A.prototype.setState = function(a) {
            a && !ia && u(this.buttonId).trigger() && t.prototype.setState.call(this,
                !0) ? (ia = !0, G = this.buttonId, this.renderer.render()) : !a && u(this.buttonId).isActive() && t.prototype.setState.call(this, !1) && (ia = !1, this.remove(!0))
        };
        A.prototype.renderFinish = function() {
            u(this.buttonId).setActive(!0);
            if (-1 != this.rejectTime) {
                var a = this.buttonId;
                u(this.buttonId).setAutoRejectTimeout(window.setTimeout(function() {
                    u(a).rejectChat()
                }, 1E3 * this.rejectTime))
            }
            this.renderer.renderFinish()
        };
        A.prototype.accept = function() {
            this.hasInviteAfterAccept || f.setCookie("liveagent_invite_rejected_" + this.buttonId,
                !0, !1);
            this.remove(!1)
        };
        A.prototype.reject = function() {
            this.hasInviteAfterReject || f.setCookie("liveagent_invite_rejected_" + this.buttonId, !0, !1);
            this.remove(!0)
        };
        A.prototype.remove = function(a) {
            u(this.buttonId).setActive(!1);
            this.renderer.remove(a)
        };
        A.prototype.removeFinish = function() {
            this.renderer.remove(!1)
        };
        r.prototype.init = function(a, b, c, e) {
            window.innerWidth ? this.realWidth = window.innerWidth : document.documentElement && document.documentElement.clientWidth ? this.realWidth = document.documentElement.clientWidth :
                document.body && (this.realWidth = document.body.clientWidth);
            window.innerHeight ? this.realHeight = window.innerHeight : document.documentElement && document.documentElement.clientHeight ? this.realHeight = document.documentElement.clientHeight : document.body && (this.realHeight = document.body.clientHeight);
            this.offset = 25;
            this.buttonId = a;
            this.animationPrefix = f.getCssAnimation(b);
            this.element = b;
            this.element.style.position = null !== this.animationPrefix ? "fixed" : "absolute";
            this.element.style.left = "-1000px";
            this.element.style.top =
                "-1000px";
            this.element.style.zIndex = "10000";
            this.element.style.display = "";
            this.width = this.element.offsetWidth;
            this.height = this.element.offsetHeight;
            this.startPosition = c;
            this.endPosition = e
        };
        r.prototype.render = function() {
            this.element.style.display = ""
        };
        r.prototype.renderFinish = function() {};
        r.prototype.remove = function(a) {
            this.element.style.left = "-1000px";
            this.element.style.top = "-1000px"
        };
        r.prototype.addRenderListeners = function() {
            var a = this.buttonId,
                b = "AnimationIteration",
                c = "AnimationEnd";
            "" == this.animationPrefix ?
                (b = b.toLowerCase(), c = c.toLowerCase()) : (b = this.animationPrefix + b, c = this.animationPrefix + c);
            f.addEventListener(this.element, b, function() {
                D(a).renderFinish()
            });
            f.addEventListener(this.element, c, function() {
                D(a).removeFinish()
            })
        };
        J.prototype = new r;
        J.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = this.width * this.startPosition.xPosition + this.offset * this.startPosition.xOffset,
                b = this.height * this.startPosition.yPosition + this.offset * this.startPosition.yOffset,
                c = this.width * this.endPosition.xPercent *
                -1 + this.offset * this.endPosition.xOffset,
                e = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset,
                d = "";
            "" !== this.animationPrefix && (d = "-" + this.animationPrefix + "-");
            var g = document.createElement("style");
            g.innerHTML = "@" + d + "keyframes slide" + this.buttonId + "{from { margin-left: " + a + "px; margin-top: " + b + "px; left: " + 100 * this.startPosition.xPercent + "%; top: " + 100 * this.startPosition.yPercent + "%; }to { margin-left: " + c + "px; margin-top: " + e + "px; left: " + 100 * this.endPosition.xPercent + "%; top: " +
                100 * this.endPosition.yPercent + "%; }}";
            document.getElementsByTagName("head")[0].appendChild(g);
            this.element.style[d + "animation-name"] = "slide" + this.buttonId;
            this.element.style[d + "animation-duration"] = "1s";
            this.element.style[d + "animation-iteration-count"] = "2";
            this.element.style[d + "animation-direction"] = "alternate";
            this.element.style[d + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(d + "animation-name", "slide" + this.buttonId, "");
            this.element.style.setProperty(d + "animation-duration",
                "1s", "");
            this.element.style.setProperty(d + "animation-iteration-count", "2", "");
            this.element.style.setProperty(d + "animation-direction", "alternate", "");
            this.element.style.setProperty(d + "animation-timing-function", "ease-in-out", "");
            r.prototype.render.call(this)
        };
        J.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        J.prototype.remove =
            function(a) {
                var b = "";
                "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
                a ? (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", "")) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
            };
        K.prototype = new r;
        K.prototype.render = function() {
            r.prototype.addRenderListeners.call(this);
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            var b = document.createElement("style");
            b.innerHTML = "@" + a + "keyframes fade" + this.buttonId + "{from { opacity: 0; }to { opacity: 1; }}";
            document.getElementsByTagName("head")[0].appendChild(b);
            this.element.style[a + "animation-name"] = "fade" + this.buttonId;
            this.element.style[a + "animation-duration"] = "1s";
            this.element.style[a + "animation-iteration-count"] = "2";
            this.element.style[a + "animation-direction"] = "alternate";
            this.element.style[a + "animation-timing-function"] = "ease-in-out";
            this.element.style.setProperty(a +
                "animation-name", "fade" + this.buttonId, "");
            this.element.style.setProperty(a + "animation-duration", "1s", "");
            this.element.style.setProperty(a + "animation-iteration-count", "2", "");
            this.element.style.setProperty(a + "animation-direction", "alternate", "");
            this.element.style.setProperty(a + "animation-timing-function", "ease-in-out", "");
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent + "%";
            this.element.style.marginTop =
                this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this)
        };
        K.prototype.renderFinish = function() {
            var a = "";
            "" !== this.animationPrefix && (a = "-" + this.animationPrefix + "-");
            this.element.style[a + "animation-play-state"] = "paused";
            this.element.style.setProperty(a + "animation-play-state", "paused", "")
        };
        K.prototype.remove = function(a) {
            var b = "";
            "" !== this.animationPrefix && (b = "-" + this.animationPrefix + "-");
            a ?
                (this.element.style[b + "animation-play-state"] = "running", this.element.style.setProperty(b + "animation-play-state", "running", ""), this.element.style.opacity = 0) : (this.element.style[b + "animation-name"] = "", this.element.style.setProperty(b + "animation-name", "", ""), r.prototype.remove.call(this, a))
        };
        M.prototype = new r;
        M.prototype.render = function() {
            this.element.style.marginLeft = this.width * this.endPosition.xPercent * -1 + this.offset * this.endPosition.xOffset + "px";
            this.element.style.left = 100 * this.endPosition.xPercent +
                "%";
            this.element.style.marginTop = this.height * this.endPosition.yPercent * -1 + this.offset * this.endPosition.yOffset + "px";
            this.element.style.top = 100 * this.endPosition.yPercent + "%";
            r.prototype.render.call(this);
            D(this.buttonId).renderFinish()
        };
        M.prototype.remove = function(a) {
            a ? D(this.buttonId).removeFinish() : r.prototype.remove.call(this, a)
        };
        E.prototype = new r;
        E.prototype.render = function() {
            D(this.buttonId).renderFinish()
        };
        E.prototype.renderFinish = function() {};
        E.prototype.remove = function(a) {
            a && D(this.buttonId).removeFinish()
        };
        h.TYPE = {
            NUMBER_OF_PAGE_VIEWS: "NUMBER_OF_PAGE_VIEWS",
            URL_MATCH: "URL_MATCH",
            SECONDS_ON_PAGE: "SECONDS_ON_PAGE",
            SECONDS_ON_SITE: "SECONDS_ON_SITE",
            CUSTOM_VARIABLE: "CUSTOM_VARIABLE"
        };
        h.OPERATOR = {
            EQUALS: "EQUALS",
            NOT_EQUAL: "NOT_EQUAL",
            START_WITH: "START_WITH",
            CONTAINS: "CONTAINS",
            NOT_CONTAIN: "NOT_CONTAIN",
            LESS_THAN: "LESS_THAN",
            GREATER_THAN: "GREATER_THAN",
            LESS_OR_EQUAL: "LESS_OR_EQUAL",
            GREATER_OR_EQUAL: "GREATER_OR_EQUAL"
        };
        h.prototype.init = function(a, b, c, e, d) {
            this.ruleId = a;
            this.buttonId = b;
            this.compareFrom = c;
            this.operator =
                e;
            this.compareTo = d
        };
        h.prototype.getId = function() {
            return this.ruleId
        };
        h.prototype.evaluate = function(a, b) {
            switch (this.operator) {
                case h.OPERATOR.EQUALS:
                    return f.log("Evaluate: " + a + " \x3d\x3d " + b), a == b;
                case h.OPERATOR.NOT_EQUAL:
                    return f.log("Evaluate: " + a + " !\x3d " + b), a != b;
                case h.OPERATOR.START_WITH:
                    return f.log("Evaluate: " + a + " indexOf " + b + " \x3d\x3d 0"), 0 == a.indexOf(b);
                case h.OPERATOR.CONTAINS:
                    return f.log("Evaluate: " + a + " indexOf " + b + " !\x3d -1"), -1 != a.indexOf(b);
                case h.OPERATOR.NOT_CONTAIN:
                    return f.log("Evaluate: " +
                        a + " indexOf " + b + " \x3d\x3d -1"), -1 == a.indexOf(b);
                case h.OPERATOR.LESS_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c " + parseFloat(b)), parseFloat(a) < parseFloat(b);
                case h.OPERATOR.GREATER_THAN:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e " + parseFloat(b)), parseFloat(a) > parseFloat(b);
                case h.OPERATOR.LESS_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3c\x3d " + parseFloat(b)), parseFloat(a) <= parseFloat(b);
                case h.OPERATOR.GREATER_OR_EQUAL:
                    return f.log("Evaluate: " + parseFloat(a) + " \x3e\x3d " +
                        parseFloat(b)), parseFloat(a) >= parseFloat(b)
            }
        };
        N.prototype = new h;
        N.prototype.evaluate = function() {
            f.log("Evaluating StandardInviteRule");
            return h.prototype.evaluate.call(this, this.compareFrom, this.compareTo)
        };
        O.prototype = new h;
        O.prototype.evaluate = function() {
            f.log("Evaluating TimerInviteRule");
            var a = (new Date).getTime() - this.compareFrom,
                b = h.prototype.evaluate.call(this, a, this.compareTo);
            !b && a <= this.compareTo && (a = this.compareTo - a, (null == u(this.buttonId).getInviteDelay() || a < u(this.buttonId).getInviteDelay()) &&
                u(this.buttonId).setInviteDelay(a));
            return b
        };
        V.prototype = new h;
        V.prototype.evaluate = function() {
            if (ja.hasOwnProperty(this.compareFrom)) return f.log("Evaluating CustomInviteRule"), h.prototype.evaluate.call(this, ja[this.compareFrom].toString(), this.compareTo);
            f.log("CustomInviteRule evaluation failed due to missing custom variable");
            return !1
        };
        var na = 0;
        z.prototype.init = function(a, b) {
            this.left = a;
            this.right = b
        };
        z.prototype.evaluate = function(a) {
            return !1
        };
        Z.prototype = new z;
        Z.prototype.evaluate = function(a) {
            f.log("Evaluating Atom Node: " +
                this.ruleId);
            return a.getRule(this.ruleId).evaluate()
        };
        W.prototype = new z;
        W.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating And Node");
            a = this.left.evaluate(a) && this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        X.prototype = new z;
        X.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Or Node");
            a = this.left.evaluate(a) || this.right.evaluate(a);
            f.logGroupEnd();
            return a
        };
        Y.prototype = new z;
        Y.prototype.evaluate = function(a) {
            f.logGroupStart("Evaluating Not Node");
            a = !this.left.evaluate(a);
            f.logGroupEnd();
            return a
        };
        oa.prototype.toJSON = function() {
            return {
                label: this.getLabel(),
                value: this.getValue(),
                displayToAgent: this.getDisplayToAgent(),
                entityMaps: this.getMapper().getEntityMaps(),
                transcriptFields: this.getMapper().getTranscriptFields(),
                doKnowledgeSearch: this.getDoKnowledgeSearch()
            }
        };
        aa.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityMaps().push(new pa(a, b, c, e, d))
        };
        aa.prototype.saveToTranscript = function(a) {
            this.getTranscriptFields().push(a)
        };
        pa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                fieldName: this.getFieldName(),
                fastFill: this.getFastFill(),
                autoQuery: this.getAutoQuery(),
                exactMatch: this.getExactMatch()
            }
        };
        var I = {};
        p._ = I;
        I.handlePing = function(a) {
            q.connection.handlePing(a)
        };
        I.error = function(a) {
            a ? f.log("Server Error: " + a) : f.log("Server responded with an error.");
            da()
        };
        I.warning = function(a) {
            a ? f.log("Server Warning: " + a) : f.log("Server sent an anoymous warning.")
        };
        I.setNewPtid = function(a) {
            v.setPermanentId(a)
        };
        I.clearStorage =
            function() {
                B.clear()
            };
        p.init = function(a, b, c) {
            if ("string" != typeof a) throw Error("The url to init must be strings");
            if (!f.isOrganizationId(c)) throw Error("Invalid OrganizationId Parameter Value: " + c);
            if (!f.isDeploymentId(b)) throw Error("Invalid DeploymentId Parameter Value: " + b);
            m.url = a;
            m.deploymentId = b;
            m.orgId = c;
            f.log("System Initialized. Waiting for the DOM to be ready");
            "complete" === document.readyState ? setTimeout(P, 1) : document.addEventListener ? (document.addEventListener("DOMContentLoaded", P, !1),
                window.addEventListener("load", P, !1)) : window.attachEvent ? window.attachEvent("onload", P) : f.log("No available event model. Exiting.")
        };
        p.getSid = function() {
            return x
        };
        p.enableLogging = function() {
            R = !0
        };
        p.setLocation = function(a) {};
        p.setChatWindowWidth = function(a) {
            m.chatWindowWidth = a
        };
        p.setChatWindowHeight = function(a) {
            m.chatWindowHeight = a
        };
        p.disconnect = function() {
            da()
        };
        p.startChat = function(a, b, c) {
            (b ? L(a, b) : k[a]).startChat("liveagent" + Math.round(1E5 * Math.random()) + (new Date).getTime(), c)
        };
        p.startChatWithWindow =
            function(a, b, c, e) {
                (c ? L(a, c) : k[a]).startChat(b, e)
            };
        p.rejectChat = function(a) {
            k[a].rejectChat()
        };
        p.showWhenOnline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new T(a.buttonId, b))
        };
        p.showWhenOffline = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a button after page initialization.");
            a = c ? L(a, c) : ma(a);
            a.addTracker(new U(a.buttonId, b))
        };
        p.addCustomDetail = function(a, b, c) {
            if (q.connection.isRunning()) throw Error("You cannot add a detail after page initialization.");
            if ("undefined" == typeof a || "undefined" == typeof b || null === a || null === b) throw Error("CustomDetail contains null value");
            var e = new oa(a, b, c);
            ya.push(e);
            var d = {
                map: function(a, b, c, f, h) {
                    if ("undefined" == typeof a || null === a || "undefined" == typeof b || null === b || null === c || null === f || null === h) throw Error("CustomDetail.map contains null value");
                    e.getMapper().map(a, b, c, f, h);
                    return d
                },
                saveToTranscript: function(a) {
                    if ("undefined" == typeof a || null === a) throw Error("CustomDetail.saveToTranscript contains null value");
                    e.getMapper().saveToTranscript(a);
                    return d
                },
                doKnowledgeSearch: function() {
                    e.setDoKnowledgeSearch();
                    return d
                }
            };
            return d
        };
        p.setName = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set the name after page initialization.");
            ea = a
        };
        p.addButtonEventHandler = function(a, b) {
            "function" == typeof b && (ha[a] = b)
        };
        p.BUTTON_EVENT = l.EVENT;
        p.setCustomVariable = function(a, b) {
            ja[a] = b;
            if (H.hasOwnProperty(a))
                for (var c = 0; c < H[a].length; c++) {
                    var e = u(H[a][c]);
                    e.getOnlineState() && e.setOnlineState(!0)
                }
        };
        p.findOrCreate = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot find or create after page initialization.");
            var b = new qa(a);
            za.push(b);
            var c = {
                map: function(a, d, g, f, h) {
                    b.getEntityMapper().map(a, d, g, f, h);
                    return c
                },
                saveToTranscript: function(a) {
                    b.setSaveTranscript(a);
                    return c
                },
                showOnCreate: function() {
                    b.setShowOnCreate(!0);
                    return c
                },
                linkToEntity: function(a, d) {
                    if (ka.hasOwnProperty(a) && ka[a] == b.getEntityName()) return fa("Warning: Recursive links detected, skip link " + b.getEntityName() + " to " + a), c;
                    b.setLinkToEntityName(a);
                    b.setLinkToEntityField(d);
                    ka[b.getEntityName()] = a;
                    return c
                }
            };
            return c
        };
        p.addURLPrefix = function(a) {
            if (q.connection.isRunning()) throw Error("You cannot set a URL Prefix after page initialization.");
            if ("string" != typeof a) throw Error("The parameter to addURLPrefix must be a string");
            m.url = f.addPrefixToURL(m.url, a, !0);
            m.urlPrefix = a
        };
        var q = {
            VisitorMessage: {
                ERROR: "Error",
                WARNING: "Warning"
            },
            SystemMessage: {
                ASYNC_RESULT: "AsyncResult",
                SWITCH_SERVER: "SwitchServer"
            }
        };
        (function() {
            var a = null,
                b = !1,
                c = null,
                e = null,
                d = {};
            (function() {
                d.send = function(b, f) {
                    if (null !== c) d.onError.call(window, "Did not handle response before sending another message");
                    else {
                        "undefined" == typeof f && (f = {});
                        var h = "Visitor",
                            k = "",
                            l = !1;
                        1 < b.length ?
                            (h = "System", k = "MultiNoun", f.nouns = "", l = !0) : k = b[0].getName();
                        h = m.url + "/rest/" + h + "/" + k + ".jsonp?";
                        for (k = 0; k < b.length; k++) {
                            l && (f.nouns += b[k].getName() + ",");
                            f[b[k].getName() + ".prefix"] = "Visitor";
                            for (var n in b[k].getData()) b[k].getData().hasOwnProperty(n) && (f[b[k].getName() + "." + n] = b[k].getData()[n])
                        }
                        l && (f.nouns = f.nouns.substr(0, f.nouns.length - 1));
                        for (var p in f) f.hasOwnProperty(p) && (h += p + "\x3d" + f[p] + "\x26");
                        h += "callback\x3d" + a;
                        h += "\x26deployment_id\x3d" + m.deploymentId;
                        h += "\x26org_id\x3d" + m.orgId;
                        h += "\x26version\x3d36";
                        l = document.createElement("script");
                        l.type = "text/javascript";
                        l.src = h;
                        c = document.body.appendChild(l);
                        e = window.setTimeout(function() {
                            d.onError.call(window, "Server failed to respond.")
                        }, m.pingTimeout)
                    }
                };
                d.handlePing = function(a) {
                    e && (clearTimeout(e), e = null);
                    b = !0;
                    a = a.messages;
                    for (var f = 0; f < a.length; f++) d.messageHandler.call(window, a[f].type, a[f].message);
                    d.onSuccess.call(window);
                    null !== c && (document.body.removeChild(c), c = null)
                };
                d.messageHandler = function(a, b) {};
                d.onSuccess = function() {};
                d.onError = function(a) {};
                d.isRunning = function() {
                    return b
                };
                d.setIsRunning = function(a) {
                    b = a
                };
                d.setCallback = function(b) {
                    a = b
                }
            })();
            q.connection = d;
            q.Noun = function(a, b) {
                this.getName = function() {
                    return a
                };
                this.getData = function() {
                    return b
                }
            }
        })();
        qa.prototype.toJSON = function() {
            return {
                entityName: this.getEntityName(),
                saveToTranscript: this.getSaveTranscript(),
                showOnCreate: this.getShowOnCreate(),
                linkToEntityName: this.getLinkToEntityName(),
                linkToEntityField: this.getLinkToEntityField(),
                entityFieldsMaps: this.getEntityMapper().getEntityFieldsMaps()
            }
        };
        ra.prototype.map = function(a, b, c, e, d) {
            "undefined" == typeof c && (c = !0);
            "undefined" == typeof e && (e = !0);
            "undefined" == typeof d && (d = !0);
            this.getEntityFieldsMaps().push(new sa(a, b, c, e, d))
        };
        sa.prototype.toJSON = function() {
            return {
                fieldName: this.getFieldName(),
                label: this.getLabel(),
                doFind: this.getDoFind(),
                isExactMatch: this.getIsExactMatch(),
                doCreate: this.getDoCreate()
            }
        };
        var x = f.getCookie("liveagent_sid"),
            ba = f.getCookie("liveagent_chatted"),
            ta = !1,
            R = !1,
            k = {},
            ya = [],
            za = [],
            ea = null,
            ha = {},
            Q = null,
            ka = {},
            ca = !1,
            m = {
                url: null,
                deploymentId: null,
                orgId: null,
                pingRate: null,
                pingTimeout: 5E3,
                chatWindowWidth: 482,
                chatWindowHeight: 450,
                contentServerUrl: null,
                chatPage: "/s/chat",
                prechatHandler: "/s/prechatVisitor"
            };
        q.connection.messageHandler = function(a, b) {
            switch (a) {
                case "VisitorId":
                    b.sessionId && (f.log("Received new session ID"), x = b.sessionId, document.cookie = "liveagent_sid\x3d" + encodeURIComponent(x) + ";path\x3d/;", null != v.getVisitCount() && v.setVisitCount(v.getVisitCount() + 1), v.getPermanentId() || v.setPermanentId(x));
                    break;
                case "Settings":
                    B.init();
                    f.log("Ping rate set to " + b.pingRate + "ms");
                    m.pingRate = b.pingRate;
                    m.contentServerUrl = b.contentServerUrl;
                    m.prefixKey = b.prefixKey;
                    for (var c = 0; c < b.buttons.length; c++) switch (b.buttons[c].type) {
                        case "ToAgent":
                        case "Standard":
                            var e = b.buttons[c],
                                d = k[e.id];
                            d && wa(d, e);
                            break;
                        case "Invite":
                            var e = b.buttons[c],
                                g = null,
                                g = e.inviteImageUrl ? Ca(e.id, e.inviteImageUrl, e.inviteImageWidth, e.inviteImageHeight) : document.getElementById("liveagent_invite_button_" + e.id);
                            null == g ? fa("Warning: Button " + e.id + " disabled because HTML element was not found") :
                                (d = u(e.id), d.addTracker(new A(e.id, g, e.inviteRenderer, e.inviteStartPosition, e.inviteEndPosition, e.hasInviteAfterAccept, e.hasInviteAfterReject, e.inviteRejectTime)), g = f.jsonDecode(e.inviteRules), d.setRules(g.rules, g.filter), wa(d, e))
                    }
                    break;
                case "Availability":
                    c = {};
                    for (e = 0; e < b.results.length; e++)(d = k[b.results[e].id]) && (c[b.results[e].id] = {
                        button: d,
                        isAvailable: b.results[e].isAvailable
                    });
                    null != G && c.hasOwnProperty(G) && (c[G].button.setOnlineState(c[G].isAvailable), delete c[G]);
                    for (g in c) c.hasOwnProperty(g) &&
                        c[g].button.setOnlineState(c[g].isAvailable);
                    break;
                case q.VisitorMessage.WARNING:
                    fa(b.text);
                    break;
                case q.VisitorMessage.ERROR:
                    Aa(b.text);
                    break;
                case q.SystemMessage.SWITCH_SERVER:
                    c = b.newUrl;
                    if ("string" === typeof c) m.url = c, f.log("Received updated LiveAgent server url: " + c + "! Consider updating this site's deployment code.");
                    else throw Error("Trying to set invalid LiveAgent server url: " + c);
                    ca = !0
            }
        };
        q.connection.onSuccess = function() {
            null !== Q && clearTimeout(Q);
            Q = window.setTimeout(Da, m.pingRate)
        };
        q.connection.onError =
            function(a) {
                Aa(a)
            }
    }
})();
/**
 * Service for logging members in.
 *
 * @namespace Services
 * @class loginService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.login', [])
    .service('loginService', [
      '$q',
      '$rootScope',
      '$http',
      'config',
      'storageService',
      function($q, $rootScope, $http, config, storageService) {
        var userLoggedOutFlag = false;
        var loginUrl = config.loginUrl || 'https://mobileps.bcbsnc.com/mga/sps/oauth/oauth20/token';
        this.setUserLoggedOutFlag = function(boolVal) {
          userLoggedOutFlag = boolVal;
        };
        this.getUserLoggedOutFlag = function() {
          return userLoggedOutFlag;
        };
        this.getUserId = function() {
          return this
            .getAuthorization()
            .then(function(authValue) {
              if (!authValue) {
                return null;
              }
              return authValue.userId;
            });
        };
        this.setBiometricEnabled = function(bioBoolean) {
          if (typeof bioBoolean !== 'boolean') {
            console.warn('Attempted to set a non-boolean as biometricEnabled', bioBoolean);
            return $q.reject('setting biometric boolean no es available');
          }
          return storageService.set('biometricEnabled', {biometricEnabled: bioBoolean});
        };
        this.getBiometricEnabled = function() {
          return storageService
            .get('biometricEnabled')
            .then(function(biometricObject) {
              if (biometricObject && biometricObject.biometricEnabled) {
                return biometricObject.biometricEnabled;
              }
              return false;
            })
            .catch(function(retrievalError) {
              console.warn('Error fetching biometric boolean', retrievalError);
            });
        };
        this.setAuthorization = function(newAuthObj) {
          return storageService.set('authorization', newAuthObj);
        };
        this.getAuthorization = function() {
          return storageService
            .get('authorization')
            .catch(function(retrievalError) {
              console.warn('Error getting authorization value', retrievalError);
            });
        };
        this.clearAuthorization = function() {
          return storageService.set('authorization', null);
        };

        /**
         * @description Attempts to log in with ISAM.
         * @memberof loginService
         * @method attemptLogin
         */
        this.attemptLogin = function(userId, password, clientId, clientSecret) {
          var self = this;
          return $q(function(resolve, reject) {
            $http.defaults.headers.common['Authorization'] = null;

            if (typeof cordova !== 'undefined') {
              window.cookies.clear(function() {
                $http({
                  method: 'POST',
                  url: loginUrl,
                  headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                  transformRequest: encodeForm,
                  data: {
                    grant_type: 'password',
                    client_id: clientId,
                    client_secret: clientSecret,
                    username: userId,
                    password: password
                  }
                })
                  .success(function(result) {
                    $http.defaults.headers.common = {
                      'Authorization': 'Bearer ' + result.access_token
                    };
                    var authorization = {
                      accessToken: result.access_token,
                      refreshToken: result.refresh_token,
                      expires: self.getTokenExpiryDate(result.expires_in),
                      logInDate: new Date()
                    };
                    // TODO: use login settings to determine whether to save userId.
                    authorization.userId = userId;
                    resolve(authorization);
                  })
                  .error(function(error) {
                    console.log(error);
                    reject(error);
                  });
              });
            }
          });
        };

        /**
         * @description Attempts to refresh the session with ISAM.
         * @memberof loginService
         * @method attemptLogin
         */
        this.attemptRefreshLogin = function(authorization, clientId, clientSecret) {
          var self = this;
          return $q(function(resolve, reject) {
            $http.defaults.headers.common['Authorization'] = null;

            if (typeof cordova !== 'undefined') {
              window.cookies.clear(function() {
                $http({
                  method: 'POST',
                  url: loginUrl,
                  headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                  transformRequest: encodeForm,
                  data: {
                    grant_type: 'refresh_token',
                    client_id: clientId,
                    client_secret: clientSecret,
                    refresh_token: authorization.refreshToken
                  }
                })
                  .success(function(result) {
                    $http.defaults.headers.common = {
                      'Authorization': 'Bearer ' + result.access_token
                    };

                    var newAuthorization = {
                      accessToken: result.access_token,
                      refreshToken: result.refresh_token,
                      expires: self.getTokenExpiryDate(result.expires_in),
                      logInDate: authorization.logInDate,
                      userId: authorization.userId
                    };
                    resolve(newAuthorization);
                  })
                  .error(reject);
              });
            }
          });
        };

        /**
         * @description Returns the date that the current token will expire.
         * @memberof loginService
         * @method getTokenExpiryDate
         * @param  {Number} expiresSeconds The number in seconds that the token will expire.
         * @return {Date} The date of expiration.
         */
        this.getTokenExpiryDate = function(expiresSeconds) {
          var now = new Date();
          return moment(now.getTime() + expiresSeconds * 1000).toDate();
        };

        /**
         * @description Decrypts OAuth credentials.
         * @memberof loginService
         * @method getDecryptedCredentials
         * @param  {Object} credentials The encrypted credentials.
         * @return {Object} The decrypted credentials.
         */
        this.getDecryptedCredentials = function(credentials) {
          return {
            clientId: CryptoJS.AES.decrypt(credentials.clientId, config.key).toString(CryptoJS.enc.Utf8),
            clientSecret: CryptoJS.AES.decrypt(credentials.clientSecret, config.key).toString(CryptoJS.enc.Utf8)
          };
        };

        /**
          * @description Encrypts OAuth credentials.
          * @memberof loginService
          * @method getEncryptedCredentials
          * @return {Object} The encrypted credentials.
          */
        this.getEncryptedCredentials = function(credentials) {
          return {
            clientId: CryptoJS.AES.encrypt(credentials.clientId, config.key).toString(),
            clientSecret: CryptoJS.AES.encrypt(credentials.clientSecret, config.key).toString()
          };
        };

        /**
         * @description Returns whether a member is currently logged in.
         * @memberof loginService
         * @method isLoggedIn
         * @return {Boolean} Whether a member is logged in.
         */
        this.isLoggedIn = function() {
          if ($rootScope.appSettings && $rootScope.appSettings.authorization) {
            if (typeof $rootScope.appSettings.authorization.expires === 'string') {
              $rootScope.appSettings.authorization.expires = moment($rootScope.appSettings.authorization.expires).toDate();
            }
            var now = new Date();
            return $rootScope.appSettings.authorization.expires <= now;
          }

          return false;
        };

        function encodeForm(obj) {
          var str = [];
          for (var p in obj) {
            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
          }
          return str.join('&');
        }
      }
    ]);
}());

/**
 * Services for the parsing and formatting of messages.
 *
 * @namespace Services
 * @class messageService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.message', [])
  .service('messageService', [
    '$q',
    '$http',
    '$sce',
    '$filter',
    'config',
    'inquiryService',
    function($q, $http, $sce, $filter, config, inquiryService) {
      var apiUrl = config.apiUrl || 'https://api.bcbsnc.com';
      var capraApiUrl = config.capraApiUrl || 'https://capra.bcbsnc.com';

      /**
      * Returns a 125 character, HTML trusted snippet of the message body.
      *
      * @memberof messageService
      * @method getMessageBodySnippet
      * @param  {Object} message The message to get the snippet from.
      * @return {Object} The trusted HTML.
      */
      this.getMessageBodySnippet = function(message) {
        if(message.body.length > 125) {
          return $sce.trustAsHtml(message.body.substr(0, 125) + '...');
        }

        return $sce.trustAsHtml(message.body);
      };

      /**
      * Returns a 15 character, HTML trusted snippet of the message subject.
      *
      * @memberof messageService
      * @method getMessageSubjectSnippet
      * @param  {Object} message The message to get the snippet from.
      * @return {Object} The trusted HTML.
      */
      this.getMessageSubjectSnippet = function(message) {
        if(message.subject.length > 15) {
          return $sce.trustAsHtml(message.subject.substr(0, 15) + '...');
        }

        return $sce.trustAsHtml(message.subject);
      };

      /**
      * Returns a message body as trusted HTML.
      *
      * @memberof messageService
      * @method getMessageBodyHTML
      * @param  {Object} message The message to get content from.
      * @return {Object} The trusted HTML.
      */
      this.getMessageBodyHtml = function(message) {
        return $sce.trustAsHtml(message.body);
      };

      /**
      * Returns a message display date, filtered based on how old the message is.
      *
      * @memberof messageService
      * @method getMessageDisplayDate
      * @param  {Object}  message The message to get the date from.
      * @param  {Boolean} [full]  Whether to override filtering and return a full date.
      * @return {String} The display date.
      */
      this.getMessageDisplayDate = function(message, full) {
        var now = new Date();
        var nowTime = now.getTime();
        var date = moment(message.createdDate).toDate();
        var dateTime = date.getTime();

        var oneDay = 1000 * 60 * 60 * 24;

        if(full) {
          return $filter('date')(date, 'M/d/yy h:mm a');
        }
        else if(now.getFullYear() !== date.getFullYear()) {
          return $filter('date')(date, 'M/d/yy');
        }
        else if(nowTime - dateTime < oneDay && now.getDate() === date.getDate()) {
          return $filter('date')(date, 'h:mm a');
        }

        return $filter('date')(date, 'MMM d');
      };

      /**
      * Retrieves the total and unread message counts.
      *
      * @memberof messageService
      * @method getMessageCounts
      * @return {Promise} A promise that resolves to function(counts).
      */
      this.getCounts = function() {
        var deferred = $q.defer();

        $http.get(apiUrl + '/messages/count').success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Creates a new message.
      *
      * @memberof messageService
      * @method composeMessage
      * @param  {Object} message The message content.
      * @return {Promise} A promise that resolves to function(result).
      */
      this.composeMessage = function(message) {
        var deferred = $q.defer();

        message.inquiryType = inquiryService.getSalesforceInquiryType(message.inquiryType);

        $http.post(apiUrl + '/messages', message).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Creates a new email, the email would be sent via capra's email service.
      *
      * @memberof messageService
      * @method sendEmail
      * @param  {Object} message The message content with subject and text
      * @return {Promise} A promise that resolves to function(result).
      */
      this.composeEmail = function(message) {
        var deferred = $q.defer();

        $http.post(capraApiUrl + '/email', message).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Deletes a message.
      *
      * @memberof messageService
      * @method deleteMessage
      * @param  {String} messageId The unique ID of the message.
      * @return {Promise} A promise that resolves to function(result).
      */
      this.deleteMessage = function(messageId) {
        var deferred = $q.defer();

        $http.put(apiUrl + '/messages', {
          operation: 'DELETE',
          messageIds: messageId
        }).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Updates a message.
      *
      * @memberof messageService
      * @method updateMessage
      * @param  {String} messageId The unique ID of the message.
      * @param  {String} operation The update to perform (READ, UNREAD, OPENED).
      * @return {Promise} A promise that resolves to function(result).
      */
      this.updateMessage = function(messageId, operation) {
        var deferred = $q.defer();

        $http.put(apiUrl + '/messages', {
          operation: operation.toUpperCase(),
          messageIds: messageId
        }).success(function(result) {
          deferred.resolve(result);
        }).error(function(error, status) {
          deferred.reject(error, status);
        });

        return deferred.promise;
      };

      /**
      * Bookmarks or unbookmarks a message.
      *
      * @memberof messageService
      * @method bookmarkMessage
      * @param  {String}  messageId  The unique ID of the message.
      * @param  {Boolean} bookmarkOn Whether to bookmark or unbookmark.
      * @return {Promise} A promise that resolves to function(result).
      */
      this.bookmarkMessage = function(messageId, bookmarkOn) {
        var deferred = $q.defer();

        if(bookmarkOn) {
          $http.post(apiUrl + '/bookmarks', {
            type: 'MESSAGE',
            id: messageId
          }).success(function(result) {
            deferred.resolve(result);
          }).error(function(error, status) {
            deferred.reject(error, status);
          });
        }
        else {
          $http.delete(apiUrl + '/bookmarks/MESSAGE/' + messageId).success(function(result) {
            deferred.resolve(result);
          }).error(function(error, status) {
            deferred.reject(error, status);
          });
        }

        return deferred.promise;
      };
    }
  ]);
}());

(function() {
  /**
   * @typedef {Object} MailingAddress
   * @property {string} addressLine1
   * @property {string} addressLine2
   * @property {string} cityName
   * @property {string} stateCode
   * @property {string} postalCode
   *
   */
  angular
    .module('blueconnect.mobile.services.paymentFlowFactory', [])
    .factory('PaymentFlowFactory', [function() {
      var userSetData = {
        accountHolderName: null,
        accountNumber: null,
        accountType: null,
        bankName: null,
        billingMethod: null,
        confirmedAccountNumber: null,
        paymentAmount: null,
        paymentFrequency: null,
        paymentMethod: null,
        routingNumber:null,
        preferences: {
          emailAddress: null,
          mailingAddress: {
            addressLine1: null,
            addressLine2: null,
            cityName: null,
            stateCode: null,
            postalCode: null
          }
        },
        creditCardDetails: {
          lastFour: null,
          expiration: null,
          type: null,
          firstName: null,
          lastName: null,
          billToAddressLine1: null,
          billToAddressLine2: null,
          billToCity: null,
          billToState: null,
          billToZipCode: null,
          cvn: null
        },
        successConfirmationCode: null,
        signature: null,
        merchantReferenceCode: null,
        enrollmentProcessNumber: null,
        paymentBlob: null,
        paymentErrorCode: null,
        encryptedPaymentData: null
      };
      var paymentFlow = null;
      document.addEventListener("resume", onResumeClearPaymentInfo, false);
      /**
       * @namespace EventListeners
       * @name onResumeClearPaymentInfo
       * @description This method will clear the payment flow when the user backgrounds the app.
       * @function
       */
      function onResumeClearPaymentInfo() {
        reset();
      }
      return {
        setPaymentFlow: setPaymentFlow,
        getPaymentFlow: getPaymentFlow,
        setPaymentFrequency: setPaymentFrequency,
        getPaymentFrequency: getPaymentFrequency,
        setPaymentAmount: setPaymentAmount,
        getPaymentAmount: getPaymentAmount,
        setPaymentMethod: setPaymentMethod,
        getPaymentMethod: getPaymentMethod,
        setBillingMethod: setBillingMethod,
        getBillingMethod: getBillingMethod,
        getUserSetData: getUserSetData,
        getConfirmationCode: getConfirmationCode,
        getSignature: getSignature,
        setSignature: setSignature,
        getMerchantReferenceCode: getMerchantReferenceCode,
        setMerchantReferenceCode: setMerchantReferenceCode,
        getEnrollmentProcessNumber: getEnrollmentProcessNumber,
        setEnrollmentProcessNumber: setEnrollmentProcessNumber,
        getEmailAddress: getEmailAddress,
        setEmailAddress: setEmailAddress,
        getMailingAddress: getMailingAddress,
        getAccountHolderName: getAccountHolderName,
        setAccountHolderName: setAccountHolderName,
        getAccountNumber: getAccountNumber,
        setAccountNumber: setAccountNumber,
        getRoutingNumber: getRoutingNumber,
        setRoutingNumber: setRoutingNumber,
        getBankName: getBankName,
        setBankName: setBankName,
        getAccountType: getAccountType,
        setAccountType: setAccountType,
        getConfirmedAccountNumber: getConfirmedAccountNumber,
        setConfirmedAccountNumber: setConfirmedAccountNumber,
        resetCreditCardDetails: resetCreditCardDetails,
        reset: reset
      };
      function getSignature() {
        return userSetData.signature;
      }
      function setSignature(signature) {
        userSetData.signature = signature;
        return this;
      }
      function getMerchantReferenceCode() {
        return userSetData.merchantReferenceCode;
      }
      function setMerchantReferenceCode(merchantReferenceCode) {
        userSetData.merchantReferenceCode = merchantReferenceCode;
        return this;
      }
      function getEnrollmentProcessNumber() {
        return userSetData.enrollmentProcessNumber;
      }
      function setEnrollmentProcessNumber(enrollmentProcessNumber) {
        userSetData.enrollmentProcessNumber = enrollmentProcessNumber;
        return this;
      }
      function getEmailAddress() {
        return userSetData.preferences.emailAddress;
      }
      function setEmailAddress(emailAddress) {
        userSetData.preferences.emailAddress = emailAddress;
        return this;
      }
      function getConfirmationCode() {
        return userSetData.successConfirmationCode;
      }
      function setPaymentFlow(desiredPaymentFlow) {
        paymentFlow = desiredPaymentFlow;
        return this;
      }
      function getPaymentFlow() {
        return paymentFlow;
      }
      function setPaymentFrequency(frequency) {
        userSetData.paymentFrequency = frequency;
        return this;
      }
      function getPaymentFrequency() {
        return userSetData.paymentFrequency;
      }
      function setPaymentAmount(amount) {
        userSetData.paymentAmount = amount;
        return this;
      }
      function getPaymentAmount() {
        return userSetData.paymentAmount;
      }
      function setPaymentMethod(method) {
        userSetData.paymentMethod = method;
        return this;
      }
      function getPaymentMethod() {
        return userSetData.paymentMethod;
      }
      function setBillingMethod(method) {
        userSetData.billingMethod = method;
        return this;
      }
      function getBillingMethod() {
        return userSetData.billingMethod;
      }
      function getUserSetData() {
        return userSetData;
      }
      /**
       * return {MailingAddress}
       */
      function getMailingAddress() {
        return userSetData.preferences.mailingAddress;
      }
      function getAccountHolderName() {
        if (!userSetData.accountHolderName) {
          if (userSetData.creditCardDetails.firstName && userSetData.creditCardDetails.lastName) {
            return userSetData.creditCardDetails.firstName + ' ' + userSetData.creditCardDetails.lastName;
          }
        }
        return userSetData.accountHolderName;
      }
      function setAccountHolderName(accountHolderName) {
        userSetData.accountHolderName = accountHolderName;
        return this;
      }
      function getAccountType(accountType) {
        return userSetData.accountType;
      }
      function setAccountType(accountType) {
        userSetData.accountType = accountType;
        return this;
      }
      function getRoutingNumber() {
        return userSetData.routingNumber;
      }
      function setRoutingNumber(routingNumber) {
        userSetData.routingNumber = routingNumber;
        return this;
      }
      function getBankName() {
        return userSetData.bankName;
      }
      function setBankName(bankName) {
        userSetData.bankName = bankName;
        return this;
      }
      function getAccountNumber() {
        return userSetData.accountNumber;
      }
      function setAccountNumber(accountNumber) {
        userSetData.accountNumber = accountNumber;
        return this;
      }
      function getConfirmedAccountNumber() {
        return userSetData.confirmedAccountNumber;
      }
      function setConfirmedAccountNumber(confirmedAccountNumber) {
        userSetData.confirmedAccountNumber = confirmedAccountNumber;
        return this;
      }

      function resetCreditCardDetails() {
        userSetData.creditCardDetails.lastFour = null;
        userSetData.creditCardDetails.firstName = null;
        userSetData.creditCardDetails.month = null;
        userSetData.creditCardDetails.year = null;
        userSetData.creditCardDetails.cvn = null;
      }
      /**
       * Recuresively sets the factory object and it's sub-object values to null without
       * flattening the structure.
       */
      function reset() {
        setPropertiesToNull(userSetData);
        function setPropertiesToNull(obj) {
          Object.keys(obj).forEach(function(key) {
            if (obj[key] !== null && key !== 'paymentMethod' && key !== 'mailingAddress') {

              if (typeof obj[key] === 'object' && !$.isEmptyObject(obj[key])) {
                setPropertiesToNull(obj[key]);
              } else {
                obj[key] = null;
              }
            }
          });
        }
      }
    }])
})();

/**
 * @description Service for managing member policy data as a logged in Member.
 * @namespace Services
 * @class policyService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.policy', [])
    .factory('policyService', [
      '$rootScope',
      function($rootScope) {
        return {
          getSelectedPolicy: function() {
            return $rootScope.selectedPolicy;
          }
        };
      }
    ]);
}());

/**
 * Service for showing an alert modal.
 *
 * @namespace Services
 * @class alertService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.quickAlert', [])
  .service('quickAlertService', [
    '$q',
    '$rootScope',
    '$timeout',
    function($q, $rootScope, $timeout) {
      /**
       * Shows an quick alert modal. It shows a message on an event that just occured
       *
       * @memberof quickAlertService
       * @method showQuickAlert
       * @param  {Object} [alert] Alert settings. It has thre variables, string, color ('blue', 'green', 'red') and alertBottom.
       * @param  {Boolean} bookmark Whether to bookmark or unbookmark.
       */
      this.showQuickAlert = function(alert, bookmark) {

        $rootScope.quickAlertModal = {
          alert: alert,
          bookmark: bookmark
        };

        angular.element('.quick-alert-modal').show();
      };
    }
  ]);
}());

/**
 * Service for encrypted local storage on mobile devices.
 *
 * @namespace Services
 * @class storageService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.storage', [])
    .service('storageService', [
      '$q',
      'config',
      function($q, config) {

        /**
        * Retrieves a stored object.
        *
        * @memberof storageService
        * @method get
        * @param  {String} key The unique ID the object is stored under.
        * @return {Promise} A promise that resolves to function(storedObject).
        */
        this.get = function(key) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (typeof NativeStorage === 'undefined') {
              return reject('Storage plugin unavailable.');
            }


            NativeStorage.getItem(key, function(encryptedValue) {
              var decryptedValue = CryptoJS.AES.decrypt(encryptedValue, config.key).toString(CryptoJS.enc.Utf8);
              var value = JSON.parse(decryptedValue);
              console.log(key, value);
              if (typeof value !== 'string') {
                return resolve(value);
              }

              try {
                var objectValue = JSON.parse(value);
                resolve(objectValue);
              }
              catch(error) {
                console.warn('Error in native storage getting key %s', key, error);
                resolve(value);
              }
            },reject);
          });

        };

        /**
        * Stores an object.
        *
        * @memberof storageService
        * @method set
        * @param  {String} key   The unique ID to store the object under
        * @param  {Object} value The value to store.
        * @return {Promise} A promise that resolves to function().
        */
        this.set = function(key, value) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (typeof NativeStorage === 'undefined') {
              return reject('Storage plugin unavailable.');
            }

            if (typeof value === 'object') {
              value = JSON.stringify(value);
            }
            console.log('Attempting to set object %s:', key, value);
            try {
              var encryptedValue = CryptoJS.AES.encrypt(value, config.key).toString();
              NativeStorage.setItem(key, encryptedValue, resolve, reject);
            } catch(error) {
              console.warn('Error setting app setting %s', key, value);
              reject(error);
            }
          });
        };

        /**
        * Removes a stored object.
        *
        * @memberof storageService
        * @method remove
        * @param  {String} key The unique ID the object is stored under.
        * @return {Promise} A promise that resolves to function().
        */
        this.remove = function(key) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (typeof NativeStorage === 'undefined') {
              return reject('Storage plugin unavailable.');
            }

            NativeStorage.remove(key, resolve, reject);
          });
        };
      }
    ]);
}());

/**
 * Service for showing a share modal.
 *
 * @namespace Services
 * @class shareService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.services.share', [])
  .service('shareService', [
    '$q',
    '$rootScope',
    '$window',
    'cordovaService',
    'adobeService',
    function($q, $rootScope, $window, cordovaService, adobeService) {
      /**
      * Sharing content types (TEXT|URL|FILES).
      *
      * @memberof shareService
      * @member {Object} contentType
      */
      this.contentType = {
        TEXT: 'TEXT',
        URL: 'URL',
        FILES: 'FILES'
      };

      /**
       * Activates native sharing modal.
       *
       * @memberof shareService
       * @method showSharing
       * @param  {String}       type    The type of content to share (TEXT|URL|FILES).
       * @param  {String|Array} content The content to share.
       * @return {Promise} A promise that resolves or rejects, based on whether the share was performed or cancelled.
       */
      this.showSharing = function(type, content) {
        var deferred = $q.defer();

        if(typeof cordova === 'undefined') {
          deferred.resolve();
          return deferred.promise;
        }

        var options = {};

        switch(type) {
          case 'URL':
            options.url = content;
            break;
          case 'FILES':
            if(typeof content === 'string') {
              options.files = [content];
              break;
            }
            options.files = content;
            break;
          default:
            options.message = content;
            break;
        }

        $rootScope.pausedForShare = true;
        $window.plugins.socialsharing.shareWithOptions(options, function(result) {
          deferred.resolve(result);
        }, function(err) {
          deferred.reject(err);
        });


        return deferred.promise;
      };
    }
  ]);
}());

/**
 * Service for communication with Apple's TouchID SDK.
 *
 * @namespace Services
 * @class touchIdService
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.services.touchId', [])
    .factory('touchIdService', [
      '$q',
      '$window',
      '$rootScope',
      'analyticConstants',
      'adobeService',
      'cordovaService',
      function($q, $window, $rootScope, analyticConstants, adobeService, cordovaService) {
        if (isUndefined($window.cordova)) {
          document.addEventListener('deviceready', function() {
            cordova.addConstructor(install);
          });
        }

        var deviceType = cordovaService.checkDeviceType();
        var androidFingerprintObject = {
          clientId: 'bcm',
          username: 'defaultUser',
          password: 'x(L>JKY5Y8_Sbz'
        };

        return {
          install: install,
          isAvailable: isAvailable,
          verifyFingerprint: verifyFingerprint,
          verifyFingerprintWithCustomPasswordFallback: verifyFingerprintWithCustomPasswordFallback,
          verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel: verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel,
        };

        /**
        * Returns a promise containing whether TouchID is available.
        *
        * @memberof touchIdService
        * @method isAvailable
        * @return {Promise} A promise that resolves to function(isAvailable).
        */
        function isAvailable() {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova base framework not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova touchId plugin not present.');
            }

            if (deviceType.android === true) {
              return FingerprintAuth.isAvailable(
                function(result) {
                  if (!result || !result.isAvailable) {
                    return reject('Unable to get result from Android Cordova fingerprint plugin');
                  }
                  resolve(result.isAvailable);
                  adobeService.trackAction('settings:update:touchIdOn', analyticConstants.SETTINGS_SECTION);
                },
                reject
              );
            } else {
              return $window.plugins.touchid.isAvailable(resolve, reject);
            }

          });
        }

        /**
        * Opens the verify fingerprint modal with a message.
        *
        * @memberof touchIdService
        * @method verifyFingerprint
        * @param  {String} message The message to display in the modal.
        * @return {Promise} A promise that resolves to function(), when fingerprint authentication was successful.
        */
        function verifyFingerprint(message) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova library not present.');
            }

            message = message || $rootScope.loc.CONFIRM_FINGERPRINT;
            if (deviceType.android === true) {
              return FingerprintAuth.encrypt(androidFingerprintObject, resolve, reject);
            } else {
              return $window.plugins.touchid.verifyFingerprint(message, resolve, reject);
            }
          });
        }

        /**
        * Opens the verify fingerprint or password modal with a message.
        *
        * @memberof touchIdService
        * @method verifyFingerprintWithCustomPasswordFallback
        * @param  {String} message The message to display in the modal.
        * @return {Promise} A promise that resolves to function(), when fingerprint authentication was successful.
        */
        function verifyFingerprintWithCustomPasswordFallback(message) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova library not present.');
            }

            message = message || $rootScope.loc.CONFIRM_FINGERPRINT;

            if (deviceType.android === true) {
              return FingerprintAuth.encrypt(androidFingerprintObject, resolve, reject);
            } else {
              return $window.plugins.touchid
                .verifyFingerprintWithCustomPasswordFallback(message, resolve, reject);
            }
          });
        }

        /**
        * Opens the verify fingerprint or password modal with a message and custom input label.
        *
        * @memberof touchIdService
        * @method verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel
        * @param  {String} message The message to display in the modal.
        * @param  {String} label   The text of the custom label.
        * @return {Promise} A promise that resolves to function(), when fingerprint authentication was successful.
        */
        function verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message, label) {
          return $q(function(resolve, reject) {
            if (typeof cordova === 'undefined') {
              return reject('Cordova library not present.');
            }

            if (touchIdPluginUnavailable()) {
              return reject('Cordova library not present.');
            }

            message = message || $rootScope.loc.CONFIRM_FINGERPRINT;
            label = label || '';
            if (deviceType.android === true) {
              return FingerprintAuth.encrypt(androidFingerprintObject, resolve, reject);
            } else {
              return $window.plugins.touchid
                .verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message, label, resolve, reject);
            }
          });
        }

        function install() {
          return this;
        }

        function touchIdPluginUnavailable() {
          return touchIdPluginAvailable() == false;
        }

        function touchIdPluginAvailable() {
          return isDefined($window.plugins) && isDefined($window.plugins.touchid);
        }

        function isDefined(potentialVal) {
          return isUndefined(potentialVal) === false;
        }

        function isUndefined(potentialVal) {
          return typeof potentialVal === 'undefined';
        }
      }
    ]);
}());
(function() {
  angular
    .module('blueconnect.mobile.services.transparencyFactory', [])
    .factory('TransparencyFactory', [
      '$rootScope',
      'languageService',
      function($rootScope, languageService) {
        if (!$rootScope.loggedIn) {
          $rootScope.loc = languageService.getInternalLocale($rootScope.language || 'en');
        }

        var userSetData = {
          zipCode: null,
          currentLocationZipCode: null,
          city: null,
          distance: 25,
          selectedPlan: {},
          searchTerm: null,
          browseTerm: null,
          resultsTerm: null,
          resultsDetailsTerm: null,
          resultsDetailsIndex: null,
          resultsDetailsItemLabel: null,
          resultsDetailsItem: null,
          resultsDetailsNetworksAccepted: null,
          resultsDetailsSpecialties: null,
          resultsDetailsCredentials: null,
          resultsDetailsAwards: null,
          resultsDetailsLanguages: null,
          resultsDetailsAmenities: null,
          resultsDetailsAffiliations: null,
          resultsDetailsLimitations: null,
          resultsDetailsIdentifiers: null,
          geoLocationStatus: false,
          zipRangeNC: null,
          resultsToShare: null,
          existingSearchResults: null,
          isLocationBlocked: false,
          locationMsg: null,
          filterTier: '',
          filterSpecialty: '',
          filterGender: '',
          currentPolicyMembers: null,
          selectedMember: null,
          procedureId: null,
          filtersData: null,
          filterDistance: null,
          filterZipCode: null,
          filterCityname: null,
          displaySmartShopper: null,
          smartShopperTerm: null,
          smartShopperFilter: null,
          selectedRecommendedPcpData: null,
        };

        return {
          getUserSetData: getUserSetData,
          getZipCode: getZipCode,
          setZipCode: setZipCode,
          setCity: setCity,
          getCity: getCity,
          resetCity: resetCity,
          getCurrentLocationZipCode: getCurrentLocationZipCode,
          setCurrentLocationZipCode: setCurrentLocationZipCode,
          getDistance: getDistance,
          setDistance: setDistance,
          getSelectedPlan: getSelectedPlan,
          setSelectedPlan: setSelectedPlan,
          getSearchTerm: getSearchTerm,
          setSearchTerm: setSearchTerm,
          setResultsProcedureId: setResultsProcedureId,
          getResultsProcedureId: getResultsProcedureId,
          getBrowseTerm: getBrowseTerm,
          setBrowseTerm: setBrowseTerm,
          setBrowseLevelTwoTerm: setBrowseLevelTwoTerm,
          getBrowseLevelTwoTerm: getBrowseLevelTwoTerm,
          resetSearchCriteria: resetSearchCriteria,
          resetSearchTerms: resetSearchTerms,
          getGeoLocationStatus: getGeoLocationStatus,
          setGeoLocationStatus: setGeoLocationStatus,
          validateZipCode: validateZipCode,
          validateCity: validateCity,
          getZipRangeNC: getZipRangeNC,
          setZipRangeNC: setZipRangeNC,
          getResultsToShare: getResultsToShare,
          setResultsToShare: setResultsToShare,
          getExistingSearchResults: getExistingSearchResults,
          setExistingSearchResults: setExistingSearchResults,
          setLocationBlocked: setLocationBlocked,
          getLocationBlocked: getLocationBlocked,
          setLocationMsg: setLocationMsg,
          getLocationMsg: getLocationMsg,
          setResultsTerm: setResultsTerm,
          getResultsTerm: getResultsTerm,
          setResultsDetailsTerm: setResultsDetailsTerm,
          getResultsDetailsTerm: getResultsDetailsTerm,
          setResultsDetailsItemLabel: setResultsDetailsItemLabel,
          getResultsDetailsItemLabel: getResultsDetailsItemLabel,
          setResultDetailsItem: setResultDetailsItem,
          getResultsDetailsItem: getResultsDetailsItem,
          setResultsDetailsIndex: setResultsDetailsIndex,
          getResultsDetailsIndex: getResultsDetailsIndex,
          setResultsDetailsNetworksAccepted: setResultsDetailsNetworksAccepted,
          getResultsDetailsNetworksAccepted: getResultsDetailsNetworksAccepted,
          setResultsDetailsSpecialties: setResultsDetailsSpecialties,
          getResultsDetailsSpecialties: getResultsDetailsSpecialties,
          setResultsDetailsCredentials: setResultsDetailsCredentials,
          getResultsDetailsCredentials: getResultsDetailsCredentials,
          setResultsDetailsAwards: setResultsDetailsAwards,
          getResultsDetailsAwards: getResultsDetailsAwards,
          getResultsDetailsLanguages: getResultsDetailsLanguages,
          hasResultsDetailsLanguages: hasResultsDetailsLanguages,
          setResultsDetailsLanguages: setResultsDetailsLanguages,
          getResultsDetailsAmenities: getResultsDetailsAmenities,
          hasResultsDetailsAmenities: hasResultsDetailsAmenities,
          setResultsDetailsAmenities: setResultsDetailsAmenities,
          getResultsDetailsAffiliations: getResultsDetailsAffiliations,
          hasResultsDetailsAffiliations: hasResultsDetailsAffiliations,
          setResultsDetailsAffiliations: setResultsDetailsAffiliations,
          getResultsDetailsLimitations: getResultsDetailsLimitations,
          hasResultsDetailsLimitations: hasResultsDetailsLimitations,
          setResultsDetailsLimitations: setResultsDetailsLimitations,
          getResultsDetailsIdentifiers: getResultsDetailsIdentifiers,
          hasResultsDetailsIdentifiers: hasResultsDetailsIdentifiers,
          setResultsDetailsIdentifiers: setResultsDetailsIdentifiers,
          setFilterTierSelectedTerm: setFilterTierSelectedTerm,
          getFilterTierSelectedTerm: getFilterTierSelectedTerm,
          setFilterSpecialtySelectedTerm: setFilterSpecialtySelectedTerm,
          getFilterSpecialtySelectedTerm: getFilterSpecialtySelectedTerm,
          setFilterGenderSelectedTerm: setFilterGenderSelectedTerm,
          getFilterGenderSelectedTerm: getFilterGenderSelectedTerm,
          setSearchSpecialtyId: setSearchSpecialtyId,
          getSearchSpecialtyId: getSearchSpecialtyId,
          setCurrentPolicyMembers: setCurrentPolicyMembers,
          getCurrentPolicyMembers: getCurrentPolicyMembers,
          setSelectedMember: setSelectedMember,
          getSelectedMember: getSelectedMember,
          resetResultsDetails: resetResultsDetails,
          resetFilterData: resetFilterData,
          setFiltersData: setFiltersData,
          getFiltersData: getFiltersData,
          setFilterDistance: setFilterDistance,
          getFilterDistance: getFilterDistance,
          setFilterZipCode: setFilterZipCode,
          getFilterZipCode: getFilterZipCode,
          setFilterCityName: setFilterCityName,
          getFilterCityName: getFilterCityName,
          setSmartShopperResultItem: setSmartShopperResultItem,
          getSmartShopperResultItem: getSmartShopperResultItem,
          setSmartShopperTerm: setSmartShopperTerm,
          getSmartShopperTerm: getSmartShopperTerm,
          setSmartShopperFilter: setSmartShopperFilter,
          getSmartShopperFilter: getSmartShopperFilter,
          setRecommendedPcpData: setRecommendedPcpData,
          getRecommendedPcpData: getRecommendedPcpData,
        };

        function getUserSetData() {
          return userSetData;
        }
        function getZipCode() {
          return userSetData.zipCode;
        }
        function setZipCode(zipCode) {
          userSetData.zipCode = zipCode;
          return this;
        }
        function getCity() {
          return userSetData.city;
        }
        function setCity(cityObj) {
          userSetData.city = cityObj;
          return this;
        }
        function resetCity(cityFullName) {
          console.log('called reset city!');
          userSetData.city = null;
          userSetData.city = { cityFullName: cityFullName };
          return this;
        }
        function getCurrentLocationZipCode() {
          return userSetData.currentLocationZipCode;
        }
        function setCurrentLocationZipCode(zipCode) {
          userSetData.currentLocationZipCode = zipCode;
          return this;
        }
        function getDistance() {
          return userSetData.distance;
        }
        function setDistance(distance) {
          userSetData.distance = distance;
          return this;
        }
        function getSelectedPlan() {
          return userSetData.selectedPlan;
        }
        function setSelectedPlan(plan) {
          userSetData.selectedPlan = plan;
          return this;
        }
        function setResultsProcedureId(procedureId) {
          userSetData.procedureId = procedureId;
          return this;
        }
        function getResultsProcedureId() {
          return userSetData.procedureId;
        }
        function getSearchTerm() {
          return userSetData.searchTerm;
        }
        function setSearchTerm(term) {
          // Set.
          userSetData.searchTerm = term;

          // Reset index if there is one.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }
        function getBrowseTerm() {
          return userSetData.browseTerm;
        }
        function setBrowseTerm(term) {
          // Set.
          userSetData.browseTerm = term;

          // Reset index if there is one.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }

        function getBrowseLevelTwoTerm() {
          return userSetData.browseLevelTwoTerm;
        }
        function setBrowseLevelTwoTerm(term) {
          // Set.
          userSetData.browseLevelTwoTerm = term;

          // Reset index if there is one.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }
        function getGeoLocationStatus() {
          return userSetData.geoLocationStatus;
        }
        function setGeoLocationStatus(status) {
          userSetData.geoLocationStatus = status;
          return this;
        }

        function getZipRangeNC() {
          return userSetData.zipRangeNC;
        }
        function setZipRangeNC(zipMin, zipMax) {
          userSetData.zipRangeNC = { min: zipMin, max: zipMax };
          return this;
        }

        function resetSearchTerms() {
          setSearchTerm(null);
          setBrowseTerm(null);
          setResultsTerm(null);
        }

        function resetSearchCriteria() {
          setZipCode(null);
          setDistance(25);
        }

        function validateZipCode(zipCode) {
          const isNorthCarolinaPlan =
            userSetData.selectedPlan.isNorthCarolinaPlan;
          var retVal = { status: true, message: null };

          if (!zipCode || zipCode.toString().length <= 0) {
            retVal.message = $rootScope.loc.ERROR_REQUIRED;
            retVal.status = false;
            return retVal;
          }
          if (!/^[0-9]{5}(?:-[0-9]{4})?$/.test(zipCode.toString())) {
            retVal.message = $rootScope.loc.ERROR_ZIP_CODE_MUST_BE_5_DIGITS;
            retVal.status = false;
            return retVal;
          }
          if (!/^(?!0{3})[0-9]{3,5}$/.test(zipCode.toString())) {
            retVal.message = $rootScope.loc.ERROR_LOCATION_NOT_FOUND;
            retVal.status = false;
            return retVal;
          }
          if (
            isNorthCarolinaPlan &&
            (zipCode < userSetData.zipRangeNC.min ||
              zipCode > userSetData.zipRangeNC.max)
          ) {
            retVal.message = $rootScope.loc.ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE;
            retVal.status = false;
            return retVal;
          } else {
            return retVal;
          }
        }

        function validateCity(cityObj) {
          const isNorthCarolinaPlan =
            userSetData.selectedPlan.isNorthCarolinaPlan;

          var retVal = { status: true, message: null };

          if (!cityObj || !cityObj.cityFullName || typeof cityObj.cityFullName === 'undefined' || cityObj.cityFullName.length <= 0) {
            retVal.message = $rootScope.loc.ERROR_REQUIRED;
            retVal.status = false;
            return retVal;
          }
          if (cityObj && (!cityObj.zip || typeof cityObj.zip === 'undefined')) {
            retVal.message = $rootScope.loc.ERROR_SELECT_FROM_DROPDOWN_LIST;
            retVal.status = false;
            return retVal;
          }
          if (
            cityObj &&
            cityObj.zip &&
            isNorthCarolinaPlan &&
            (cityObj.zip < userSetData.zipRangeNC.min ||
              cityObj.zip > userSetData.zipRangeNC.max)
          ) {
            retVal.message = $rootScope.loc.ERROR_MUST_BE_NC_CITY_COUNTY_ZIP_CODE;
            retVal.status = false;
            return retVal;
          } else {
            return retVal;
          }
        }

        function getResultsToShare() {
          return userSetData.resultsToShare;
        }

        function setResultsToShare(resultsToShare) {
          userSetData.resultsToShare = resultsToShare;
          return this;
        }

        function getExistingSearchResults() {
          return userSetData.existingSearchResults;
        }

        function setExistingSearchResults(searchResults) {
          userSetData.existingSearchResults = searchResults;
          return this;
        }

        function setLocationBlocked(isBlocked) {
          userSetData.isLocationBlocked = isBlocked;
          return this;
        }

        function getLocationBlocked() {
          return userSetData.isLocationBlocked;
        }

        function setLocationMsg(blockedMsg) {
          userSetData.locationMsg = blockedMsg;
          return this;
        }

        function getLocationMsg() {
          return userSetData.locationMsg;
        }

        function setResultsTerm(resultsTerm) {
          // Set.
          userSetData.resultsTerm = resultsTerm;

          // Reset index, if there is one, due to new results term.
          setResultsDetailsIndex(null);

          // Return.
          return this;
        }

        function getResultsTerm() {
          return userSetData.resultsTerm;
        }

        function setResultsDetailsTerm(resultsDetailsTerm) {
          userSetData.resultsDetailsTerm = resultsDetailsTerm;
          return this;
        }

        function getResultsDetailsTerm() {
          return userSetData.resultsDetailsTerm;
        }

        function setResultsDetailsItemLabel(resultsDetailsItemLabel) {
          userSetData.resultsDetailsItemLabel = resultsDetailsItemLabel;
          return this;
        }

        function getResultsDetailsItemLabel() {
          return userSetData.resultsDetailsItemLabel;
        }

        function setResultsDetailsIndex(resultsDetailsIndex) {
          userSetData.resultsDetailsIndex = resultsDetailsIndex;
          return this;
        }

        function getResultsDetailsIndex() {
          return userSetData.resultsDetailsIndex;
        }

        function getResultsDetailsItem() {
          return userSetData.resultsDetailsItem;
        }

        function setResultDetailsItem(resultsDetailsItem) {
          userSetData.resultsDetailsItem = resultsDetailsItem;
          return this;
        }

        function setResultsDetailsNetworksAccepted(networksAccepted) {
          userSetData.resultsDetailsNetworksAccepted = networksAccepted;
          return this;
        }

        function getResultsDetailsNetworksAccepted() {
          return userSetData.resultsDetailsNetworksAccepted;
        }

        function setResultsDetailsSpecialties(specialties) {
          userSetData.resultsDetailsSpecialties = specialties;
          return this;
        }

        function getResultsDetailsSpecialties() {
          return userSetData.resultsDetailsSpecialties;
        }

        function setResultsDetailsCredentials(credentials) {
          userSetData.resultsDetailsCredentials = credentials;
          return this;
        }

        function getResultsDetailsCredentials() {
          return userSetData.resultsDetailsCredentials;
        }

        function setResultsDetailsAwards(awards) {
          userSetData.resultsDetailsAwards = awards;
          return this;
        }

        function getResultsDetailsAwards() {
          return userSetData.resultsDetailsAwards;
        }

        function setFilterTierSelectedTerm(tierItem) {
          userSetData.filterTier = tierItem;
          return this;
        }
        function getFilterTierSelectedTerm() {
          return userSetData.filterTier;
        }

        function setFilterSpecialtySelectedTerm(specialtyItem) {
          userSetData.filterSpecialty = specialtyItem;
          return this;
        }
        function getFilterSpecialtySelectedTerm() {
          return userSetData.filterSpecialty;
        }

        function setFilterGenderSelectedTerm(genderItem) {
          userSetData.filterGender = genderItem;
          return this;
        }

        function getFilterGenderSelectedTerm() {
          return userSetData.filterGender;
        }

        function setSearchSpecialtyId(searchId) {
          userSetData.searchSpecialtyId = searchId;
          return this;
        }

        function getSearchSpecialtyId() {
          return userSetData.searchSpecialtyId;
        }

        function setCurrentPolicyMembers(members) {
          userSetData.currentPolicyMembers = members;
          return this;
        }

        function getCurrentPolicyMembers() {
          return userSetData.currentPolicyMembers;
        }

        function setSelectedMember(member) {
          userSetData.selectedMember = member;
          return this;
        }

        function getSelectedMember() {
          return userSetData.selectedMember;
        }

        function hasResultsDetailsLanguages() {
          return !!userSetData.resultsDetailsLanguages;
        }

        function getResultsDetailsLanguages() {
          return userSetData.resultsDetailsLanguages;
        }

        function setResultsDetailsLanguages(languages) {
          userSetData.resultsDetailsLanguages = languages;
          return this;
        }

        function hasResultsDetailsAmenities() {
          return !!userSetData.resultsDetailsAmenities;
        }

        function getResultsDetailsAmenities() {
          return userSetData.resultsDetailsAmenities;
        }

        function setResultsDetailsAmenities(amenities) {
          userSetData.resultsDetailsAmenities = amenities;
          return this;
        }

        function hasResultsDetailsAffiliations() {
          return !!userSetData.resultsDetailsAffiliations;
        }

        function getResultsDetailsAffiliations() {
          return userSetData.resultsDetailsAffiliations;
        }

        function setResultsDetailsAffiliations(affiliations) {
          userSetData.resultsDetailsAffiliations = affiliations;
          return this;
        }

        function hasResultsDetailsLimitations() {
          return !!userSetData.resultsDetailsLimitations;
        }

        function getResultsDetailsLimitations() {
          return userSetData.resultsDetailsLimitations;
        }

        function setResultsDetailsLimitations(limitations) {
          userSetData.resultsDetailsLimitations = limitations;
          return this;
        }

        function hasResultsDetailsIdentifiers() {
          return !!userSetData.resultsDetailsIdentifiers;
        }

        function getResultsDetailsIdentifiers() {
          return userSetData.resultsDetailsIdentifiers;
        }

        function setResultsDetailsIdentifiers(identifiers) {
          userSetData.resultsDetailsIdentifiers = identifiers;
          return this;
        }

        function resetResultsDetails() {
          // Reset values.
          userSetData.resultsDetailsAffiliations = null;
          userSetData.resultsDetailsAmenities = null;
          userSetData.resultsDetailsAwards = null;
          userSetData.resultsDetailsCredentials = null;
          userSetData.resultsDetailsIdentifiers = null;
          userSetData.resultsDetailsLanguages = null;
          userSetData.resultsDetailsLimitations = null;
          userSetData.resultsDetailsNetworksAccepted = null;
          userSetData.resultsDetailsSpecialties = null;

          // Return.
          return this;
        }

        function resetFilterData() {
          setFilterSpecialtySelectedTerm('');
          setFilterTierSelectedTerm('');
          setFilterGenderSelectedTerm('');
          return this;
        }

        function setFiltersData(filtersData) {
          userSetData.filtersData = filtersData;
        }

        function getFiltersData() {
          return userSetData.filtersData;
        }

        function setFilterDistance(filterDistance) {
          userSetData.filterDistance = filterDistance;
        }

        function getFilterDistance() {
          return userSetData.filterDistance;
        }

        function setFilterZipCode(filterZipCode) {
          userSetData.filterZipCode = filterZipCode;
        }

        function getFilterZipCode() {
          return userSetData.filterZipCode;
        }

        function setFilterCityName(filterCityname) {
          userSetData.filterCityname = filterCityname;
        }

        function getFilterCityName() {
          return userSetData.filterCityname;
        }

        function setSmartShopperResultItem(smartShopperValue) {
          userSetData.displaySmartShopper = ($rootScope.isSmartShopperEligible && smartShopperValue) ? true : false;
        }

        function getSmartShopperResultItem() {
          return userSetData.displaySmartShopper;
        }
        function setSmartShopperTerm(searchTerm, preposition) {
          userSetData.smartShopperTerm = {
            searchTerm: searchTerm,
            preposition: preposition || ''
          };
        }

        function getSmartShopperTerm() {
          return userSetData.smartShopperTerm;
        }
        function setSmartShopperFilter(value) {
          userSetData.smartShopperFilter = value;
        }

        function getSmartShopperFilter() {
          return userSetData.smartShopperFilter;
        }
        function setRecommendedPcpData(providerData) {
          userSetData.selectedRecommendedPcpData = providerData;
        }

        function getRecommendedPcpData() {
          return userSetData.selectedRecommendedPcpData;
        }
      },
    ]);
})();

/**
 * Controller for the about view.
 *
 * @namespace Controllers
 * @class AboutController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.about', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('AboutController', [
            '$scope',
            '$rootScope',
            '$timeout',
            '$window',
            'config',
            'adobeService',
            'pageService',
            'analyticConstants',
            function($scope, $rootScope, $timeout, $window, config, adobeService, pageService, analyticConstants) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;
                $scope.alertModal = $rootScope.alertModal;

                /**
                 *Display the alert window for external link to open the url in browser
                 **/
                $scope.openInBrowser = $rootScope.openInBrowser;
                /**
                 * Toggles the expansion of an accordion item.
                 *
                 * @memberof aboutDetails
                 * @method toggleItem
                 */
                $scope.toggleItem = function(item, id) {
                    for (var i = 0; i < $scope.aboutDetails.content.length; i++) {
                        if (i != id) {
                            $scope.aboutDetails.content[i].expandedDiv = false;
                        }
                    }
                    item.expandedDiv = !item.expandedDiv;
                };

                /**
                 * Opens the default mail application
                 */
                $scope.openMail = $rootScope.openMail;

                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof aboutDetails
                 * @method getEnvironment
                 * @return {String} The environment name.
                 */
                $scope.getEnvironment = function() {
                  if (config.env === 'PROD') {
                    return '';
                  }

                  return config.env;
                };

                var languageAttempts = 0;

                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof AboutController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof AboutController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    /**
                     * For basicNavbar, we have to pass this function
                     * to handle the left click
                     */
                    $scope.basicNavbarLeftClick = function() {
                        $rootScope.fromBackButton = true;
                        $rootScope.detailsFromBackButton = true;
                        $window.history.back();
                    };

                    if (!$rootScope.loc) {
                        languageAttempts++;
                        if (languageAttempts > 5) {
                            $rootScope.$emit('pageLoaded');
                            $rootScope.showNetworkErrorAlert();
                            return;
                        }

                        $timeout($scope.getPage, 100);
                        return;
                    }

                    var pageName = 'about';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, {loggedIn : $rootScope.loggedIn}).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                        adobeService.trackState(pageName, analyticConstants.HELP_SECTION);
                    }, function() {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };

                $rootScope.verifyLocaleRetrieved();
                $scope.getPage();
            }
        ]);
}());

/**
 * Controller for the Autopay Method flow view.
 *
 * @namespace Controllers
 * @class AutopayMethodController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.autopay.method', [

  ])
  .controller('AutopayMethodController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc ? $rootScope.loc.BP_HEADER_AUTOPAY_METHOD : '';
      $scope.getPage = getPage;
      $scope.getPage();

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof AutopayMethodController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof AutopayMethodController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        $rootScope.$emit('pageLoading');

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };
        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId,
        }

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'autopay-method',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

/**
* Controller for the benefits page view.
*
* @namespace Controllers
* @class BenefitsController
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.benefits', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('BenefitsController', [
    '$scope',
    '$rootScope',
    '$location',
    'coachmarkService',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, coachmarkService, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = true;
      $rootScope.showPolicySelect = true;
      $rootScope.pageTitle = $rootScope.loc.BENEFITS;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

      $scope.getPage = function() {
        $scope.pageHtml = '';
        var pageName = 'benefits-main';
        var cachePage = true;

        /**
        * The directive HTML for the page.
        *
        * @memberof BenefitsController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';
        var query = $location.search();
        query.benefitPage = '';

        // check current page url
        var currentUrl = $location.url();
        // when toggle language in settings page, check previous url
        var previousUrl = $location.url().indexOf('/settings') > -1 ? $rootScope.routes.previous : '';

        //Tiered plan
        if (currentUrl.indexOf('/benefits/tier1') > -1)
        {
          query.benefitPage = 'tier1network';
        }

        if (currentUrl.indexOf('/benefits/tier2') > -1)
        {
          query.benefitPage = 'tier2network';
        }

        if (currentUrl.indexOf('/benefits/tieroon') > -1)
        {
          query.benefitPage = 'tieroonetwork';
        }

        if (currentUrl.indexOf('/benefits/out-of-network') > -1)
        {
          query.benefitPage = 'outnetwork';
        }

        if (currentUrl.indexOf('/benefits/preferinnetwork') > -1)
        {
          query.benefitPage = 'preferinnetwork';
        }

        if (currentUrl.indexOf('/benefits/otherinnetwork') > -1)
        {
          query.benefitPage = 'otherinnetwork';
        }

        if (currentUrl.indexOf('/benefits/otheroutofnetwork') > -1)
        {
          query.benefitPage = 'otheroutofnetwork';
        }

        //
        if (currentUrl.indexOf('/benefits/benefitsselectinnetwork') > -1)
        {
          query.benefitPage = 'planselectinnetwork';
        }

        if (currentUrl.indexOf('/benefits/benefitsselectoutnetwork') > -1)
        {
          query.benefitPage = 'planselectoutnetwork';
        }

        if (currentUrl.indexOf('/medicare-benefits') > -1) {
          pageName = "medicare-benefits";
        }

        if (currentUrl.indexOf('/benefits/viewcoverage') > -1 || previousUrl.indexOf('/benefits/viewcoverage') > -1) {
          $rootScope.showNav = true;
          $rootScope.showPolicySelect = false;

          $rootScope.pageTitle = $rootScope.loc.BENEFITS_COVERAGE_DETAILS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          pageName = "benefits-coverage";
        }

        if (currentUrl.indexOf('/benefits/dental-only') > -1 || previousUrl.indexOf('/benefits/dental-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          pageName = "benefits-dental-only";
        }

        if (currentUrl.indexOf('/benefits/low-cost-dental-only') > -1 || previousUrl.indexOf('/benefits/low-cost-dental-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-low-cost-dental-only";
        }

        if (currentUrl.indexOf('/benefits/bbt-only') > -1 || previousUrl.indexOf('/benefits/bbt-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-bbt-only";
        }

        if (currentUrl.indexOf('/benefits/vision-only') > -1 || previousUrl.indexOf('/benefits/vision-only') > -1) {
          $rootScope.showPolicySelect = false;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-vision-only";
        }
        
        if (currentUrl.indexOf('/benefits/contraceptive-only') > -1 || previousUrl.indexOf('/benefits/contraceptive-only') > -1) {
          $rootScope.showPolicySelect = true;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          pageName = "benefits-contraceptive-only";
        }

        query.policyIndex = $rootScope.policyIndex;
        query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
        query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
        query.policyExternalId = $rootScope.selectedPolicy.externalId;
        query.url = $location.path();
        query.deviceType = $rootScope.device;
        if ($rootScope.selectedPolicy.isVision) {
          query.visionPlan = $rootScope.selectedPolicy.visionPlan;
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query, cachePage).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          console.log(pageHtml)
            $scope.pageHtml = pageHtml;
            adobeService.trackState(query.url.substring(1), analyticConstants.BENEFITS_SECTION);
            return coachmarkService.showCoachmarks('benefits');
        }, function() {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      // once Member logs out, unregister the event listener for refreshing benefits page;
      $rootScope.$on(
        'LOGOUT',
        $rootScope.$on('policySelected', function() {
          $scope.getPage();
        })
      );

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the Billing History Filter.
 *
 * @namespace Controllers
 * @class BillingHistoryFilter
 */
(function () {
  'use strict';
  angular
      .module('blueconnect.mobile.controllers.billingHistoryFilter', [
        'bcbsnc.cloud.services.page'
      ])
      .controller('BillingHistoryFilter',
          [
            'BillingInvoiceHistoryFactory',
            '$rootScope',
            '$window',
            '$scope',
            'adobeService',
            'analyticConstants',
            function (BillingInvoiceHistoryFactory, $rootScope, $window, $scope, adobeService, analyticConstants) {

              $scope.isMedicareSSA = BillingInvoiceHistoryFactory.getMedicareSSAValue();
              // hide the navbar
              $rootScope.showNav = false;

              // hide the policy select dropdown
              $rootScope.showPolicySelect = false;

              // default the loc object to avoid ReferenceErrors later
              $scope.loc = $rootScope.loc || {};

              // default the navbar details to avoid unref
              $scope.navbarDetails = {};

              $scope.navbarDetails = {
                display: {
                  title: $rootScope.loc.BP_FILTER_BILLING_HISTORY,
                  leftNavButton: {
                    icon: 'close'
                  }
                },
                onLeftClick: function () {
                  $window.history.back();
                }
              };

              $rootScope.pageTitle = $rootScope.loc.BP_FILTER_BILLING_HISTORY;
              $scope.startDateSelected = BillingInvoiceHistoryFactory.getStartIndex() || 24;
              $scope.endDateSelected = BillingInvoiceHistoryFactory.getEndIndex() || 0;
              var dateFormat = 'MMMM YYYY';
              var startDates = [];
              var start = moment().format(dateFormat);

              var index = 1;
              while (index <= 25) {
                startDates.push({value: index, label: start});
                start = moment().subtract(index, 'month').format(dateFormat);
                index++;
              }

              $scope.startDates = startDates;
              $scope.endDates = startDates;
              BillingInvoiceHistoryFactory.setDateList(startDates);
              $scope.historyTypeSelected = BillingInvoiceHistoryFactory.getHistoryType() || 'A';
              $scope.dateRangeSelected = BillingInvoiceHistoryFactory.getTimeSpan() || '3';

              $scope.validateDateRange = function(fromDate, toDate) {
                if (fromDate && toDate && moment(fromDate.label, dateFormat).isAfter(moment(toDate.label, dateFormat))) {
                  $scope.billingHistoryFilterForm.$invalid = true;
                }
              };

              $scope.selectButton = function () {
                $scope.dateRangeSelected = "99";
              };

              $scope.validateBillingHistory = function(formObj) {

                (!$scope.isMedicareSSA) ? BillingInvoiceHistoryFactory.setHistoryType(formObj.$$parentForm.billingHistoryFilterForm.historyTypeSelected.$modelValue) : BillingInvoiceHistoryFactory.setHistoryType('A');

                var timeSpan = (formObj.$$parentForm.billingHistoryFilterForm.dateRangeSelected.$modelValue).toString();

                if (timeSpan === '0' || timeSpan === '99') {
                  var lastYear = moment().subtract(1, 'year').format('YYYY');
                  var lastJan = moment(lastYear, 'YYYY').month(0);
                  var lastDec = moment(lastYear, 'YYYY').month(11);

                  if (timeSpan === '99' && (!formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue || !formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue)){
                    return console.warn('form is invalid, cannot proceed');
                  }

                  if (timeSpan === '0'){
                    //This is last years plan
                    BillingInvoiceHistoryFactory.setSearchFromDate(lastJan);
                    BillingInvoiceHistoryFactory.setSearchToDate(lastDec);
                  } else {
                    //This is the custom date range
                    timeSpan = (moment(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.label)).diff(moment(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.label), 'months');
                    BillingInvoiceHistoryFactory.setStartIndex(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.value);
                    BillingInvoiceHistoryFactory.setStartDate(moment(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.label));
                    BillingInvoiceHistoryFactory.setEndIndex(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.value);
                    BillingInvoiceHistoryFactory.setEndDate(moment(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.label));
                    BillingInvoiceHistoryFactory.setSearchFromDate(moment(formObj.$$parentForm.billingHistoryFilterForm.startDate.$modelValue.label));
                    BillingInvoiceHistoryFactory.setSearchToDate(moment(formObj.$$parentForm.billingHistoryFilterForm.endDate.$modelValue.label));
                  }//end timeSpan === 0

                } else {
                  //This is 3, 6, 12, or 24 selected
                  BillingInvoiceHistoryFactory.setSearchFromDate(moment().subtract(timeSpan, 'month'));
                  BillingInvoiceHistoryFactory.setSearchToDate(moment());
                }//end timeSpan 0 or 99

                BillingInvoiceHistoryFactory.setTimeSpan(timeSpan);
                $rootScope.gotoView('billing-invoice-history?search=true');
              };

              adobeService.trackState('billingInvoiceHistoryFilter', analyticConstants.BILLING_SECTION);
            }]);
})();

/**
 * Controller for the billingHistoryUnderstandInvoice.
 *
 * @namespace Controllers
 * @class billingHistoryUnderstandInvoice
 */
(function () {
  'use strict';

  angular
      .module('blueconnect.mobile.controllers.billingHistoryUnderstandInvoice', [
        'bcbsnc.cloud.services.page'
      ])
      .controller('BillingHistoryUnderstandInvoice', [
            '$rootScope',
            '$scope',
            '$location',
            '$anchorScroll',
            'adobeService', 
            'analyticConstants',
            function ($rootScope, $scope, $location, $anchorScroll, adobeService, analyticConstants) {

              // hide the navbar
              $rootScope.showNav = false;
              $scope.gotoView = $rootScope.gotoView;

              // hide the policy select dropdown
              $rootScope.showPolicySelect = false;

              // default the loc object to avoid ReferenceErrors later
              $scope.loc = $rootScope.loc || {};

              // default the navbar details to avoid unref
              $scope.navbarDetails = {};

              $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

              $scope.navbarDetails = {
                display: {
                  title: $rootScope.loc.BP_TITLE_UNDERSTANDING_INVOICE,
                  leftNavButton: {
                    icon: 'close'
                  }
                },
                onLeftClick: function () {
                  $scope.$broadcast('PAGE_BACK');
                }
              };

              $scope.gotoAnchor = function (divName) {
                // set the location.hash to the id of the element you wish to scroll to.
                $location.hash(divName);
                // call $anchorScroll()
                $anchorScroll();
              };

              adobeService.trackState('billingUnderstandingInvoice', analyticConstants.BILLING_SECTION);
            }]);
})();

/**
 * Controller for the about view.
 *
 * @namespace Controllers
 * @class AboutController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.billinghistory', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('BillingHistoryController', [
        '$scope',
        '$rootScope',
        '$location',
        '$timeout',
        '$window',
        'pageService',
        'adobeService',
        function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
        $rootScope.showNav = true;
        $rootScope.showPolicySelect = false;

        /**
         * Retrieves the page HTML from the page service. Called on view load.
         *
         * @memberof HelpController
         * @method getPage
         */
        $scope.getPage = function() {
            /**
            * The directive HTML for the page.
            *
            * @memberof HelpController
            * @member {String} pageHtml
            */
           
            $scope.pageHtml = '';
            
            var pageName      = 'billing-history';
        
            $rootScope.pageTitle = $rootScope.loc.BP_VIEW_BILLING_HISTORY;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

            var query         = $location.search();
           
            $rootScope.$emit('pageLoading');
            pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language).then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
            }, function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            });
        };

        $rootScope.verifyLocaleRetrieved();
        $scope.getPage();
        }
    ]);
}());

(function () {
  angular
    .module('blueconnect.mobile.controllers.billingInvoiceHistory', [])
    .controller('BillingInvoiceHistory', ['BillingInvoiceHistoryFactory', 'restService', '$rootScope', '$scope', 'adobeService', 'analyticConstants',
      function (BillingInvoiceHistoryFactory, restService, $rootScope, $scope, adobeService, analyticConstants) {
        $scope.loc = $rootScope.loc;

        $rootScope.showNav = true;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK_TO_BILLING;
        $rootScope.pageTitle = $rootScope.loc.BP_TITLE_BILLING_HISTORY;
        $rootScope.showPolicySelect = true;

        $scope.filterSpan = BillingInvoiceHistoryFactory.getTimeSpan();

        $rootScope.$emit('pageLoading');
        restService.getPageData(
          restService.devices.MOBILE,
          'billing-invoice-history',
          $rootScope.language,
          {
            policyIndex: $rootScope.policyIndex,
            policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
            policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
            policyExternalId : $rootScope.selectedPolicy.externalId,
            searchFromDate: BillingInvoiceHistoryFactory.serviceFormattedSearchFromDate(),
            searchToDate: BillingInvoiceHistoryFactory.serviceFormattedSearchToDate(),
            transactionType: BillingInvoiceHistoryFactory.getHistoryType()
          })
          .then(function (response) {
            $rootScope.$emit('pageLoaded');
            if (response.account.accounts.length){
              BillingInvoiceHistoryFactory.setAccountToken(response.account.accounts[0].token);
              (response.policy.sourceSystem.toLowerCase() === 'amisys' && response.account.accounts[0].payIneligibleCode === 'S') ? BillingInvoiceHistoryFactory.setMedicareSSAValue(true) : BillingInvoiceHistoryFactory.setMedicareSSAValue(false);
            }
            $scope.serviceResponse = response;
            adobeService.trackState('billingInvoiceHistory', analyticConstants.BILLING_SECTION);
          }).catch(function (error) {
            $rootScope.$emit('pageLoaded');
            console.warn(error);
          });


      }]);
})();

/**
 * Controller for the about view.
 *
 * @namespace Controllers
 * @class AboutController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.billingpaperless', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('BillingPaperlessController', [
        '$scope',
        '$rootScope',
        '$location',
        '$timeout',
        '$window',
        'pageService',
        'adobeService',
        function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
        $rootScope.showNav = true;
        $rootScope.showPolicySelect = false;

        /**
         * Retrieves the page HTML from the page service. Called on view load.
         *
         * @memberof HelpController
         * @method getPage
         */
        $scope.getPage = function() {
            /**
            * The directive HTML for the page.
            *
            * @memberof HelpController
            * @member {String} pageHtml
            */
           
            $scope.pageHtml = '';
            
            var pageName      = 'billing-paperless';
            $rootScope.pageTitle = $rootScope.loc.BP_SETUP_PAPERLESS_BILLING;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

            var query         = $location.search();
           
            $rootScope.$emit('pageLoading');
            pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language).then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
            }, function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            });
        };

        $rootScope.verifyLocaleRetrieved();
        $scope.getPage();
        }
    ]);
}());

/**
 * Controller for the Billing Preferences view.
 *
 * @namespace Controllers
 * @class BillingPreferencesController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.billing.preferences', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('BillingPreferencesController', [
          '$scope',
          '$rootScope',
          '$window',
          'adobeService',
          'pageService',
          'analyticConstants',
          function($scope, $rootScope, $window, adobeService, pageService, analyticConstants) {
            $rootScope.showNav = true;
            $rootScope.showPolicySelect = true;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
            $rootScope.pageTitle = $rootScope.loc.BP_HEADER_BILLING_PREFERENCES;
            $scope.loc = $rootScope.loc;

            getPage();

            /**
             * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
             *
             * @memberof PaymentDetailsController
             * @method getPage
             */
            function getPage() {
              /**
               * The directive HTML for the page.
               *
               * @memberof BillingPreferencesController
               * @member {String} pageHtml
               */
              $scope.pageHtml = '';

              /**
               * For basicNavbar, we have to pass this function
               * to handle the left click
               */
              $scope.basicNavbarLeftClick = function() {
                $window.history.back();
              };

              $rootScope.$emit('pageLoading');
              var query = {
                policyIndex: $rootScope.policyIndex,
                policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                policyExternalId : $rootScope.selectedPolicy.externalId
              };

              pageService
                  .getPage(
                      pageService.devices.MOBILE,
                      'billing-preferences',
                      $rootScope.language,
                      query
                  )
                  .then(function(pageHtml) {
                    $scope.pageHtml = pageHtml;
                    $rootScope.$emit('pageLoaded');
                    adobeService.trackState('billingPreferences', analyticConstants.BILLING_SECTION);
                  })
                  .catch(function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
            }
          }
        ]);
}());

/**
 * Controller for the billing & payments page view.
 *
 * @namespace Controllers
 * @class BillingController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.billing', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('BillingController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
      $rootScope.showNav = true;
      $scope.loc = $rootScope.loc;
      $scope.showNav = $rootScope.showNav;
      $rootScope.showPolicySelect = true;
      var languageAttempts = 0;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof BillingController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof BillingController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        if(!$rootScope.loc) {
          languageAttempts++;
          if(languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        var pageName = 'billing';
        $rootScope.pageTitle = $rootScope.loc.BILLING_PAYMENTS;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

          var query = $location.search();
          query.policyIndex = $rootScope.policyIndex;
          query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
          query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
          query.policyExternalId = $rootScope.selectedPolicy.externalId;


        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      var billingUnregisterFunc = $rootScope.$on('policySelected', function() {
          $scope.getPage();
      });

      $rootScope.$on('LOGOUT', billingUnregisterFunc);

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the claims page view.
 *
 * @namespace Controllers
 * @class ClaimsController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.claims', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('ClaimsController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$routeParams',
    '$window',
    'adobeService',
    'coachmarkService',
    'pageService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $routeParams, $window, adobeService, coachmarkService, pageService, analyticConstants) {
      $rootScope.showNav = true;
      $rootScope.showPolicySelect = true;

      var languageAttempts = 0;
      var section = 'claimsOverview';
      var cachePage = true;

      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof ClaimsController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        $scope.basicNavbarLeftClick = function() {
          $window.history.back();
        };

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          return $timeout($scope.getPage, 100);
        }

        $rootScope.pageTitle = $rootScope.loc.CLAIMS;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

        var pageName = 'claims';
        var query = $location.search();
        query.policyIndex = $rootScope.policyIndex;

        if ($routeParams.id) {
          $rootScope.showPolicySelect = false;
          $rootScope.pageTitle = $rootScope.loc.CLAIM_DETAILS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          pageName = 'claim-details';
          section = 'claimDetails';

          query.id = $routeParams.id;
          query.dependentNo = $routeParams.dependentNo;

        }
        else if ($location.url().indexOf('/claims/search') > -1) {
          pageName = 'claims-search';
          section = 'claimsSearch';

        }
        else if ($location.url().indexOf('/claims/filter') > -1) {
          $scope.keyword = query.keyword;
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;

          if (query.keyword) {
            pageName = 'claims-filter/?keyword=' + query.keyword;
          }
          else {
            pageName = 'claims-filter';
          }

          section = 'claimsSearchFilter';
          
        }
        else { //On claims page setting query data to blank or default.
          query.keyword = "";
          query.claimsStatus = "";
          query.fromDate = "";
          query.toDate = "";
          query.dependentNo = "";
        }

        $rootScope.startingView = section;
        query.url = $location.path();
        query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
        query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
        query.policyExternalId = $rootScope.selectedPolicy.externalId;

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query, cachePage).then(function(pageHtml) {
            $scope.noTabsVisible = pageHtml.indexOf('tab-select') === -1;
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
            adobeService.trackState(section, analyticConstants.CLAIMS_SECTION);
            return coachmarkService.showCoachmarks('claims');
          }, function() {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      };

      /**
       * Turns off the policy select listener when called.
       *
       * @memberof ClaimsController
       * @method policyListenerOff
       */
      $scope.policyListenerOff = $rootScope.$on('policySelected', function() {
        if ($location.path() == '/claims/search') { //We want to force the app back to the claims view page if the policy is changed while on search page.
          $location.path('/claims');
        }

        if ($location.path() !== '/claims') {
          $scope.policyListenerOff();
          return;
        }

        $scope.getPage();
      });

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the compose page view.
 *
 * @namespace Controllers
 * @class ComposeController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.compose', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('ComposeController', [
    '$scope',
    '$rootScope',
    '$location',
    '$routeParams',
    '$timeout',
    '$window',
    'pageService',
    'alertService',
    'adobeService',
    function($scope, $rootScope, $location, $routeParams, $timeout, $window, pageService, alertService, adobeService) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      var languageAttempts = 0;
      var identifier = "secureInboxMessageDetailsCompose";
      var section = "Secure Inbox";
      $rootScope.startingView = section;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof ComposeController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof ComposeController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
        * For basicNavbar, we have to pass these two functions
        * to handle the left and right button clicks
        */
        $scope.basicNavbarLeftClick = function() {
            $rootScope.deleteMessage();
        };

        $scope.basicNavbarRightClick = function() {
          /**
          * Since the function exists of outside of scope,
          * we need to include validation function in rootScope
          */
          $rootScope.onSendValidation();
        };

        if(!$rootScope.loc) {
          languageAttempts++;
          if(languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        var pageName = 'inbox-compose';

        var query = {};

        /* detect if option variable is set for compose page*/
        var parameters = $location.search();
        query.policyIndex = $rootScope.policyIndex;
        query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
        query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
        query.policyExternalId = $rootScope.selectedPolicy.externalId;
        query.option = parameters.option;
        query.claim = parameters.claim;

        if($routeParams.id) {
          query.replyId = $routeParams.id;
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/*
* Controller for the customer service view.
*
* @namespace Controllers
* @class CustomerServiceController
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.customerService', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('CustomerServiceController', [
    '$scope',
    '$rootScope',
    'pageService',
    '$window',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, pageService, $window, adobeService, analyticConstants) {
      if ($rootScope.loggedIn) {
        $rootScope.showNav = true;
        $rootScope.showPolicySelect = true;
      } else {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
      }
      $rootScope.pageTitle = $rootScope.loc.CALL_CUSTOMER_SERVICE;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof CustomerServiceController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof CustomerServiceController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
        * For basicNavbar, we have to pass this function
        * to handle the left click
        */
        $scope.basicNavbarLeftClick = function() {
          $window.history.back();
        };

        var pageName = 'customer-service';
        var query;
        //based on the $rootScope.loggedIn we are passing the query to pageService to get the page
        if ($rootScope.loggedIn) {
          query = {
            policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
            policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
            policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
            policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null,
            loggedIn : $rootScope.loggedIn
          };
        } else {
          query = {
            loggedIn : $rootScope.loggedIn
          };
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState('customerService', analyticConstants.HELP_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };
      if ($rootScope.loggedIn) {
        var customerServiceUnsubscribeFunc = $rootScope.$on('policySelected', function() {
          $scope.getPage();
        });
        $rootScope.$on('LOGOUT', customerServiceUnsubscribeFunc);
      }

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.controllers.editAutopayFlowPage', [])
    .controller('editAutopayFlow', ['restService', '$rootScope', '$window', '$routeParams', '$scope',
      function(restService, $rootScope, $window, $routeParams, $scope) {

        // hide the navbar
        $rootScope.showNav = false;

        // hide the policy select dropdown
        $rootScope.showPolicySelect = false;

        // default the loc object to avoid ReferenceErrors later
        $scope.loc = $rootScope.loc || {};

        // default the navbar details to avoid unref
        $scope.navbarDetails = {};

        // show the back button
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

        $scope.flowStep = $routeParams.step;

        if ($scope.flowStep === 'confirmation') {
          $rootScope.showNav = true;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          $rootScope.pageTitle = $rootScope.loc.BP_HEADER_AUTOPAY_CONFIRMATION;
        } else {
          // hide the navbar
          $rootScope.showNav = false;
          $scope.navbarDetails = {
            display: {
              title: getNavbarHeader($routeParams.step),
              leftNavButton: {
                icon: 'back'
              }
            },
            onLeftClick: function() {
              $scope.$broadcast('PAGE_BACK');
            }
          };

        }


        /**
         *
         * @param {string} routeParam
         * @return {string}
         */
        function getNavbarHeader(routeParam) {
          if (!$rootScope.loc) {
            $rootScope.$emit('pageNeedsLocale');
            return '';
          }
          if (routeParam === 'method') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_METHOD;
          }
          if (routeParam === 'details') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_DETAILS;
          }
          if (routeParam === 'review') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_REVIEW;
          }
          if (routeParam === 'confirmation') {
            return $rootScope.loc.BP_HEADER_AUTOPAY_CONFIRMATION;
          }
        }

      var query = {
        policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
        policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
        policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
        policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null
      };

      $rootScope.$emit('pageLoading');
      restService.getPageData(
        restService.devices.MOBILE,
        'edit-autopay-flow',
        $rootScope.language,
        query
      )
      .then(function(response) {
        $rootScope.$emit('pageLoaded');
        if (response && response[0]) {
          $scope.serviceResponse = response[0].values;
          $rootScope.billingTrackStates($scope.flowStep, $scope.serviceResponse.account);
        }
      }).catch(function(error) {
        $rootScope.$emit('pageLoaded');
        console.warn(error);
      });
    }]);
})();
/**
 * The controller used for transitioning page views and retrieving data for the
 * edit-billing-methdo page
 */
(function() {
  angular
    .module('blueconnect.mobile.controllers.editBillingMethodPage', [])
    .controller('EditBillingMethodPage', ['$rootScope',
      '$scope', 'restService', 'adobeService', 'analyticConstants',
      function($rootScope, $scope, restService, adobeService, analyticConstants) {

      $rootScope.showPolicySelect = false;
      $rootScope.$emit('pageLoading');
      var query = {
        policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
        policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
        policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
        policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null
      };
      restService.getPageData(
        restService.devices.MOBILE,
        'edit-billing-method',
        $rootScope.language,
        query
      )
      .then(function(prefResponse) {
        $scope.preferences = prefResponse[0];

        // To be available to policy-header-gray
        $scope.selectedPolicy = prefResponse[0].values.policyInfo;
        $scope.token = prefResponse[0].values.token;

        $rootScope.$emit('pageLoaded');
        adobeService.trackState('editBillingMethod', analyticConstants.BILLING_SECTION);
      })
      .catch(function(errorReturned) {
        $rootScope.$emit('pageLoaded');
        $rootScope.showNetworkErrorAlert();
        console.warn('Failed to load data for edit-billing-method\t' + errorReturned.error.code + '\t' + errorReturned.error.message);
      });

    }]);
})();

/**
 * Controller for the faq view.
 *
 * @namespace Controllers
 * @class FAQController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.faq', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('FAQController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $scope.alertModal = $rootScope.alertModal;

      var languageAttempts = 0;

      /**
       *Display the alert window for external link to open the url in browser
       **/
      $scope.openInBrowser = $rootScope.openInBrowser;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof FAQController
       * @method getPage
       */
       $scope.getPage = function() {
         /**
         * The directive HTML for the page.
         *
         * @memberof AboutController
         * @member {String} pageHtml
         */
         $scope.pageHtml = '';

         /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
         $scope.basicNavbarLeftClick = function() {
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $window.history.back();
         };

         if (!$rootScope.loc) {
           languageAttempts++;
           if (languageAttempts > 5) {
             $rootScope.$emit('pageLoaded');
             $rootScope.showNetworkErrorAlert();
             return;
           }

           $timeout($scope.getPage, 100);
           return;
         }
         var query = {};

         if ($rootScope.loggedIn) {
           query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
           query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
           query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
           query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
         }
         query.loggedIn = $rootScope.loggedIn;
         query.deviceType = $rootScope.device;


        var pageName = 'faq';
        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(pageName, analyticConstants.FAQ_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the feedback view.
 *
 * @namespace Controllers
 * @class FeedbackController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.feedback', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('FeedbackController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      var languageAttempts = 0;
      var section = 'Feedback';
      $rootScope.startingView = section;

      // if(!$rootScope.loc){
        // $rootScope.getInternalLocale();
      // }
      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof FAQController
       * @method getPage
       */
       $scope.getPage = function() {
         /**
         * The directive HTML for the page.
         *
         * @memberof AboutController
         * @member {String} pageHtml
         */
         $scope.pageHtml = '';

         /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
         $scope.basicNavbarLeftClick = function() {
           $window.history.back();
         };

         if(!$rootScope.loc) {
           languageAttempts++;
           if(languageAttempts > 5) {
             $rootScope.$emit('pageLoaded');
             $rootScope.showNetworkErrorAlert();
             return;
           }

           $timeout($scope.getPage, 100);
           return;
         }

        var pageName = 'feedback';
        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, {loggedIn : $rootScope.loggedIn}).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the Find care view.
 *
 * @namespace Controllers
 * @class Find Care
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findCare', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindCareController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            '$window',
            function($scope, $rootScope, $location, pageService, $window) {
                if ($rootScope.loggedIn) {
                    $rootScope.pageTitle = $rootScope.loc.FIND_CARE;
                    $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
                    $rootScope.showNav = true;
                    $rootScope.showPolicySelect = false;
                  }
                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof findCareDetails
                 * @return {String} The environment name.
                 */
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindCareController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindCareController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    $scope.basicNavbarLeftClick = function() {
                        $window.history.back();
                    };

                    var query = {};
                    query.loggedIn = $rootScope.loggedIn;
                    query.deviceType = $rootScope.device;
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;

                    var pageName = 'find-care';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };
                $rootScope.$emit('pageNeedsLocale');
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the Find A Doctor view for authenticated members.
 *
 * @namespace Controllers
 * @class Find A Doctor Authenticated
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorAuthenticated', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('FindDoctorAuthenticatedController', [
      '$scope',
      '$rootScope',
      '$location',
      'pageService',
      function($scope, $rootScope, $location, pageService) {
        $rootScope.openMapView = false;
        var pageName = 'find-doctor-authenticated';
        $scope.selectedPolicy = $rootScope.selectedPolicy;
        $scope.pageHtml = '';
        $rootScope.$emit('pageLoading');
        $rootScope.$emit('pageNeedsLocale');

        pageService
          .getPage(
            pageService.devices.MOBILE,
            pageName,
            $rootScope.language,
            {
              loggedIn : $rootScope.loggedIn,
              deviceType : $rootScope.device,
              planName: $scope.selectedPolicy.lobDesc,
              externalId: $scope.selectedPolicy.externalId,
              internalId: $scope.selectedPolicy.internalId,
              alphaPrefix: $scope.selectedPolicy.alphaPrefix,
              lobCode: $scope.selectedPolicy.lobCode
            }
          )
          .then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $scope.pageHtml = pageHtml;
          })
          .catch(function(error) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }
    ]);
}());

/**
 * Controller for the Find A Doctor Browser view.
 *
 * @namespace Controllers
 * @class FindDoctorBrowserController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorBrowser', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('FindDoctorBrowserController', [
      '$scope',
      '$rootScope',
      '$location',
      'pageService',
      'TransparencyFactory',
      'analyticConstants',
      function ($scope, $rootScope, $location, pageService, TransparencyFactory, analyticConstants) {
        var pageName = 'find-doctor-browser';
        $rootScope.$emit('pageLoading');
        if ($rootScope.loggedIn) {
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;
        }

        $rootScope.filterText = '';

        /**
         * The directive HTML for the page.
         *
         * @memberof FindDoctorBrowserController
         * @member {String} pageHtml
         */
        $scope.pageHtml = '';

        var query = $location.search();
        query.loggedIn = $rootScope.loggedIn;
        query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
        query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
        query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
        query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
        query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;

        if (query.browseTerm) { // encoding this browseTerm - if the query string contains ampersand(&) its spliting up the string.
          query.browseTerm = encodeURIComponent(TransparencyFactory.getBrowseTerm());
        }
        if (query.browseLevel == '2') {
          query.browseLevelTwoTerm = encodeURIComponent(TransparencyFactory.getBrowseLevelTwoTerm());
        }
        if ($rootScope.vitalsJWT && $rootScope.vitalsSignature && !$rootScope.noMatchPlanFound) {
          query.jwt = $rootScope.vitalsJWT;
          query.signature = $rootScope.vitalsSignature.signature;
        }
        query.deviceType = $rootScope.device;                    

        pageService
          .getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query)
          .then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $rootScope.healthNavTrackStates(4, query, analyticConstants.HEALTHNAV_SECTION);
            $scope.pageHtml = pageHtml;
          })
          .catch(function() {
            $rootScope.$emit('pageLoaded');
            if ($rootScope.loggedIn) {
              $rootScope.showNetworkErrorAlert();
            } else {
              $rootScope.showNetworkErrorUnautenticated();
            }
          });
      }
    ]);
}());

/**
 * Controller for the Find A Doctor filter view.
 *
 * @namespace Controllers
 * @class FindDoctorFilterController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findDoctorFilter', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindDoctorFilterController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            '$window',
            'TransparencyFactory',
            function($scope, $rootScope, $location, pageService, $window, TransparencyFactory) {
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindDoctorFilterController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindDoctorFilterController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    /**
                    * For basicNavbar, we have to pass this function
                    * to handle the left click
                    */
                    $scope.basicNavbarLeftClick = function() {

                      $rootScope.fromBackButton = true;

                      // use the first element from filtersData array to set transparency factory
                      var filtersData = $rootScope.filtersDataArr[0] || '';
                      TransparencyFactory.setFilterTierSelectedTerm(filtersData.tierData || '');
                      TransparencyFactory.setFilterSpecialtySelectedTerm(filtersData.specialty || '');
                      TransparencyFactory.setFilterGenderSelectedTerm(filtersData.gender || '');

                      $window.history.back();
                    };

                    var query = $location.search();
                    query.loggedIn = $rootScope.loggedIn;
                    if (!query.zipCode) {
                        query.zipCode = TransparencyFactory.getCity().zip;
                    }
                    if (!query.distance) {
                        query.distance = TransparencyFactory.getDistance();
                    }
                    
                    query.planName = ($rootScope.loggedIn) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
                    query.accountId = TransparencyFactory.getSelectedPlan().accountId;
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
                    query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
                    query.deviceType = $rootScope.device;                    

                    if ($rootScope.loggedIn) {
                      $rootScope.showNav = false;
                      query.jwt = $rootScope.vitalsJWT;
                    }

                    var pageName = 'find-doctor-filter';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the Find A Doctor Results Details view.
 *
 * @namespace Controllers
 * @class FindDoctorResultsDetailsController
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorResultsDetails', [
      'bcbsnc.cloud.services.page',
    ])
    .controller('FindDoctorResultsDetailsController', [
      '$scope',
      '$rootScope',
      '$location',
      'pageService',
      'TransparencyFactory',
      function(
        $scope,
        $rootScope,
        $location,
        pageService,
        TransparencyFactory
      ) {
        var pageName = 'find-doctor-results-details';
        var query = $location.search();
 
        query.loggedIn = $rootScope.loggedIn;
        query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
        query.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
        query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
        query.statePlan = ($rootScope.loggedIn) ? $rootScope.selectedPlan.state : null;
        query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
        query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
        query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
        query.deviceType = $rootScope.device;                    

        query.network_id =
          $rootScope.selectedPlan && $rootScope.selectedPlan.id;
        query.accountId =
          $rootScope.selectedPlan && $rootScope.selectedPlan.accountId;
        if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
          query.jwt = $rootScope.vitalsJWT;
          query.member_number = $rootScope.selectedPlan.alphaPrefix + $rootScope.selectedPlan.externalId;
          query.externalSourceId = $rootScope.selectedPlan.externalId;
          query.internalId = $rootScope.selectedPlan.internalId;
          query.groupId = $rootScope.selectedPlan.groupNumber;
          query.sourceSystem = $rootScope.selectedPlan.sourceSystem;
          query.fundingAccountTypeCode = $rootScope.selectedPlan.attributes
            .filter(function(attributeObject){
              return attributeObject.paymentPortalFundType !== null;
            })
            .map(function(attributeObject) {
              return attributeObject.paymentPortalFundType;
            })[0];
        }

        if (!query.viewPcpDetails) {
          query.zipCode = TransparencyFactory.getCity().zip;
          query.distance = TransparencyFactory.getDistance();
          // Adding selected provider_id and location_id to the query
          var resultDetailsItemToFetch = TransparencyFactory.getResultsDetailsItem();
        }
        
        query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();


        // Check existing query for provider/location.
        query.location_id = query.location || resultDetailsItemToFetch.location_id;
        query.provider_id = query.provider || resultDetailsItemToFetch.provider_id;

        // Adding the card name 'default' for the main details view
        query.card = 'default';

        if ($rootScope.loggedIn) {
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;
        }

        $rootScope.$emit('pageLoading');
        pageService
          .getPage(
            pageService.devices.MOBILE,
            pageName,
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $rootScope.$emit('pageLoaded');
            $rootScope.healthNavTrackStates(2, query);
            $scope.pageHtml = pageHtml;
          })
          .catch(function(error) {
            $rootScope.$emit('pageLoaded');
            if ($rootScope.loggedIn) {
              $rootScope.showNetworkErrorAlert();
            } else {
              $rootScope.showNetworkErrorUnautenticated();
            }
          });
      },
    ]);
})();

/**
 * Controller for the Find A Doctor Search Results view.
 *
 * @namespace Controllers
 * @class FindDoctorSearchResultsController
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.findDoctorSearchResults', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('FindDoctorSearchResultsController', [
      '$scope',
      '$rootScope',
      '$location',
      '$anchorScroll',
      '$timeout',
      'pageService',
      'TransparencyFactory',
      function($scope, $rootScope, $location, $anchorScroll, $timeout, pageService, TransparencyFactory) {
        var pageName = 'find-doctor-search-results';
        $rootScope.$emit('pageLoading');

        // Record the path upon entering the controller
        $scope.controllerLocation = $location.path();
        $scope.pageHtml = '';

        var query = $location.search();
        query.loggedIn = $rootScope.loggedIn;
        
        query.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
        query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPlan.vitalsMatchedPlanName : '';

        
        if (TransparencyFactory.getCity().geo) {
          query.geo_location = TransparencyFactory.getCity().geo;
        } else {
          query.geo_location = $rootScope.vitalsGeoCoords;
        }

        if (!query.latlon) {
          $rootScope.searchAreaNearestCity = null;
        }
        
        if (!query.zipCode) {
          query.zipCode = TransparencyFactory.getCity().zip;
        }
        if (!query.distance) {
          query.distance = TransparencyFactory.getDistance();
        }
        query.accountId = TransparencyFactory.getSelectedPlan().accountId;
        query.resultsTerm = encodeURIComponent(TransparencyFactory.getResultsTerm() ? TransparencyFactory.getResultsTerm() : $rootScope.resultsTermsArr[0]);

        if ($rootScope.loggedIn) {
          $rootScope.pageTitle = $rootScope.loc.FIND_CARE;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          $rootScope.showNav = false;
          $rootScope.showPolicySelect = false;
          query.vitalsMatchedPlanName = $rootScope.selectedPolicy.vitalsMatchedPlanName;
          query.policyIndex = $rootScope.policyIndex;
          query.policyEffectiveDate = $rootScope.selectedPolicy.effectiveDate;
          query.policyExpirationDate = $rootScope.selectedPolicy.expirationDate;
          query.policyExternalId = $rootScope.selectedPolicy.externalId;
        }

        if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
        query.jwt = $rootScope.vitalsJWT;
        query.signature = $rootScope.vitalsSignature && $rootScope.vitalsSignature.signature;
        }

        if (query.filters) {
          var tierData = TransparencyFactory.getFilterTierSelectedTerm();
          query.tierDataType = tierData.type || '';
          query.tierDataValue = tierData.value || '';
          query.specialty = TransparencyFactory.getFilterSpecialtySelectedTerm() || '';
          query.gender = TransparencyFactory.getFilterGenderSelectedTerm() || '';
          query.smartShopperRewardsFilter = TransparencyFactory.getSmartShopperFilter() || '';
        }

        // If returning from the results details view, skip Vitals call on backend
        if (TransparencyFactory.getResultsDetailsIndex() !== null) {
          query.callVitals = false;
        }

        // Set query in $scope, as it's needed inside the associated directive.
        $scope.query = query;
        query.deviceType = $rootScope.device;                            

        pageService
          .getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query)
          .then(function(pageHtml) {
            // If returning from the results details view, update pageHtml with existing results
            if (TransparencyFactory.getResultsDetailsIndex() !== null) {
              // Replace " with ' in the existing results string
              var existingResults = JSON.stringify(TransparencyFactory.getExistingSearchResults()).replace(/(\")/g, '\'');

              // Create updated <find-doctor-search-results> HTML element
              var updatedResultsElem = '<find-doctor-search-results search-results-details=\"' +  existingResults + '\"></find-doctor-search-results>';

              // Regular expression to match the <find-doctor-search-results> element
              var replaceExpr = /<find-doctor-search-results\ssearch-results-details=\"(.*)\"><\/find-doctor-search-results>/g;

              // Update the received pageHtml with existing results
              var newHtml = pageHtml.replace(replaceExpr, updatedResultsElem);

              $rootScope.$emit('pageLoaded');
              $rootScope.healthNavTrackStates(1, query);

              // Update the pageHtml with existing results
              $scope.pageHtml = newHtml;

              // Go to the results card the user had previously clicked
              $scope.gotoAnchor('search-results-card-' + TransparencyFactory.getResultsDetailsIndex());

              // Reset the result details index clicked back to null
              TransparencyFactory.setResultsDetailsIndex(null);
            } else {
              $rootScope.$emit('pageLoaded');
              $rootScope.healthNavTrackStates(1, query);
              $scope.pageHtml = pageHtml;
            }
          })
          .catch(function(error) {
            $rootScope.$emit('pageLoaded');
            if ($rootScope.loggedIn) {
              $rootScope.showNetworkErrorAlert();
            } else {
              $rootScope.showNetworkErrorUnautenticated();
            }
          });

        // Function used to pin the results card previously clicked to the top of the view
        $scope.gotoAnchor = function(resultId) {
          $timeout(function() {
            $location.hash(resultId);
            $anchorScroll();
          }, 100);
        };

        // If we are just moving between tags on the same page, supress the $locationChangeStart event
        $scope.$on('$locationChangeStart', function(event, newUrl, oldUrl) {
          // Suppress event only if the URL path is remaining the same and the new hash is non-empty
          // The new hash being non-empty imlies that we are moving to an actual achor on the page
          if (($scope.controllerLocation === $location.path()) && ($location.hash() !== '')) {
            event.preventDefault();
          }
        });
      }
    ]);
}());

/**
 * Controller for the Find A Doctor Search view.
 *
 * @namespace Controllers
 * @class FindDoctorSearchController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findDoctorSearch', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindDoctorSearchController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            'TransparencyFactory',
            function($scope, $rootScope, $location, pageService, TransparencyFactory) {
              if ($rootScope.loggedIn) {
                $rootScope.pageTitle = $rootScope.loc.FIND_CARE;
                $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
                $rootScope.showNav = true;
                $rootScope.showPolicySelect = (!$rootScope.noMatchPlanFound) ? true : false;
              }
                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof findDoctorSearchDetails
                 * @return {String} The environment name.
                 */
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindDoctorSearchController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindDoctorSearchController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';

                    var query = {};
                    query.loggedIn = $rootScope.loggedIn;
                    query.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name;
                    query.vitalsMatchedPlanName = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : '';
                    query.planId = $rootScope.selectedPlan && $rootScope.selectedPlan.id;
                    if (query.planName !== 'Medicare Supplement') {
                      query.geo_location = TransparencyFactory.getCity() && TransparencyFactory.getCity().geo ? TransparencyFactory.getCity().geo : $rootScope.vitalsGeoCoords;
                      query.zipCode = TransparencyFactory.getCity().zip;
                    }
                    query.distance = TransparencyFactory.getDistance();
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;
                    query.deviceType = $rootScope.device;                    

                    if ($rootScope.vitalsJWT && $rootScope.vitalsSignature && !$rootScope.noMatchPlanFound) {
                      query.jwt = $rootScope.vitalsJWT;
                      query.signature = $rootScope.vitalsSignature.signature;
                    }

                    var pageName = 'find-doctor-search';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };

              $rootScope.$on('policySelected', function() {
                $scope.getPage();
              });

                var findDoctorUnregisterFunc = $rootScope.$on('selectsPlan', function() {
                  if ($location.path() == '/find-doctor-search') { //We want to force the app back to the find-doctor-search view page if the plan is changed while on search page.
                    $location.path('/find-doctor-search');
                  }

                  $scope.getPage();
                });
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the Find A Doctor view.
 *
 * @namespace Controllers
 * @class Find A Doctor
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.findDoctor', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('FindDoctorController', [
            '$scope',
            '$rootScope',
            '$location',
            'pageService',
            function($scope, $rootScope, $location, pageService) {
                /**
                 * Returns the current environment, if not PROD.
                 *
                 * @memberof findDoctorDetails
                 * @return {String} The environment name.
                 */
                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof FindDoctorController
                 * @method getPage
                 */
                $scope.getPage = function() {
                    /**
                     * The directive HTML for the page.
                     *
                     * @memberof FindDoctorController
                     * @member {String} pageHtml
                     */
                    $scope.pageHtml = '';
                    var query = {};
                    query.loggedIn = $rootScope.loggedIn;
                    query.deviceType = $rootScope.device;
                    query.policyIndex = ($rootScope.loggedIn) ? $rootScope.policyIndex : null;
                    query.policyEffectiveDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null;
                    query.policyExpirationDate = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null;
                    query.policyExternalId = ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null;


                    var pageName = 'find-doctor';
                    $rootScope.$emit('pageLoading');
                    pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, {loggedIn : $rootScope.loggedIn, deviceType : $rootScope.device}).then(function(pageHtml) {
                        $rootScope.$emit('pageLoaded');
                        $scope.pageHtml = pageHtml;
                        $rootScope.healthNavTrackStates(0, {title:'select network'});
                    }, function(error, status) {
                        $rootScope.$emit('pageLoaded');
                        if ($rootScope.loggedIn) {
                          $rootScope.showNetworkErrorAlert();
                        } else {
                          $rootScope.showNetworkErrorUnautenticated();
                        }
                    });
                };
                $rootScope.$emit('pageNeedsLocale');
                $scope.getPage();

            }
        ]);
}());

/**
 * Controller for the healthNav view.
 *
 * @namespace Controllers
 * @class HealthNavController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.healthNav', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('HealthNavController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $window, pageService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $scope.alertModal = $rootScope.alertModal;

      var languageAttempts = 0;
      
      $rootScope.startingView = analyticConstants.HEALTHNAV_SECTION;

      /**
       *Display the alert window for external link to open the url in browser
       **/
      $scope.openInBrowser = $rootScope.openInBrowser;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof HealthNavController
       * @method getPage
       */
       $scope.getPage = function() {
         /**
         * The directive HTML for the page.
         *
         * @memberof HealthNavController
         * @member {String} pageHtml
         */
         $scope.pageHtml = '';

         /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
          if($rootScope.loggedIn) {
            $window.history.back();
          } else {
            $timeout($location.path('/login'), 100);
          }
        };

        if(!$rootScope.loc) {
          languageAttempts++;
          if(languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }
        $rootScope.selectedPolicy = $rootScope.selectedPolicy || {};
        var query = {
          policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null,
          policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
          policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
          policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null,
          loggedIn : $rootScope.loggedIn
        };

        var pageName = 'health-nav';
        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
        }, function(error, status) {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the help page view.
 *
 * @namespace Controllers
 * @class HelpController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.help', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('HelpController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$window',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $window, pageService, adobeService, analyticConstants) {
      if ($rootScope.loggedIn) {
        $rootScope.showNav = true;
      }
      $rootScope.showPolicySelect = false;
      $scope.alertModal = $rootScope.alertModal;

      var languageAttempts = 0;

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof HelpController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof HelpController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $window.history.back();
        };

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        var pageName = 'help';
        $rootScope.pageTitle = $rootScope.loc.CUSTOMER_SERVICE_AND_HELP_PAGE;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
        var query = {
          loggedIn : $rootScope.loggedIn, 
          policyIndex: ($rootScope.loggedIn) ? $rootScope.policyIndex : null, 
          deviceType : $rootScope.device, 
          planId : ($rootScope.loggedIn)? $rootScope.selectedPolicy.id : null, 
          vitalsMatchedPlanName : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.vitalsMatchedPlanName : null,
          policyEffectiveDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.effectiveDate : null,
          policyExpirationDate : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.expirationDate : null,
          policyExternalId : ($rootScope.loggedIn) ? $rootScope.selectedPolicy.externalId : null
        };


        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(pageName, analyticConstants.HELP_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          if ($rootScope.loggedIn) {
            $rootScope.showNetworkErrorAlert();
          } else {
            $rootScope.showNetworkErrorUnautenticated();
          }
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller to refresh the home page.
 *
 * @namespace Controllers
 * @class HomeRefreshController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.homeRefresh', [])
  .controller('HomeRefreshController', [
    '$scope',
    '$rootScope',
    function($scope, $rootScope) {
      $rootScope.gotoView('/home');
    }
  ]);
}());

/**
 * Controller for the home page view.
 *
 * @namespace Controllers
 * @class HomeController
 */
(function() {
  "use strict";

  angular
    .module("blueconnect.mobile.controllers.home", [
      "bcbsnc.cloud.services.page"
    ])
    .controller("HomeController", [
      '$scope',
      '$rootScope',
      '$timeout',
      '$location',
      'pageService',
      'adobeService',
      'coachmarkService',
      'analyticConstants',
      '$anchorScroll',
      'livechatService',
      function($scope, $rootScope, $timeout, $location, pageService, adobeService, coachmarkService, analyticConstants, $anchorScroll, livechatService) {
        $rootScope.showNav = true;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HELP;
        $rootScope.showPolicySelect = true;

        var languageAttempts = 0;
        var section = "Home";

        $rootScope.startingView = section;

        if ($rootScope.selectedPolicy) {
          $rootScope.pageTitle =
          $rootScope.selectedPolicy.state === true
            ? '<div style="margin-top: -.5rem"><img src="images/shp-logo.svg" style="max-width: 11rem"></img></div>'
            : '<div style="margin-top: -.5rem"><img src="images/logo.svg" style="max-width: 11rem"></img></div>';

          if (
            $rootScope.signature &&
            $rootScope.signature.get($rootScope.policyIndex).isSignatureService
          ) {
            $rootScope.pageTitle =
              '<div style="margin-top: -.5rem"><img src="images/logo-signature-services.svg" style="max-width: 11rem"></img></div>';
          } else if ($rootScope.selectedPolicy.state === true) {
            //state with signature will have signature logo
            $rootScope.pageTitle =
              '<div style="margin-top: -.5rem"><img src="images/shp-logo.svg" style="max-width: 11rem"></img></div>';
          } else {
            $rootScope.pageTitle =
              '<div style="margin-top: -.5rem"><img src="images/logo.svg" style="max-width: 11rem"></img></div>';
          }
        }

        /**
         * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
         *
         * @memberof HomeController
         * @method getPage
         */
        $scope.getPage = function() {
          if (!$rootScope.selectedPolicy && !!$rootScope.loggedIn === false) {
            return $rootScope.gotoView('/login');
          }
          $scope.pageHtml = '';

          $rootScope.$emit("pageLoading");

          if (!$rootScope.loc || !$rootScope.policies) {
            languageAttempts++;
            if (languageAttempts > 5) {
              $rootScope.$emit("pageLoaded");
              $rootScope.showNetworkErrorAlert();
              return;
            }

            $timeout($scope.getPage, 100);
            return;
          }

          var query = {
            policyIndex: $rootScope.loggedIn ? $rootScope.policyIndex : null,
            policyEffectiveDate: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.effectiveDate
              : null,
            policyExpirationDate: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.expirationDate
              : null,
            policyExternalId: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.externalId
              : null,
            planId: $rootScope.loggedIn ? $rootScope.selectedPolicy.id : null,
            vitalsMatchedPlanName: $rootScope.loggedIn
              ? $rootScope.selectedPolicy.vitalsMatchedPlanName
              : null,
            deviceType: $rootScope.device
          };

          pageService
            .getPage(
              pageService.devices.MOBILE,
              "home",
              $rootScope.language,
              query
            )
            .then(
              function(pageHtml) {
                $rootScope.$emit("pageLoaded");
                if ($rootScope.liveChatIntialized && window.liveagent){
                  livechatService.disconnectLiveChat();
                }
                $scope.pageHtml = pageHtml;
                coachmarkService.showCoachmarks("home");
                if ($location.url().indexOf('/home') > -1) {
                  if ($rootScope.elapsedTimeNeeded) {
                    var timeElapsed = (Date.now() - $rootScope.timeElapsed) / 1000; // in seconds
                    adobeService.trackAction('homeCardLoaded', analyticConstants.HOME_SECTION, {homeCardElapsedTime: timeElapsed});
                    $rootScope.elapsedTimeNeeded = false;
                  }
                  adobeService.trackState('members:app:home', analyticConstants.HOME_SECTION);
                }
              },
              function() {
                $rootScope.$emit("pageLoaded");
                $rootScope.showNetworkErrorAlert();
              }
            );
        };

        var homeCardUnregisterFunc = $rootScope.$on(
          "policySelected",
          function() {
            $scope.getPage();
          }
        );
        $rootScope.$on("LOGOUT", homeCardUnregisterFunc);
        $rootScope.verifyLocaleRetrieved();
        $rootScope.refreshNavbar();
        $scope.getPage();
      }
    ]);
})();

/*
 * Controller for the id card view.
 *
 * @namespace Controllers
 * @class IdCardController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.idCard', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('IdCardController', [
            '$scope',
            '$rootScope',
            'pageService',
            'adobeService',
            '$location',
            'analyticConstants',
            function($scope, $rootScope, pageService, adobeService, $location, analyticConstants) {
                $rootScope.showNav = true;
                $rootScope.showPolicySelect = true;
                $rootScope.pageTitle = $rootScope.loc.ID_CARD;
                $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

                /**
                 * Retrieves the page HTML from the page service. Called on view load.
                 *
                 * @memberof IdCardController
                 * @method getPage
                 */
                $scope.getPage = function() {
                  /**
                  * The directive HTML for the page.
                  *
                  * @memberof IdCardController
                  * @member {String} pageHtml
                  */
                  $scope.pageHtml = '';

                  var pageName = 'id-card';
                  var query = {
                    policyIndex: $rootScope.policyIndex,
                    url: $location.path(),
                    policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                    policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                    policyExternalId : $rootScope.selectedPolicy.externalId,
                  };

                  $rootScope.$emit('pageLoading');
                  pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
                    $rootScope.$emit('pageLoaded');
                    $scope.pageHtml = pageHtml;
                    adobeService.trackState(pageName, analyticConstants.IDCARD_SECTION);
                    adobeService.trackAction(pageName, analyticConstants.IDCARD_SECTION); // custom metrics requires action
                  }, function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
                };

                var idCardUnregisterFunc = $rootScope.$on('policySelected', function() {
                  $scope.getPage();
                });

                $rootScope.$on('LOGOUT', idCardUnregisterFunc);

                $rootScope.verifyLocaleRetrieved();
                $scope.getPage();
              }
            ]);
          }());

/**
 * Controller for the inbox search page view.
 *
 * @namespace Controllers
 * @class InboxSearchController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.inboxSearch', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('InboxSearchController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      var languageAttempts = 0;
      var identifier = 'inbox:search';

      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof InboxSearchController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof InboxSearchController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        $scope.pageHtml = '';

        $scope.basicNavbarLeftClick = function() {
          $rootScope.gotoView('/inbox');
        };

        var query = {};
        if ($location.search().q) {
          query.q = $location.search().q;
          identifier = 'inbox:search:results';
        }
        if ($location.url().indexOf('/inbox/search/sent') > -1) {
          query.sent = true;
          identifier = 'inbox:search:sent';
        }
        else if ($location.url().indexOf('/inbox/search/bookmarked') > -1) {
          query.bookmarked = true;
          identifier = 'inbox:search:bookmarked';
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, 'inbox-search', $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(identifier, analyticConstants.INBOX_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * Controller for the inbox page view.
 *
 * @namespace Controllers
 * @class InboxController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.inbox', [
    'bcbsnc.cloud.services.page'
  ])
  .controller('InboxController', [
    '$scope',
    '$rootScope',
    '$location',
    '$timeout',
    '$routeParams',
    'pageService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, $timeout, $routeParams, pageService, adobeService, analyticConstants) {
      $rootScope.showNav = true;
      $rootScope.showPolicySelect = false;

      var languageAttempts = 0;
      var identifier = "inbox";
  
      /**
       * Retrieves the page HTML from the page service. Called on view load.
       *
       * @memberof InboxController
       * @method getPage
       */
      $scope.getPage = function() {
        /**
        * The directive HTML for the page.
        *
        * @memberof InboxController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        if (!$rootScope.loc) {
          languageAttempts++;
          if (languageAttempts > 5) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
            return;
          }

          $timeout($scope.getPage, 100);
          return;
        }

        $rootScope.pageTitle = $rootScope.loc.SECURE_INBOX;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

        var query = {};
        query.getEmailFromCpcFailed = $rootScope.getEmailFromCpcFailed || '';
        var pageName = 'inbox';
        if ($location.url().indexOf('/inbox/sent') > -1) {
          pageName = 'inbox-sent';
          identifier = 'inbox:sent';
        }
        else if ($location.url().indexOf('/inbox/bookmarked') > -1) {
          pageName = 'inbox-bookmarked';
          identifier = 'inbox:bookmarked';
        }
        if ($routeParams.id) {
          pageName = 'inbox-message/' + $routeParams.id;
          $rootScope.pageTitle = $rootScope.loc.MESSAGE_DETAILS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.INBOX;
          identifier = 'inbox:messageDetails';
        }

        if (pageName === 'inbox') {
          Object.assign(query, $rootScope.getTIPData());
        }

        $rootScope.$emit('pageLoading');
        pageService.getPage(pageService.devices.MOBILE, pageName, $rootScope.language, query).then(function(pageHtml) {
          $rootScope.$emit('pageLoaded');
          $scope.pageHtml = pageHtml;
          adobeService.trackState(identifier, analyticConstants.INBOX_SECTION);
        }, function() {
          $rootScope.$emit('pageLoaded');
          $rootScope.showNetworkErrorAlert();
        });
      };

      $rootScope.verifyLocaleRetrieved();
      $scope.getPage();
    }
  ]);
}());

/**
 * @description Controller for the landing page view.
 * @namespace Controllers
 * @class LandingController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.landing', [])
    .controller('LandingController', [
      '$rootScope',
      'cordovaService',
      function ($rootScope, cordovaService) {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $rootScope.loggedIn = false;

        if (typeof cordova === 'undefined') {
          return $rootScope.gotoView('/login');
        }

        $rootScope.checkNetwork();
        $rootScope.verifyLocaleRetrieved();

        document.addEventListener('deviceready', checkSecuritySettings, false);
        document.addEventListener('pause', inactivityListener);

        function checkSecuritySettings() {
          // Check inactive period.
          var inactiveWindow = $rootScope.pauseTime ? new Date(
            $rootScope.pauseTime.getTime() + 72 * 1000 * 60
          ): 0;

          if (!$rootScope.pausedForShare && inactiveWindow < new Date()) {
            $rootScope
              .checkNetwork()
              .then(function(networkObj) {
                if (networkObj.offline && !networkObj.online) {
                  angular.element('.page-no-connection').hide();
                  $rootScope.gotoView('/network-landing-local');
                  throw new Error('Device is offline');
                }
              })
              .then(function() {
                return cordovaService.checkDeviceType();
              })
              .then(function() {
                return cordovaService.verifyMinAppVersion();
              })
              .then(function () {
                $rootScope.gotoView('/login');
              })
              .catch(function(error) {
                console.error(error);
              });
          }
        }

        function inactivityListener() {
          $rootScope.pauseTime = new Date();
        }
    }]);
})();

/**
 * Controller for the login page view.
 *
 * @namespace Controllers
 * @class LoginController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.login', [
      'blueconnect.mobile.services.touchId',
    ])
    .controller('LoginController', [
      '$scope',
      '$rootScope',
      '$http',
      '$q',
      'languageService',
      'loginService',
      'cordovaService',
      'touchIdService',
      'adobeService',
      'analyticConstants',
      'config',
      'alertService',
      'CacheFactory',
      'restService',
      function (
        $scope,
        $rootScope,
        $http,
        $q,
        languageService,
        loginService,
        cordovaService,
        touchIdService,
        adobeService,
        analyticConstants,
        config,
        alertService,
        CacheFactory,
        restService
      ) {
        // calls closeAlert method if any alert modal is present before displaying login page
        alertService.closeAlert();

        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $rootScope.loggedIn = false;

        restService
          .getData('login', $rootScope.language || 'en', { loggedIn: false })
          .then(function (result) {
            $scope.messageEods = result.messageEods;
            $scope.messageDate = result.messageDate;
            if (result.messageEods === 1) {
              $rootScope.logOut();
            }
          });

        $rootScope.$on('languageChanged', function () {
          $scope.loc = languageService.getInternalLocale($rootScope.language);
        });

        $rootScope.startingView = analyticConstants.LOGIN_SECTION;
        adobeService.trackState('login', analyticConstants.LOGIN_SECTION);

        var clientId = null;
        var clientSecret = null;

        var tphSourceSytem = 'BCBSNCMbrPrtlLgn';

        var deviceType = cordovaService.checkDeviceType();

        $scope.biometric = {
          isAndroid: deviceType.android,
          isAvailable: null,
          desireToEnroll: null,
          alreadyEnrolled: null,
          faceId: deviceType.android ? false : null,
          biometricType: null,
          enableText: null,
        };

        if ($rootScope.loc && numberOfKeys($rootScope.loc) > 0) {
          $scope.loc = $rootScope.loc;
        }

        if (
          !$rootScope.language ||
          !$scope.loc ||
          numberOfKeys($scope.loc) === 0
        ) {
          $scope.loc = languageService.getInternalLocale();
          $scope.biometric.biometricType = deviceType.android
            ? 'FINGERPRINT_AUTH'
            : 'SETTINGS_LOGIN_KEY_TOUCH_ID';
          $scope.biometric.enableText = deviceType.android
            ? 'ENABLE_FINGERPRINT_AUTH'
            : 'ENABLE_TOUCH_ID';
          setupCredentials();
          $rootScope.setLanguage(languageService.getDefaultLanguage());
        }

        // if we're on the login page but not using the internal locale
        if (
          numberOfKeys($scope.loc) !==
          numberOfKeys(languageService.getInternalLocale())
        ) {
          $scope.loc = languageService.getInternalLocale();
        }

        document.addEventListener('offline', function () {
          $scope.$apply(function () {
            $scope.password = '';
          });
        });

        $scope.password = '';
        $scope.userId = null;
        var previousUserId = null;

        loginService
          .getUserId()
          .then(function (userId) {
            if (!userId) {
              $scope.biometric.alreadyEnrolled = false;
            }
            previousUserId = userId;
            if (previousUserId) {
              $scope.userId = previousUserId;
            }

            return touchIdService.isAvailable();
          })
          .then(function (result) {
            if (!result) {
              $scope.biometric.isAvailable = false;
              return false;
            }

            $scope.biometric.isAvailable = true;

            if (result === 'face') {
              $scope.biometric.faceId = true;
              $scope.biometric.biometricType = 'SETTINGS_LOGIN_KEY_FACE_ID';
              $scope.biometric.enableText = 'ENABLE_FACE_ID';
            } else {
              if (!$scope.biometric.enableText) {
                $scope.biometric.enableText = deviceType.android
                  ? 'ENABLE_FINGERPRINT_AUTH'
                  : 'ENABLE_TOUCH_ID';
              }
              if (!$scope.biometric.biometricType) {
                $scope.biometric.biometricType = deviceType.android
                  ? 'FINGERPRINT_AUTH'
                  : 'SETTINGS_LOGIN_KEY_TOUCH_ID';
              }
            }

            if (result === 'touch') {
              $scope.biometric.faceId = false;
            }

            return loginService.getBiometricEnabled();
          })
          .then(function (bioBoolean) {
            // eslint-disable-next-line no-undefined
            if (bioBoolean === null || bioBoolean === undefined) {
              console.warn(
                'Biometric bool is falsy, but not false, setting it to strictly false'
              );
              bioBoolean = false;
            }

            $scope.biometric.alreadyEnrolled = bioBoolean;
            if (bioBoolean === false) {
              $scope.biometric.desireToEnroll = bioBoolean;
            }

            if (bioBoolean === true && !$scope.userId) {
              $scope.biometric.alreadyEnrolled = false;
              $scope.biometric.desireToEnroll = true;
              return console.warn(
                'Had to leave auto-sign-in early due to mismatch in auth settings'
              );
            }
            if (
              bioBoolean === true &&
              loginService.getUserLoggedOutFlag() === false
            ) {
              return $scope.loginWithBiometric();
            }
          })
          .catch(function (loginPreferencesError) {
            console.error('Had an error in pre-login', loginPreferencesError);
            if (loginPreferencesError.code === -7) {
              console.log('no fingerprints enrolled');
              $scope.biometric.isAvailable = false;
              $scope.biometric.desireToEnroll = false;
            }
            $scope.biometric.alreadyEnrolled = false;
          });

        $scope.userIdChangedFromPrevious = function (newUserId) {
          if (!previousUserId) {
            return false;
          }
          console.log('Comparing %s to %s', previousUserId, newUserId);
          return previousUserId !== newUserId;
        };

        $scope.toggleBiometricDesireToEnroll = function () {
          $scope.biometric.desireToEnroll = !$scope.biometric.desireToEnroll;
        };

        /**
         * @description Kicks off the login process.
         * @memberof LoginController
         * @method logIn
         */
        $scope.logIn = function () {
          $scope.loginAttempted = true;

          $rootScope.credentials = loginService.getEncryptedCredentials({
            clientId: $scope.userId,
            clientSecret: $scope.password,
          });

          if (!$scope.loginForm.$valid) {
            $scope.password = '';
            $scope.loginFailed = true;
            $scope.loginInvalidMessage = $scope.loc.LOGIN_INVALID;
            if ($scope.loginForm.$error.required) {
              var fieldName = $scope.loginForm.userId.$error.required
                ? 'username'
                : 'password';
              $scope.trackLoginAction(false, 'Missing ' + fieldName + '.');
            }
            return;
          }

          $scope.hideKeyboard();
          $scope.loginInvalidMessage = null;

          $rootScope.$emit('pageLoading');

          if (
            $scope.biometric.alreadyEnrolled === true &&
            $scope.userIdChangedFromPrevious() === false
          ) {
            return $scope.loginWithBiometric();
          }

          console.log('biometric enabled %s', $scope.biometric.desireToEnroll);
          return ($scope.biometric.desireToEnroll
            ? touchIdService.isAvailable().then(function (biometric) {
                console.log(biometric);
                return touchIdService.verifyFingerprint(
                  'Sign into your Member Profile'
                );
              })
            : $q.resolve(false)
          )
            .then(function () {
              loginService.setBiometricEnabled(
                !!$scope.biometric.desireToEnroll
              );

              if (!clientId || !clientSecret) {
                console.log('setting up credentials for the re-log in');
                setupCredentials();
              }

              return loginService.attemptLogin(
                $scope.userId,
                $scope.password,
                clientId,
                clientSecret
              );
            })
            .then(function (authorization) {
              $scope.loginFailed = false;
              $rootScope.loggedIn = true;

              var cache = CacheFactory.get('defaultCache'); //defined in AngularJS-Services-Cloud
              if (cache) {
                CacheFactory.clearAll();
              }
              if (
                $scope.biometric.alreadyEnrolled ||
                $scope.biometric.desireToEnroll
              ) {
                authorization.rememberUserId = true;
              }
              loginService.setAuthorization(authorization);
              $scope.trackLoginAction(true);
              loadNextPage();
            })
            .catch(function (error) {
              console.warn('Error in biometric', error);
              loginService.setBiometricEnabled(false);
              $scope.trackLoginAction(false, 'Biometrics error.');
              $rootScope.$emit('pageLoaded');
              $scope.loginFailed = true;
              $scope.loginInvalidMessage = $scope.loc.LOGIN_INVALID;
              $scope.password = '';
              $scope.tphLoginFail();
            });
        };

        $scope.trackLoginAction = function (successful, reason) {
          if (successful) {
            adobeService.trackAction(
              'loginSuccessfulLogin',
              analyticConstants.LOGIN_SECTION,
              { biometrics: $scope.biometric }
            );
            $rootScope.elapsedTimeNeeded = true;
            $rootScope.timeElapsed = Date.now();
          } else {
            adobeService.trackAction(
              'loginFailedLogin',
              analyticConstants.LOGIN_SECTION,
              { reason: reason }
            );
          }
        };

        $scope.attemptTestLogin = function () {
          if (config.env === 'LOCAL') {
            $rootScope.loggedIn = true;
            $scope.trackLoginAction(true);
            loadNextPage();
          }
        };

        $scope.loginWithBiometric = function () {
          if (!clientId || !clientSecret) {
            console.log('setting up credentials for the re-log in');
            setupCredentials();
          }
          $rootScope.$emit('pageLoading');
          touchIdService
            .isAvailable()
            .then(function () {
              return touchIdService.verifyFingerprint(
                'Sign into your Member Profile'
              );
            })
            .then(function () {
              return loginService.getAuthorization();
            })
            .then(function (authorization) {
              return loginService.attemptRefreshLogin(
                authorization,
                clientId,
                clientSecret
              );
            })
            .then(function (newAuthObj) {
              newAuthObj.rememberUserId = true;
              loginService.setAuthorization(newAuthObj);
              $rootScope.loggedIn = true;
              //  $scope.trackLoginAction(true);
              loadNextPage();
            })
            .catch(function () {
              $rootScope.$emit('pageLoaded');
            });
        };

        /**
         * Retrieves locale and sends the user to the next page.
         *
         * @memberof LoginController
         * @method loadNextPage
         */
        function loadNextPage() {
          $rootScope.getLocale().then(function () {
            $scope.getPolicies().then(
              function () {
                // Make request to touch point.
                $http.post(config.apiUrl + '/touch-point', {
                  policyindex: $rootScope.policyIndex,
                  originatingUrl: '/login',
                  lobCode: $rootScope.selectedPolicy.lobCode,
                  groupId: $rootScope.selectedPolicy.groupNumber,
                  pageTph: tphSourceSytem,
                  policyMemberId:
                    $rootScope.selectedPolicy.alphaPrefix +
                    $rootScope.selectedPolicy.externalId,
                });

                $scope.getNavbar();

                $scope.saveLoginSettings();

                // Go to homepage.
                $rootScope.gotoView('/home');
              },
              function () {
                alertService.showAlert(
                  $scope.loc.NETWORK_ERROR,
                  $scope.loc.NETWORK_ERROR_MESSAGE,
                  { title: $scope.loc.OK, color: 'blue' }
                );
                $scope.password = '';
                $scope.trackLoginAction(false, 'Network error.');
                $scope.tphLoginFail();
                $rootScope.$emit('pageLoaded');
              }
            );
          });
          $scope.getSignature();
        } // end loadnext page

        /**
         * @description Sets up app credentials for login.
         * @memberof LoginController
         * @method setupCredentials
         */
        function setupCredentials() {
          if (!clientId || !clientSecret) {
            var credentials = loginService.getDecryptedCredentials(
              config.credentials
            );
            clientId = credentials.clientId;
            clientSecret = credentials.clientSecret;
          }
        }

        $scope.gotoForgotUsername = function () {
          return $rootScope.openInBrowser(
            config.bcbsWebUrl + '/members/public/register/forgotusername.htm'
          );
        };

        $scope.gotoForgotPassword = function () {
          return $rootScope.openInBrowser(
            config.bcbsWebUrl +
              '/members/public/register/forgotpassword.htm?closeOnComplete=true'
          );
        };

        $scope.gotoRegistration = function () {
          // return $rootScope.openInBrowser(config.bcbsWebUrl+'/members/public/register');
          $rootScope.gotoView('/registration');
        };

        /**
         * @description TPH login fail
         * @memberof LoginController
         * @method tphLoginFail
         */
        $scope.tphLoginFail = function () {
          // TPH Logging - unsuccessfull login
          const data = {
            pageTph: tphSourceSytem,
            errorCode: '401',
            errorDescription: 'Failed Login',
            originatingUrl: '/login',
          };
          // Hit touchpoint
          $http.post(config.apiUrl + '/touch-point', data);
        };

        /**
         * @description Saves the login settings.
         * @memberof SetupController
         * @method saveLoginSettings
         */
        $scope.saveLoginSettings = function () {
          if (!$rootScope.appSettings) {
            $rootScope.appSettings = {};
          }

          var loginSettings = {
            rememberUserId:
              ($rootScope.appSettings.login &&
                $rootScope.appSettings.login.useTouchId) ||
              false,
            useTouchId:
              ($rootScope.appSettings.login &&
                $rootScope.appSettings.login.useTouchId) ||
              false,
          };

          $rootScope.appSettings.login = loginSettings;
        };

        function numberOfKeys(obj) {
          if (typeof obj !== 'object') {
            console.warn('Tried to get number of keys for non-object', obj);
            return 0;
          }

          return Object.keys(obj).length;
        }
      },
    ]);
})();

/**
 * Logs a member out of the app.
 *
 * @namespace Controllers
 * @class LogoutController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.logout', [])
  .controller('LogoutController', [
    '$scope',
    '$rootScope',
    function($scope, $rootScope) {
      $rootScope.logOut();
    }
  ]);
}());

/**
 * The main controller of the application.
 *
 * @namespace Controllers
 * @class MainController
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.controllers.main', [
      'bcbsnc.cloud.services.component',
      'bcbsnc.cloud.services.rest',
    ])
    .controller('MainController', [
      '$scope',
      '$rootScope',
      '$location',
      '$q',
      '$http',
      'config',
      'cordovaService',
      'languageService',
      'componentService',
      'restService',
      'alertService',
      'adobeService',
      'PaymentFlowFactory',
      'CacheFactory',
      'TransparencyFactory',
      'backButtonService',
      'loginService',
      'analyticConstants',
      'googleMapsService',
      function (
        $scope,
        $rootScope,
        $location,
        $q,
        $http,
        config,
        cordovaService,
        languageService,
        componentService,
        restService,
        alertService,
        adobeService,
        PaymentFlowFactory,
        CacheFactory,
        TransparencyFactory,
        backButtonService,
        loginService,
        analyticConstants,
        googleMapsService
      ) {
        // load Google Maps Api
        $rootScope.mapsReady = false;
        if (window.google && google.maps) {
          $rootScope.mapsReady = true;
        } else {
          googleMapsService.getGoogleMapsApi();
        }
        backButtonService.backButtonFunction();
        angular.element('.page-no-connection').hide();
        /**
         * ($rootScope) Toggles display of the navbar. Set by individual views, on load.
         *
         * @memberof MainController
         * @member {Boolean} showNav
         */
        $rootScope.showNav = false;
        $rootScope.loggedIn = false;

        // intializing live chat

        $rootScope.livechat = { value: false };

        /**
         * ($rootScope) Button types for the left side of the navbar
         *
         * @memberof MainController
         * @member {Object} leftNavButtonType
         */
        $rootScope.leftNavButtonType = {
          HOME: 'HOME',
          HELP: 'HELP',
          BACK: 'BACK',
          INBOX: 'INBOX',
          BACK_TO_BILLING: 'BACK_TO_BILLING',
        };

        /**
         * ($rootScope) Display setting for the left navbar button.
         *
         * @memberof MainController
         * @member {String} leftNavButton
         */
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HELP;

        /**
         * ($rootScope) The page title content of the navbar. Can be text or an image.
         *
         * @memberof MainController
         * @member {Object} pageTitle
         */
        $rootScope.pageTitle = null;

        /**
         * ($rootScope) Toggles display of the policy select element. Set by individual views, on load.
         *
         * @memberof MainController
         * @member {Boolean} showPolicySelect
         */
        $rootScope.showPolicySelect = false;

        /**
         * ($rootScope) The currently selected policy index.
         *
         * @memberof MainController
         * @member {Number} policyIndex
         */
        $rootScope.policyIndex = 0;

        /**
         * ($rootScope) The member's policies, loaded from the data service.
         *
         * @memberof MainController
         * @member {Array} policies
         */
        $rootScope.policies = null;

        $rootScope.selectedPolicy = null;

        $rootScope.getSelectedPolicy = function () {
          return $rootScope.selectedPolicy;
        };

        /**
         * ($rootScope) Wrapper around local method so to expose to other directives.
         *
         * @memberof MainController
         */
        $rootScope.refreshNavbar = function () {
          $scope.getNavbar();
        };

        // Show page load spinner
        $rootScope.$on('pageLoading', function () {
          angular.element('.page-loading-spinner').show();
        });

        // Hide page load spinner
        $rootScope.$on('pageLoaded', function () {
          angular.element('.page-loading-spinner').hide();
        });

        /**
         * ($rootScope) Displays a network connection error alert.
         *
         * @memberof MainController
         * @method showNetworkErrorAlert
         */
        $rootScope.showNetworkErrorAlert = function () {
          if (!$rootScope.loc) {
            $rootScope.getInternalLocale();
          }

          var okTitle = $rootScope.loc.HOME_PAGE;
          if ($location.url() === '/home') {
            okTitle = $rootScope.loc.RETRY;
          }
          alertService
            .showAlert(
              $rootScope.loc.NETWORK_ERROR,
              $rootScope.loc.SERVICE_ERROR_MESSAGE,
              { title: $rootScope.loc.LOG_OUT, color: 'red' },
              { title: okTitle, color: 'blue' }
            )
            .then(
              function () {
                $rootScope.gotoView('/logout');
              },
              function () {
                if ($location.url() === '/home') {
                  $rootScope.gotoView('/home-refresh');
                  return;
                }
                $rootScope.gotoView('/home');
              }
            );
        };

        /**
         * ($rootScope) Displays a network connection error alert for unauthenticated pages.
         *
         * @memberof MainController
         * @method showNetworkErrorUnautenticated
         */
        $rootScope.showNetworkErrorUnautenticated = function () {
          if (!$rootScope.loc) {
            $rootScope.getInternalLocale();
          }

          var okTitle = $rootScope.loc.OK;
          alertService
            .showAlert(
              $rootScope.loc.NETWORK_ERROR,
              $rootScope.loc.NETWORK_ERROR_MESSAGE,
              {
                title: okTitle,
                color: 'blue',
              }
            )
            .then(
              function () {
                angular.element('.page-no-connection').hide();
                $rootScope.gotoView('/network-landing-local');
              },
              function () {
                angular.element('.page-no-connection').hide();
                $rootScope.gotoView('/network-landing-local');
              }
            );
        };

        /**
         * Opens the default mail application
         *
         * @memberof aboutDetails
         * @method openMail
         */
        $rootScope.openMail = function (address, subject) {
          address = address || '';
          subject = subject ? '?subject=' + subject : '';
          $rootScope.pausedForShare = true;
          window.open('mailto:' + address + subject, '_system');
        };

        /**
         * ($rootScope) Sets the policy index.
         *
         * @memberof MainController
         * @method selectPolicy
         * @param  {Number} index The desired policy index
         */
        $rootScope.selectPolicy = function (index) {
          $rootScope.indexOfSelectedMember = 0;
          if (!$rootScope.policies[index]) {
            $rootScope.policyIndex = $rootScope.policies[0].index;
            $rootScope.selectedPolicy = $rootScope.policies[0];
            $rootScope.noMatchPlanFound =
              $rootScope.selectedPolicy.vitalsMatchedPlanName === 'no match'
                ? true
                : false;
            TransparencyFactory.setSelectedPlan($rootScope.selectedPolicy);
            TransparencyFactory.setCurrentPolicyMembers(
              $rootScope.selectedPolicy.policyMembers
            );
            return;
          }
          $rootScope.policyIndex = $rootScope.policies[index].index;
          $rootScope.selectedPolicy = $rootScope.policies[index];
          $rootScope.noMatchPlanFound =
            $rootScope.selectedPolicy.vitalsMatchedPlanName === 'no match'
              ? true
              : false;
          TransparencyFactory.setSelectedPlan($rootScope.selectedPolicy);
          TransparencyFactory.setCurrentPolicyMembers(
            $rootScope.selectedPolicy.policyMembers
          );
          $rootScope.$emit('policySelected');
        };

        /**
         * ($rootScope) Gets TIP data object based on selectedPolicy
         *
         * @memberof MainController
         * @method getTIPData
         * @param  {String} transactionCode The transaction code
         * @param  {String} originatingURL The originating URL
         */
        $rootScope.getTIPData = function (transactionCode, originatingURL) {
          var localTime = new Date().toISOString().split('.')[0] + 'Z';
          var TIPData = { currentTime: localTime };

          if (transactionCode) {
            TIPData.transactionCode = transactionCode;
          }

          if (originatingURL) {
            TIPData.originatingURL = originatingURL;
          }

          if ($rootScope.selectPolicy) {
            TIPData.memberId =
              $rootScope.selectedPolicy.alphaPrefix +
              $rootScope.selectedPolicy.externalId;
            TIPData.lobCode = $rootScope.selectedPolicy.lobCode;
            TIPData.groupId = $rootScope.selectedPolicy.groupNumber;
            TIPData.sourceSystem = $rootScope.selectedPolicy.sourceSystem;
          } else {
            TIPData.error = 'No selected policy';
          }

          return TIPData;
        };

        /**
         *
         * @memberof MainController
         * @method selectsPlan
         *
         */
        $rootScope.selectsPlan = function () {
          $rootScope.$emit('selectsPlan');
        };

        /**
         * ($rootScope) Returns is a basic navbar is present to toggle the margin-top on the ng-view.
         *
         * @memberof MainController
         * @method hasBasicNavbar
         */
        $rootScope.hasBasicNavbar = function () {
          var basicNavbar = angular.element('.basic-navbar');
          return basicNavbar.length > 0;
        };

        /**
         * ($rootScope) Loads an app view.
         *
         * @memberof MainController
         * @method gotoView
         * @param  {String} url The view URL
         */
        $rootScope.gotoView = function (url) {
          if ($rootScope.closePolicySelect) {
            $rootScope.closePolicySelect();
          }

          if (url === '/logout') {
            return alertService
              .showAlert(
                $rootScope.loc.LOG_OUT_CONFIRM,
                null,
                { title: $rootScope.loc.LOG_OUT, color: 'red' },
                { title: $rootScope.loc.CANCEL }
              )
              .then(function () {
                $rootScope.logOut();
              });
          }
          $location.url(url);
        };

        /**
         * ($rootScope) Enters the payment flow, sets a variable in the Payment Flow Factory.
         *
         * @memberof MainController
         * @method enterPaymentFlow
         * @param  {String} desiredPaymentFlow Whether the user wants to setup a OTP or AutoPay
         */
        $rootScope.enterPaymentFlow = function (desiredPaymentFlow) {
          PaymentFlowFactory.setPaymentFlow(desiredPaymentFlow);

          if (desiredPaymentFlow === 'autopay-no-balance') {
            $location.url('/edit-autopay-flow/method');
          }
          if (
            desiredPaymentFlow === 'otp' ||
            desiredPaymentFlow === 'autopay'
          ) {
            $location.url('/payment/method');
          }
        };

        /**
         * ($rootScope) Passthrough to the cordovaService's openInBrowser function.
         *
         * @memberof MainController
         * @method openInBrowser
         * @param  {String} url       The URL to open.
         * @param  {String} [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object} [options] cordova-plugin-inappbrower options.
         */
        $rootScope.openInBrowser = function (url, target, options) {
          cordovaService.openInBrowser(url, target, options);
        };

        /* SSO option 1
        /**
         * ($rootScope) Passthrough to the cordovaService's openInBrowser function to handle Authenticated and/or SSO calls.
         *
         * @memberof MainController
         * @method openInBrowser
         * @param  {String} url       The URL to open or "sso:{vendor}" (i.e. "sso:vitals").
         * @param  {String} [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object} [options] cordova-plugin-inappbrower options.
         */
        $rootScope.openInSecureBrowser = function (url, target, options) {
          cordovaService.openInBrowser(url, target, options, true);
          loginService.getUserId().then(function (userId) {
            return $http.post(config.apiUrl + '/data/logging', {
              memberId: userId,
              url: url,
            });
          });
        };

        /**
         * ($rootScope) Passthrough to the cordovaService's openInBrowser function to handle SSO calls.
         *
         * @memberof MainController
         * @method openInBrowser
         * @param  {String} url       The URL to open.
         * @param  {String} [target]  The target to open the URL in ('_blank', '_self' or '_system').
         * @param  {Object} [options] cordova-plugin-inappbrower options.
         *
        $rootScope.openSSOInBrowser = function(url, target, options) {
            var credentials = [];
            credentials.push(loginService.getEncryptedCredentials($rootScope.userNameIn, $rootScope.passwordIn));
            cordovaService.openInBrowser(url, target, options, credentials);
        };*/

        /**
         * ($rootScope) Returns the current view URL.
         *
         * @memberof MainController
         * @method getViewUrl
         * @return {String} The current view URL
         */
        $rootScope.getViewUrl = function () {
          return $location.url();
        };

        /**
         * ($rootScope) Sets the application language.
         *
         * @memberof MainController
         * @method setLanguage
         * @param  {String} [lang] i18n language code
         * @return {Promise} A promise that resolves to function(language)
         */
        $rootScope.setLanguage = function (lang) {
          return languageService.setLanguage(lang).then(function (language) {
            $rootScope.language = language;
            return language;
          });
        };

        /**
         * ($rootScope) Retrieves the locale from the server.
         *
         * @memberof MainController
         * @method getLocale
         */
        $rootScope.getLocale = function () {
          return languageService
            .getLocale($rootScope.language)
            .then(function (locale) {
              $rootScope.loc = locale;
              $rootScope.$emit('localeRetrieved');
              return locale;
            });
        };

        $rootScope.$on('pageNeedsLocale', $rootScope.getLocale);

        $rootScope.billingTrackStates = function (step, billingInfo) {
          var userData = PaymentFlowFactory.getUserSetData();
          var billingMethod = userData.billingMethod;
          var trackingDetails = {};
          var pageName = 'billing' + step[0].toUpperCase() + step.slice(1);

          if (billingInfo && billingInfo.currentInvoice && userData) {
            var frequency =
              PaymentFlowFactory.getPaymentFlow() || userData.paymentFrequency;
            var pastDue = billingInfo.currentInvoice.balanceForwardAmount;

            if (billingInfo.paymentOverdue && pastDue == 0) {
              pastDue = billingInfo.currentInvoice.totalDueAmount;
            }

            if (frequency) {
              frequency = /auto/.test(frequency) ? 'autopay' : 'onetime';
            }

            if (!billingMethod && frequency == 'onetime') {
              billingMethod = billingInfo.isMedicare ? 'postal' : 'email';
            }

            setPropertyValue(
              trackingDetails,
              'isMedicare',
              billingInfo.isMedicare
            );
            setPropertyValue(trackingDetails, 'billingMethod', billingMethod);
            setPropertyValue(
              trackingDetails,
              'paymentMethod',
              userData.paymentMethod
            );
            setPropertyValue(
              trackingDetails,
              'amount',
              userData.paymentAmount,
              true
            );
            setPropertyValue(
              trackingDetails,
              'currentAmountDue',
              billingInfo.currentInvoice.billedAmount,
              true
            );
            setPropertyValue(
              trackingDetails,
              'balance',
              billingInfo.currentInvoice.totalDueAmount || '0',
              true
            );
            setPropertyValue(trackingDetails, 'pastDue', pastDue, true);
            setPropertyValue(
              trackingDetails,
              'frequency',
              billingInfo.autoPay ? 'autopay' : frequency
            );
            setPropertyValue(
              trackingDetails,
              'misc',
              billingInfo.processingPay ? 'processing' : false
            );

            adobeService.trackState(
              pageName,
              analyticConstants.BILLING_SECTION,
              trackingDetails
            );

            if (pageName == 'billingConfirmation') {
              adobeService.trackAction(
                pageName,
                analyticConstants.BILLING_SECTION,
                trackingDetails
              ); // custom metrics requires action
            }
          } else {
            console.warn(
              'Required data not available in billingTrackStates for page:' +
                pageName
            );
          }
        };

        $rootScope.healthNavTrackActions = function (
          type,
          transparencyInfo,
          section
        ) {
          healthNavTracking(true, type, transparencyInfo, section);
        };

        $rootScope.healthNavTrackStates = function (
          type,
          transparencyInfo,
          section
        ) {
          healthNavTracking(false, type, transparencyInfo, section);
        };

        $rootScope.healthNavTrackToggleActions = function (
          prefix,
          name,
          toggle
        ) {
          $rootScope.healthNavTrackActions(0, {
            title: prefix + ': ' + name + ':' + (toggle ? 'open' : 'close'),
          });
        };

        function healthNavTracking(isAction, type, transparencyInfo, section) {
          var userData = TransparencyFactory.getUserSetData();
          var trackingDetails = {};
          var pageName = 'provider search: ';
          var filters = {};

          section = section || analyticConstants.HEALTHNAV_SECTION;

          if (transparencyInfo && userData) {
            // searchTerm / searchCategory / pageName properties
            var searchTerm;
            var searchCategory = $location.search().searchTerm;

            switch (type) {
              case 0:
                searchTerm = transparencyInfo.searchTerm;
                pageName += transparencyInfo.title;
                break;
              case 1:
                searchTerm = userData.resultsTerm;
                pageName += 'search results: ' + searchTerm;
                setPropertyValue(
                  trackingDetails,
                  'providerResultsPage',
                  transparencyInfo.page || 1
                );
                break;
              case 2:
                searchTerm = userData.resultsDetailsTerm;
                pageName += 'profile: ' + searchTerm;
                break;
              case 3:
                searchTerm = transparencyInfo.searchTerm;
                pageName += 'search results: ' + searchTerm;
                setPropertyValue(
                  trackingDetails,
                  'providerEmptySearchTerm',
                  searchTerm
                );
                break;
              case 4:
                searchTerm = transparencyInfo.searchTerm;
                pageName += 'guided search: ' + searchTerm;
                break;
            }

            // create comma delimitted filter string
            setPropertyValue(filters, 'radius', userData.distance);
            setPropertyValue(
              filters,
              'zipCode',
              userData.city ? userData.city.zip : ''
            );
            setPropertyValue(
              filters,
              'professional_gender',
              userData.filterGender
            );
            setPropertyValue(
              filters,
              'field_specialty_ids',
              userData.filterSpecialty
            );
            setPropertyValue(
              filters,
              'smartShopperOnly',
              userData.smartShopperFilter
            );

            if (userData.filterTier) {
              setPropertyValue(
                filters,
                userData.filterTier.type,
                userData.filterTier.value
              );
            }

            filters = JSON.stringify(filters)
              .replace(/"/g, '')
              .substr(1)
              .slice(0, -1);

            setPropertyValue(trackingDetails, 'providerFilters', filters);
            setPropertyValue(trackingDetails, 'providerSearchTerm', searchTerm);
            setPropertyValue(
              trackingDetails,
              'providerSearchCategory',
              searchCategory
            );
            setPropertyValue(
              trackingDetails,
              'geoLocation',
              $rootScope.vitalsGeoCoords
            );
            setPropertyValue(
              trackingDetails,
              'geoLocationAllowed',
              userData.geoLocationStatus
            );
            setPropertyValue(
              trackingDetails,
              'providerView',
              $rootScope.openMapView ? 'map' : 'list'
            );

            if ($rootScope.selectedPlan) {
              setPropertyValue(
                trackingDetails,
                'providerNetworkId',
                $rootScope.selectedPlan.id
              );
              setPropertyValue(
                trackingDetails,
                'providerNetworkName',
                $rootScope.selectedPlan.name
              );
            }

            if (isAction) {
              adobeService.trackAction(
                pageName.toLowerCase(),
                section,
                trackingDetails
              );
            } else {
              adobeService.trackState(
                pageName.toLowerCase(),
                section,
                trackingDetails
              );
            }
          } else {
            console.warn(
              'Required data not available in transparencyTracking for page:' +
                pageName
            );
          }
        }

        function setPropertyValue(
          details,
          propertyName,
          propertyValue,
          isNumber
        ) {
          if (propertyValue || propertyValue === false) {
            if (isNumber) {
              propertyValue = parseFloat(propertyValue.toString())
                .toFixed(2)
                .toString();
            }
            details[propertyName] = propertyValue;
          }
        }

        /**
         * ($rootScope) Retrieves the internal locale for offline use.
         *
         * @memberof MainController
         * @method getInternalLocale
         */
        $rootScope.getInternalLocale = function () {
          $rootScope.loc = languageService.getInternalLocale(
            $rootScope.language
          );
          return $rootScope.loc;
        };

        /**
         * ($rootScope) Checks to make sure language is set and retrieves it and locale if not.
         *
         * @memberof MainController
         * @method verifyLocaleRetrieved
         */
        $rootScope.verifyLocaleRetrieved = function () {
          if (!$rootScope.language) {
            $rootScope.setLanguage().then(function () {
              $rootScope.getLocale();
            });
          }
        };

        /**
         * ($rootScope) Logs a member out of the app by removing their stored authorization.
         *
         * @memberof MainController
         * @method logOut
         */
        $rootScope.logOut = function () {
          $rootScope.checkNetwork();
          loginService
            .getAuthorization()
            .then(function (authObj) {
              if (authObj && Object.keys(authObj).length) {
                if (authObj.rememberUserId === true) {
                  return $q.resolve(true);
                }
                return loginService.setAuthorization({});
              } else {
                return $q.resolve(true);
              }
            })
            .then(function () {
              // defined in AngularJS-Services-Cloud
              var cache = CacheFactory.get('defaultCache');
              loginService.setUserLoggedOutFlag(true);
              if (cache) {
                CacheFactory.clearAll();
              }
              $rootScope.loggedIn = false;
              $rootScope.selectedPolicy = null;
              $rootScope.$emit('LOGOUT');

              if ($rootScope.offline && !$rootScope.online) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;
                angular.element('.page-no-connection').hide();
                $rootScope.gotoView('/network-landing-local');
              } else {
                return cordovaService.verifyMinAppVersion().then(function () {
                  $rootScope.gotoView('/login');
                  return true;
                });
              }
            });
        };

        /**
         * Retrieves the navbar component from the component service.
         *
         * @memberof MainController
         * @method getNavbar
         */
        $scope.getNavbar = function () {
          $scope.navbarHtml = '<navbar-loading></navbar-loading>';

          if (!!$rootScope.loggedIn === false) {
            return $q.reject('User is not logged in');
          }
          return componentService
            .getComponent(
              componentService.devices.MOBILE,
              'navbar',
              $rootScope.language || 'en',
              {
                policyIndex: $rootScope.policyIndex,
                deviceType: $rootScope.device,
                planId: $rootScope.selectedPolicy.id,
                vitalsMatchedPlanName:
                  $rootScope.selectedPolicy.vitalsMatchedPlanName,
                unreadMessages: $rootScope.unreadMessages,
              }
            )
            .then(function (navbarHtml) {
              $scope.navbarHtml = navbarHtml;
              return navbarHtml;
            });
        };

        /**
         * Retrieves the member's policies from the data service.
         *
         * @memberof MainController
         * @method getSignature
         */
        $scope.getSignature = function () {
          return restService
            .getData('signature', $rootScope.language || 'en')
            .then(function (indicators) {
              $rootScope.signature = new Map(indicators);
              console.log($rootScope.policyIndex);
              console.log($rootScope.signature.get($rootScope.policyIndex));
            })
            .catch(function (err) {
              console.log(err);
            });
        };

        /**
         * @description Retrieves the member's policies from the data service.
         * @memberof MainController
         * @method getPolicies
         */
        $scope.getPolicies = function () {
          var deferred = $q.defer();

          restService.getData('policies', $rootScope.language || 'en').then(
            function (policies) {
              $rootScope.policies = policies;
              for (var i = 0; i < policies.length; i++) {
                if (policies[i].defaultPolicy) {
                  $rootScope.selectPolicy(i);
                  break;
                }
              }

              $scope.getAnalyticsInfo().then(
                function () {
                  deferred.resolve(policies);
                },
                function () {
                  deferred.resolve(policies);
                }
              );
            },
            function (err) {
              deferred.reject(err);
            }
          );

          return deferred.promise;
        };

        /**
         * Retrieves the analytics info from the data service.
         *
         * @memberof MainController
         * @method getAnalyticsInfo
         */
        $scope.getAnalyticsInfo = function () {
          var deferred = $q.defer();

          restService
            .getData('analytics-info', $rootScope.language || 'en')
            .then(
              function (analyticsInfo) {
                $rootScope.analyticsInfo = analyticsInfo;
                deferred.resolve(analyticsInfo);
              },
              function (err) {
                deferred.reject(err);
              }
            );

          return deferred.promise;
        };

        /**
         * Returns whether or not the background image should display.
         *
         * @memberof MainController
         * @method showBackgroundImage
         */
        $scope.showBackgroundImage = function () {
          var activeUrls = [
            '/',
            '/home',
            '/login',
            '/network-landing-local',
            '/upgrade',
          ];
          var location = $location.url();

          for (var i = 0; i < activeUrls.length; i++) {
            if (location === activeUrls[i]) {
              return true;
            }
          }

          return false;
        };

        /** Blur the activeElement
         *
         * @method hideKeybaord
         */
        $rootScope.hideKeyboard = function () {
          document.activeElement.blur();
        };

        /**
         * (eventListener) listens for device to be ready.
         *
         * @memberof MainController
         * @callback onDeviceReady
         * @event deviceready
         */
        $rootScope.checkNetwork = function () {
          return $q(function (resolve) {
            document.addEventListener(
              'deviceready',
              checkNetworkConnection,
              false
            );

            function checkNetworkConnection() {
              if (navigator.connection.type !== Connection.NONE) {
                $rootScope.offline = false;
                $rootScope.online = true;
              } else {
                $rootScope.offline = true;
                $rootScope.online = false;
              }
              resolve({
                offline: $rootScope.offline,
                online: $rootScope.online,
              });
            }
          });
        };

        /**
         * (eventListener) listens for Internet and data connection.
         *
         * @memberof onDeviceReady
         * @event offline
         */
        document.addEventListener('deviceready', onDeviceReady, false);
        function onDeviceReady() {
          document.addEventListener('offline', onOffline, false);
          function onOffline() {
            if (!$rootScope.loc || Object.keys($rootScope.loc).length === 0) {
              var locale = languageService.getInternalLocale();
              navigator.notification.alert(
                locale.NETWORK_ERROR_MESSAGE,
                onDismissed,
                locale.NETWORK_ERROR,
                locale.OK
              );
            } else {
              navigator.notification.alert(
                $rootScope.loc.NETWORK_ERROR_MESSAGE,
                onDismissed,
                $rootScope.loc.NETWORK_ERROR,
                $rootScope.loc.OK
              );
            }
            function onDismissed() {
              angular.element('.page-no-connection').show();
              angular.element('.navbar-menu-list').css('height', 54 + '%');
              angular.element('.login-bottom-bar').css('margin-bottom', 28);
              angular.element('.navbar-menu-bottom').css('margin-bottom', 28);
            }

            navigator.notification.alert(
              $rootScope.loc.NETWORK_ERROR_MESSAGE,
              onDismissed,
              $rootScope.loc.NETWORK_ERROR,
              $rootScope.loc.OK
            );
          }

          document.addEventListener('online', onOnline, false);

          function onOnline() {
            var networkState = navigator.connection.type;
            if (networkState !== Connection.NONE) {
              angular.element('.page-no-connection').hide();
              angular.element('.login-bottom-bar').css('margin-bottom', 0);
              angular.element('.navbar-menu-bottom').css('margin-bottom', 0);
            }
          }
        }

        /**
         * (eventListener) listens for Android back button.
         *
         * @memberof onDeviceReady
         * @event backbutton
         * @param browserEvent
         **/
        document.addEventListener(
          'deviceready',
          function () {
            document.addEventListener(
              'backbutton',
              function (browserEvent) {
                var currentLocation = $location.path();
                browserEvent.preventDefault();
                $rootScope.blurContent = false;

                if (
                  angular.element('.alert-modal').is(':visible') ||
                  angular.element('.help-modal').is(':visible') ||
                  angular.element('.terms-modal').is(':visible') ||
                  angular.element('.quick-alert-modal').is(':visible') ||
                  angular.element('.full-screen-modal').is(':visible')
                ) {
                  browserEvent.preventDefault();
                  angular.element('.alert-modal').modal('hide');
                  angular.element('.help-modal').modal('hide');
                  angular.element('.terms-modal').modal('hide');
                  angular.element('.full-screen-modal').modal('hide');
                  angular.element('.quick-alert-modal').modal('hide');
                  angular.element('#app-container').removeClass('no-scroll');
                  angular.element('.main-wrapper').removeClass('blur');
                  angular.element('.policy-select').removeClass('blur');
                  angular.element('.claims-container').removeClass('blur');
                  angular.element('.modal-backdrop.in').remove();
                  angular.element('.navbar').toggleClass('blur', false);
                  $rootScope.blurContent = false;
                  browserEvent.preventDefault();
                } else if (
                  currentLocation === '/home' ||
                  currentLocation === '/login'
                ) {
                  browserEvent.preventDefault();
                  angular.element('.policy-select').removeClass('blur');
                  navigator.app.exitApp();
                } else if (
                  $rootScope.sentMessage ||
                  $rootScope.cliamSendMessage
                ) {
                  browserEvent.preventDefault();
                  angular.element('.policy-select').removeClass('blur');
                  history.go(-3);
                  navigator.app.backHistory();
                  $rootScope.sentMessage = false;
                  $rootScope.cliamSendMessage = false;
                } else if (currentLocation === '/network-landing-local') {
                  browserEvent.preventDefault();
                } else {
                  browserEvent.preventDefault();
                  angular.element('.policy-select').removeClass('blur');
                  navigator.app.backHistory();
                }
              },
              false
            );
          },
          false
        );
      },
    ]);
})();

/**
 * Controller for the network Landing Local page view.
 *
 * @namespace Controllers
 * @class NetworkLandingLocalController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.networkLandingLocal', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('NetworkLandingLocalController', [
            '$scope',
            '$rootScope',
            '$window',
            function($scope, $rootScope, $window) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;

                document.addEventListener("deviceready", onDeviceReady, false);
                function onDeviceReady() {

                  document.addEventListener("online", onOnline, false);

                  function onOnline(){
                      angular.element('.page-no-connection').hide();
                      angular.element('.login-bottom-bar').css('margin-bottom', 0);
                      angular.element('.navbar-menu-bottom').css('margin-bottom', 0);
                    $window.history.go(-2);
                  }
                }
            }
        ]);
}());

/**
 * @description Controller for payment confirmation in payment flow
 * @namespace Controllers
 * @class PaymentConfirmationController
 */
(function() {
  angular
    .module('blueconnect.mobile.controllers.payment.confirmation', [])
    .controller('PaymentConfirmationController', [
      '$rootScope',
      '$scope',
      '$window',
      'adobeService',
      'pageService',
      'paymentFlowFactory',
      function($rootScope, $scope, $window, adobeService, pageService, paymentFlowFactory) {
        var vm = this;

        $rootScope.showNav = true;
        $rootScope.showPolicySelect = false;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
        $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_CONFIRMATION;

        $scope.getPage = getPage;
        $scope.getPage();
        $scope.loc = $rootScope.loc;

         /**
         * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
         *
         * @memberof PaymentConfirmationController
         * @method getPage
         */
        function getPage() {
          /**
          * The directive HTML for the page.
          *
          * @memberof PaymentConfirmationController
          * @member {String} pageHtml
          */
          $scope.pageHtml = '';

          $rootScope.$emit('pageLoading');

          var query = {
            policyIndex: $rootScope.policyIndex,
            policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
            policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
            policyExternalId : $rootScope.selectedPolicy.externalId
          };

          pageService
            .getPage(
              pageService.devices.MOBILE,
              'payment-confirmation',
              $rootScope.language,
              query
            )
            .then(function(pageHtml) {
              $scope.pageHtml = pageHtml;
              $rootScope.$emit('pageLoaded');
            })
            .catch(function(error) {
              $rootScope.$emit('pageLoaded');
              $rootScope.showNetworkErrorAlert();
            });
        }
      }
    ]);

})();

/**
 * Controller for the payment details page view.
 *
 * @namespace Controllers
 * @class PaymentDetailsController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.payment.details', [

  ])
  .controller('PaymentDetailsController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_DETAILS;

      $scope.getPage = getPage;
      $scope.getPage();
      $scope.loc = $rootScope.loc;

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof PaymentDetailsController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof PaymentDetailsController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };

        $rootScope.$emit('pageLoading');

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'payment-details',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.controllers.paymentFlow', [
      'bcbsnc.cloud.services.page'
    ])
    .controller('PaymentFlowController', [
      '$http',
      '$location',
      '$rootScope',
      '$routeParams',
      '$scope',
      '$timeout',
      '$window',
      'config',
      'restService',
      'PaymentFlowFactory',
      function($http, $location, $rootScope, $routeParams, $scope, $timeout, $window, config, restService, PaymentFlowFactory) {
        // controls the current loaded page
        $scope.step = $routeParams.step;

        // hide the navbar
        $rootScope.showNav = false;

        // hide the policy select dropdown
        $rootScope.showPolicySelect = false;

        // default the loc object to avoid ReferenceErrors later
        $scope.loc = $rootScope.loc || {};

        // default the navbar details to avoid unref
        $scope.navbarDetails = {};

        // show the back button
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

        $scope.userData = PaymentFlowFactory.getUserSetData();

        // loading / processing
        $scope.paymentInProgress = false;

        var routingPages = [
          '/billing',
          '/payment/method',
          '/payment/details',
          '/payment/review',
          '/payment/confirmation'
        ];

        // if the user loads the review page but already has a confirmation code
        // android fix for users hitting android back button from confirmation
        if ($scope.step === 'review' && PaymentFlowFactory.getConfirmationCode()) {
          PaymentFlowFactory.reset();
          $rootScope.gotoView('/billing');
        }

        // confirmation page-specific logic
        if ($scope.step === 'confirmation') {
          $rootScope.showNav = true;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;
          $rootScope.pageTitle = PaymentFlowFactory.getUserSetData().paymentErrorCode > 100 ? $scope.loc.BP_UNSUCCESSFUL : $scope.loc.BP_HEADER_PAYMENT_CONFIRMATION;

          // hitting back from exit of payment flow to another page after data has been cleared
          if (PaymentFlowFactory.getPaymentFrequency() === null) {
            $rootScope.gotoView('/billing');
          }

        }
        // all other pages (method, details, review)
        else {
          $scope.navbarDetails = {
            leftNavButton: {
              icon: 'back'
            },
            onLeftClick: goToPreviousPage,
            title: getNavbarHeader(),
            openClearCardModal: null,
            cancelModalObj: {
              title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
              body: $scope.loc.BP_EDIT_PAYMENT_REENTER_DETAILS,
              cancelButton: {
                title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
              },
              confirmButton: {
                color: 'blue',
                title: $scope.loc.BP_EDIT_PAYMENT_INFO
              }
            },
            // passed into cancel modal for the nav bar back button
            confirmCancelModal: function() {
              PaymentFlowFactory.resetCreditCardDetails();
              $rootScope.gotoView('/payment/details');
            }
          };

        }
        if (!$rootScope.loc || !Object.keys($scope.loc).length) {
          $rootScope.loc = {};
          $rootScope.$emit('pageNeedsLocale');
          $rootScope.$on('localeRetrieved', function(ev, data) {
            $scope.loc = $rootScope.loc;
            $scope.navbarDetails.title = getNavbarHeader()
          });
        }

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        // start loading the page
        $rootScope.$emit('pageLoading');
        restService
          .getPageData(
            restService.devices.MOBILE,
            'payment-flow',
            $rootScope.language,
            query
          )
          .then(function(paymentFlowResponse) {
            $rootScope.$emit('pageLoaded');
            $scope.billingInfo = paymentFlowResponse;
            $rootScope.billingTrackStates($scope.step, $scope.billingInfo);
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });

        $scope.methodValidateForm = function(formObj) {
          // if billing method is present, will not be present once
          // user has already signed up for paperless billing
          if (formObj.paymentFlowBillingMethodForm) {
            formObj.paymentFlowBillingMethodForm.$setDirty();

            // user has selected email billing (paperless)
            if (formObj.paymentFlowBillingMethodForm.memberEmail) {
              formObj.paymentFlowBillingMethodForm.memberEmail.$setDirty();
            }

            // user has selected postal billing
            if (formObj.paymentFlowBillingMethodForm.billingMethodSelected.$modelValue === 'postal') {
              [
                formObj.paymentFlowBillingMethodForm.streetAddress,
                formObj.paymentFlowBillingMethodForm.city,
                formObj.paymentFlowBillingMethodForm.state,
                formObj.paymentFlowBillingMethodForm.zipcode
              ].map(function(input) {
                input.$setDirty();
              });
            }
          }

          // paperless agreement input logic
          if (formObj.paymentFlowPaperlessAgreement && formObj.paymentFlowPaperlessAgreement.acceptedAgreement) {
            formObj.paymentFlowPaperlessAgreement.acceptedAgreement.$setDirty();
          }

          formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$setDirty();

          // payment amount input logic
          if (formObj.paymentFlowPaymentAmountForm) {
            formObj.paymentFlowPaymentAmountForm.desiredPaymentAmount.$setDirty();
          }

          // payment frequency input logic
          if (formObj.paymentFlowPaymentFrequencyForm) {
            formObj.paymentFlowPaymentFrequencyForm.frequencySelected.$setDirty();
          }

          // if the form is invalid, do not proceed
          if (formObj.$invalid) {
            //console.log(formObj);
            return console.warn('form is invalid, cannot proceed');
          }

          methodFormSetters(formObj);

          $rootScope.gotoView('/payment/details');
          $scope.navbarDetails.title = getNavbarHeader();
        };

        function methodFormSetters(formObj) {
          // set the payment amount
          if (formObj.paymentFlowPaymentAmountForm) {
            PaymentFlowFactory
              .setPaymentAmount(formObj.paymentFlowPaymentAmountForm.desiredPaymentAmount.$modelValue);
          }

          // set the payment frequency, also the flow
          if (formObj.paymentFlowPaymentFrequencyForm) {
            PaymentFlowFactory.setPaymentFrequency(formObj.paymentFlowPaymentFrequencyForm.frequencySelected.$modelValue);
            PaymentFlowFactory.setPaymentFlow(formObj.paymentFlowPaymentFrequencyForm.frequencySelected.$modelValue);
          }


          // error checking for if ng-if removed this form
          if (formObj.paymentFlowBillingMethodForm) {
            // set the billing method
            PaymentFlowFactory
              .setBillingMethod(formObj.paymentFlowBillingMethodForm.billingMethodSelected.$modelValue);
          } else {
              //if medicare then we wont have a paymentFlowBillingMethodForm
              PaymentFlowFactory.setBillingMethod('postal');
          }

          // set the payment method
          PaymentFlowFactory
            .setPaymentMethod(formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$modelValue);

        }

        $scope.detailsValidateForm = function(detailsFormObj) {
          var bankDraftForm = detailsFormObj.bankDraftForm;
          var creditCardDetailsForm = detailsFormObj.creditCardDetailsForm;

          if (bankDraftForm) {
            [
              bankDraftForm.accountOwnersName,
              bankDraftForm.bankRoutingNumber,
              bankDraftForm.accountType,
              bankDraftForm.bankAccountNumber,
              bankDraftForm.confirmAccountNumber,
            ]
              .forEach(function(ctrl) {
                if (!ctrl) {
                  return console.warn('That control does not exist!');
                }
                ctrl.$setDirty();
              });
            if (detailsFormObj.$valid) {
              $rootScope.gotoView('/payment/review');
            } else {
              detailsFormObj.$setDirty();
            }
          }
          if (creditCardDetailsForm) {
            [
              creditCardDetailsForm.firstName,
              creditCardDetailsForm.creditCardNumber,
              creditCardDetailsForm.month,
              creditCardDetailsForm.year,
              creditCardDetailsForm.cvn,
            ]
              .forEach(function(ctrl) {
                if (!ctrl) {
                  return console.warn('That control does not exist!');
                }
                ctrl.$setDirty();
              });

            var userPaymentData = PaymentFlowFactory.getUserSetData();
            var userIdentity = $scope.billingInfo.userIdentity;
            var data = {
              account: {
                token: $scope.billingInfo.token
              },
              paymentFrequency: userPaymentData.paymentFrequency === 'autopay' ? 'RCC' : 'DIRECTBILL',
              authAmount: 2, // this does not matter because they are not using this in the hashed signature
              firstName: userIdentity.givenName,
              lastName: userIdentity.familyName
            };
            if (userIdentity.email) {
              data.emailAddress = userIdentity.email;
            }
            //console.log('data:: ' + JSON.stringify(data));
            var sig = $http.post(config.apiUrl + '/signature', data)
              .then(function(response) {
                //console.log('signature response:: ' + JSON.stringify(response));
                userPaymentData.signature = response.data.signature;
                userPaymentData.merchantReferenceCode = response.data.merchantReferenceCode;
                userPaymentData.enrollmentProcessNumber = response.data.enrollmentProcessNumber;
                if (detailsFormObj.$valid) {
                  $rootScope.gotoView('/payment/review');
                }
              })
              .catch(function(error) {
                detailsFormObj.paymentError.$setDirty();
                $scope.$digest();
                //console.log('Error getting signature', JSON.stringify(error));
              });
          }

          detailsFormObj.paymentFlowTermsConditions.acceptedAgreement.$setDirty();

        };

        /**
         * @description This posts to the endpoint in the Node billing service that
         */
        $scope.reviewValidateForm = function(paymentFlowReviewForm) {
          var userPaymentData = PaymentFlowFactory.getUserSetData();
          var userIdentity = $scope.billingInfo.userIdentity;
          var paymentError = false;
          $scope.paymentInProgress = true;
          //console.log('userPaymentData::: ' + JSON.stringify(userPaymentData));

          if (userPaymentData.paymentMethod === 'bankdraft') {
            var data = {
              account: {
                token: $scope.billingInfo.token
              },
              paymentAmount: PaymentFlowFactory.getPaymentAmount().toString(),
              accountHolderName: userPaymentData.accountHolderName,
              paymentFrequency: userPaymentData.paymentFrequency === 'autopay' ? 'RBD' : 'DIRECTBILL',
              billingMethod: userPaymentData.billingMethod && userPaymentData.billingMethod.toUpperCase(),
              preferences: {
                mailingAddress: userPaymentData.preferences.mailingAddress,
                priorBillingNotifPrefCode: $scope.billingInfo.preferences.priorBillingNotifPrefCode,
                payment: {
                  bankDraftDetails: {
                    bankName: userPaymentData.bankName,
                    accountNumber: userPaymentData.accountNumber,
                    routingNumber: userPaymentData.routingNumber,
                    accountType: userPaymentData.accountType,
                  }
                }
              },
              TIPData: $rootScope.getTIPData('OneTimeBankDraft', '/bankdraft')
            };
            if (userPaymentData.preferences.emailAddress) {
              data.preferences.emailAddress = userPaymentData.preferences.emailAddress;
            }
            $http.post(config.apiUrl + '/bankdraft', data)
              .then(function(response) {
                $scope.paymentInProgress = false;
                if (response.data.confirmationCode == null) {
                  paymentFlowReviewForm.$setDirty();
                  $scope.$digest();
                } else {
                  userPaymentData.paymentErrorCode = 100;
                  userPaymentData.successConfirmationCode = response.data.confirmationCode;
                  $rootScope.gotoView('/payment/confirmation');
                }
              })
              .catch(function() {
                //console.warn('Error posting payment', error)
                paymentFlowReviewForm.$setDirty();
                $scope.paymentInProgress = false;
                $scope.$digest();
                paymentError = true;
              });
          } else {
            //It is credit card
            //console.log('userpayment::: ' + JSON.stringify(userPaymentData));
            var cardRequest = {
              environment: config.env == 'PROD' ? config.env.toLowerCase() : 'test',
              merchantId: config.merchantId,
              transaction: {
                merchantReferenceCode: userPaymentData.merchantReferenceCode.toString()
              },
              card: {
                accountNumber: userPaymentData.creditCardDetails.lastFour.toString(),
                expirationMonth: userPaymentData.creditCardDetails.month.toString(),
                expirationYear: '20' + userPaymentData.creditCardDetails.year.toString(),
                cvNumber: userPaymentData.creditCardDetails.cvn.toString()
              },
              billing: {
                firstName: userIdentity.givenName,
                lastName: userIdentity.familyName,
                postalCode: "94043"
              },
              signature: userPaymentData.signature
            };

            var cc = cybersource
              .processCard(
                cardRequest,
                function(result) {
                  paymentError = false;
                  doStk2(result);
                },
                function() {
                  paymentFlowReviewForm.$setDirty();
                  $scope.paymentInProgress = false;
                  $scope.$digest();
                }
              );

            // eslint-disable-next-line no-inner-declarations
            function doStk2(result) {
              var data = {
                account: {
                  token: $scope.billingInfo.token
                },
                paymentFrequency: userPaymentData.paymentFrequency === 'autopay' ? 'RCC' : 'DIRECTBILL',
                paymentAmount: Number(PaymentFlowFactory.getPaymentAmount()),
                merchantReferenceCode: userPaymentData.merchantReferenceCode,
                encryptedPaymentData: result.encryptedPaymentData,
                enrollmentProcessNumber: userPaymentData.enrollmentProcessNumber,
                ccFirstName: userPaymentData.creditCardDetails.firstName,
                ccLastName: userPaymentData.creditCardDetails.lastName,

                accountHolderName: userPaymentData.accountHolderName,
                billingMethod: userPaymentData.billingMethod && userPaymentData.billingMethod.toUpperCase(),
                preferences: {
                  mailingAddress: userPaymentData.preferences.mailingAddress,
                  priorBillingNotifPrefCode: $scope.billingInfo.preferences.priorBillingNotifPrefCode,
                  payment: {
                    bankDraftDetails: {
                      bankName: null,
                      accountNumber: null,
                      routingNumber: null,
                      accountType: null,
                      bankAccountHolderName: userPaymentData.accountHolderName ||
                      ( userPaymentData.creditCardDetails.firstName + ' ' + userPaymentData.creditCardDetails.lastName )
                    }
                  }
                },
                TIPData: $rootScope.getTIPData('OneTimeCreditCardPmt', '/sale')
              };

              if (userIdentity.email) {
                data.preferences.emailAddress= userIdentity.email;
              }

              // then do stk2
              $http
                .post(config.apiUrl + '/sale', data)
                .then(function(response) {
                  userPaymentData.paymentErrorCode = response.data.statusCode;
                  userPaymentData.successConfirmationCode = response.data.merchantReferenceCode;
                  $scope.paymentInProgress = false;
                  $rootScope.gotoView('/payment/confirmation');
                })
                .catch(function() {
                  paymentFlowReviewForm.$setDirty();
                  $scope.paymentInProgress = false;
                  $scope.$digest();
                });
            }
          }
        };

        //TODO rename function to something more apt
        $scope.confirmationValidateForm = function() {
          PaymentFlowFactory.reset();
          $rootScope.gotoView('/billing');
        };

        function goToPreviousPage() {
          if ($location.$$url === '/payment/review' && PaymentFlowFactory.getUserSetData().paymentMethod === 'creditcard') {
            return $scope.navbarDetails.openClearCardModal();
          }
          var paymentMethod = PaymentFlowFactory.getPaymentMethod();
          var currentViewIndex = routingPages.indexOf($location.$$url);
          var previousView = routingPages[currentViewIndex - 1];
          var nextView = routingPages[currentViewIndex + 1];
          if (paymentMethod === 'creditcard') {
            $rootScope.$emit('openPaymentFlowModal:previousPageCreditCardConfirm');
            $rootScope.gotoView(previousView);
          } else {
            $rootScope.gotoView(previousView);
          }
          // on exit of payment flow from method page
          if (previousView === routingPages[0]) {
            //console.log('resetting payment info');
            PaymentFlowFactory.reset();
          }
        }

        function getNavbarHeader() {
          if (!$rootScope.loc || !Object.keys($rootScope.loc).length) {
            return '';
          }
          var headers = {
            method: $rootScope.loc.BP_HEADER_PAYMENT_METHOD,
            details: $rootScope.loc.BP_HEADER_PAYMENT_DETAILS,
            review: $rootScope.loc.BP_HEADER_PAYMENT_REVIEW,
            confirmation: PaymentFlowFactory.getUserSetData().paymentErrorCode ? $rootScope.loc.BP_UNSUCCESSFUL : $rootScope.loc.BP_HEADER_PAYMENT_CONFIRMATION
          };
          return headers[$scope.step];
        }
      }])
})();
/**
 * Controller for the login page view.
 *
 * @namespace Controllers
 * @class LoginController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.payment.method', [

  ])
  .controller('PaymentMethodController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc ? $rootScope.loc.BP_HEADER_PAYMENT_METHOD : '';
      $scope.getPage = getPage;
      $scope.getPage();

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof HomeController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof HomeController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        $rootScope.$emit('pageLoading');

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'payment-method',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

/**
 * Controller for the payment details page view.
 *
 * @namespace Controllers
 * @class PaymentReviewController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.payment.review', [

  ])
  .controller('PaymentReviewController', [
    '$scope',
    '$rootScope',
    '$window',
    'adobeService',
    'pageService',
    function($scope, $rootScope, $window, adobeService, pageService) {
      var vm = this;

      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;
      $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
      $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_REVIEW;

      $scope.getPage = getPage;
      $scope.getPage();
      $scope.loc = $rootScope.loc;

      /**
       * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
       *
       * @memberof PaymentReviewController
       * @method getPage
       */
      function getPage() {
        /**
        * The directive HTML for the page.
        *
        * @memberof PaymentReviewController
        * @member {String} pageHtml
        */
        $scope.pageHtml = '';

        /**
         * For basicNavbar, we have to pass this function
         * to handle the left click
         */
        $scope.basicNavbarLeftClick = function() {
            $window.history.back();
        };

        $rootScope.$emit('pageLoading');

        var query = {
          policyIndex: $rootScope.policyIndex,
          policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
          policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
          policyExternalId : $rootScope.selectedPolicy.externalId
        };

        pageService
          .getPage(
            pageService.devices.MOBILE,
            'payment-review',
            $rootScope.language,
            query
          )
          .then(function(pageHtml) {
            $scope.pageHtml = pageHtml;
            $rootScope.$emit('pageLoaded');
          })
          .catch(function(error, status) {
            $rootScope.$emit('pageLoaded');
            $rootScope.showNetworkErrorAlert();
          });
      }

    }
  ]);
}());

/**
 * Controller for the managing the Member's dependent(s)' PCP
 *
 * @namespace Controllers
 * @class ManageDependentsPcpController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.pcp.ManageDependentsPcpController', [

  ])
    .controller('ManageDependentsPcpController', [
      '$scope',
      '$rootScope',
      '$window',
      'pageService',
      function($scope, $rootScope, $window, pageService) {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
        $rootScope.pageTitle = $rootScope.loc.BP_HEADER_PAYMENT_REVIEW;

        getPage();
        $scope.loc = $rootScope.loc;

        /**
         * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
         *
         * @memberof ManageDependentsPcpController
         * @method getPage
         */
        function getPage() {
          /**
          * The directive HTML for the page.
          *
          * @memberof ManageDependentsPcpController
          * @member {String} pageHtml
          */
          $scope.pageHtml = '';

          $rootScope.showNav = true;
          $rootScope.showPolicySelect = false;
          $rootScope.pageTitle = $rootScope.loc.PCP_COMMERCIAL_MY_DEPENDENT_PCPS;
          $rootScope.leftNavButton = $rootScope.leftNavButtonType.HOME;

          $rootScope.$emit('pageLoading');

          var query = {
            policyIndex: $rootScope.policyIndex,
            policyEffectiveDate: $rootScope.selectedPolicy.effectiveDate,
            policyExpirationDate: $rootScope.selectedPolicy.expirationDate,
            policyExternalId: $rootScope.selectedPolicy.externalId
          };

          pageService
            .getPage(
              pageService.devices.MOBILE,
              'pcp-manage-dependents-pcp',
              $rootScope.language,
              query
            )
            .then(function(pageHtml) {
              $scope.pageHtml = pageHtml;
              $rootScope.$emit('pageLoaded');
            })
            .catch(function(error, status) {
              $rootScope.$emit('pageLoaded');
              $rootScope.showNetworkErrorAlert();
            });
        }

      }
    ]);
}());

/**
 * Controller for the application settings view
 *
 * @namespace Controllers
 * @class SettingsController
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.controllers.settings', ['bcbsnc.cloud.services.page'])
    .controller('SettingsController', [
      '$scope',
      '$rootScope',
      '$timeout',
      '$window',
      'pageService',
      'adobeService',
      'analyticConstants',
      function($scope, $rootScope, $timeout, $window, pageService, adobeService, analyticConstants) {
        $rootScope.showNav = false;
        $rootScope.showPolicySelect = false;
        $scope.loc = $rootScope.loc;

        /**
         * Retrieves the page HTML from the page service. Called on view load.
         *
         * @memberof SettingsController
         * @method getPage
         */
        $scope.getPage = function() {
          /**
           * The directive HTML for the page.
           *
           * @memberof SettingsController
           * @member {String} pageHtml
           */
          $scope.pageHtml = '';

        if (!$rootScope.language) {
          $timeout($scope.getPage, 100);
          return;
        }


          $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;

          /**
           * For basicNavbar, we have to pass this function
           * to handle the left click
           */
          $scope.basicNavbarLeftClick = function() {
            $rootScope.fromBackButton = true;
            $rootScope.detailsFromBackButton = true;
            $window.history.back();
          };

          var pageName = 'Settings';

          $rootScope.$emit('pageLoading');
          pageService
            .getPage(
              pageService.devices.MOBILE,
              pageName,
              $rootScope.language,
              $rootScope.touchIdAvailable
                ? {
                    biometricType: $rootScope.touchIdAvailable,
                  }
                : {}
            )
            .then(function(pageHtml) {
              $rootScope.$emit('pageLoaded');
              $scope.pageHtml = pageHtml;
              adobeService.trackState('settings', analyticConstants.SETTINGS_SECTION);
            });
        };

        $rootScope.verifyLocaleRetrieved();
        $scope.getPage();
      },
    ]);
})();

/**
 * Controller for the setup page view.
 *
 * @namespace Controllers
 * @class SetupController
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.controllers.setup', [
    'blueconnect.mobile.services.touchId',
    'blueconnect.mobile.services.androidFingerprintAuth'
  ])
  .controller('SetupController', [
    '$scope',
    '$rootScope',
    '$location',
    'cordovaService',
    'touchIdService',
    'androidFingerprintAuthService',
    'adobeService',
    'analyticConstants',
    function($scope, $rootScope, $location, cordovaService, touchIdService, androidFingerprintAuthService, adobeService, analyticConstants) {
      $rootScope.showNav = false;
      $rootScope.showPolicySelect = false;

      $scope.itemIndex = 0;

      // CRIT [runs in order to check which type of device you are on during setup]
      if (typeof cordova !== 'undefined') {
        document.addEventListener('deviceready', function() {
          cordovaService.checkDeviceType();
        }, false);
      }


      /**
       * Navigates to a setup card/item.
       *
       * @memberof SetupController
       * @method gotoItem
       * @param {Number} index The item to go to.
       */
      $scope.gotoItem = function(index) {
        if (index < 0) {
          index = 0;
        }
        if (index > 2) {
          index = 2;
        }

        if (index === 1 && !$scope.hasPresetSecurity()) {
          $scope.securitySetting = {
            high: true,
            medium: false,
            standard: false
          };
          $scope.trackSettingAction($scope.securitySetting);
          $scope.setLoginSettingsToLevel('high');
        }

        if (index === 1 && !$scope.securitySetting.standard || (typeof cordova !== 'undefined' && !$rootScope.touchIdAvailable) ) {
          if (index < $scope.itemIndex) {
            index = 0;
          }
          else {
            index = 2;
            $scope.trackSettingAction($scope.securitySetting);
            $scope.saveLoginSettings();
          }
        }
        else if (index === 2) {
          $scope.saveLoginSettings();
        }
        else if (index === 1) {
          $scope.trackSettingAction($scope.securitySetting);
        }

        $scope.itemIndex = index;
        var left = index * -100 + (index + 1) * 5;
        angular.element('.setup-carousel').animate({left: left + '%'}, 125);
      };

      /**
       * Sets security settings to custom.
       *
       * @memberof SetupController
       * @method selectCustomSecurity
       */
      $scope.selectCustomSecurity = function() {
        $scope.securitySetting = {
          high: false,
          medium: false,
          standard: false
        };

        $scope.gotoItem(1);
      };

      $scope.trackSettingAction = function(settings) {
        var action = null;
        Object.keys(settings).forEach(function(element){
          if (settings[element]) {
            action = 'settings:update:'+ element;
            adobeService.trackAction(action, analyticConstants.SETTINGS_SECTION);
          }
        });
      };

      /**
       * Gets the localized description text of the security level.
       *
       * @memberof SetupController
       * @method getCustomSecurityText
       */
      $scope.getCustomSecurityText = function() {
        if (!$scope.securitySetting) {
          return '';
        }

        if ($scope.securitySetting.high) {
          return $rootScope.loc.HIGH;
        }
        else if ($scope.securitySetting.medium) {
          return $rootScope.loc.MEDIUM;
        }

        return $rootScope.loc.STANDARD;
      };

      /**
       * Verifies if the user has selected a security preset.
       *
       * @memberof SetupController
       * @method hasPresetSecurity
       * @return {Boolean} Whether a security preset was selected.
       */
      $scope.hasPresetSecurity = function() {
        for (var key in $scope.securitySetting) {
          if ($scope.securitySetting[key]) {
            return true;
          }
        }

        return false;
      };

      /**
       * Sets security settings to a preset.
       *
       * @memberof SetupController
       * @method setLoginSettingsToLevel
       * @param {String} level The preset level.
       */
      $scope.setLoginSettingsToLevel = function(level) {

        switch (level) {
          case 'high':
            $scope.lockApp = true;
            $scope.lockAfter = 0;
            $scope.stayLoggedIn = false;
            $scope.rememberUserId = false;
            $scope.useTouchId = false;
            break;
          case 'medium':
            $scope.lockApp = true;
            $scope.lockAfter = 20;
            $scope.stayLoggedIn = false;
            $scope.rememberUserId = true;
            $scope.useTouchId = false;
            break;
          case 'standard':
            $scope.lockApp = true;
            $scope.lockAfter = 30;
            $scope.stayLoggedIn = true;
            $scope.rememberUserId = true;
            break;
          default:
            break;
        }
      };

      /**
       * Saves the login settings.
       *
       * @memberof SetupController
       * @method saveLoginSettings
       */
      $scope.saveLoginSettings = function() {
        var loginSettings = {
          lockApp: $scope.lockApp || false,
          lockAfter: parseInt($scope.lockAfter, 10) || 0,
          stayLoggedIn: $scope.stayLoggedIn || false,
          rememberUserId: $scope.rememberUserId || false,
          useTouchId: $scope.useTouchId || false
        };

        if (!$rootScope.appSettings) {
          $rootScope.appSettings = {};
        }
        $rootScope.appSettings.login = loginSettings;
      };

      /**
       * Confirms the user's fingerprint if they have Touch ID.
       *
       * @memberof SetupController
       * @method confirmFingerprint
       */
      $scope.confirmFingerprint = function() {
        $scope.useTouchId = true;

        if ($rootScope.iphone == true) {
          touchIdService.verifyFingerprint().then(function() {
            // $scope.gotoItem($scope.itemIndex + 1);
            $rootScope.fingerprintOK();
          }, function() {
            // $scope.useTouchId = false;
            $rootScope.fingerprintNotOK();
          });
        }

        if ($rootScope.android === true) {
          FingerprintAuth.isAvailable(androidFingerprintAuthService.isAvailableSuccess,androidFingerprintAuthService.isAvailableError);
        }
      };

      $rootScope.fingerprintOK = function() {
        adobeService.trackAction('settings:update:touchIdOn', analyticConstants.SETTINGS_SECTION);
        $scope.gotoItem($scope.itemIndex + 1);
      };

      $rootScope.fingerprintNotOK = function() {
        adobeService.trackAction('settings:update:touchIdOff', analyticConstants.SETTINGS_SECTION);
        $scope.useTouchId = false;
      };



      /**
       * Disables the use of TouchID when it's available in the system.
       *
       * @memberof SetupController
       * @method disableTouchId
       */
      $scope.disableTouchId = function() {
        $scope.useTouchId = false;
        adobeService.trackAction('settings:update:touchIdOff', analyticConstants.SETTINGS_SECTION);
        $scope.gotoItem($scope.itemIndex + 1);
      };

      /**
       * Retrieves remote locale and loads the home page.
       *
       * @memberof SetupController
       * @method loadHomePage
       */
      $scope.loadHomePage = function() {
        $scope.getLocale().then(function() {
          $rootScope.gotoView('/home');
        });
      };

      $scope.settingsWatchOff = $scope.$watch('securitySetting', function(newVal, oldVal) {
        if ($location.url() !== '/setup') {
          $scope.settingsWatchOff();
          return;
        }

        var key;
        if (typeof oldVal === 'undefined') {
          for (key in newVal) {
            if (newVal[key] === true) {
              $scope.setLoginSettingsToLevel(key);
            }
          }
          return;
        }

        var onKey;
        for (key in newVal) {
          if (newVal[key] === true && (typeof oldVal[key] === 'undefined' || !oldVal[key])) {
            onKey = key;
            break;
          }
        }

        if (onKey) {
          for (key in newVal) {
            if (newVal[key] && key !== onKey) {
              newVal[key] = false;
            }
          }

          $scope.setLoginSettingsToLevel(onKey);
        }
      }, true);

      $rootScope.$emit('pageLoaded');
      adobeService.trackState('settings', analyticConstants.SETTINGS_SECTION);

      if (!$rootScope.language) {
        $scope.setLanguage().then(function() {
          $scope.getLocale();
        });
      }
      else {
        $scope.getLocale();
      }
    }
  ]);
}());

/**
 * Controller for the Update Auto Pay view.
 *
 * @namespace Controllers
 * @class stopAutoPayController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.stop.autopay', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('StopAutoPayController', [
          '$scope',
          '$rootScope',
          '$window',
          'adobeService',
          'pageService',
          function($scope, $rootScope, $window, adobeService, pageService) {
            var vm = this;

            $rootScope.showNav = true;
            $rootScope.showPolicySelect = false;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
            $rootScope.pageTitle = $rootScope.loc.BP_STOP_AUTOPAY;
            $scope.loc = $rootScope.loc;

            getPage();

            /**
             * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
             *
             * @memberof StopAutoPayController
             * @method getPage
             */
            function getPage() {
              /**
               * The directive HTML for the page.
               *
               * @memberof StopAutoPayController
               * @member {String} pageHtml
               */
              $scope.pageHtml = '';

              /**
               * For basicNavbar, we have to pass this function
               * to handle the left click
               */
              $scope.basicNavbarLeftClick = function() {
                $window.history.back();
              };

              $rootScope.$emit('pageLoading');

              var query = {
                policyIndex: $rootScope.policyIndex,
                policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                policyExternalId : $rootScope.selectedPolicy.externalId
              };

              pageService
                  .getPage(
                      pageService.devices.MOBILE,
                      'stop-autopay',
                      $rootScope.language,
                      query
                  )
                  .then(function(pageHtml) {
                    $scope.pageHtml = pageHtml;
                    $rootScope.$emit('pageLoaded');
                  })
                  .catch(function(error, status) {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
            }
          }
        ]);
}());

/**
 * Controller for the Update Auto Pay view.
 *
 * @namespace Controllers
 * @class UpdateAutoPayController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.update.autopay', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('UpdateAutoPayController', [
          '$scope',
          '$rootScope',
          '$window',
          'adobeService',
          'pageService',
          'analyticConstants',
          function($scope, $rootScope, $window, adobeService, pageService, analyticConstants) {
            $rootScope.showNav = true;
            $rootScope.showPolicySelect = false;
            $rootScope.leftNavButton = $rootScope.leftNavButtonType.BACK;
            $rootScope.pageTitle = $rootScope.loc.BP_UPDATE_AUTOPAY_DETAILS;
            $scope.loc = $rootScope.loc;
            getPage();

            /**
             * Retrieves the page HTML from the page service. Called on view load and when a new policy is selected.
             *
             * @memberof UpdateAutoPayController
             * @method getPage
             */
            function getPage() {
              /**
               * The directive HTML for the page.
               *
               * @memberof BillingPreferencesController
               * @member {String} pageHtml
               */
              $scope.pageHtml = '';

              /**
               * For basicNavbar, we have to pass this function
               * to handle the left click
               */
              $scope.basicNavbarLeftClick = function() {
                $window.history.back();
              };

              $rootScope.$emit('pageLoading');

              var query = {
                policyIndex: $rootScope.policyIndex,
                policyEffectiveDate : $rootScope.selectedPolicy.effectiveDate,
                policyExpirationDate : $rootScope.selectedPolicy.expirationDate,
                policyExternalId : $rootScope.selectedPolicy.externalId
              };

              pageService
                  .getPage(
                      pageService.devices.MOBILE,
                      'update-autopay',
                      $rootScope.language,
                      query
                  )
                  .then(function(pageHtml) {
                    $scope.pageHtml = pageHtml;
                    $rootScope.$emit('pageLoaded');
                    adobeService.trackState('updateAutopay', analyticConstants.BILLING_SECTION);
                  })
                  .catch(function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.showNetworkErrorAlert();
                  });
            }
          }
        ]);
}());

/**
 * Controller for the Upgrade page view.
 *
 * @namespace Controllers
 * @class UpgradeController
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.controllers.upgrade', [
            'bcbsnc.cloud.services.page'
        ])
        .controller('UpgradeController', [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
                $rootScope.showNav = false;
                $rootScope.showPolicySelect = false;

                $rootScope.verifyLocaleRetrieved();

                /**
                 * Pass through method to external links for app upgrade
                 *
                 * @memberof UpgradeController
                 * @method gotoStore
                 */
                $scope.gotoStore = function(device) {
                    if (device === 'iOS') {
                        return $rootScope.openInBrowser('https://itunes.apple.com/us/app/healthnav/id392607223?mt=8');
                    } else {
                        return $rootScope.openInBrowser('https://play.google.com/store/apps/details?id=com.bcbsnc.healthnav','_system');
                    }
                };
            }
        ]);
}());

/**
 * Directive for the about page.
 *
 * @namespace Directives
 * @class about
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.about', [])
  .directive('about', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/about.html',
        scope: {
          /**
          * Display information for the about page.
          *
          * @memberof about
          * @member {Object} aboutDetails
          */
          aboutDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          'config',
          function($rootScope, $scope, adobeService, config) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.appVersion = $rootScope.appVersion;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Returns the current environment, if not PROD.
             *
             * @memberof aboutDetails
             * @method getEnvironment
             * @return {String} The environment name.
             */
            $scope.getEnvironment = function() {
              if(config.env === 'PROD') {
                return '';
              }

              return config.env;
            };

            /**
             * Toggles the expansion of an accordion item.
             *
             * @memberof about
             * @method toggleItem
             */

              $scope.toggleItem = function(item, id) {
                for(var i = 0; i < $scope.aboutDetails.content.length; i++) {
                  if (i != id) {
                    $scope.aboutDetails.content[i].expandedDiv = false;
                  }
                }
                item.expandedDiv = !item.expandedDiv;
              };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable alert modal.
 *
 * @namespace Directives
 * @class alertModal
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.alertModal', [])
    .directive('alertModal', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/alert-modal.html',
          scope: false,
          controller: [
            '$rootScope',
            function($rootScope) {
              $rootScope.$emit('onBackKeyDown');
            },
          ],
        };
      },
    ])
    /**
     *
     * @example
     * <extendableAlertModal
     *   modal-info="objectForModalContent"
     *   open-modal-fn-alias="nameInOuterScopeOfModalOpenFn"
     *   confirm-fn="functionCalledWhenModalConfirmed">
     * </extendableAlertModal>
     */
    .directive('extendableAlertModal', ['$rootScope', function($rootScope) {
      return {
        restrict: 'E',
        scope: {
          /**
           * @param {Object} modalInfo Properties to populate the modal with
           * @param {string} modalInfo.title
           * @param {string} modalInfo.body
           * @param {Function} modalInfo.result
           * @param {Object} modalInfo.confirmButton
           * @param {string} modalInfo.confirmButton.title
           * @param {string} modalInfo.confirmButton.color
           * @param {Object} modalInfo.cancelButton
           * @param {string} modalInfo.cancelButton.title
           * @param {string} modalInfo.cancelButton.color
           * @param {Function} openModalFn Used by the outer scope to have the modal open itself
           * @param {Function} confirmFunction Action to perform if the users selects the confirm button
           */
          alertModal: '<modalInfo',
          openModalFn: '=openModalFnAlias',
          confirmFn: '<',
        },
        templateUrl: 'partials/alert-modal.html',
        link: function(scope, elem, attr) {
          function toggleModalState(isModalOpen) {
            $rootScope.isModalOpen = isModalOpen;
          }

          scope.openModalFn = function() {
            elem.addClass('show');
            toggleModalState(true);
          };
          scope.alertModal.result = function(userAction) {
            if (!userAction) {
              elem.removeClass('show');
              return;
            }
            elem.removeClass('show');
            scope.confirmFn();
            scope.alertModal.values.city = { cityFullName: '' };
            toggleModalState(false);
          };
        },
      };
    }])

    /**
     *
     * @example
     * <findDoctorZipAlertModal
     *   modal-info="objectForModalContent"
     *   open-modal-fn-alias="nameInOuterScopeOfModalOpenFn"
     *   confirm-fn="functionCalledWhenModalConfirmed">
     * </findDoctorZipAlertModal>
     */
    .directive('findDoctorZipAlertModal', [
      '$rootScope',
      '$window',
      'TransparencyFactory',
      '$location',
      function($rootScope, $window, TransparencyFactory, $location) {
        return {
          restrict: 'E',
          scope: {
            /**
             * @param {Object} modalInfo Properties to populate the modal with
             * @param {Function} modalInfo.result
             * @param {Object} modalInfo.confirmButton
             * @param {string} modalInfo.confirmButton.title
             * @param {string} modalInfo.confirmButton.color
             * @param {Object} modalInfo.cancelButton
             * @param {string} modalInfo.cancelButton.title
             * @param {string} modalInfo.cancelButton.color
             * @param {Function} openModalFn Used by the outer scope to have the modal open itself
             * @param {Function} confirmFunction Action to perform if the users selects the confirm button
             */
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-zip-alert-modal.html',
          link: function(scope, elem, attr) {
            if (typeof scope.alertModal === "undefined") {
              return;
            }
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }


            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');

              scope.alertModal.locationBlocked = TransparencyFactory.getLocationBlocked();
              if (scope.alertModal.values.locationNotFound) {
                scope.isZipValid = false;
                scope.errorText = scope.loc.ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE;
              } else {
                scope.errorText = '';
              }
            };
            scope.alertModal.result = function(userAction) {
              // User selected cancel.
              if (!userAction) {
                // Try and set city name.
                scope.alertModal.values.city = { cityFullName: '' };
                scope.alertModal.values.distance = TransparencyFactory.getDistance()
                  ? TransparencyFactory.getDistance().toString()
                  : scope.alertModal.values.distanceDetails.distance;
                $rootScope.city = { cityFullName: '' };
                TransparencyFactory.setCity({ cityFullName: '' });
                // Valid and hide modal.
                scope.isZipValid = true;
                scope.isZipDirty = false;
                elem.removeClass('show');

                // If we are logged in, go back.
                if ($location.path() == '/fad-auth/find-doctor') {
                  $window.history.back();
                }

                // Reset modalOpen state.
                toggleModalState(false);

                // Return.
                return;
              }

              // User selected confirm.
              $rootScope.city = scope.alertModal.values.city;
              TransparencyFactory.setCity(scope.alertModal.values.city);
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn(scope.alertModal.values);
            };
          },
          controller: [
            '$rootScope',
            '$scope',
            '$timeout',
            'TransparencyFactory',
            function($rootScope, $scope, $timeout, TransparencyFactory) {
              if (typeof $scope.alertModal === "undefined") {
                return;
              }
              $scope.loc = $rootScope.loc;
              $scope.isZipValid = true;
              $scope.errorText = '';
              $scope.pcp = $scope.alertModal.pcp;

              $scope.$on('validate city input', function() {
                $timeout(function() {
                  $scope.validateCity();
                });
              });

              $scope.validateCity = function() {
                const resp = TransparencyFactory.validateCity(
                  $scope.alertModal.values.city
                );

                // Set error message.
                $scope.isZipValid = resp.status;
                $scope.errorText = resp.message;

                return $scope.isZipValid;
              };

              $scope.detectClickElement = function(event) {
                if (!event.target.id || typeof event.target.id === 'undefined') {
                  $('#_cities').addClass("hidden");
                  $scope.validateCity();
                } else if (event.target.id === 'cancelButton' || event.target.id === 'closeButton') {
                  $('#city-input')[0].value = '';
                  $('#_cities').addClass("hidden");
                }
              };
            },
          ],
        };
      },
    ])
    .directive('findDoctorUnavailableAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-unavailable-alert-modal.html',
          link: function(scope, elem, attr) {
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function() {
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
            };
          },
        };
      },
    ])
    .directive('findDoctorSelectPcpAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-select-pcp-alert-modal.html',
          link: function(scope, elem, attr) {
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function(userAction, members) {
              // User selected cancel.
              if (!userAction) {

                toggleModalState(false);
                elem.removeClass('show');

                return;
              }
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn(members);
            };

            scope.alertModal.toggleCheckbox = function(index) {
              scope.alertModal.members[index].SELECTED = !scope.alertModal.members[index].SELECTED;
            };
          },
        };
      },
    ])
    .directive('findDoctorChangePcpAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-change-pcp-alert-modal.html',
          link: function(scope, elem, attr) {
            if (typeof scope.alertModal === "undefined") {
              return;
            }
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function(userAction) {
              // User selected cancel.
              if (!userAction) {

                toggleModalState(false);
                elem.removeClass('show');

                return;
              }
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn();
            };
          },
        };
      },
    ])
    .directive('findDoctorRefineSearchModal', [
      'TransparencyFactory',
      '$rootScope',
      function(TransparencyFactory, $rootScope) {
        return {
          restrict: 'E',
          scope: {
            /**
             * @param {Object} modalInfo Properties to populate the modal with
             * @param {Function} modalInfo.result
             * @param {Object} modalInfo.confirmButton
             * @param {string} modalInfo.confirmButton.title
             * @param {string} modalInfo.confirmButton.color
             * @param {Object} modalInfo.cancelButton
             * @param {string} modalInfo.cancelButton.title
             * @param {string} modalInfo.cancelButton.color
             * @param {Function} openModalFn Used by the outer scope to have the modal open itself
             * @param {Function} confirmFunction Action to perform if the users selects the confirm button
             */
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/find-doctor-refine-search-modal.html',
          link: function(scope, elem, attr) {
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function(query) {
              scope.query = query;
              elem.addClass('show');

              // Toggle modal state.
              toggleModalState(true);
            };

            scope.alertModal.result = function(userAction) {
              elem.removeClass('show');
              if (userAction) {
                scope.confirmFn(scope.alertModal.values, userAction);
              }

              // Toggle modal state.
              toggleModalState(false);
            };
          },
          controller: [
            '$rootScope',
            '$scope',
            'TransparencyFactory',
            function($rootScope, $scope, TransparencyFactory) {
              $scope.loggedIn = $rootScope.loggedIn;
              $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
              $scope.loc = $rootScope.loc;
            },
          ],
        };
      },
    ])
    .directive('smartShopperConfirmTermsAlertModal', [
      '$rootScope',
      '$window',
      '$location',
      function($rootScope) {
        return {
          restrict: 'E',
          scope: {
            alertModal: '<modalInfo',
            openModalFn: '=openModalFnAlias',
            confirmFn: '<',
          },
          templateUrl: 'partials/smart-shopper-confirm-terms-alert-modal.html',
          link: function(scope, elem, attr) {
            if (typeof scope.alertModal === "undefined") {
              return;
            }
            function toggleModalState(isModalOpen) {
              $rootScope.isModalOpen = isModalOpen;
            }

            scope.openModalFn = function() {

              if ($rootScope.smartShopperTermsAccepted) {
                scope.confirmFn();
                return;
              }
              // Toggle modal state.
              toggleModalState(true);
              elem.addClass('show');
            };
            scope.alertModal.result = function(userAction) {
              // User selected cancel.
              if (!userAction) {

                toggleModalState(false);
                elem.removeClass('show');

                return;
              }
              // User selected confirm.
              toggleModalState(false);
              elem.removeClass('show');
              scope.confirmFn();
            };

          },
          controller: [
            '$rootScope',
            '$scope',
            'helpService',
            function($rootScope, $scope, helpService) {
              if (typeof $scope.alertModal === "undefined") {
                return;
              }
              $scope.loc = $rootScope.loc;
              $scope.alertModal.openTermsDetailsModal = function() {
                $rootScope.headerTerm = $scope.alertModal.termsDetailsModal.title;
                $scope.termsInfo = {
                  contents: {
                    content_1: $scope.alertModal.termsDetailsModal.content_1,
                    content_2: $scope.alertModal.termsDetailsModal.content_2,
                    content_3_1: $scope.alertModal.termsDetailsModal.content_3_1,
                    content_3_2: $scope.alertModal.termsDetailsModal.content_3_2,
                    content_4: $scope.alertModal.termsDetailsModal.content_4,
                    content_5: $scope.alertModal.termsDetailsModal.content_5,
                    content_6: $scope.alertModal.termsDetailsModal.content_6,
                    content_7: $scope.alertModal.termsDetailsModal.content_7,
                    content_8: $scope.alertModal.termsDetailsModal.content_8,
                    content_9: $scope.alertModal.termsDetailsModal.content_9,
                    content_10: $scope.alertModal.termsDetailsModal.content_10,
                    content_11: $scope.alertModal.termsDetailsModal.content_11,
                    content_12: $scope.alertModal.termsDetailsModal.content_12,
                    content_13: $scope.alertModal.termsDetailsModal.content_13,
                    content_14: $scope.alertModal.termsDetailsModal.content_14,
                    content_15: $scope.alertModal.termsDetailsModal.content_15,
                    content_16: $scope.alertModal.termsDetailsModal.content_16,
                    content_17: $scope.alertModal.termsDetailsModal.content_17,
                    content_18: $scope.alertModal.termsDetailsModal.content_18,
                    content_19: $scope.alertModal.termsDetailsModal.content_19,
                    content_20: $scope.alertModal.termsDetailsModal.content_20,
                    content_21: $scope.alertModal.termsDetailsModal.content_21,
                    content_22: $scope.alertModal.termsDetailsModal.content_22,
                    content_23: $scope.alertModal.termsDetailsModal.content_23,
                    content_24: $scope.alertModal.termsDetailsModal.content_24,
                    content_25: $scope.alertModal.termsDetailsModal.content_25,
                    content_26: $scope.alertModal.termsDetailsModal.content_26,
                    content_27: $scope.alertModal.termsDetailsModal.content_27,
                    content_28: $scope.alertModal.termsDetailsModal.content_28,
                    content_29: $scope.alertModal.termsDetailsModal.content_29,
                    content_30: $scope.alertModal.termsDetailsModal.content_30,
                    content_31: $scope.alertModal.termsDetailsModal.content_31,
                    content_32: $scope.alertModal.termsDetailsModal.content_32,
                    content_33: $scope.alertModal.termsDetailsModal.content_33,
                    content_34: $scope.alertModal.termsDetailsModal.content_34,
                    content_35: $scope.alertModal.termsDetailsModal.content_35,
                    content_36: $scope.alertModal.termsDetailsModal.content_36,
                    content_37: $scope.alertModal.termsDetailsModal.content_37,
                    content_38: $scope.alertModal.termsDetailsModal.content_38,
                    content_39: $scope.alertModal.termsDetailsModal.content_39,
                    content_40: $scope.alertModal.termsDetailsModal.content_40,
                    content_41: $scope.alertModal.termsDetailsModal.content_41,
                    content_42: $scope.alertModal.termsDetailsModal.content_42,
                    content_43: $scope.alertModal.termsDetailsModal.content_43,
                    content_44: $scope.alertModal.termsDetailsModal.content_44,
                    content_45: $scope.alertModal.termsDetailsModal.content_45,
                    content_46: $scope.alertModal.termsDetailsModal.content_46,
                    content_47: $scope.alertModal.termsDetailsModal.content_47,
                    content_48: $scope.alertModal.termsDetailsModal.content_48,
                    content_49: $scope.alertModal.termsDetailsModal.content_49,
                    content_50: $scope.alertModal.termsDetailsModal.content_50,
                    content_51: $scope.alertModal.termsDetailsModal.content_51,
                    content_52: $scope.alertModal.termsDetailsModal.content_52,
                    content_53: $scope.alertModal.termsDetailsModal.content_53,
                    content_54: $scope.alertModal.termsDetailsModal.content_54,
                    content_55: $scope.alertModal.termsDetailsModal.content_55,
                    content_56: $scope.alertModal.termsDetailsModal.content_56,
                    content_57: $scope.alertModal.termsDetailsModal.content_57,
                    content_58: $scope.alertModal.termsDetailsModal.content_58,
                    content_59: $scope.alertModal.termsDetailsModal.content_59,
                    content_60: $scope.alertModal.termsDetailsModal.content_60,
                    content_61: $scope.alertModal.termsDetailsModal.content_61,
                    content_62: $scope.alertModal.termsDetailsModal.content_62,
                    content_63: $scope.alertModal.termsDetailsModal.content_63,
                    content_64: $scope.alertModal.termsDetailsModal.content_64,
                    content_65: $scope.alertModal.termsDetailsModal.content_65,
                    content_66: $scope.alertModal.termsDetailsModal.content_66,
                    content_67: $scope.alertModal.termsDetailsModal.content_67,
                    content_68: $scope.alertModal.termsDetailsModal.content_68,
                    content_69: $scope.alertModal.termsDetailsModal.content_69,
                    content_70: $scope.alertModal.termsDetailsModal.content_70,
                    content_71: $scope.alertModal.termsDetailsModal.content_71,
                    content_72: $scope.alertModal.termsDetailsModal.content_72,
                    content_73: $scope.alertModal.termsDetailsModal.content_73,
                    content_74: $scope.alertModal.termsDetailsModal.content_74,
                    content_75: $scope.alertModal.termsDetailsModal.content_75,
                    content_76: $scope.alertModal.termsDetailsModal.content_76,
                    content_77: $scope.alertModal.termsDetailsModal.content_77,
                    content_78: $scope.alertModal.termsDetailsModal.content_78,
                    content_79: $scope.alertModal.termsDetailsModal.content_79,
                    content_80: $scope.alertModal.termsDetailsModal.content_80,
                    content_81: $scope.alertModal.termsDetailsModal.content_81,
                    content_82: $scope.alertModal.termsDetailsModal.content_82,
                    content_83: $scope.alertModal.termsDetailsModal.content_83,
                    content_84: $scope.alertModal.termsDetailsModal.content_84,
                    content_85: $scope.alertModal.termsDetailsModal.content_85,
                    content_86: $scope.alertModal.termsDetailsModal.content_86,
                    content_87: $scope.alertModal.termsDetailsModal.content_87,
                    content_88: $scope.alertModal.termsDetailsModal.content_88,
                    content_89: $scope.alertModal.termsDetailsModal.content_89,
                    content_90: $scope.alertModal.termsDetailsModal.content_90,
                    content_91: $scope.alertModal.termsDetailsModal.content_91,
                    content_92: $scope.alertModal.termsDetailsModal.content_92,
                    content_93: $scope.alertModal.termsDetailsModal.content_93,
                    content_94: $scope.alertModal.termsDetailsModal.content_94,
                    content_95: $scope.alertModal.termsDetailsModal.content_95,
                    content_96: $scope.alertModal.termsDetailsModal.content_96,
                    content_97: $scope.alertModal.termsDetailsModal.content_97,
                    content_98: $scope.alertModal.termsDetailsModal.content_98,
                    content_99: $scope.alertModal.termsDetailsModal.content_99,
                    content_100: $scope.alertModal.termsDetailsModal.content_100,
                    content_101: $scope.alertModal.termsDetailsModal.content_101,
                    content_102: $scope.alertModal.termsDetailsModal.content_102,
                    content_103: $scope.alertModal.termsDetailsModal.content_103,
                    content_104: $scope.alertModal.termsDetailsModal.content_104,
                    content_105: $scope.alertModal.termsDetailsModal.content_105,
                    content_106: $scope.alertModal.termsDetailsModal.content_106,
                    content_107: $scope.alertModal.termsDetailsModal.content_107,
                    content_108: $scope.alertModal.termsDetailsModal.content_108,
                    content_109: $scope.alertModal.termsDetailsModal.content_109,
                    content_110: $scope.alertModal.termsDetailsModal.content_110,
                    content_111: $scope.alertModal.termsDetailsModal.content_111,
                    content_112: $scope.alertModal.termsDetailsModal.content_112,
                    content_113: $scope.alertModal.termsDetailsModal.content_113,
                    content_114: $scope.alertModal.termsDetailsModal.content_114,
                  },
                };
                helpService.terms($scope.termsInfo);
              };
            },
          ],
        };
      },
    ]);
})();
/**
 * Directive for the payment flow billing method.
 *
 * @namespace Directives
 * @class autopayFlowBillingMethod
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.autopayFlowBillingMethod', [])
    .directive('autopayFlowBillingMethod', [
      function() {
        return {
          scope: {
            /**
             * @param {Object} userData
             * @param {Object} userData.preferences
             */
            balanceInfo: '=',
            userData: '='
          },
          restrict: 'E',
          templateUrl: 'partials/autopay-flow-billing-method.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            $scope.userData = PaymentFlowFactory.getUserSetData();
            $scope.paymentFlow = PaymentFlowFactory.getPaymentFlow();

            var billingMethodSelected = PaymentFlowFactory.getBillingMethod();
            if (billingMethodSelected) {
              $scope.billingMethodSelected = billingMethodSelected;
            }
            if (!billingMethodSelected) {
              if ($scope.balanceInfo.preferences.emailAddress) {
                $scope.userData.preferences.emailAddress = $scope.balanceInfo.preferences.emailAddress;
              }
              $scope.billingMethodSelected = 'email';
            }

          }]
        };
      }
    ]);
}());
/**
 * Directive for the basic-navbar.
 *
 * @namespace Directives
 * @class basicNavbar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.basicNavbar', [])
  .directive('basicNavbar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/basic-navbar.html',
        scope: {
          /**
          * Information for drawing the basic-navbar.
          *
          * @memberof basicNavbar
          * @member {Object} navbarDetails
          * @param {Object} navbarDetails
          * @param {string} navbarDetails.title
          * @param {Object} navbarDetails.leftNavButton
          * @param {string} navbarDetail.leftNavButton.icon ['back']
          * @param {function} leftClick
          * @param {function} rightClick
          */
          navbarDetails: '=',
          leftClick: '&',
          rightClick: '&'
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            /**
             * Passes left button click action to page scope.
             * We want to disable the buttons if a message is being sent from Inbox
             *
             * @memberof basicNavbar
             * @method onLeftClick
             */
            $scope.onLeftClick = function() {
              if ($rootScope.messageSending) {
                return;
              } else if ($rootScope.sendFaqMessage) {
                $rootScope.sendFaqMessage = false;
                $rootScope.gotoView('/help');
              }else if(!$rootScope.blurContent){
                $scope.leftClick();
              }
            };

            /**
             * Passes right button click action to page scope.
             * We want to disable the buttons if a message is being sent from Inbox
             *
             * @memberof basicNavbar
             * @method onRightClick
             */
            $scope.onRightClick = function() {
              if ($rootScope.messageSending) {
                return;
              } else {
                $scope.rightClick();
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for bottons that load documents.
 *
 * @namespace Directives
 * @class documentButtons
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsBookletsDetails', [])
  .directive('benefitsBookletsDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-booklets-details.html',
        scope: {
          /**
          * The buttons to display.
          *
          * @memberof documentButtons
          * @member {Array} buttons
          */
          benefitBooklets: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'TransparencyFactory',
          'geoLocationService',
          '$timeout',
          'analyticConstants',
          function($scope, $rootScope, TransparencyFactory, geoLocationService, $timeout, analyticConstants) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.trackAction = $rootScope.trackAction;
            $scope.analyticConstants = analyticConstants;

            $scope.navigatePageRequested = function (url, searchTerm) {

              if (!$rootScope.selectedPlan.active){
                $rootScope.gotoView('/fad-auth/find-doctor');
              } else {
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                  if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound){
                    return $rootScope.gotoView('/find-care');
                  } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                    $scope.gotoBrowseLevelPage(url, searchTerm);
                  } else {
                    TransparencyFactory.setZipRangeNC($scope.benefitBooklets.geoLocationDetails.distanceDetails.NCZipMin,$scope.benefitBooklets.geoLocationDetails.distanceDetails.NCZipMax);
                    if (navigator.geolocation) {
                      $rootScope.$emit('pageLoading');
                      $timeout(function () {
                        $rootScope.enableLocation = true;
                      }, 0)
                          .then(function () {
                            return geoLocationService.getLocation();
                          })
                          .then(function (response) {
                            $rootScope.$emit('pageLoaded');
                            if (response.data && response.data.zip) {
                              $rootScope.city = response.data;
                              $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                              $rootScope.currentCity = $rootScope.city;
                              $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                              $rootScope.vitalsGeoCoords = response.data.geo;
                              TransparencyFactory.setDistance($rootScope.distance);
                              TransparencyFactory.setCity($rootScope.city);
                              TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                              TransparencyFactory.setGeoLocationStatus(true);
                              TransparencyFactory.setLocationBlocked(false);
                              $rootScope.city.cityFullName = $scope.benefitBooklets.geoLocationDetails.distanceDetails.currentLocation;
                              if ($rootScope.noMatchPlanFound){
                                $rootScope.gotoView('/find-care');
                               } else {
                                 $scope.gotoBrowseLevelPage(url, searchTerm);
                               }
                            } else if (response === 'position not found') {
                              TransparencyFactory.setLocationBlocked(true);
                              TransparencyFactory.setGeoLocationStatus(false);
                              TransparencyFactory.setLocationMsg($scope.benefitBooklets.geoLocationDetails.locationMsg);
                              $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                              $scope.openModal();
                            } else {
                              TransparencyFactory.setLocationBlocked(false);
                              TransparencyFactory.setGeoLocationStatus(false);
                              $rootScope.$emit('pageLoaded');
                              $scope.modalObj.values.locationNotFound = true;
                              $scope.openModal();
                            }
                          })
                          .catch(function () {
                            TransparencyFactory.setLocationBlocked(false);
                            $rootScope.$emit('pageLoaded');
                            $scope.modalObj.values.locationNotFound = true;
                            $scope.openModal();
                          });
                    } else {
                      $rootScope.$emit('pageLoaded');
                      TransparencyFactory.setLocationBlocked(true);
                      TransparencyFactory.setLocationMsg($scope.benefitBooklets.geoLocationDetails.locationMsg);
                      $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                      $scope.openModal();
                    }
                  }
                }
              };

            /**
             * Based on the user selection, go to the url with planName, zipCode, distance and search term
             *
             * @memberof benefitsBookletsDetails
             * @method gotoBrowseLevelPage
             */
            $scope.gotoBrowseLevelPage = function(url, searchTerm) {
              $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                TransparencyFactory.setSearchTerm(searchTerm);
                $rootScope.gotoView(url + '?searchTerm='+ searchTerm + '&planName='+ $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
           };// end of gotoBrowseLevelPage function


           $scope.confirmFunc = function(data) {
             $rootScope.city = data.city;
             $rootScope.distance = data.distance;
             TransparencyFactory.setDistance($rootScope.distance);
             TransparencyFactory.setCity($rootScope.city);
             TransparencyFactory.setGeoLocationStatus(false);
             if ($rootScope.noMatchPlanFound){
              $rootScope.gotoView('/find-care');
             } else {
              $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
            }
           };

           $scope.modalObj = {
             locationMsg: $scope.benefitBooklets.geoLocationDetails.locationMsg,
             cancelButton: {
               title: $scope.loc.CANCEL
             },
             confirmButton: {
               title: $scope.loc.CONTINUE
             },
             values: {
               distanceDetails: $scope.benefitBooklets.geoLocationDetails.distanceDetails,
               distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.benefitBooklets.geoLocationDetails.distanceDetails.distance.toString(),
               city: TransparencyFactory.getCity(),
             }
           };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefits view coverage page.
 *
 * @namespace Directives
 * @class benefitsCoverageDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsCoverageDetails', [])
  .directive('benefitsCoverageDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-coverage-details.html',
        scope: {
          /**
          * Display information for the benefits coverage page.
          *
          * @memberof benefitsCoverageDetails
          * @member {Object} coverageData
          */
          coverageData: '=',
          policySelection: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            $scope.showFullFootnotes      = false;
            $scope.FootnotesDetailButton  = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
            $scope.footnotes              = $scope.coverageData.footnotes.content.substring(0,155)+'...';
            $scope.collapseExpandIcon     = 'plus-expand';

            /**
             * Pass through method to external links for state prescription drugs
             *
             * @memberof benefits-coverage-details
             * @method gotoSHR
             */
            $scope.gotoSHR = function() {
              return $rootScope.openInBrowser("https://shp.nctreasurer.com/ActiveEmployees/Pages/default.aspx");
            };

            /**
             * Pass through method to external links for dental benefits
             *
             * @memberof benefits-coverage-details
             * @method gotoDentalBenefits
             */
            $scope.gotoDentalBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug benefits
             *
             * @memberof benefits-coverage-details
             * @method gotoDrugBenefits
             */
            $scope.gotoDrugBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            $scope.toggleFootnotes = function(){
              $scope.showFullFootnotes = !$scope.showFullFootnotes;

              if($scope.showFullFootnotes)
                {
                  $scope.collapseExpandIcon = 'minus-collapse';
                  $scope.footnotes = $scope.coverageData.footnotes.content;
                  $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_HIDE_FULL_DETAILS;
                }
                else
                {
                  $scope.collapseExpandIcon = 'plus-expand';
                  $scope.footnotes = $scope.coverageData.footnotes.content.substring(0,155)+'...';
                  $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
                }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefits info page.
 *
 * @namespace Directives
 * @class benefitsInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsDetail', [])
  .directive('benefitsDetail', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-detail.html',
        scope: {
          /**
          * Display information for the benefits page.
          *
          * @memberof benefitsInfo
          * @member {Object} benefitsDetails
          */
          benefitsData: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          '$location', 
          '$anchorScroll',
          function ($rootScope, $scope, adobeService, $location, $anchorScroll) {
            $scope.loc = $rootScope.loc;
            $scope.showBenefitsTable = false;
            $scope.showFullFootnotes = false;
            $scope.trackAction = $rootScope.trackAction;

            $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
            $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
            $scope.helpButtonText = $rootScope.loc.HELP;
            $scope.collapseExpandIcon = 'plus-expand';

            $scope.toggleBenefitsTable = function(event, memberIndex) {
              //a Button click by default makes an attempt to submit, which reloads the page and we go from  out-of-network page to in-network, because in-network is the default page on load
              //the preventDefault and stopPropagation will stop an attempt to submit the form, so page won't reload
              event.preventDefault();
              event.stopPropagation();
              for (var i = 0; i < $scope.benefitsData.itemDTO.length; i++) {
                if (
                  $scope.benefitsData.itemDTO[i].memberIndex === memberIndex
                ) {
                  if ($scope.benefitsData.itemDTO[i].cardExpanded) {
                    var id = "bencardtop" + memberIndex;
                    $location.hash(id);
                    $anchorScroll(id);
                  }
                  $scope.benefitsData.itemDTO[i].cardExpanded = !$scope
                    .benefitsData.itemDTO[i].cardExpanded;
                }
              }
            };

            $scope.toggleFootnotes = function(){
              $scope.showFullFootnotes = !$scope.showFullFootnotes;

              if($scope.showFullFootnotes) {
                $scope.collapseExpandIcon = 'minus-collapse';
                $scope.footnotes = $scope.benefitsData.footnotes;
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_HIDE_FULL_DETAILS;
              } else {
                $scope.collapseExpandIcon = 'plus-expand';
                $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
              }
            };

            /**
             * Takes a member to the help view.
             *
             * @memberof benefitsInfo
             * @method gotoView
             */
            $scope.gotoView = function(view, title) {

              $rootScope.gotoView(view);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefitsNav page.
 *
 * @namespace Directives
 * @class benefitsNav
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsNav', [])
  .directive('benefitsNav', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-nav.html',
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.trackAction = $rootScope.trackAction;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the benefits select plans info page.
 *
 * @namespace Directives
 * @class benefitsInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.benefitsSelectDetail', [])
  .directive('benefitsSelectDetail', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/benefits-select-detail.html',
        scope: {
          /**
          * Display information for the benefits page.
          *
          * @memberof benefitsInfo
          * @member {Object} benefitsSelectDetail
          */
          benefitsData: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          '$location', 
          '$anchorScroll',          
          function($rootScope, $scope, adobeService, $location, $anchorScroll) {
            $scope.loc = $rootScope.loc;
            $scope.showBenefitsTable = false;
            $scope.showFullFootnotes = false;
            $scope.trackAction = $rootScope.trackAction;

            $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
            $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
            $scope.helpButtonText = $rootScope.loc.HELP;
            $scope.collapseExpandIcon = 'plus-expand';

            $scope.toggleBenefitsTable = function(event, memberIndex) {
              //a Button click by default makes an attempt to submit, which reloads the page and we go from  out-of-network page to in-network, because in-network is the default page on load
              //the preventDefault and stopPropagation will stop an attempt to submit the form, so page won't reload
              event.preventDefault();
              event.stopPropagation();
              for (var i = 0; i < $scope.benefitsData.itemDTO.length; i++) {
                if (
                  $scope.benefitsData.itemDTO[i].memberIndex === memberIndex
                ) {
                  if ($scope.benefitsData.itemDTO[i].cardExpanded) {
                    var id = "bencardtop" + memberIndex;
                    $location.hash(id);
                    $anchorScroll(id);
                  }
                  $scope.benefitsData.itemDTO[i].cardExpanded = !$scope
                    .benefitsData.itemDTO[i].cardExpanded;
                }
              }
            };

            $scope.toggleFootnotes = function(){
              $scope.showFullFootnotes = !$scope.showFullFootnotes;

              if($scope.showFullFootnotes) {
                $scope.collapseExpandIcon = 'minus-collapse';
                $scope.footnotes = $scope.benefitsData.footnotes;
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_HIDE_FULL_DETAILS;
              } else {
                $scope.collapseExpandIcon = 'plus-expand';
                $scope.footnotes = $scope.benefitsData.footnotes.substring(0,155)+'...';
                $scope.FootnotesDetailButton = $rootScope.loc.FOOTNOTE_SHOW_FULL_DETAILS;
              }
            };

            /**
             * Takes a member to the help view.
             *
             * @memberof benefitsInfo
             * @method gotoView
             */
            $scope.gotoView = function(view, title) {

              $rootScope.gotoView(view);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the billing and payments coming soon.
 *
 * @namespace Directives
 * @class billingAndPaymentsComingSoon
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.billingAndPaymentsComingSoon', [])
    .directive('billingAndPaymentsComingSoon', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/billing-and-payments-coming-soon.html',
          scope: {
            /**
            *
            * @memberof billingAndPaymentsComingSoon
            * @member {String} title.
            */

          },
          controller: [
            '$scope',
            '$rootScope',
            function($scope, $rootScope) {
              $scope.loc = $rootScope.loc;
              $scope.goToDesktopBilling = function() {
                $rootScope.openInSecureBrowser('members/secure/account/billing/&qs=');
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the on billing buttons on billing landing page.
 *
 * @namespace Directives
 * @class billingButtons
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.billingButtons', [])
    .directive('billingButtons', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/billing-buttons.html',
          scope: {
            /**
            * The billing buttons information to display.
            *
            * @memberof billingButtons
            * @member {Object} billingButtonsInfo
            */
            billingButtonsInfo: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            function($scope, $rootScope) {
              $scope.loc = $rootScope.loc;
              $scope.selectedPolicy = $rootScope.selectedPolicy;
              $scope.gotoView = $rootScope.gotoView;
            }
          ]
        };
      }
    ]);
  }());
  
/**
 * Directive for the billingHistoryUnderstandInvoice.
 *
 * @namespace Directives
 * @class billingHistoryUnderstandInvoice
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.billingHistoryUnderstandInvoice', [])
      .directive('billingHistoryUnderstandInvoice', [
        function () {
          return {
            restrict: 'E',
            replace: true,
            templateUrl: 'partials/billing-history-understand-invoice.html',
            scope: {

            },
            controller: [
              '$scope',
              '$rootScope',
              'BillingInvoiceHistoryFactory', '$location', '$anchorScroll',
              function ($scope, $rootScope, BillingInvoiceHistoryFactory, $location, $anchorScroll) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;

                $scope.gotoAnchor = function(divName) {
                  // set the location.hash to the id of the element you wish to scroll to.
                  $location.hash(divName);
                  // call $anchorScroll()
                  $anchorScroll();
                };

              }
            ]
          };
        }
      ]);
}());

(function() {
  /**
   * @description
   * A directive that displays the next invoice date
   */
  angular
    .module('blueconnect.mobile.directives.billingNextInvoiceDate',[])
    .directive('billingNextInvoiceDate', [function() {
      return {
        scope: {
          /**
           * @param {string} nextInvoiceDate Takes a utc formatted string
           */
          nextInvoiceDate: '<'
        },
        template: '<hr class="width-100"><h4>{{::loc.BP_NEXT_INVOICE}}<span> {{::moment(nextInvoiceDate).format(\'MMMM D\')}}</span></h4>',
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }]
      };
    }]);
})();
/**
 * Directive for the billingPreferencesDetails in the payment flow.
 *
 * @namespace Directives
 * @class billingPreferencesDetails
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.billingPreferencesDetails', [])
        .directive('billingPreferencesDetails', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/billing-preferences-details.html',
                    scope: {
                        /**
                         * Display information for the billingPreferencesDetails.
                         *
                         * @memberof billingPreferencesDetails
                         * @member {Object} billingPreferencesData
                         */
                        billingPreferencesData: '=',
                        policy:'='
                    },
                    controller: [
                        '$routeParams',
                        '$rootScope',
                        '$scope',
                        '$timeout',
                        function ($routeParams, $rootScope, $scope, $timeout) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;
                            $scope.preferencesSaveSuccess =  $routeParams.success;
                            $scope.billedAmount = $scope.billingPreferencesData.billedAmount ? $scope.billingPreferencesData.billedAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';

                            $scope.getAmountDollars = function() {
                              return $scope.billedAmount.slice(1, $scope.billedAmount.indexOf('.') + 1) || 0;
                            };

                            $scope.getAmountCents = function() {
                              return $scope.billedAmount.slice($scope.billedAmount.indexOf('.') + 1);
                            };

                            if (
                              $scope.billingPreferencesData.payment.creditCardDetails &&
                              $scope.billingPreferencesData.payment.creditCardDetails.expiration
                            ) {
                              $timeout(function() {
                                $scope.billingPreferencesData.payment.creditCardDetails.expirationShortened = $scope.billingPreferencesData.payment.creditCardDetails.expiration
                                  .split('/')
                                  .map(function(str, index) {
                                    return index === 0 ? str : str.slice(2);
                                  })
                                  .join('/');
                              }, 0)
                            }
                        }
                    ]
                };
            }
        ])
        .directive('billingPreferencesSaveToast', function() {
            return {
                resrict: 'E',
                template: '<div class="content flex-row flex-center-center"><i class="fc-check dark-green mr2"></i><p class="mb0 dark-green" ng-bind="::loc.BP_BILLING_PREFERENCES_SAVED"></p></div>',
                controller: ['$rootScope', '$scope', '$timeout', function($rootScope, $scope, $timeout) {
                    $scope.loc = $rootScope.loc;
                    $scope.timeout = $timeout;
                }],
                link: function(scope, elem, attr, ctrl) {
                    scope.timeout(function() {
                        elem.addClass('hidden');
                    }, 2000)
                }
            };
        });
}());

/**
 * Directive for the billingPreferencesUpdate in the payment flow.
 *
 * @namespace Directives
 * @class billingPreferencesUpdate
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.billingPreferencesUpdate', [])
        .directive('billingPreferencesUpdate', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/billing-preferences-update.html',
                    scope: {
                        /**
                         * Display information for the billingPreferencesUpdate.
                         *
                         * @memberof billingPreferencesUpdate
                         * @member {Object} billingPreferencesUpdateData
                         */
                        billingPreferencesUpdateData: '=',
                        policy: '='
                    },
                    controller: [
                        '$rootScope',
                        '$scope',
                        function ($rootScope, $scope) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;
                        }
                    ]
                };
            }
        ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.reinstatementSummary', [])
    .directive('reinstatementSummary', function() {
      return {
        templateUrl: 'partials/billing-reinstatement-summary.html',
        scope: {
          reinstatementEligible: '<',
          reinstatementAmount: '<',
          onHomePage: '<',
          isPolicyTerminated: '<',
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          },
        ],
      };
    })
    .directive('reinstatementAmount', function() {
      return {
        restrict: 'E',
        template: [
          '<h4 ng-bind="::loc.BP_TOTAL_REINSTATEMENT_AMOUNT"></h4>',
          '<h4 class="amount" ng-bind="::reinstatementAmount | currency"></h4>',
        ].join(''),
        scope: {
          reinstatementAmount: '<',
          reinstatementEligible: '<',
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;
          },
        ],
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.billingServiceDown', [])
    .directive('billingServiceDown', function() {
      return {
        template: '<p ng-bind="::loc.ERROR_HOME_BP"></p>',
        controller: ['$rootScope', '$scope', function() {
          $scope.loc = $rootScope.loc;
        }]
      };
    });
})();
/**
 * @description
 * Directive to show a Member that their policy is paid in full.
 *
 * @example
 * <billing-status-paid-in-full></billing-status-paid-in-full>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.billingStatusPaidInFull', [])
    .directive('billingStatusPaidInFull', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
            }
          ],
          templateUrl: 'partials/billing-status-paid-in-full.html'
        };
      }
    ]);
})();
(function() {
  angular.module('blueconnect.mobile.directives.billingSummaryError', [])
  .directive('billingSummaryError', function() {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: 'partials/billing-summary-error.html',
      controller: ['$rootScope', '$scope', function($rootScope, $scope) {
        $scope.loc = $rootScope.loc;
      }]
    };
  });
})();
/**
 * @description
 * Directive to show new Members appreciation for choosing BCBSNC as well as
 * information to show that no invoice has been generated for them.
 *
 * @example
 * <billing-summary-new-member></billing-summary-new-member>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.billingSummaryNewMember', [])
    .directive('billingSummaryNewMember', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          scope: {
            planName: '=planName'
          },
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
            }
          ],
          templateUrl: 'partials/billing-summary-new-member.html'
        };
      }
    ]);
})();
/**
 * Directive for the billing card on the home screen.
 *
 * @namespace Directives
 * @class billingSummary
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.billingSummary', [])
  .directive('billingSummary', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/billing-summary.html',
        scope: {
          /**
          * Display information for the payment.
          *
          * @memberof billingSummary
          * @member {Object} billingDetails
          */
          billingDetails: '=',
          policy:'='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.enterPaymentFlow = $rootScope.enterPaymentFlow;
            $rootScope.billingTrackStates('summary', $scope.billingDetails);

            $scope.currentAmtDue = $scope.billingDetails.currentAmtDue ? $scope.billingDetails.currentAmtDue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';
            $scope.billedAmount = $scope.billingDetails.billedAmount ? $scope.billingDetails.billedAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';
            $scope.balanceForwardAmount = $scope.billingDetails.balanceForwardAmount ? $scope.billingDetails.balanceForwardAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';
            $scope.currentInvoiceBalanceForwardAmount = $scope.billingDetails.currentInvoice.balanceForwardAmount ? $scope.billingDetails.currentInvoice.balanceForwardAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';

            /**
             * Retrieves the payment amount dollars for display.
             *
             * @memberof homeCardBilling
             * @method getAmountDollars
             * @return {String} The dollar amount
             */
            $scope.getAmountDollars = function() {
              return $scope.currentAmtDue.slice(1, $scope.currentAmtDue.indexOf('.') + 1) || 0;
            };

            /**
             * Retrieves the payment amount cents for display.
             *
             * @memberof homeCardBilling
             * @method getAmountCents
             * @return {String} The cents amount
             */
            $scope.getAmountCents = function() {
              return $scope.currentAmtDue.slice($scope.currentAmtDue.indexOf('.') + 1);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * @description
 * Directive for blocking an under click, ie when an element is on top of another
 * element with a ng-click directive underneath it still receiving the click.
 *
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.blockUnderClick', [])
    .directive('blockUnderClick', [
      function() {
        return {
          restrict: 'A',
          link: function($scope, $elem, $attrs) {
            $elem.on('click', function(ev) {
              return false;
            });
          }
        };
      }
    ]);
})();
/**
 * Directive for a blue bar label.
 *
 * @namespace Directives
 * @class blueBarLabel
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.blueBarLabel', [])
  .directive('blueBarLabel', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/blue-bar-label.html',
        scope: {
          /**
          * The title of the blue bar label.
          *
          * @memberof blueBarLabel
          * @member {String} title
          */
          title: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.trackAction = $rootScope.trackAction;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a bottom button.
 *
 * @namespace Directives
 * @class bottomButton
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.bottomButton', [])
  .directive('bottomButton', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/bottom-button.html',
        scope: {
          /**
          * Display information for the bottom button.
          *
          * @memberof bottomButton
          * @member {Object} buttonDetails
          */
          buttonDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the check box element.
 *
 * @namespace Directives
 * @class checkBox
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.checkBoxGroup', [])
  .directive('checkBoxGroup', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/check-box-group.html',
        scope: {
          /**
          *
          * @memberof checkBox
          * @member {Object} model Collection of items to iterate over to generate checkbox items
          * @member {Object} selection The array containing those selected checkboxs
          * @member {Method} action This is a method defined in the controlling object to perform tasks
          */
          model     : '=',
          selection : '=',
          action    : '&'
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the check box element.
 *
 * @namespace Directives
 * @class checkBox
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.checkBox', [])
  .directive('checkBox', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/check-box.html',
        scope: {
          /**
          *
          * @memberof checkBox
          * @member {boolean} model value to determine if checkbox is on or off.
          */
          model : '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the monetary amounts box box on the claim details page.
 *
 * @namespace Directives
 * @class claimAmounts
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimAmounts', [])
  .directive('claimAmounts', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-amounts.html',
        scope: {
          /**
          * The monetary amounts.
          *
          * @memberof claimAmounts
          * @member {Object} amounts
          */
          amounts: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
            $scope.loc      = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            var savingsPercent = $scope.amounts.savings > 0 ? $scope.amounts.savings / $scope.amounts.originalBilled * 100: 0;
            var upfrontPercent = $scope.amounts.upfrontCost.amount > 0 ? $scope.amounts.upfrontCost.amount / $scope.amounts.originalBilled * 100 + savingsPercent : savingsPercent;
            var remainingPercent = $scope.amounts.remainingCost > 0 ? $scope.amounts.remainingCost / $scope.amounts.originalBilled * 100 + upfrontPercent : upfrontPercent;

            $scope.percentages = {
              savings: savingsPercent,
              upfront: upfrontPercent,
              remaining: remainingPercent
            };

            var generateGraph = function() {
              var graphHeight = 10;

              //Sum up the three points
              var sum = $scope.amounts.savings + $scope.amounts.bcbsncPayment + $scope.amounts.remainingCost;

              //Calcuate each point's percentages
              var savingsPercentage       = ( ($scope.amounts.savings/sum) * 100 ).toFixed(2);
              var paymentAmountPercentage = ( ($scope.amounts.bcbsncPayment/sum) * 100).toFixed(2);
              var remainingCostPercentage = ( ($scope.amounts.remainingCost/sum) * 100 ).toFixed(2);

              //Finally calculate each point's percentage against graphHeight;
              var savingsPoint        = ( (savingsPercentage/100) * graphHeight ).toFixed(2);
              var paymentAmountPoint  = ( (paymentAmountPercentage/100) * graphHeight ).toFixed(2);
              var remainingCostPoint  = ( (remainingCostPercentage/100) * graphHeight ).toFixed(2);

              $scope.claimgraph = {
                outline: true,
                graphHeight: 10,
                bars:[
                  {color: '#79AD65', bottom: parseFloat(remainingCostPercentage) + parseFloat(paymentAmountPercentage), height: savingsPercentage, description: $rootScope.loc.MEMBER_SAVINGS},
                  {color: '#EBF3D8', bottom: remainingCostPercentage, height: paymentAmountPercentage, description: $rootScope.loc.PAID_BY_BCBSNC},
                  {color: '#0073AE', bottom: 0, height: remainingCostPercentage, description: $rootScope.loc.YOU_MAY_OWE}
                ],
                legendLines: [
                  {name: $rootScope.loc.ORIGINAL_BILL, value: '$' + $scope.amounts.originalBilled.toFixed(2), bottom: 50, height: .5, width: 1}
                ],
                leftSide: [
                  {name: $rootScope.loc.MEMBER_SAVINGS, value: '$' + $scope.amounts.savings.toFixed(2), bottom: 0, height: 50, color: '#79AD65'},
                  {name: $rootScope.loc.PAID_BY_BCBSNC, value: '$' + $scope.amounts.bcbsncPayment.toFixed(2), bottom: 0, height: 50, color: '#79AD65'},
                  {name: $rootScope.loc.YOU_MAY_OWE, value: '$' + $scope.amounts.remainingCost.toFixed(2), bottom: 0, height: 50, color: '#0073AE'}
                ]
              };
            };
            generateGraph();
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the claim details bottom bar.
 *
 * @namespace Directives
 * @class claimBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimBottomBar', [])
  .directive('claimBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-bottom-bar.html',
        scope: {
          /**
          * The claim details.
          *
          * @memberof claimBottomBar
          * @member {Object} claim
          */
          claim: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$filter',
          'shareService',
          'adobeService',
          function($scope, $rootScope, $location, $filter, shareService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            /**
             * Opens the sharing modal for the claim.
             *
             * @memberof inboxMessageBottomBar
             * @method shareClaim
             */
            $scope.shareClaim = function() {
              var shareContent;
              if($scope.claim.claimStatus == 'Processed'){
                shareContent = $rootScope.loc.CLAIM_NUMBER + ": " + $scope.claim.claimId + "\n" +
                               $rootScope.loc.MEMBER + ": " + $scope.claim.memberName + "\n" +
                               $rootScope.loc.ORIGINAL_BILL + ": $" + ($scope.claim.totalToPayAmount + $scope.claim.savings).toFixed(2) + "\n" +
                               //($scope.claim.savings > 0 ? $rootScope.loc.BCBSNC_SAVINGS + ": -$" + $scope.claim.savings.toFixed(2) + "\n" : "") +
                               //($scope.claim.upfrontCost.amount > 0 ? $rootScope.loc[$scope.claim.upfrontCost.type] + ": $" + $scope.claim.upfrontCost.amount.toFixed(2) + "\n" : "") +
                               (($scope.claim.processed && $scope.claim.totalToPayAmount > 0) ? $rootScope.loc.YOU_MAY_OWE + ": $" + $scope.claim.totalRemainingMemberExpenseAmount.toFixed(2) + "\n" : "") +
                               $rootScope.loc.MEMBER_SAVINGS + ": -$" + $scope.claim.savings.toFixed(2) + "\n" +
                               $rootScope.loc.PAID_BY_BCBSNC + ": $" + $scope.claim.bcbsncPayment.toFixed(2) + "\n" +
                               ($scope.claim.serviceType ? $rootScope.loc.SERVICE + ": " + $rootScope.loc.MEDICAL_SERVICE + "\n" : "") +
                               $rootScope.loc.PROVIDED_BY + ": " + $scope.claim.providerRecordName + "\n" +
                               $rootScope.loc.CURRENT_STATUS + ": " + $rootScope.loc.PROCESSED + "\n" +
                               $rootScope.loc.DATE_OF_SERVICE + ": " + $filter('date')($scope.claim.startServiceDate, 'M/d/yyyy');
              } else {
                shareContent = $rootScope.loc.CLAIM_NUMBER + ": " + $scope.claim.claimId + "\n" +
                               $rootScope.loc.MEMBER + ": " + $scope.claim.memberName + "\n" +
                               ($scope.claim.serviceType ? $rootScope.loc.SERVICE + ": " + $rootScope.loc.MEDICAL_SERVICE + "\n" : "") +
                               $rootScope.loc.PROVIDED_BY + ": " + $scope.claim.providerRecordName + "\n" +
                               $rootScope.loc.CURRENT_STATUS + ": " + $rootScope.loc.PENDING + "\n" +
                               $rootScope.loc.DATE_OF_SERVICE + ": " + $filter('date')($scope.claim.startServiceDate, 'M/d/yyyy');
                }

                shareService.showSharing(shareService.contentType.TEXT, shareContent);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the compose message box on the claim details page.
 *
 * @namespace Directives
 * @class claimCompose
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimCompose', [])
  .directive('claimCompose', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-compose.html',
        scope: {
          /**
          * The claim information to display.
          *
          * @memberof claimCompose
          * @member {Object} secureMessage
          */
          secureMessage: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          '$location',
          'quickAlertService',
          '$timeout',
          function($scope, $rootScope, adobeService, $location, quickAlertService, $timeout) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;


            if($location.search().messageSent) {
              $rootScope.cliamSendMessage = true;
              quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
              $timeout(function() {
                  angular.element('.quick-alert-modal').hide();
              }, 2000);
              var search = angular.copy($location.search());
              delete search.messageSent;
              $location.search(search);
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the info box on the claim details page.
 *
 * @namespace Directives
 * @class claimInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimInfo', [])
  .directive('claimInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-info.html',
        scope: {
          /**
          * The claim information to display.
          *
          * @memberof claimInfo
          * @member {Object} info
          */
          info: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          '$location',
          'quickAlertService',
          '$timeout',
          function($scope, $rootScope, adobeService, $location, quickAlertService, $timeout) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the member box on the claim details page.
 *
 * @namespace Directives
 * @class claimMember
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimMember', [])
  .directive('claimMember', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claim-member.html',
        scope: {
          /**
          * The name of the member.
          *
          * @memberof claimMember
          * @member {String} memberName
          */
          memberName: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for claims filter button
 *
 * @namespace Directives
 * @class claimsFilterButton
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimsFilterCriteria', [

  ])
  .directive('claimsFilterCriteria', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claims-filter-criteria.html',
        scope: {
          members: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          'claimsService',
          'adobeService',
          function($scope, $rootScope, $location, claimsService, adobeService) {
            $scope.claimsFilter = {
              'isSelected'  : 'false',
              'claimsStatus': '',
              'startMonth'  : '',
              'endMonth'    : ''
            };

            $scope.loc                = $rootScope.loc;
            $scope.gotoView           = $rootScope.gotoView;
            $scope.filteredDates      = claimsService.generateFilterDates($rootScope.selectedPolicy);
            $scope.selection          = claimsService.initializeMemberList($scope.members, true);
            $scope.claimStatusButtons = [];

            var button1 = {'name': 'claimstatusradio', 'label':$rootScope.loc.ANY_STATUS,'value':'ALL','status':true};
            var button2 = {'name': 'claimstatusradio', 'label':$rootScope.loc.PROCESSED_STATUS,'value':'PROCESSED','status':false};
            var button3 = {'name': 'claimstatusradio', 'label':$rootScope.loc.PENDING_STATUS,'value':'PROCESSING','status':false};

            $scope.claimStatusButtons.push(button1);
            $scope.claimStatusButtons.push(button2);
            $scope.claimStatusButtons.push(button3);

            $scope.keyword = $location.search().keyword || '';

            /**
            * This method toggles the member selection on/off. It is used by the checkbox directive.
            *
            * @memberof claimsFilterCriteria
            * @member {String} memberName  The name value for the member being chosen.
            */
            $scope.toggleSelection = function toggleSelection(memberName) {
               var index = $scope.selection.indexOf(memberName);
           
               // is currently selected
               if (index > -1) {
                 $scope.selection.splice(index, 1);
               }
           
               // is newly selected
               else {
                 $scope.selection.push(memberName);
               }
            };

          /**
           * This method is a pass through to the service method perfoming the filtering. See
           * claimsService.generateFilterQuery.
           *
           * @memberof claimsFilterCriteria
           * @method generateFilterQuery
           * @param  {Object}  selection         The holding area for those member's selected.
           * @param  {String}  claimsStatus      The selected status for the claim.
           * @param  {Date}    startMonth        The starting filter date.
           * @param  {Date}    endMonth          The ending filter date.
           * @param  {Date}    effectiveDate     The currently selected policy's start date.
           * @param  {Date}    expirationDate    The currently selected policy's end date.
           * @param  {String}  keyword           The user entered search term.
           */
            $scope.filterClaims = function() {
              var queryPath = claimsService.generateFilterQuery($scope.selection, $scope.claimsFilter.claimsStatus, $scope.claimsFilter.startMonth, $scope.claimsFilter.endMonth, $rootScope.selectedPolicy.effectiveDate, $rootScope.selectedPolicy.expirationDate, $scope.keyword);

              $rootScope.gotoView('/claims/search?' + queryPath);
            };


            /**
             * This method is called on the ng-change of the fitler dates. It is used to not allow the form
             * to be submitted if the date range is invalid.
             *
             * @memberof claimsFilterCriteria
             * @method validateDates
             */
            $scope.validateDates = function() {
              if ($scope.claimsFilter.endMonth < $scope.claimsFilter.startMonth) {
                $scope.claimsFilterForm.$invalid = true;
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a list of claims.
 *
 * @namespace Directives
 * @class claimsList
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimsList', [])
  .directive('claimsList', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claims-list.html',
        scope: {
          /**
          * The claims to display.
          *
          * @memberof claimsList
          * @member {Object} claims
          */
          claims: '=',
          showRibbon: '=',
          filterText: '=',
          policySelection: '=',
          hasCcr: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          'claimsService',
          'adobeService',
          'config',
          function($scope, $rootScope, claimsService, adobeService, config) {
            $scope.loc      = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            if ($scope.claims !== null) {
              $scope.claimsCountText  = claimsService.displayClaimsCount($scope.claims);
            }

            if ($scope.claims.length > 0) {
              $rootScope.hasClaims = true;
            }

            $scope.claimsFilterText = $scope.filterText;

            /**
             * Opens the individual claim view if no claim is swiped.
             *
             * @memberof claimsList
             * @method openClaim
             * @param  {Object} claim The claim to open.
             */
            $scope.openClaim = function(claim) {
              for(var i = 0; i < $scope.claims.length; i++) {
                if($scope.claims[i].swiped) {
                  $scope.claims[i].swiped = false;
                  return;
                }
              }

              $rootScope.gotoView('/claims/' + claim.claimId + '/' + claim.dependentNo);
            };

            /**
             * Opens the claim options when swiped left.
             *
             * @memberof claimsList
             * @method swipeClaim
             * @param  {Object} claim The claim swiped.
             */
            $scope.swipeClaim = function(claim) {
              for(var i = 0; i < $scope.claims.length; i++) {
                if($scope.claims[i].swiped) {
                  $scope.claims[i].swiped = false;
                }
              }
              claim.swiped = true;
            };

            /**
             * Closes the claim options when swiped right.
             *
             * @memberof claimsList
             * @method unswipeClaim
             * @param  {Object} claim The claim swiped.
             */
            $scope.unswipeClaim = function(claim) {
              if(claim.swiped) {
                claim.swiped = false;
              }
            };

            $scope.resetFilter = function() {
              $scope.claimsFilterText = claimsService.displayNoFilterText();
              $rootScope.gotoView('/claims/search');
            };

            /**
             * Generates the claim header string based on the policy type.
             *
             * @memberof claimsList
             * @method getClaimsTitle
             */
            $scope.getClaimsTitle = function() {
              var titleString = "";

              switch ($scope.policySelection.choice) {
                  case "RX_ONLY":
                    titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                    break;
                  case "BBTRX_ONLY":
                      titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                      break;
                  case "DENTAL_ONLY":
                    titleString = $rootScope.loc.DENTAL_CLAIMS;
                    break;
                  case "VISION_ONLY":
                    titleString = $rootScope.loc.BLUE2020_CLAIMS_VISION_CLAIMS;
                    break;
                  default:
                    break;
              }

              return titleString;
            };

            /**
             * Pass through method to external links for dental claims
             *
             * @memberof claimsList
             * @method gotoDentalClaims
             */
            $scope.gotoDentalClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for vision claims
             *
             * @memberof claimsList
             * @method gotoVisionClaims
             */
            $scope.gotoVisionClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug claims
             *
             * @memberof claimsList
             * @method gotoDrugClaims
             */
            $scope.gotoDrugClaims = function(ssoLink) {
              var data = {
                ssoLink : ssoLink,
                page : "RxClmDetl"
              };
              return $rootScope.openInSecureBrowser(data);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for claims search input.
 *
 * @namespace Directives
 * @class claimsSearchInput
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.claimsSearchInput', [])
  .directive('claimsSearchInput', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/claims-search-input.html',
        scope: true,
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          'claimsService',
          'coachmarkService',
          function($scope, $rootScope, $location, claimsService, coachmarkService) {

            $scope.loc          = $rootScope.loc;
            $scope.policyIndex  = $rootScope.policyIndex;

            if ($rootScope.hasClaims) {
              coachmarkService.showCoachmarks('claims');
            }

            /**
            * The query string to search by.
            *
            * @memberof claimsSearchInput
            * @member {String} query
            */
            $scope.query        = $location.search().keyword || '';
            $scope.searchParams = $location.search() || '';

            /**
             * Focuses on the search input.
             *
             * @memberof claimsSearchInput
             * @method focusOnSearchInput
             */
            $scope.focusOnSearchInput = function() {
              angular.element('.search-input input').focus();
            };

            /**
             * Validates the query string.
             *
             * @memberof claimsSearchInput
             * @method queryIsValid
             */
            $scope.queryIsValid = function() {
              if($scope.query.length < 3) {
                return false;
              }
              if(($scope.query === $location.search().keyword) && ($scope.policyIndex === $rootScope.policyIndex)) {
                return false;
              }

              return true;
            };

            $scope.filterResults = function(query) {
              if (query) {
                $rootScope.gotoView('/claims/filter?keyword='+query);
              }
              else {
                $rootScope.gotoView('/claims/filter');
              }
            };

            /**
             * Performs the search.
             *
             * @memberof claimsSearchInput
             * @method search
             */
            $scope.search = function() {
              $scope.hideKeyboard();
              if(!$scope.queryIsValid()) {
                return;
              }

              var basicSearch = claimsService.generateFilterQuery($location.search().dependentNo, $scope.searchParams.claimsStatus, $scope.searchParams.startMonth, $scope.searchParams.endMonth, $scope.searchParams.effectiveDate, $scope.searchParams.expirationDate, $scope.query);

              $location.url($location.path() + '?' + basicSearch);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * @description Directive for the reusable coachmark.
 * @namespace Directives
 * @class coachmark
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.coachmark', [])
    .directive('coachmark', [
      '$q',
      '$rootScope',
      '$timeout',
      'cordovaService',
      'storageService',
      function($q, $rootScope, $timeout, cordovaService, storageService) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/coachmark.html',
          scope: false,
          link: function ($scope, $element, $attrs) {
            $scope.close = close;
            $scope.show = show;
            $scope.prevPage = prevPage;
            $scope.nextPage = nextPage;
            var localCoachmarksSettings = {};

            function show(coachmarksDataForPage) {
              console.log('coachmarks requested for page %s', coachmarksDataForPage.identifier);
              return getCoachmarksSettings()
                .then(function(coachmarksData) {
                  // if we've already shown the coachmarks to this Member
                  if (coachmarksData[coachmarksDataForPage.identifier] === coachmarksDataForPage.version) {
                    return false;
                  }

                  return showCoachmarksElement(coachmarksDataForPage);
                })
                .then(function(setCoachmarks) {

                })
                .catch(showCoachmarksErrorHandler);
            }

            function showCoachmarksErrorHandler(error) {
              // if we're in the browser, still show coachmarks
              if (error === 'Cordova library not present.') {
                return showCoachmarksElement();
              }

              // if there were no settings related to coachmarks,
              // set those and then show the coachmarks
              if (error.code === 2) {
                return setCoachmarksSettings({})
                  .then(function(setCoachmarksSettingsSuccess) {
                    return show();
                  });
              }
            }

            function showCoachmarksElement(coachmarksDataForPage) {
              $scope.coachmark = coachmarksDataForPage;

              // each valid page must have a highlight object with a property
              // named "target", so we'll filter out the pages w/o this property
              // at the time that this runs, we will check for the presence of the element on the page,
              // and if it doesn't exist at time of execution, we'll skip that specific coachmark.
              $scope.coachmark.pages = $scope.coachmark.pages.filter(function(currentPage) {
                return angular.element(currentPage.highlight.target).length > 0;
              });

              if ($scope.coachmark.pages.length > 0) {
                angular.element('.coachmark').show();
                angular.element('#app-container').addClass('no-scroll');
                postNavigate();
              } else {
                console.log('No coachmark pages to show for page %s', coachmarksDataForPage.identifier, coachmarksDataForPage);
              }
            }

            function nextPage() {
              preNavigate();
              if ($scope.coachmark.currentPage < $scope.coachmark.pages.length - 1) {
                $scope.coachmark.currentPage = $scope.coachmark.currentPage + 1;
                postNavigate();
              }
            };

            function prevPage() {
              if ($scope.coachmark.currentPage > 0) {
                preNavigate();
                $scope.coachmark.currentPage = $scope.coachmark.currentPage - 1;
                postNavigate();
              }
            }

            function preNavigate() {
              if ($scope.coachmark && typeof $scope.coachmark.currentPage === 'undefined') {
                console.warn('No current page but scope is here', $scope.coachmark);
              }
              var currentPage = $scope.coachmark.pages[$scope.coachmark.currentPage];

              // Undo any triggers
              if (currentPage && currentPage.trigger) {
                // Get out of $apply cycle conflicts
                $timeout(function () {
                  angular.element(currentPage.trigger).triggerHandler('click');
                });
              } else {
                console.warn('Current page but no trigger', $scope.coachmark);
              }
            }

            function postNavigate() {
              var currentPage = $scope.coachmark.pages[$scope.coachmark.currentPage];

              if (currentPage && currentPage.trigger) {
                // Get out of $apply cycle conflicts
                $timeout(function () {
                  angular.element(currentPage.trigger).triggerHandler('click');
                });
              } else {
                console.warn('Current page has no trigger', currentPage);
              }

              // Avoid race condition of any triggers
              $timeout(function () {
                if (!currentPage) {
                  return console.warn('No current page but inside of $timeout', $scope);
                }
                var toHighlight = angular.element(currentPage.highlight.target)[0];
                var backdrop = angular.element('.coachmark-backdrop');

                try {
                  toHighlight.scrollIntoView();

                  var position = toHighlight.getBoundingClientRect();

                  backdrop
                    .css('top', position.top)
                    .css('left', position.left)
                    .css('height', position.height)
                    .css('width', position.width)
                    .attr('class', 'coachmark-backdrop')
                    .addClass(currentPage.highlight.style);
                }
                catch (e) {
                  backdrop
                    .css('top', 0)
                    .css('left', 0)
                    .css('height', 0)
                    .css('width', 0)
                    .attr('class', 'coachmark-backdrop');
                }
              }, 50);
            };

            function close() {
              getCoachmarksSettings()
                .then(function(coachmarksData) {
                  // once user has closed coachmarks, save their version
                  coachmarksData[$scope.coachmark.identifier] = $scope.coachmark.version;
                  hideCoachmarksDisplay();
                  return setCoachmarksSettings(coachmarksData);
                })
                .then(function(coachmarksSaved) {

                })
                .catch(function(setCoachmarksSettingsError) {

                });
            };

            function getCoachmarksSettings() {
              if (cordovaService.deviceIsBrowser()) {
                console.log('coachmarks setting', localCoachmarksSettings);
                return $q.resolve(localCoachmarksSettings);
              }
              return storageService.get('coachmarks:' + $rootScope.selectedPolicy.externalId);
            }

            function setCoachmarksSettings(incomingObj) {
              if (cordovaService.deviceIsBrowser()) {
                localCoachmarksSettings = incomingObj;
                console.log('coachmarks setting', localCoachmarksSettings);
                return $q.resolve(localCoachmarksSettings);
              }
              return storageService.set('coachmarks:' + $rootScope.selectedPolicy.externalId, incomingObj);
            }

            function hideCoachmarksDisplay() {
              angular.element('.coachmark').hide();
              angular.element('#app-container').removeClass('no-scroll');
            }
          }
        };
      }
    ]);
 }());

/**
 * Directive for a contraceptive-only-info.
 *
 * @namespace Directives
 * @class contraceptiveOnlyInfo
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.contraceptiveOnlyInfo', [])
    .directive('contraceptiveOnlyInfo', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/contraceptive-only-info.html',
          scope: {
            /**
            * The title of the contraceptive-only-info.
            *
            * @memberof contraceptiveOnlyInfo
            * @member {String} title
            */
            data: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            'helpService',
            function($scope, $rootScope, helpService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;

              $scope.openModal = function() {
                  $rootScope.headerTerm = $scope.data.modalHeader;
                  $scope.helpInfo = {
                    benefitsModalText: $scope.data.modalText,
                    contraceptiveInfo : true
                  };
                  helpService.help($scope.helpInfo);
              };
            }
          ]
        };
      }
    ]);
  }());
  
/**
 * Directive for validating a credit card number based upon
 * specific rules related to length and format
 *
 * @namespace Directives
 * @class creditCardNumberValidation
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.creditCardNumberValidation', [])
  .directive('creditCardNumberValidation', [
    function() {
      return {
        restrict: 'A',
        link: function($scope, $elem, $attrs) {
          // var inputCloseToMax = false;
          // var maxLength = $attrs.maxLength;
          // $elem.find('input').on('keyDown', function(ev) {
          //   if ()
          // });
          // $attrs.$observe('creditCardNumberValidation', function(value) {
          //   console.log(arguments);
          //   if (value.length === (maxLength - 1)) {
          //     inputCloseToMax;
          //   }
          // });
        }
      };
    }
  ]);
}());

/**
 * Directive for the customer service cards.
 *
 * @namespace Directives
 * @class customerServiceCard
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.customerServiceCard', [])
    .directive('customerServiceCard', [
      function (customerServiceHoursServices) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/customer-service-card.html',
          scope: {
            /**
             * The customer service numbers details to display.
             *
             * @memberof customerServiceCard
             * @member {Object} customerServiceCardDetails
             */
            customerServiceCardDetails: '=',
            secureInbox: '=',
            localization: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'adobeService',
            function ($scope, $rootScope, adobeService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.customerServiceDetails = [];
              $scope.hideClosedNowHoursUnavailable = false;
              $scope.openRightNow = [];

              var section = 'Call Customer Service';
              $rootScope.startingView = section;
              var hoursForPDPTTY = null;
              var openSevenDaysPDPTTY = null;
              if ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem.toLowerCase() === 'amisys') {
                $scope.customerServiceCardDetails.forEach(function(element){
                  if (element.serviceTiltles.name === 'BlueMedicareRx(PDP)') {
                    hoursForPDPTTY = element.serviceHours.hours;
                    openSevenDaysPDPTTY = element.serviceHours.openSevenDays;
                  }
                  if (element.serviceTiltles.name === 'BlueMedicareRx(PDP)(TTY)') {
                  element.serviceHours.hours = hoursForPDPTTY ? hoursForPDPTTY : element.serviceHours.hours;
                  element.serviceHours.openSevenDays = openSevenDaysPDPTTY ? openSevenDaysPDPTTY : element.serviceHours.openSevenDays;
                  }
                });
              }

              for (var i = 0; i < $scope.customerServiceCardDetails.length; i++) {
                var singleServiceTitle = $scope.customerServiceCardDetails[i].serviceTiltles;
                var singleServiceHours = $scope.customerServiceCardDetails[i].serviceHours;

                var singleServiceDetails = {
                  title: singleServiceTitle.title,
                  phones: singleServiceHours.number,
                  icon: singleServiceTitle.icon,
                  class: singleServiceTitle.class,
                  openEveryday: singleServiceHours.openEveryday,
                  openSevenDays: singleServiceHours.openSevenDays,
                  twoOpenTimeTypes: singleServiceHours.twoOpenTimeTypes,
                  hours: singleServiceHours.hours,
                  url: singleServiceTitle.url,
                  mainContent: singleServiceTitle.mainContent,
                  questionTypes: singleServiceTitle.questionTypes,
                  // tty: (singleServiceTitle.name === 'ttytddnumber') ? true : false
                };

                if (singleServiceTitle.title.indexOf('TTY') >= 0) {
                  singleServiceDetails.tty = true;
                } else {
                  singleServiceDetails.tty = false;
                }

                $scope.customerServiceDetails.push(singleServiceDetails);
              }


              /**
               * Display information for the customer services cards
               *
               * @memberof customerServiceCard
               * @method convertDisplayTime
               */
              var convertDisplayTime = function (value) {
                var hoursH = null;
                var hoursM = null;
                var am = " a.m.";
                var pm = " p.m.";
                var colon = ":";
                if (value %100 === 0) {
                  hoursH = value / 100;
                  hoursM = "00";
                } else {
                  hoursH = Math.round(value / 100);
                  hoursM = value %100;
                }
                return hoursH > 11 ? (hoursH - 12 + colon + hoursM + pm) : 
                  (hoursH + colon + hoursM + am);
              };

              /**
               * Display information for the customer services cards
               *
               * @memberof customerServiceCard
               * @method mondayFridaySchedule
               */

              $scope.openHours = function(customerService, index) {
                var hours = customerService.hours;
                var openSevenDays = customerService.openSevenDays;
                var serviceHours = [];
                var hoursAvailableBoolean = [];
                var hoursNotAvailable;

                var openTimeType1 = null;
                var closeTimeType1 = null;
                var dayStringType1 = '';
                var timeStringType1 = '';
                var openTimeType2 = null;
                var closeTimeType2 = null;
                var dayStringType2 = '';
                var timeStringType2 = '';

                for (var i = 0; i < hours.length; i++) {

                  if (!openTimeType1 && !closeTimeType1 && !dayStringType1) {
                    openTimeType1 = hours[i].open;
                    closeTimeType1 = hours[i].close;
                    dayStringType1 = hours[i].day;
                    timeStringType1 = openTimeType1 + ' - ' + closeTimeType1;
                  } else if (hours[i].open === openTimeType1 && hours[i].close === closeTimeType1) {
                    if (dayStringType1.indexOf('-') > -1) {
                      dayStringType1 = dayStringType1.substring(0, dayStringType1.indexOf('-'));
                      dayStringType1 += ' - ' + hours[i].day;
                    } else {
                      dayStringType1 += ' - ' + hours[i].day;
                    }
                  } else if (hours[i].open !== openTimeType1 || hours[i].close !== closeTimeType1) {
                    if (!openTimeType2 && !closeTimeType2 && !dayStringType2) {
                      openTimeType2 = hours[i].open;
                      closeTimeType2 = hours[i].close;
                      dayStringType2 = hours[i].day;
                      timeStringType2 = openTimeType2 + ' - ' + closeTimeType2;
                    } else if (hours[i].open === openTimeType2 && hours[i].close === closeTimeType2) {
                      if (dayStringType2.indexOf('-') > -1) {
                        dayStringType2 = dayStringType2.substring(0, dayStringType2.indexOf('-'));
                        dayStringType2 += ' - ' + hours[i].day;
                      } else {
                        dayStringType2 += ' - ' + hours[i].day;
                      }
                    }
                  }
                }


                // if dayStringType1 exists
                if (!!dayStringType1 && dayStringType1.length > 0) {
                  // check if it's not closed(0000) and not notAvailable(9999) -> add timeString
                  if (timeStringType1.indexOf('0000') < 0 && timeStringType1.indexOf('9999') < 0) {
                    // only create a timeString when it's not closed and hours are available
                    timeStringType1 = convertDisplayTime(openTimeType1) + ' - ' + convertDisplayTime(closeTimeType1);
                    serviceHours.unshift(dayStringType1 + ': ' + timeStringType1);
                    hoursNotAvailable = false;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                    // check if it's notAvaileble(9999) -> show message
                  } else if (timeStringType1.indexOf('9999') > -1) {
                    timeStringType1 = $rootScope.loc.HOURS_NOT_AVAILABLE;
                    serviceHours.unshift(dayStringType1 + ': ' + timeStringType1);
                    hoursNotAvailable = true;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                  }
                }

                // if dayStringType2 exists
                if (!!dayStringType2 && dayStringType2.length > 0) {
                  // check if it's not closed(0000) and not notAvailable(9999) -> add timeString
                  if (timeStringType2.indexOf('0000') < 0 && timeStringType2.indexOf('9999') < 0) {
                    timeStringType2 = convertDisplayTime(openTimeType2) + ' - ' + convertDisplayTime(closeTimeType2);
                    serviceHours.unshift(dayStringType2 + ': ' + timeStringType2);
                    hoursNotAvailable = false;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                    // check if it's notAvaileble(9999) -> show message
                  } else if (timeStringType2.indexOf('9999') > -1) {
                    timeStringType2 = $rootScope.loc.HOURS_NOT_AVAILABLE;
                    serviceHours.unshift(dayStringType2 + ': ' + timeStringType2);
                    hoursNotAvailable = true;
                    hoursAvailableBoolean.push(hoursNotAvailable);
                  }
                }

                if (openSevenDays) {
                  hoursNotAvailable = false;
                  hoursAvailableBoolean.push(hoursNotAvailable);
                }

                $scope.getOpenTimeToday(hours, index);

                return [
                    serviceHours,
                    hoursAvailableBoolean
                ];
              };

              $scope.getOpenTimeToday = function(hours, index) {
                var offset = -5.0;
                var whatDay = new Date();
                var utc = whatDay.getTime() + (whatDay.getTimezoneOffset() * 60000);
                var today = new Date(utc + (3600000 * offset));
                var day = today.getDay();
                var todayOPenTime = null;
                var todayCloseTime = null;

                todayOPenTime = hours[day].open;
                todayCloseTime = hours[day].close;

                /**
                 * Check if the services are opened now.
                 *
                 * @memberof mondayFridaySchedule
                 * @member {Boolean} openRightNow
                 */
                if (todayOPenTime != '9999' && todayCloseTime != '9999') {
                  if (today.getHours() >= todayOPenTime / 100 && today.getHours() < todayCloseTime / 100) {
                    $scope.openRightNow[index] = true;
                  } else {
                    $scope.openRightNow[index] = false;
                  }
                }
              };

            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for customer service phone card
 *
 * @namespace Directives
 * @class customerServicePhoneCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.customerServicePhoneCard', [])
  .directive('customerServicePhoneCard', [
    function() {
      return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/customer-service-phone-card.html',
        scope: {
          cardDetails: '=',
          localization: '=',
          policy: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.customerServiceDetails = $scope.cardDetails.map(function(element) {
              const singleServiceTitle = element.serviceTitles;
              const singleServiceHours = element.serviceHours;
              const singleServiceDetails = {
                title: singleServiceTitle.title,
                phones: singleServiceHours.number,
                icon: singleServiceTitle.icon,
                class: singleServiceTitle.class,
                openEveryday: singleServiceHours.openEveryday,
                openSevenDays: singleServiceHours.openSevenDays,
                hours: singleServiceHours.hours,
                url: singleServiceTitle.url,
              };

              singleServiceDetails.tty = singleServiceTitle.title.indexOf('TTY') >= 0;

              return singleServiceDetails;
            });


            /**
             * Display information for the customer services cards
             *
             * @memberof customerServiceCard
             * @method convertDisplayTime
             */
            var convertDisplayTime = function(value) {
              var hours = value/100;
              var timeValue = ((hours > 12) ? hours - 12 + " p.m." : hours + " a.m.");

              return timeValue;
            };

            $scope.formatTime = function(str, section) {
              return str.split(':')[section === 'days' ? 0: 1];
            };

            $scope.openTimeHours = function(){
              $scope.timeStringIn = '';
              $scope.customerServiceDetails.forEach(function(element) {
                if (element.openSevenDays) {
                element.hours.forEach(function(hoursElement) {
                  var openTimeIn = hoursElement.open;
                    var closeTimeIn = hoursElement.close;
                      $scope.timeStringIn = convertDisplayTime(openTimeIn) + ' - ' + convertDisplayTime(closeTimeIn);
                });
              }
              });
              return $scope.timeStringIn;
            };

            /**
             * Display information for the customer services cards
             *
             * @memberof customerServiceCard
             * @method mondayFridaySchedule
             */
            var mondayFridaySchedule = function() {
              var dayString = '';
              var timeString = '';
              var serviceHours = [];
              var hoursAvailableBoolean = [];
              var hoursNotAvailable;
              var openTime;
              var closeTime;
              var offset = -4.0;
              var whatDay = new Date();
              var utc = whatDay.getTime() + (whatDay.getTimezoneOffset() * 60000);
              var today = new Date(utc + (3600000*offset));
              $scope.openRightNow = [];
              for (var i = 0; i < $scope.cardDetails.length; i++) {
                for (var j = 0; j < $scope.cardDetails[i].serviceHours.hours.length; j++) {

                  if(!openTime && !closeTime && !dayString) {
                    dayString = $scope.cardDetails[i].serviceHours.hours[j].day;
                    openTime = $scope.cardDetails[i].serviceHours.hours[j].open;
                    closeTime = $scope.cardDetails[i].serviceHours.hours[j].close;
                    timeString = openTime + ' - ' + closeTime;
                  } else if(openTime == $scope.cardDetails[i].serviceHours.hours[j].open && closeTime == $scope.cardDetails[i].serviceHours.hours[j].close ) {
                    if(dayString.indexOf('-') > 0) {
                      dayString = dayString.substring(0, dayString.indexOf('-'));
                      dayString = dayString + ' - ' + $scope.cardDetails[i].serviceHours.hours[j].day;
                    } else {
                      dayString = dayString + ' - ' + $scope.cardDetails[i].serviceHours.hours[j].day;
                    }
                  } else {
                    if (dayString.length > 1 && timeString.indexOf('0') < 0) {
                      if(openTime == '9999' && closeTime == '9999') {

                        serviceHours.push(timeString);
                        hoursAvailableBoolean.push(hoursNotAvailable);
                      } else {
                        serviceHours.push(dayString + ': ' + timeString);
                        hoursAvailableBoolean.push(hoursNotAvailable);
                      }
                    }


                    dayString = $scope.cardDetails[i].serviceHours.hours[j].day;
                    openTime = $scope.cardDetails[i].serviceHours.hours[j].open;
                    closeTime = $scope.cardDetails[i].serviceHours.hours[j].close;

                    if(openTime == '9999' && closeTime == '9999') {
                      timeString = $rootScope.loc.HOURS_NOT_AVAILABLE;
                      hoursNotAvailable = true;
                    } else {
                      timeString = convertDisplayTime(openTime) + ' - ' + convertDisplayTime(closeTime);
                      hoursNotAvailable = false;
                    }
                  }
                }

                var day = today.getDay();
                var todayOPenTime = $scope.cardDetails[i].serviceHours.hours[day].open;
                var todayCloseTime = $scope.cardDetails[i].serviceHours.hours[day].close;

                /**
                * Check if the services are opened now.
                *
                * @memberof mondayFridaySchedule
                * @member {Boolean} openRightNow
                */
                if(todayOPenTime != '9999' && todayCloseTime != '9999') {
                  if(today.getHours() >= todayOPenTime/100 && today.getHours() < todayCloseTime/100) {
                    $scope.openRightNow[i] = true;
                  } else {
                    $scope.openRightNow[i] = false;
                  }
                }
              }

              return [
                serviceHours,
                hoursAvailableBoolean
              ];
            };
            $scope.openHours = mondayFridaySchedule();
          }
        ]
      };
    }
  ]);
}());
/**
 * Directive for the idCard Customer service tab on details page.
 *
 * @namespace Directives
 * @class idCardGroup
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.customerServiceSecureInbox', [])
  .directive('customerServiceSecureInbox', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/customer-service-secure-inbox.html',
        scope: {
          /**
          * The customer service tab to display.
          *
          * @memberof idCardCustomerService
          * @member {Object} contactDetails
          */
          customerServiceSecureInboxDetails: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          'quickAlertService',
          function($scope, $rootScope, $location, $timeout, quickAlertService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            if($location.search().messageSent) {
              $rootScope.sentMessage = true;
              quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
              $timeout(function() {
                  angular.element('.quick-alert-modal').hide();
              }, 2000);
              var search = angular.copy($location.search());
              delete search.messageSent;
              $location.search(search);
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for validating a CVN number for a credit card based upon
 * specific rules related to length and format
 *
 * @namespace Directives
 * @class cvnValidation
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.cvnValidation', [])
  .directive('cvnValidation', [
    function() {
      return {
        restrict: 'A',
        link: function($scope, $elem, $attrs) {
          $elem.find('input').on('keydown', function(ev) {
            if (ev.key === 'Backspace') {
              return true;
            }
            if (this.value.length >= 4) {
              return false;
            }
          });
        }
      };
    }
  ]);
}());

/**
 * Directive for a dental-only-info.
 *
 * @namespace Directives
 * @class dentalOnlyInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.dentalOnlyInfo', [])
  .directive('dentalOnlyInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/dental-only-info.html',
        scope: {
          /**
          * The title of the dental-only-info.
          *
          * @memberof dentalOnlyInfo
          * @member {String} title
          */
          data: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'shareService',
          'adobeService',
          function($scope, $rootScope, shareService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.trackAction = $rootScope.trackAction;


            document.addEventListener("deviceready", onDeviceReady, false);

            function onDeviceReady() {
              var devicePlatform = device.platform;
              $scope.openPDF = function(url){
                if (devicePlatform !== 'iOS') {
                  /**
                  * Android can not open PDF using openInBrowser
                  * Adding google drive prefix link to open PDF in browser
                  */
                  $rootScope.$emit('pageLoading');
                  DocumentViewer.previewFileFromUrlOrPath(
                        function (success) {
                          $rootScope.$emit('pageLoaded');
                      },
                        function (error) {
                          console.log(error);
                          $rootScope.$emit('pageLoaded');
                      },
                      url, 'benefits.pdf');
                  } else {
                    $scope.openInBrowser(url);
                  }
              }
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for bottons that load documents.
 *
 * @namespace Directives
 * @class documentButtons
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.documentButtons', [])
  .directive('documentButtons', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/document-buttons.html',
        scope: {
          /**
          * The buttons to display.
          *
          * @memberof documentButtons
          * @member {Array} buttons
          */
          buttons: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$window',
          'restService',
          'adobeService',
          function($scope, $rootScope, $location, $window, restService, adobeService) {
            var VIEWSTATE = {
              INITIAL   : 'INITIAL',
              PROCESSING: 'PROCESSING',
              FINAL     : 'FINAL',
              ERROR     : 'ERROR'
            };

            $scope.loc        = $rootScope.loc;
            $scope.gotoView   = $rootScope.gotoView;
            $scope.foundEOB   = null;
            $scope.EOBState   = VIEWSTATE.INITIAL; //Default value for the specific button

            /**
             * The onClick method for the Viewing benefits coverages and documents.
             *
             * @memberof documentButtons
             * @method viewCoverages
             * @param  {String} buttonId The button ID defined in station.
             */
            $scope.viewCoverages = function(buttonId) {
              $scope.trackButtonAction('benefitsViewCoverageDetails');
              $rootScope.gotoView('/benefits/viewcoverage');
            };

            /**
             * The onClick method for the View Total Benefits button.
             *
             * @memberof documentButtons
             * @method viewBenefits
             * @param  {String} buttonId The button ID defined in station.
             */
            $scope.viewBenefits = function(buttonId) {
              $rootScope.gotoView('/benefits');
            };

            $scope.trackButtonAction = function(action){
              adobeService.trackAction(action, $scope.buttons[0].section);
            }

            /**
             * The onClick method for the EOB button.
             *
             * @memberof documentButtons
             * @method viewEOB
             * @param  {String} buttonId The button ID defined in station.
             */
            $scope.viewEOB = function(buttonId) {
              if ($scope.EOBState === VIEWSTATE.INITIAL) {
                $rootScope.pausedForReadPDF = true;
                $scope.trackButtonAction('claimDetails:eob:load');
                loadEOBDocument(buttonId, $scope.EOBState);
              }
              else if ($scope.EOBState === VIEWSTATE.FINAL) {
                //User has pressed button to retrieve document
                displayEOBDocument();
              }
            };

            var loadEOBDocument = function(buttonId, currentState) {
              if (currentState === VIEWSTATE.INITIAL) {
                $scope.EOBState = VIEWSTATE.PROCESSING;

                angular.element('#'+buttonId + ' #span' + buttonId).html($rootScope.loc.LOADING_PLEASE_WAIT);
                angular.element('#'+buttonId + ' #icon' + buttonId).removeClass("fc-pdf").addClass("fa fa-2x fa-spinner fa-pulse");

                var query = $location.search();

                var queryData = "policyindex=" + $rootScope.policyIndex +
                "&policyExternalId=" + $rootScope.selectedPolicy.externalId +
                "&policyEffectiveDate=" + $rootScope.selectedPolicy.effectiveDate +
                "&policyExpirationDate=" + $rootScope.selectedPolicy.expirationDate +
                "&dependentNo=" + query.dependentNo +
                "&docType=EOB" + "&claimId="+ query.id +
                "&url="+ $location.path();

                //Grab the data from service
                restService.getData('documents?' + queryData, $rootScope.language || 'en').then(function(docBytes) {
                  return docBytes;
                }).then(function(docBytes) {
                  if (docBytes) {
                    angular.element('#'+buttonId).addClass("sync-benefits-pdf")
                    angular.element('#'+buttonId + ' #span' + buttonId).html($rootScope.loc.EOB_PDF + '<i class=\'fc-pdf fc-lg\' ng-click="trackButtonAction(\'readyViewEOB\', \'Claims-Details\')"></i>'+'<hr/>'+$rootScope.loc.READY_TO_VIEW);
                    angular.element('#'+buttonId + ' #icon' + buttonId).removeClass("fa fa-2x fa-spinner fa-pulse");

                    $scope.foundEOB = docBytes[0].documentImageBlob;

                    $scope.EOBState = VIEWSTATE.FINAL;
                  }
                },function(error) {
                  $scope.EOBState = VIEWSTATE.ERROR;

                  angular.element('#'+buttonId).addClass("error-benefits-pdf")
                  angular.element('#'+buttonId + ' #span' + buttonId).html($rootScope.loc.EOB_PDF + '<i class=\'fc-pdf fc-lg\'></i>'+'<hr/><span class="pdf-warn">'+$rootScope.loc.DOCUMENT_NOT_FOUND + '</span>');
                  angular.element('#'+buttonId + ' #icon' + buttonId).removeClass("fa fa-2x fa-spinner fa-pulse");
                });
              }
            };

            var displayEOBDocument = function() {
              $scope.trackButtonAction('claimDetails:eob:view');
              if(typeof cordova !== 'undefined') {
                DocumentViewer.saveAndPreviewBase64File(function(success) {}, function(err) {
                  console.log(err);
                }, $scope.foundEOB, 'application/pdf', cordova.file.cacheDirectory, 'preview.pdf');
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a clickable help icon that opens the help modal.
 *
 * @namespace Directives
 * @class dynamicHelpIcon
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.dynamicHelpIcon', [])
  .directive('dynamicHelpIcon', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/dynamic-help-icon.html',
        scope: {
          /**
          * The filename of the help content.
          *
          * @memberof helpIcon
          * @member {String} fileName
          */
          info : '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            /**
            * Call the helpService to display relative information
            * that might be helpful to the user
            *
            * @memberof helpIcon
            * @method showHelp
            * @param  {String} filename The name of the helpfile to load.
            */
            $scope.help = function(info) {
              helpService.help(info);
            };
          }
        ]
      };
    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageConfirmation', [])
    .directive('editAutopayFlowPageConfirmation', function() {
      return {
        scope: {
          serviceResponse: '<'
        },
        templateUrl: 'partials/edit-autopay-flow-page-confirmation.html',
        controller: ['PaymentFlowFactory', '$rootScope', '$scope', function(PaymentFlowFactory, $rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;
          $scope.userSetData = PaymentFlowFactory.getUserSetData();

          $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                  $scope.loc.BP_BANK_DRAFT :
                  $scope.loc.BP_CREDIT_CARD
          );

          $scope.returnToAccountSummary = function() {
            PaymentFlowFactory.reset();
            $rootScope.gotoView('/billing');
          };

          $scope.trackerInfo = {
            step: 'CONFIRMATION'
          };
        }]
      }
    });
})();
(function () {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageDetails', [])
    .directive('editAutopayFlowPageDetails', function () {
      return {
        scope: {
          serviceResponse: '<'
        },
        templateUrl: 'partials/edit-autopay-flow-page-details.html',
        controller: ['config', 'PaymentFlowFactory', '$http', '$q', '$rootScope', '$scope',
          function (config, PaymentFlowFactory, $http, $q, $rootScope, $scope) {
            $scope.userSetData = PaymentFlowFactory.getUserSetData();
            $scope.creditCardSignatureError = false;
            // Sets the scope variables and functions
            initializePage();

            /**
             * Initializing the page
             */
            function initializePage() {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;

              $scope.trackerInfo = {
                step: 'DETAILS'
              };

              // Defining page back behavior broadcasted from the header directive
              $scope.$on('PAGE_BACK', function () {
                if ($scope.editAutopayDetailsForm.bankDraftForm) {
                  saveBankDetails($scope.editAutopayDetailsForm);
                }
                $rootScope.gotoView('/edit-autopay-flow/method');
              });

              // Setting the localized string for the payment method
              $scope.localizedPaymentMethod = (
                PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                  $scope.loc.BP_BANK_DRAFT :
                  $scope.loc.BP_CREDIT_CARD
              );

              // Setting the localized string for the billing method to display
              var billingMethod = PaymentFlowFactory.getBillingMethod();
              if (billingMethod === 'none') {
                $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
              }
              if (billingMethod === 'email') {
                $scope.localizedBillingMethod = $scope.loc.EMAIL;
              }
            }
            // End of init function

            /**
             *
             * @param {*} formObj
             */
            $scope.validateEditAutopayDetails = function (formObj) {
              // Remove error message immediately after resubmission
              $scope.creditCardSignatureError = false;
              // Validate the form fields
              formObj.paymentFlowTermsConditions.acceptedAgreement.$setDirty();
              if (formObj.bankDraftForm) {
                setBankFormDirty(formObj);
              }
              if (formObj.creditCardDetailsForm) {
                setCreditFormDirty(formObj)
              }
              if (formObj.$invalid) {
                return;
              }

              // Save user inputs for bankdraft
              if ($scope.userSetData.paymentMethod === 'bankdraft') {
                saveBankDetails(formObj);
                $rootScope.gotoView('/edit-autopay-flow/review');
              }
              // Save user inputs for credit details
              if ($scope.userSetData.paymentMethod === 'creditcard') {
                postAndSaveCreditDetails(formObj)
                  .then(function () {
                    $rootScope.gotoView('/edit-autopay-flow/review');
                  })
                  .catch(function (error) {
                    $scope.creditCardSignatureError = true;
                    $rootScope.$emit('pageLoaded');
                  });
              }
            }

            /**
             *
             */
            function setBankFormDirty(formObj) {
              formObj.bankDraftForm.accountOwnersName.$setDirty();
              formObj.bankDraftForm.accountType.$setDirty();
              formObj.bankDraftForm.bankRoutingNumber.$setDirty();
              formObj.bankDraftForm.bankAccountNumber.$setDirty();
              formObj.bankDraftForm.confirmAccountNumber.$setDirty();
            }

            /**
             *
             */
            function setCreditFormDirty(formObj) {
              formObj.creditCardDetailsForm.creditCardNumber.$setDirty();
              formObj.creditCardDetailsForm.cvn.$setDirty();
              formObj.creditCardDetailsForm.firstName.$setDirty();
              formObj.creditCardDetailsForm.month.$setDirty();
              formObj.creditCardDetailsForm.year.$setDirty();
            }

            /**
             *
             * @param {Object} formObj
             * @return {Promise}
             */
            function postAndSaveCreditDetails(formObj) {
              $scope.creditCardSignatureError = false;
              $rootScope.$emit('pageLoading');
              var creditCardData = {
                account: {
                  token: $scope.serviceResponse.token
                },
                paymentFrequency: 'RCC',
                authAmount: 2, // this does not matter because they are not using this in the hashed signature
                emailAddress: $scope.serviceResponse.identity.email,
                firstName: $scope.serviceResponse.identity.givenName,
                lastName: $scope.serviceResponse.identity.familyName
              };
              return $q(function (resolve, reject) {
                $http.post(config.apiUrl + '/signature', creditCardData)
                  .then(function (response) {
                    PaymentFlowFactory.setSignature(response.data.signature);
                    PaymentFlowFactory.setMerchantReferenceCode(response.data.merchantReferenceCode);
                    PaymentFlowFactory.setEnrollmentProcessNumber(response.data.enrollmentProcessNumber);
                    resolve();
                  })
                  .catch(reject);
              });
            }

            /**
             *
             * @param {*} formObj
             */
            function saveBankDetails(formObj) {
              PaymentFlowFactory
                .setAccountHolderName(formObj.bankDraftForm.accountOwnersName.$modelValue)
                .setAccountType(formObj.bankDraftForm.accountType.$modelValue)
                .setRoutingNumber(formObj.bankDraftForm.bankRoutingNumber.$modelValue)
                .setAccountNumber(formObj.bankDraftForm.bankAccountNumber.$modelValue)
                .setConfirmedAccountNumber(formObj.bankDraftForm.confirmAccountNumber.$modelValue);
            }


          }]
      }
    });
})();

(function () {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageMethod', [])
    .directive('editAutopayFlowPageMethod', function () {
      return {
        scope: {
          serviceResponse: '=?'
        },
        templateUrl: 'partials/edit-autopay-flow-page-method.html',
        controller: ['PaymentFlowFactory', '$rootScope', '$scope', '$window', function (PaymentFlowFactory, $rootScope, $scope, $window) {
          // aliasing functions to user in scope
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;

          $scope.padAmt = function(amt) {
            var amount = amt.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return amount;
          };

          //setting intial values from preferences
          if (!PaymentFlowFactory.getBillingMethod()) {
            PaymentFlowFactory.setBillingMethod($scope.serviceResponse.preferences.billingMethod.toLowerCase());
          }
          if (!PaymentFlowFactory.getEmailAddress()) {
            PaymentFlowFactory.setEmailAddress($scope.serviceResponse.preferences.emailAddress);
          }

          $scope.trackerInfo = {
            step: 'METHOD'
          };
          // setting initial radio values
          $scope.paymentFrequency = 'RECURRING',
            $scope.premiumSelected = 'TRUE';

          $scope.$on('PAGE_BACK', function () {
            $window.history.back();
          });

          $scope.validateEditAutopayMethod = function (formObj) {
            // validating the form
            formObj.premiumRadioSelected.$setDirty();
            formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$setDirty();
            if (formObj.paymentFlowPaperlessAgreement) {
              formObj.paymentFlowPaperlessAgreement.acceptedAgreement.$setDirty();
            }

            if (formObj.$invalid) {
              return;
            }

            PaymentFlowFactory.setPaymentFrequency('autopay');

            // setting factory values
            PaymentFlowFactory.setPaymentMethod(formObj.paymentFlowPaymentMethodForm.desiredPaymentMethod.$modelValue);
            if (formObj.autopayFlowBillingMethod) {
              PaymentFlowFactory
                .setBillingMethod(formObj.autopayFlowBillingMethod.billingMethodSelected.$modelValue);
            }

            var billingMethod = PaymentFlowFactory.getBillingMethod();
            if (billingMethod === 'none') {
              $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
            }
            if (billingMethod === 'email') {
              $scope.localizedBillingMethod = $scope.loc.EMAIL;
            }

            // redirecting view
            $rootScope.gotoView('/edit-autopay-flow/details');
          };

        }]
      }
    });
})();

(function () {
  angular
    .module('blueconnect.mobile.directive.editAutopayFlowPageReview', [])
    .directive('editAutopayFlowPageReview', function () {
      return {
        scope: {
          serviceResponse: '<'
        },
        templateUrl: 'partials/edit-autopay-flow-page-review.html',
        controller: ['config', 'PaymentFlowFactory', '$http', '$q', '$rootScope', '$scope',
          function (config, PaymentFlowFactory, $http, $q, $rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.submissionError = false;
            $scope.gotoView = $rootScope.gotoView;
            $scope.userSetData = PaymentFlowFactory.getUserSetData();

            $scope.trackerInfo = {
              step: 'REVIEW'
            };

            // goToPaymentDetails is used by the cancel modal
            $scope.goToPaymentDetails = function () {
              PaymentFlowFactory.resetCreditCardDetails();
              $rootScope.gotoView('edit-autopay-flow/details');
            };

            $scope.backModalObj = {
              title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
              body: $scope.loc.BP_EDIT_PAYMENT_REENTER_DETAILS,
              cancelButton: {
                title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
              },
              confirmButton: {
                color: 'blue',
                title: $scope.loc.BP_EDIT_PAYMENT_INFO
              }
            };

            $scope.$on('PAGE_BACK', function () {
              if (PaymentFlowFactory.getPaymentMethod() === 'creditcard') {
                //$scope.openModal is not defined because it's an alias passed into
                // the extendable-alert-modal directive
                return $scope.openBackModal();
                ;
              }
              $rootScope.gotoView('edit-autopay-flow/details');
            });

            $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                $scope.loc.BP_BANK_DRAFT :
                $scope.loc.BP_CREDIT_CARD
            );

            var billingMethod = PaymentFlowFactory.getBillingMethod();
            if (billingMethod === 'none') {
              $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
            }
            if (billingMethod === 'email') {
              $scope.localizedBillingMethod = $scope.loc.EMAIL;
            }


            $scope.submitPreferences = function () {
              $scope.submissionError = false;
              $rootScope.$emit('pageLoading');
              switch ($scope.userSetData.paymentMethod) {
                case 'bankdraft':
                  submitBankAutopayDetails()
                    .then(function () {
                      $scope.userSetData.paymentErrorCode = 100;
                      $scope.userSetData.successConfirmationCode = 123456789;
                      $rootScope.$emit('pageLoaded');

                      return $rootScope.gotoView('edit-autopay-flow/confirmation');
                    })
                    .catch(function (err) {
                      $scope.submissionError = true;
                      $rootScope.$emit('pageLoaded');
                    });
                  break;
                case 'creditcard':
                  submitCreditCardToCyberSource()
                    .then(function (encryptedPaymentData) {
                      $scope.userSetData.encryptedPaymentData = encryptedPaymentData;
                      return doStk2(encryptedPaymentData);
                    })
                    .then(function (response) {
                      $scope.userSetData.paymentErrorCode = response.data.statusCode;
                      $scope.userSetData.successConfirmationCode = response.data.merchantReferenceCode;
                      $rootScope.$emit('pageLoaded');
                      return $rootScope.gotoView('/payment/confirmation');
                    })
                    .catch(function (err) {
                      $scope.submissionError = true;
                      $rootScope.$emit('pageLoaded');
                    });
                  break;
              }
            };

            /**
             * @return {Promise}
             */
            function submitBankAutopayDetails() {
              var preferencesObj = {
                account: {
                  token: $scope.serviceResponse.token
                },
                preferences: {
                  mailingAddress: $scope.serviceResponse.preferences.mailingAddress,
                  emailAddress: PaymentFlowFactory.getEmailAddress(),
                  payment: {
                    bankDraftDetails: {
                      bankName: 'Bank of America', // Needed for service side validation that then discards this value
                      accountNumber: PaymentFlowFactory.getAccountNumber(),
                      routingNumber: PaymentFlowFactory.getRoutingNumber(),
                      accountType: PaymentFlowFactory.getAccountType(),
                      bankAccountHolderName: PaymentFlowFactory.getAccountHolderName()
                    }
                  },
                  updatedPreferences: {
                    paymentMethod: 'BANKDRAFT',
                    billingMethod: PaymentFlowFactory.getBillingMethod().toUpperCase(),
                    paymentFrequency: 'RECURRING'
                  },
                  priorBillingNotifPrefCode: $scope.serviceResponse.preferences.priorBillingNotifPrefCode
                },
                TIPData: $rootScope.getTIPData('SetupRcrBankDraft', '/setBillingPreferences')
              };

              return $http.post(config.apiUrl + '/setBillingPreferences', preferencesObj);
            }

            /**
             * @return {Promise}
             */
            function submitCreditCardToCyberSource() {
              return $q(function (resolve, reject) {
                if ($scope.userSetData.encryptedPaymentData) {
                  return resolve($scope.userSetData.encryptedPaymentData);
                }
                var cardRequest = {
                  environment: config.env == 'PROD' ? config.env.toLowerCase() : 'test',
                  merchantId: config.merchantId,
                  transaction: {
                    merchantReferenceCode: $scope.userSetData.merchantReferenceCode.toString()
                  },
                  card: {
                    accountNumber: $scope.userSetData.creditCardDetails.lastFour.toString(),
                    expirationMonth: $scope.userSetData.creditCardDetails.month.toString(),
                    expirationYear: '20' + $scope.userSetData.creditCardDetails.year.toString(),
                    cvNumber: $scope.userSetData.creditCardDetails.cvn.toString()
                  },
                  billing: {
                    firstName: $scope.serviceResponse.identity.givenName,
                    lastName: $scope.serviceResponse.identity.familyName,
                    postalCode: "94043"
                  },
                  signature: $scope.userSetData.signature
                };
                cybersource.processCard(cardRequest, function (result) {
                  resolve($scope.userSetData.encryptedPaymentData = result.encryptedPaymentData);
                }, reject);
              });
            }

            /**
             *
             * @param {*} result
             * @return {Promise}
             */
            function doStk2(encryptedPaymentData) {
              var data = {
                account: {
                  token: $scope.serviceResponse.token
                },
                paymentFrequency: 'RCC',
                paymentAmount: 0,
                merchantReferenceCode: $scope.userSetData.merchantReferenceCode,
                encryptedPaymentData: encryptedPaymentData,
                enrollmentProcessNumber: $scope.userSetData.enrollmentProcessNumber,
                ccFirstName: $scope.userSetData.creditCardDetails.firstName,
                ccLastName: $scope.userSetData.creditCardDetails.firstName,

                accountHolderName: $scope.userSetData.creditCardDetails.firstName,
                billingMethod: $scope.userSetData.billingMethod && $scope.userSetData.billingMethod.toUpperCase(),
                preferences: {
                  emailAddress: $scope.serviceResponse.identity.email,
                  mailingAddress: $scope.userSetData.preferences.mailingAddress,
                  priorBillingNotifPrefCode: $scope.serviceResponse.preferences.priorBillingNotifPrefCode,
                  payment: {
                    bankDraftDetails: {
                      bankName: null,
                      accountNumber: null,
                      routingNumber: null,
                      accountType: null,
                    }
                  }
                },
                TIPData: $rootScope.getTIPData('SetupRcrCreditCard', '/sale')
              };
              return $http.post(config.apiUrl + '/sale', data);
            }


          }] // End of controller declaration
      }; // End of directive return object
    }); // End of directive function call
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.editAutopayFlowPaymentReceipt', [])
    .directive('editAutopayFlowPaymentReceipt', function() {
      return {
        restrict: 'E',
        replace: false,
        scope: {
          serviceResponse: '='
        },
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.userSetData = PaymentFlowFactory.getUserSetData();
          $scope.paymentFrequencyDisplayValue = $scope.loc.BP_AUTOPAY;
          $scope.paymentMethodDisplayValue = /bank/.test($scope.userSetData.paymentMethod) ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD;
          $scope.accountTypeDisplayValue = $scope.userSetData.accountType === 'Checking' ? $scope.loc.BP_CHECKING : $scope.loc.SAVINGS;
          $scope.localizedBillingMethod = (
              PaymentFlowFactory.getBillingMethod() === 'none' ?
                  $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL :
                  $scope.loc.EMAIL
          );

        }],
        templateUrl: 'partials/edit-autopay-flow-payment-receipt.html'
      }
    })
})();
(function() {
  angular
  .module('blueconnect.mobile.directives.editBillingMethod', [])
  .directive('editBillingMethod', function() {
    return {
      restrict: 'E',
      scope: {
        preferences: '<',
        selectedPolicy: '<',
        billingToken: '<'
      },
      templateUrl: 'partials/edit-billing-method.html',
      controller: ['config', '$http', '$rootScope', '$scope', '$timeout', '$window', function(config, $http, $rootScope, $scope, $timeout, $window) {
        $scope.loc = $rootScope.loc;
        $scope.savePreferencesError = null;
        $scope.checkboxValue = false;

        // Object structure needed for address validation directive
        $scope.userData = {
          preferences: $scope.preferences.values.preferences
        };
        $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;


        // Sets the selected billing method defaulted to email
        $scope.userData.preferences.billingMethod ? $scope.billingMethodSelected = $scope.userData.preferences.billingMethod: $scope.billingMethodSelected = 'EMAIL'


        $scope.savePreferencesError = null;

        $scope.navDetails = {
          leftNavButton: {
            icon: 'back'
          },
          title: $rootScope.loc.BP_EDIT_BILLING_METHOD
        };
    
        $scope.historyBack = function() {
          $window.history.back();
        };

        $scope.acceptPaperlessFn = function() {
          $scope.checkboxValue = true;$scope.checkboxValue = true;
        };

        /**
         *
         * @param {Object} formObj
         */
        $scope.validateAndSubmitForm = function(formObj) {
          $scope.savePreferencesError = false;
          if (formObj.memberEmail) {
            formObj.memberEmail.$setDirty();
          }
          if (formObj.paperlessAgreement) {
            formObj.paperlessAgreement.$setDirty();
          }
          if ($scope.billingMethodSelected === 'POSTAL') {
            formObj.streetAddress.$setDirty();
            formObj.city.$setDirty();
            formObj.state.$setDirty();
            formObj.zipcode.$setDirty();
          }
          // return if the form is invalid
          if (formObj.$invalid) {
            return;
          }

          // post data if the form is valid
          $rootScope.$emit('pageLoading');

          $http.post(config.apiUrl + '/setBillingPreferences', {
            account: {
              token: $scope.billingToken
            },
            preferences: {
              mailingAddress: $scope.userData.preferences.mailingAddress,
              emailAddress: $scope.userData.preferences.emailAddress,
              payment: $scope.userData.preferences.payment,
              updatedPreferences: {
                paymentMethod: $scope.userData.preferences.paymentMethod,
                billingMethod: $scope.billingMethodSelected,
                paymentFrequency: $scope.userData.preferences.paymentFrequency
              },
              priorBillingNotifPrefCode: $scope.userData.preferences.priorBillingNotifPrefCode
            },
            TIPData: $rootScope.getTIPData('Chgbillstmtpref', '/setBillingPreferences')
          }).then(function(){
            $rootScope.$emit('pageLoaded');
            $rootScope.gotoView('/billing-preferences?success=true');
          }).catch(function() {
            $rootScope.$emit('pageLoaded');
            $scope.savePreferencesError = true;
          });
        };

      }]
    };

  });
})();
/**
 * Directive for display when failed to load a page.
 *
 * @namespace Directives
 * @class errorLoadingPage
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.errorLoadingPage', [])
  .directive('errorLoadingPage', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/error-loading-page.html',
        scope: {},
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.faq', [])
    .directive('faq', [
      function () {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/faq.html',
          scope: {
            /**
            * Display information for the faq page.
            *
            * @memberof about
            * @member {Object} faqDetails
            */
            faqDetails: '='
          },
          controller: [
            '$rootScope',
            '$scope',
            '$window',
            '$timeout',
            'adobeService',
            '$location',
            'quickAlertService',
            'TransparencyFactory',
            'geoLocationService',
            function ($rootScope, $scope, $window, $timeout, adobeService, $location, quickAlertService, TransparencyFactory, geoLocationService) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $scope.gotoView = $rootScope.gotoView;
              $scope.loc = $rootScope.loc;
              $scope.policy = ($rootScope.loggedIn) ? $rootScope.policies[$rootScope.selectedPolicy.index] : null;

              $scope.checkBenefitsLink = function() {
                if ($scope.policy.sourceSystem.toLowerCase() === 'amisys') {
                 return $scope.gotoView('/medicare-benefits');
                }
                return $scope.gotoView('/benefits');
              };

              $scope.gotoNavigatedPage = function(url, searchTerm, planDetails) {
                $rootScope.openMapView = false;
                if ($rootScope.vitalsError) {
                  $scope.openAlertModal();
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                $scope.planDetails = planDetails;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip) {
                  $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                } else {
                  TransparencyFactory.setZipRangeNC($scope.faqDetails.geoLocationDetails.distanceDetails.NCZipMin,$scope.faqDetails.geoLocationDetails.distanceDetails.NCZipMax);
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function(){
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function(val) {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName = $scope.faqDetails.geoLocationDetails.distanceDetails.currentLocation;
                          $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.faqDetails.geoLocationDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function(error) {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.faqDetails.geoLocationDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              }; 

              $scope.gotoBrowseLevelPage = function(url, searchTerm, planDetails) {
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                $scope.queryString = 'searchTerm='+ searchTerm + '&planName='+ planDetails.planName + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id;
                TransparencyFactory.setSearchTerm(searchTerm);
                (url !== '/find-doctor-browser') ? $rootScope.gotoView(url + '?' + $scope.queryString) : $rootScope.gotoView('/fad-auth/find-doctor');
              };

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound){
                  $rootScope.gotoView('/find-care');
                } else if ($scope.urltoNavigate !== 'find-doctor-browser') {
                  $rootScope.gotoView($scope.urltoNavigate);
                } else {
                  $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
                }
              };
   
              $scope.modalObj = {
                locationMsg: $scope.faqDetails.geoLocationDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE
                },
                values: {
                  distanceDetails: $scope.faqDetails.geoLocationDetails.distanceDetails,
                  distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.faqDetails.geoLocationDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity()
                }
              };
  
              /**
               * Expands the category by default based on the url params expand
               * $timeout helps to trigger after the document rendered.
               */
              $timeout(function () {
                var itemToExpand = $location.search().expand;
                if (itemToExpand) {
                  var categoryIndex = $scope.faqDetails.buttons[0].categories.findIndex(function(e) {
                    return e.categoryId === itemToExpand;
                  });
                  if (categoryIndex !== -1) {
                    $scope.faqDetails.buttons[0].categories[categoryIndex].expandedDiv = true;
                  }
                }
              }, 0);

              $scope.toggleItem = function (item, id, event) {
                if (!item.expandedDiv) {
                  for (var k = 0; k < $scope.faqDetails.buttons.length; k++) {
                    for (var i = 0; i < $scope.faqDetails.buttons[k].categories.length; i++) {
                      $scope.faqDetails.buttons[k].categories[i].expandedDiv = false;
                    }
                  }
                }
                item.expandedDiv = !item.expandedDiv;
              };

              $scope.toggleInnerItem = function (item, parentId, id, event) {
                if (!item.expandedDiv) {
                  for (var z = 0; z < $scope.faqDetails.buttons.length; z++) {
                    if ($scope.faqDetails.buttons[z].categories[parentId].questions) {
                      for (var w = 0; w < $scope.faqDetails.buttons[z].categories[parentId].questions.length; w++) {
                        $scope.faqDetails.buttons[z].categories[parentId].questions[w].expandedDiv = false;
                      }
                    }
                  }
                }
                item.expandedDiv = !item.expandedDiv;
              };

              $scope.alertModalObj = {
                title: $scope.faqDetails.alertModal && $scope.faqDetails.alertModal.title ? $scope.faqDetails.alertModal.title : '',
                message: $scope.faqDetails.alertModal && $scope.faqDetails.alertModal.message ? $scope.faqDetails.alertModal.message : '',
                confirmBtn: $scope.faqDetails.alertModal && $scope.faqDetails.alertModal.confirmBtn ? $scope.faqDetails.alertModal.confirmBtn : '',
              };

              /**
               * Toggles the quick-alert-modal for sent message if messageSent is true
               *
               * @memberof helpItemGroup
               */
              if ($location.search().messageSent) {
                $rootScope.sentMessage = true;
                $rootScope.sendFaqMessage = true;
                quickAlertService.showQuickAlert({ message: $rootScope.loc.MESSAGE_SENT, color: 'green' });
                $timeout(function () {
                  angular.element('.quick-alert-modal').hide();
                }, 2000);
                var search = angular.copy($location.search());
                delete search.messageSent;
                $location.search(search);
              }
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the details box on the id card details page.
 *
 * @namespace Directives
 * @class feedback
 */
(function() {
	'use strict';

	angular.module('blueconnect.mobile.directives.feedback', [])
		.directive('feedback', [
			'messageService',
			'$rootScope',
			function(messageService, $rootScope) {
				return {
					restrict: 'AE',
					replace: true,
					templateUrl: 'partials/feedback.html',
					scope: {
						/**
						 *
						 * @memberof feedback
						 * @member {Object} details
						 */
						data: '='
					},
					controller: [
						'$scope',
						'$rootScope',
						'$timeout',
						'adobeService',
						'quickAlertService',
						function($scope, $rootScope, $timeout, adobeService, quickAlertService) {
							$scope.loc = $rootScope.loc;
							$scope.gotoView = $rootScope.gotoView;
							$scope.device = $rootScope.device;

							$scope.setExperience = function( value ) {
								$scope.data.experience = value;
							};

							var setFeedback = function() {
								for(var i=0; i<$scope.data.questions.length; i++){
									var question = $('[data-question="'+i+'"]');
									var topic = question.find('select option:selected').text();
									var topicValue = question.find('select').val();
									var comment = question.find('textarea').val();
									$scope.data.questions[i].chosenTopic = topic;
									$scope.data.questions[i].chosenTopicValue = topicValue;
									$scope.data.questions[i].chosenComment = comment;
								}
							};

							var setEmailBody = function() {
								var body = 'Experience = ' + $scope.data.experience;
								for(var i=0; i<$scope.data.questions.length; i++){
									body += ', Topic: ' + $scope.data.questions[i].chosenTopic;
									body += ', Topic Value: ' + $scope.data.questions[i].chosenTopicValue;
									body += ', Comment: ' + $scope.data.questions[i].chosenComment;
								}
								$scope.data.body = body;
							};

							var showThankYou = function() {
								$('.feedback-form').hide();
								$('.feedback-thankyou').show();
							};

							$scope.submitFeedback = function(isValid) {
								setFeedback();

								if( isValid ){
									setEmailBody();

									var email ={};
									//email.to = $scope.data.email;
									email.from = $scope.data.yourEmailAddress;
									email.subject = $scope.data.subject;
									email.text = $scope.data.body;

									//hand off the email to message service for delivery
									messageService.composeEmail(angular.copy(email)).then(function(result) {
										$rootScope.messageSending = false;
									}, function(error, status) {
										$rootScope.$emit('pageLoaded');
										$rootScope.messageSending = false;

										quickAlertService.showQuickAlert({
											message: $rootScope.loc.SEND_ERROR,
											color: 'red',
											alertBottom: true
										});
										$timeout(function() {
											angular.element('.quick-alert-modal').hide();
										}, 2000);
									});
									//show thank you page after email sent to service
									showThankYou();
								}
							};

							$scope.formDone = function() {
								setTimeout(function(){
									$('#navbar-left-click').trigger('click');
								}, 300);
							};
						}
					]
				};
			}
		]);
}());

/**
 * Directive for find doctor filter
 *
 * @namespace Directives
 * @class filterDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.filterDetails', [

  ])
  .directive('filterDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/filter-details.html',
        scope: {
          findDoctorFilterDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'TransparencyFactory',
          'geoLocationService',
          '$timeout',
          'helpService',
          'languageService',
          function($scope, $rootScope, TransparencyFactory, geoLocationService, $timeout, helpService, languageService) {
            $scope.language = $rootScope.language || 'en';
            languageService.getLocale($scope.language).then(function(localeReturned) {
              $scope.loc = localeReturned;
            }).catch(console.warn);

            if ($rootScope.loggedIn) {
              $rootScope.showPolicySelect = false;
            }

            $scope.loc = $rootScope.loc;
            $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();

            $scope.currentLocationActive = (($rootScope.city.cityFullName === 'Current Location') || ($scope.findDoctorFilterDetails.filterCityName === 'Current Location')) ? true : false;
            $scope.selectedPlan = TransparencyFactory.getSelectedPlan(); // plan details the user has selected
            $scope.selectedBrowse = TransparencyFactory.getResultsTerm(); // browse icon the user has selected in find-doctor-search page
            // set initial filter value to TransparencyFactory
            $scope.specialtyIndex = $scope.findDoctorFilterDetails.listdetails.specialistDetails.defaultOptionIndex;
            $scope.initialSpecialty = $scope.findDoctorFilterDetails.listdetails.specialistDetails.values[$scope.specialtyIndex];
            TransparencyFactory.setFilterSpecialtySelectedTerm($scope.initialSpecialty.value !== -1 ? $scope.initialSpecialty.value : '');
            $scope.tierIndex = ($scope.findDoctorFilterDetails.listdetails.tierDetails) ? $scope.findDoctorFilterDetails.listdetails.tierDetails.defaultOptionIndex : null;
            $scope.initialTier = ($scope.findDoctorFilterDetails.listdetails.tierDetails) ? $scope.findDoctorFilterDetails.listdetails.tierDetails.values[$scope.tierIndex] : null;
            TransparencyFactory.setFilterTierSelectedTerm(($scope.initialTier && $scope.initialTier.value !== -1) ? {type: $scope.initialTier.type, value: $scope.initialTier.value} : {type: '', value: ''});
            $scope.genderIndex = $scope.findDoctorFilterDetails.listdetails.gender.defaultOptionIndex;
            $scope.initialGender = $scope.findDoctorFilterDetails.listdetails.gender.values[$scope.genderIndex];
            TransparencyFactory.setFilterGenderSelectedTerm($scope.initialGender.value !== -1 ? $scope.initialGender.value : '');
            TransparencyFactory.setSearchSpecialtyId($scope.findDoctorFilterDetails.filter_specialty_id);
            TransparencyFactory.setLocationMsg($scope.findDoctorFilterDetails.locationMsg);
            $scope.locationBlocked = TransparencyFactory.getLocationBlocked();
            $scope.locationMsg = TransparencyFactory.getLocationMsg();
            $scope.selectedSmartShopperFilter = ($scope.findDoctorFilterDetails.smartShopperFlow === 'true') ? TransparencyFactory.getSmartShopperFilter() : TransparencyFactory.setSmartShopperFilter(false);

            $scope.displayDistance = $rootScope.currentRadius ? $rootScope.currentRadius : TransparencyFactory.getDistance();
            $scope.isZipDirty = false;
            $scope.isZipValid = true;

            $scope.smartShopperToggleCheckBox = function () {
              $scope.selectedSmartShopperFilter = !$scope.selectedSmartShopperFilter;
            };


            $scope.$watch('data.city.cityFullName', function(newVal, oldVal) {
              if (newVal !== oldVal) {
                $scope.isZipDirty = true;
              }
            });

            $scope.data = {
              displayDistance: null,
              city: {
                cityFullName: ''
              }
            };

            $scope.$on('validate input', function() {
              $timeout(function () {
                $scope.validateCityInput();
              });
            });

            $scope.detectClickElement = function (event) {
              if (event.target.id !== 'city-input' && $scope.isZipDirty) {
                $('#_cities').addClass("hidden");
                $scope.validateCityInput();
              }
            };

            $scope.showGlossaryTerms = function(itemName) {
              $scope.fileName = 'partials/glossary-of-terms';
              $rootScope.headerTerm = $scope.findDoctorFilterDetails.glossaryHeader;
              if (itemName === $scope.loc.SPECIALITY) {
                helpService.showHelp($scope.fileName, $scope.findDoctorFilterDetails.specialtyTerms);
              } else if (itemName === $scope.loc.TIER_DESIGNATION) {
                helpService.showHelp($scope.fileName, $scope.findDoctorFilterDetails.tierTerms);
              } else if (itemName === $scope.loc.GENDER) {
                helpService.showHelp($scope.fileName, $scope.findDoctorFilterDetails.genderTerms);
              }
            };

            if ($scope.findDoctorFilterDetails.distanceDetails.defaultDistance && $scope.findDoctorFilterDetails.distanceDetails.cityFullName) {
               $scope.data.city.cityFullName = $scope.currentLocationActive === true ? $scope.findDoctorFilterDetails.distanceDetails.currentLocation : ($scope.findDoctorFilterDetails.filterCityName ? $scope.findDoctorFilterDetails.filterCityName : ((TransparencyFactory.getCity().cityFullName) ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorFilterDetails.distanceDetails.cityFullName));
            } else {
              $scope.data.city.cityFullName = $scope.filterCityName ? $scope.filterCityName : ((TransparencyFactory.getCity().cityFullName) ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorFilterDetails.distanceDetails.cityFullName);
            }

            $scope.data.city = ($scope.currentLocationActive) ?
              $rootScope.currentCity : $scope.findDoctorFilterDetails.filterCityName ?
              {
                cityFullName: $scope.findDoctorFilterDetails.filterCityName
              }
              : $rootScope.searchAreaNearestCity ?
              $rootScope.searchAreaNearestCity
              : TransparencyFactory.getCity();
            
            $scope.data.city = ($rootScope.city) ? $rootScope.city : $scope.data.city;

            $scope.data.displayDistance = $scope.findDoctorFilterDetails.filterDistance ? $scope.findDoctorFilterDetails.filterDistance.toString() : (($scope.displayDistance) ? $scope.displayDistance.toString() : $scope.findDoctorFilterDetails.distanceDetails.defaultDistance);

            /**
             * Validate city
             *
             * @memberof filterDetails
             * @method validateCityInput
             */
            $scope.validateCityInput = function () {
              if (!$scope.currentLocationActive) {
                const resp = TransparencyFactory.validateCity($scope.data.city);
                if (resp.status) {
                  TransparencyFactory.setFilterCityName($scope.data.city.cityFullName);
                }
                $scope.isZipValid = resp.status;
                $scope.errorText = resp.message;
              }
            };

            /**
             * Toggle Current location
             *
             * @memberof filterDetails
             * @method toggleCurrentLocation
             */
            $scope.toggleCurrentLocation = function () {
              $scope.currentLocationActive = !$scope.currentLocationActive;
              $rootScope.toggleOnOff = $scope.currentLocationActive;
              $rootScope.toggleIcon = $scope.currentLocationActive;
              if ($scope.currentLocation && $scope.currentLocationActive){
                $scope.data.city = $rootScope.currentCity;
                $scope.isZipDirty = false;
                $scope.isZipValid = true;
                $scope.errorText = '';
                $scope.validateCityInput();
                if ($scope.isZipValid) {
                  TransparencyFactory.setCity($scope.data.city);
                }
              } else if (!$scope.currentLocation && $scope.currentLocationActive) {
                if (navigator.geolocation) {
                  $timeout( function(){
                    $rootScope.enableLocation = true;
                  }, 300 );
                  $rootScope.$emit('pageLoading');
                  geoLocationService.getLocation().then(function(response){
                    $rootScope.$emit('pageLoaded');
                    if (response.data && response.data.zip) {
                      $scope.data.city = response.data;
                      $scope.isZipValid = true;
                      $scope.isZipDirty = false;
                      $scope.errorText = '';
                      TransparencyFactory.setGeoLocationStatus(true);
                      TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                      TransparencyFactory.setLocationBlocked(false);
                      $rootScope.vitalsGeoCoords = response.data.geo;
                      $scope.data.city.cityFullName = $scope.findDoctorFilterDetails.distanceDetails.currentLocation;
                      $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();
                      $scope.validateCityInput();
                        if ($scope.isZipValid) {
                          $rootScope.city = $scope.data.city;
                          $rootScope.currentCity = $rootScope.city;
                          TransparencyFactory.setCity($scope.data.city);
                        }
                      } else {
                        $scope.currentLocationFailed();
                      }
                  })
                  .catch(function (error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.currentLocationFailed();
                  });
                } else {
                  $rootScope.$emit('pageLoaded');
                  TransparencyFactory.setLocationBlocked(true);
                  $scope.currentLocationFailed();
                }
              } else {
                $scope.data.city = {cityFullName: ''};
              }
            };

            /**
            * if finding current location fails
            *
            * @memberof filterDetails
            * @method currentLocationFailed
            */

            $scope.currentLocationFailed = function() {
              $scope.isZipDirty = true;
              $scope.isZipValid = false;
              $scope.currentLocationActive = false;
              $scope.errorText = $rootScope.loc.ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE;
              $scope.data.city = {cityFullName: ''};
            };

            $scope.saveDistance = function() {
              TransparencyFactory.setFilterDistance($scope.data.displayDistance);
            };

            $scope.selectedFilterValue = function(selectedItem, item) {
              if (item.name === $scope.loc.TIER_DESIGNATION) {
                TransparencyFactory.setFilterTierSelectedTerm(selectedItem.value !== -1 ? {type: selectedItem.type, value: selectedItem.value} : {type: '', value: ''});
              } else if (item.name === $scope.loc.SPECIALITY) {
                TransparencyFactory.setFilterSpecialtySelectedTerm(selectedItem.value !== -1 ? selectedItem.value : '');
              } else if (item.name === $scope.loc.GENDER) {
                TransparencyFactory.setFilterGenderSelectedTerm(selectedItem.value !== -1 ? selectedItem.value : '');
              }
            };

            // Enable Zip Code input and turn of current location
            $scope.enableInputZipCode = function() {
              if ($scope.currentLocationActive === true) {
                  $scope.data.city = {cityFullName: ''};
                  $scope.currentLocationActive = false;
                  $scope.isZipValid = false;
                  $rootScope.toggleIcon = false;
              }
            };

            $scope.filterResults = function() {
              if (!$scope.isZipValid) {
                return;
              }

              //smart shopper check box selected set as true
              TransparencyFactory.setSmartShopperFilter($scope.selectedSmartShopperFilter);

              // not map search && data.city is updated
              if (!$scope.findDoctorFilterDetails.latlon && $scope.data.city.zip) {
                $rootScope.city = $scope.data.city;
                TransparencyFactory.setCity($scope.data.city);
              }

              var zipCode = $scope.data.city.cityFullName === $scope.findDoctorFilterDetails.distanceDetails.currentLocation ? $rootScope.currentCity.zip : $scope.data.city.zip ? $scope.data.city.zip : $scope.findDoctorFilterDetails.filterZipCode;

              $scope.filtersData = {
                tierData: {
                  type: TransparencyFactory.getFilterTierSelectedTerm().type || '',
                  value: TransparencyFactory.getFilterTierSelectedTerm().value || ''
                },
                specialty: TransparencyFactory.getFilterSpecialtySelectedTerm() || '',
                gender: TransparencyFactory.getFilterGenderSelectedTerm() || '',
                smartShopperRewardsFilter: TransparencyFactory.getSmartShopperFilter() || ''
              };

              TransparencyFactory.setFiltersData($scope.filtersData);
              $rootScope.filtersDataArr.unshift(TransparencyFactory.getFiltersData());

              $rootScope.currentRadius = $scope.data.displayDistance;
              var latlon = $scope.isZipDirty ? '' : typeof $scope.findDoctorFilterDetails.latlon === 'string' ? $scope.findDoctorFilterDetails.latlon.replace(/,/g, '%2C') : '';

              var cityFullName = $scope.data.city.cityFullName;

              if (TransparencyFactory.getSearchSpecialtyId()) {
                $rootScope.gotoView('/find-doctor-search-results?distance=' + $scope.data.displayDistance + '&latlon=' + latlon + '&cityFullName=' + cityFullName + '&zipCode=' + zipCode + '&searchTerm='+ $scope.selectedBrowse + '&planName='+ $scope.selectedPlan.name + '&network_id=' + $scope.selectedPlan.id + '&filters=' + true + '&id=' + TransparencyFactory.getSearchSpecialtyId() + '&smartShopperFlow=' + $scope.findDoctorFilterDetails.smartShopperFlow + '&isPcpFlow=' + $scope.findDoctorFilterDetails.isPcpFlow);
              } else {
                $rootScope.gotoView('/find-doctor-search-results?distance=' + $scope.data.displayDistance + '&latlon=' + latlon + '&cityFullName=' + cityFullName + '&zipCode=' + zipCode + '&name=' + $scope.selectedBrowse + '&network_id=' + $scope.selectedPlan.id + '&filters=' + true + '&planName=' + $scope.selectedPlan.name + '&smartShopperFlow=' + $scope.findDoctorFilterDetails.smartShopperFlow + '&isPcpFlow=' + $scope.findDoctorFilterDetails.isPcpFlow);
              }
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the findCare.
 *
 * @namespace Directives
 * @class findCare
 */
(function () {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.findCare', [])
        .directive('findCare', ['$http', 'config',
          function ($http, config) {
            return {
              restrict: 'E',
              replace: true,
              templateUrl: 'partials/find-care.html',
              scope: {
                findCareDetails: '=',
                plans: '=',
              },
              controller: [
                '$scope',
                '$rootScope',
                '$location',
                '$http',
                '$anchorScroll',
                'languageService',
                'TransparencyFactory',
                'config',
                'geoLocationService',
                '$timeout',
                function ($scope, $rootScope, $location, $http, $anchorScroll, languageService, TransparencyFactory, config, geoLocationService, $timeout) {
                  $scope.language = $rootScope.language || 'en';
                  languageService.getLocale($scope.language).then(function(localeReturned) {
                    $scope.loc = localeReturned;
                  }).catch(console.warn);

                  $scope.gotoPlanSearchDetails = function(plan) {
                    $rootScope.selectedPlan = plan;
                    TransparencyFactory.setSelectedPlan(plan);
                    $rootScope.selectedUnauthenticatedPlanName = plan.name;
                    $rootScope.gotoView('/find-doctor-search');
                  };
                }
              ]
            };
          }
        ]);
  }());
  
/**
 * Directive for the find a doctor authenticated navbar.
 *
 * @namespace Directives
 * @class navbar
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.directives.findDoctorAuthenticatedNavbar', [])
    .directive('findDoctorAuthenticatedNavbar', ['$http', 'config',
      function($http, config) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-authenticated-navbar.html',
          scope: {
            /**
            * Information for drawing the navbar.
            *
            * @memberof navbar
            * @member {Object} navbarDetails
            */
            navbarDetails: '=',
            findDoctorSearchDetails: '=',
            geoLocationDetails: '=',
            urgentCareDetails: '='
          },
          controller: [
            '$location',
            '$scope',
            '$http',
            '$rootScope',
            'languageService',
            'config',
            'TransparencyFactory',
            'geoLocationService',
            '$timeout',
            '$anchorScroll',
            'livechatService',
            function($location, $scope, $http, $rootScope, languageService, config, TransparencyFactory, geoLocationService, $timeout, $anchorScroll, livechatService) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.language = $rootScope.language || 'en';

              $scope.chatButtons = livechatService.getChatButtons();
              $scope.livechat = $rootScope.livechat;
            /*live chat functions*/

              $scope.liveChatUpdate = function() {

                $timeout(function(){

                  var chatAvailableBtns = document.getElementById("navbar-live-chat-available");
                  var chatNotAvailableBtns = document.getElementById("navbar-live-chat-not-available");
                    if ($rootScope.livechat && chatAvailableBtns && chatNotAvailableBtns) {
                      if (!$scope.livechat.value){
                        chatAvailableBtns.style.display='none';
                        chatNotAvailableBtns.style.display = '';
                      } else {
                        chatNotAvailableBtns.style.display = 'none';
                        chatAvailableBtns.style.display='';
                    }
                  }
                });
              };
              $scope.liveChatUpdate();

              $scope.startChat = function (buttonToken) {
                livechatService.openChat(buttonToken);
              };
              $scope.liveChatAlert = function () {
                livechatService.alert();
              };

              languageService.getLocale($scope.language).then(function(localeReturned) {
                $scope.loc = localeReturned;
              }).catch(console.warn);

              $scope.loggedIn = $rootScope.loggedIn;
              $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
              $scope.loc = $rootScope.loc;
              $scope.typeaheadInProgress = false;
              $scope.queryHasFocus = false;
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $scope.filterText = $scope.navbarDetails.searchTerm;

              $scope.clearQueryAndTypeaheadResults = function() {
                this.filterText = '';
                $scope.typeaheadResults = null;
                $scope.typeaheadError = false;
                $scope.showCommonSearch=true;
                $scope.highlightTextSpecialists=false;
                $scope.highlightTextProcedures=false;
                $scope.queryHasFocus = true;
                $scope.expandProceduresDiv = false;
                $scope.expandSpecialtiesDiv = false;
                angular.element('.input-search').focus();
              };

              if ($scope.navbarDetails){
                $scope.navbarDetails.searchTerm = TransparencyFactory.getSearchTerm();
              }

              $scope.anyCommonTerms = function() {
                return $scope.navbarDetails.commonSearchTerms? $scope.navbarDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToCommonDetails = function(commonTerm){
                $rootScope.openMapView = false;
                TransparencyFactory.setResultsTerm(commonTerm.commonSearchTerm);
                $rootScope.gotoView(commonTerm.browsePath);
              };

              /**
               * Returns whether or not to hide the right icon on the navigation.
               *
               * @memberof navbar
               * @method rightNavIconHidden
               * @return {Boolean} Whether or not the icon should be hidden.
               */
              $scope.rightNavIconHidden = function rightNavIconHidden() {
                return $rootScope.hideRightNavIcon;
              };

              /**
               * Returns whether the left nav button matches the provided type.
               *
               * @memberof navbar
               * @method leftNavButtonIs
               * @param  {String}  The button type to check for.
               * @return {Boolean} The left nav button matches the type.
               */
              $scope.leftNavButtonIs = function(type) {
                return $rootScope.leftNavButton === type;
              };
              /**
               * Toggles the menu drawer.
               *
               * @memberof navbar
               * @method toggleMenuOpen
               */
              $scope.toggleMenuOpen = function() {
                /**
                * Whether the menu is open.
                *
                * @memberof navbar
                * @member {Boolean} menuOpen
                */
               $scope.chatAvailableBtns = document.getElementById("navbar-live-chat-available");
               $scope.chatNotAvailableBtns = document.getElementById("navbar-live-chat-not-available");
               if ($rootScope.livechat && $scope.chatAvailableBtns && $scope.chatNotAvailableBtns) {
                 if (!$rootScope.livechat.value){
                   $scope.chatAvailableBtns.style.display='none';
                   $scope.chatNotAvailableBtns.style.display = '';
                 } else {
                   $scope.chatNotAvailableBtns.style.display = 'none';
                   $scope.chatAvailableBtns.style.display='';
                 }
               }
                $scope.menuOpen = !$scope.menuOpen;

              };
              /**
               * Takes a member to a view.
               *
               * @memberof navbar
               * @method gotoView
               */
              $scope.gotoView = function(view, i) {
                if (view === '/chatnow') {
                  var chatId = $scope.navbarDetails.menuItemsList.menuItems[i].index;
                  $scope.startChat($scope.chatButtons[chatId].token);
                } else if (view === '/chatalert') {
                  $scope.liveChatAlert();
                } else {
                  $rootScope.gotoView(view);
                }
              };



              $scope.gotoNavigatedPage = function(url, searchTerm) {
                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm);
               } else {
                 if (navigator.geolocation) {
                   $rootScope.$emit('pageLoading');
                   $timeout(function(){
                     $rootScope.enableLocation = true;
                   }, 0)
                     .then(function(val) {
                       return geoLocationService.getLocation();
                     })
                     .then(function(response) {
                       $rootScope.$emit('pageLoaded');
                       if (response.data && response.data.zip) {
                         $rootScope.city = response.data;
                         $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                         $rootScope.currentCity = $rootScope.city;
                         $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                         TransparencyFactory.setDistance($rootScope.distance);
                         TransparencyFactory.setCity($rootScope.city);
                         TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                         TransparencyFactory.setGeoLocationStatus(true);
                         TransparencyFactory.setLocationBlocked(false);
                         $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                         if($rootScope.noMatchPlanFound){
                          $rootScope.gotoView('/find-care');
                        } else {
                          $scope.gotoBrowseLevelPage(url, searchTerm);
                        }
                       } else if (response === 'position not found') {
                         TransparencyFactory.setLocationBlocked(true);
                         TransparencyFactory.setGeoLocationStatus(false);
                         TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                         $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                         $scope.openModal();
                       } else {
                         TransparencyFactory.setLocationBlocked(false);
                         TransparencyFactory.setGeoLocationStatus(false);
                         $rootScope.$emit('pageLoaded');
                         $scope.modalObj.values.locationNotFound = true;
                         $scope.openModal();
                       }
                     })
                     .catch(function(error) {
                       TransparencyFactory.setLocationBlocked(false);
                       $rootScope.$emit('pageLoaded');
                       $scope.modalObj.values.locationNotFound = true;
                       $scope.openModal();
                     });
                 } else {
                   $rootScope.$emit('pageLoaded');
                   TransparencyFactory.setLocationBlocked(true);
                   TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                   $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                   $scope.openModal();
                 }
               }
              };

              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm) {
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?id=' + $scope.urgentCareDetails[0].id + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + TransparencyFactory.getDistance() + '&searchTerm='+ searchTerm );
                } else {
                  TransparencyFactory.setSearchTerm(searchTerm);
                  $rootScope.gotoView(url + '?searchTerm='+ searchTerm + '&planName='+ $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
                }
              }; // end of gotoBrowseLevelPage function


             $scope.confirmFunc = function(data) {
               $rootScope.city = data.city;
               $rootScope.distance = data.distance;
               TransparencyFactory.setDistance($rootScope.distance);
               TransparencyFactory.setCity($rootScope.city);
               TransparencyFactory.setGeoLocationStatus(false);
               if ($rootScope.noMatchPlanFound){
                $rootScope.gotoView('/find-care');
              } else {
                $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
              }
             };

             $scope.modalObj = {
               locationMsg: $scope.geoLocationDetails.locationMsg,
               cancelButton: {
                 title: $scope.loc.CANCEL
               },
               confirmButton: {
                 title: $scope.loc.CONTINUE
               },
               values: {
                 distanceDetails: $scope.geoLocationDetails.distanceDetails,
                 distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                 city: TransparencyFactory.getCity()
               }
             };

              // If the inbox menu item is present, start the unread count update
              for(var i = 0; i < $scope.navbarDetails.menuItemsList.length; i++) {
                if($scope.navbarDetails.menuItemsList[i].link === '/inbox') {
                  $timeout($scope.getUnreadMessageCount, 120 * 1000);
                }
              }

              /**
               * Focuses on the search input.
               *
               * @memberof navbar
               * @method focusOnSearchInput
               */
              $scope.focusOnSearchInput = function() {
                angular.element('.input-search').focus();
              };

              $scope.toggleQueryHasFocus = function(booleanVal) {
                $scope.queryHasFocus = booleanVal;
                $scope.expandCommonDiv = false;
                $scope.expandSpecialtiesDiv = false;
                $scope.expandProceduresDiv = false;
              };

              // Type Ahead Functionality
              $scope.displayFlyout = function(query) {
                // reset scroll to top and highlight to false
                angular.element(".nav-bar-search-results-container")[0].scrollTop=0;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                if (!query) {
                  $scope.showTypeAhead = false;
                  $scope.showCommonSearch = true;
                  $scope.typeaheadError = false;
                  $scope.queryHasFocus = true;
                  return;
                }
                $scope.filterText = query;

                $scope.typeaheadInProgress = true;
                $scope.showTypeAhead = true;
                $scope.showCommonSearch = false;
                var endPoint = ($scope.loggedIn && !$rootScope.noMatchPlanFound) ? 'procedures?locale=en_us&search_term=' : '?locale=en_us&search_term=';
                endPoint = endPoint + query + '&member_number=' + $scope.selectedPlan.alphaPrefix + $scope.selectedPlan.externalId + '&network_id=' + $scope.selectedPlan.id +
                  (
                    $scope.selectedPlan.policyMembers ?
                      '&dob=' + $scope.selectedPlan.policyMembers[0].birthDate.slice(0, 10):
                      ''
                  );
                if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
                  $http.post(
                    config.typeaheadUrl + endPoint,
                    {
                      jwt: $rootScope.vitalsJWT,
                      signature: $rootScope.vitalsSignature,
                      geo_location: ($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip
                    }
                  ).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, {searchTerm: query});
                    }
                  })
                    .catch(function(error) {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                    });
                } else {
                  $http.get(config.typeaheadUrl + endPoint).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, {searchTerm: query});
                    }
                  })
                    .catch(function(error) {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                      $scope.typeaheadResults = null;
                      $scope.typeaheadError = true;
                    });
                }
              };

              $scope.expandCommonTerms = function() {
                $scope.expandCommonDiv = !$scope.expandCommonDiv;
              };

              $scope.expandSpecialties = function() {
                $scope.expandSpecialtiesDiv = !$scope.expandSpecialtiesDiv;
              };

              $scope.expandProcedures = function() {
                $scope.expandProceduresDiv = !$scope.expandProceduresDiv;
              };

              $scope.moreCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 3: false;
              };

              $scope.anyCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToDetails = function(result){
                if (result.id && !result.provider_id){
                  TransparencyFactory.setResultsTerm(result.name);
                  $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + result.name + '&id=' + result.id + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }else{
                  var searchTerm =  result.provider_id ? result.name : result;
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + searchTerm + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              $scope.launchRefineSearch = function(query){
                if ($scope.typeaheadResults && !$scope.typeaheadInProgress && !$scope.typeaheadError && query
                    && ($scope.typeaheadResults._meta.counts.total.providers!==0
                    || $scope.typeaheadResults._meta.counts.total.search_specialties!==0
                    || $scope.typeaheadResults._meta.counts.total.procedures!==0)){
                  $scope.modalObj.peoplePlacesLength = $scope.typeaheadResults.providers.length;
                  $scope.modalObj.specialistsWhoLength = $scope.typeaheadResults.search_specialties.length;
                  $scope.modalObj.providersPerformLength = $scope.typeaheadResults.procedures.length;
                  TransparencyFactory.setSearchTerm(query);
                  TransparencyFactory.setResultsTerm(query);
                  $scope.openModal(query);
                }
              };

              $scope.refineSearchClick = function(event, query){
                if(event.key === 'Enter'){
                  $scope.launchRefineSearch(query);
                }
              };

              $scope.confirmModal  = function(data, userAction) {
                if (userAction === 'specialistsWho') {
                  $scope.highlightTextSpecialists = true;
                  $scope.highlightTextProcedures = false;
                  $anchorScroll('search_specialties');
                } else if (userAction === 'providersPerform') {
                  $scope.highlightTextProcedures = true;
                  $scope.highlightTextSpecialists = false;
                  $anchorScroll('procedures');
                } else {
                  $rootScope.gotoView('/find-doctor-search-results?name=' + TransparencyFactory.getSearchTerm() + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };
              $scope.modalObj = {
                modalTitle: $scope.findDoctorSearchDetails.modalTitle,
                modalText: $scope.findDoctorSearchDetails.modalText,
                peoplePlacesButton: {
                  title: $scope.findDoctorSearchDetails.peoplePlacesButtonTitle
                },
                specialistButton: {
                  title: $scope.findDoctorSearchDetails.specialistButtonTitle
                },
                procedureButton: {
                  title: $scope.findDoctorSearchDetails.procedureButtonTitle
                },
                values: {
                },
                peoplePlacesLength: null,
                specialistsWhoLength: null,
                providersPerformLength: null
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the findDoctorBrowser.
 *
 * @namespace Directives
 * @class findDoctorBrowser
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.findDoctorBrowser', [])
        .directive('findDoctorBrowser', [
          function () {
            return {
              restrict: 'E',
              replace: true,
              templateUrl: 'partials/find-doctor-browser.html',
              scope: {
                findDoctorBrowserDetails: '=',
                smartShopperFlow: '='
              },
              controller: [
                '$scope',
                '$rootScope',
                '$location',
                'TransparencyFactory',
                function ($scope, $rootScope, $location, TransparencyFactory) {
                  $scope.loc = $rootScope.loc;
                  $scope.gotoView = $rootScope.gotoView;
                  $rootScope.openMapView = false; //this is for result page
                  $scope.distance = TransparencyFactory.getDistance();
                  $scope.selectedPlan = TransparencyFactory.getSelectedPlan(); // plan details the user has selected
                  $scope.selectedBrowse = TransparencyFactory.getSearchTerm(); // browse icon the user has selected in find-doctor-search page

                  $scope.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $scope.selectedPlan.lobDesc : $scope.selectedPlan.name;
                  /**
                   * Based on the user selection in browse level one page go to browse level 2 page
                   *
                   * @memberof findDoctorBrowser
                   * @method gotoBrowseNextLevelPage
                   */

                  $scope.gotoBrowseNextLevelPage = function(selectedTerm) {
                    $scope.pcpFlow = (selectedTerm.id == '260005172' || selectedTerm.id == '260005173') ? 'true' : '';
                    selectedTerm = selectedTerm || {};
                    $rootScope.healthNavTrackActions(4, {searchTerm: selectedTerm.name});
                    if (selectedTerm.id) { // if the selection in the browse level one have id go to reults page
                      TransparencyFactory.setSearchSpecialtyId(selectedTerm.id);
                      TransparencyFactory.setResultsTerm(selectedTerm.name);
                      $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + (selectedTerm.name || $scope.selectedBrowse) + '&planName=' + $scope.planName + '&network_id=' + $scope.selectedPlan.id + '&id=' + TransparencyFactory.getSearchSpecialtyId() + '&isPcpFlow=' + $scope.pcpFlow + '&smartShopperFlow=' + $scope.smartShopperFlow);
                    } else {
                      if (selectedTerm.browseLevel == '2') {
                         TransparencyFactory.setBrowseLevelTwoTerm(selectedTerm.name);
                       } else {
                         TransparencyFactory.setBrowseTerm(selectedTerm.name);
                       }
                      $rootScope.gotoView('/find-doctor-browser?searchTerm='+ $scope.selectedBrowse + '&planName='+ $scope.planName + '&planId=' + $scope.selectedPlan.id+'&browseTerm=true&browseLevel=' + selectedTerm.browseLevel + '&smartShopperFlow=' + $scope.smartShopperFlow);
                    }
                  };
                }
              ]
            };
          }
        ]);
  }());

/**
 * Directive for the find a doctor navbar.
 *
 * @namespace Directives
 * @class navbar
 */
(function() {
    'use strict';

    angular.module('blueconnect.mobile.directives.findDoctorNavbar', [])
    .directive('findDoctorNavbar', ['$http', 'config',
      function($http, config) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-navbar.html',
          scope: {
            /**
            * Information for drawing the navbar.
            *
            * @memberof navbar
            * @member {Object} navbarDetails
            */
            navbarDetails: '=',
            findDoctorSearchDetails: '=',
          },
          controller: [
            '$location',
            '$scope',
            '$http',
            '$rootScope', 'languageService', 'config', 'TransparencyFactory', '$anchorScroll',
            function($location, $scope, $http, $rootScope, languageService, config, TransparencyFactory, $anchorScroll) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.language = $rootScope.language || 'en';
              languageService.getLocale($scope.language).then(function(localeReturned) {
                $scope.loc = localeReturned;
              }).catch(console.warn);

              $scope.loggedIn = $rootScope.loggedIn;
              $scope.loc = $rootScope.loc;
              $scope.typeaheadInProgress = false;
              $scope.queryHasFocus = false;
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $scope.filterText = $scope.navbarDetails.searchTerm;

              $scope.clearQueryAndTypeaheadResults = function() {
                this.filterText = '';
                $scope.typeaheadResults = null;
                $scope.typeaheadError = false;
                $scope.showCommonSearch=true;
                $scope.highlightTextSpecialists=false;
                $scope.queryHasFocus = true;
                angular.element('.input-search').focus();
              };

              if ($scope.navbarDetails){
                $scope.navbarDetails.searchTerm = TransparencyFactory.getSearchTerm();
              }

              $scope.anyCommonTerms = function() {
                return $scope.navbarDetails.commonSearchTerms? $scope.navbarDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToCommonDetails = function(commonTerm){
                $rootScope.openMapView = false;
                TransparencyFactory.setResultsTerm(commonTerm.commonSearchTerm);
                $rootScope.gotoView(commonTerm.browsePath);
              };

              /**
               * Returns whether or not to hide the right icon on the navigation.
               *
               * @memberof navbar
               * @method rightNavIconHidden
               * @return {Boolean} Whether or not the icon should be hidden.
               */
              $scope.rightNavIconHidden = function rightNavIconHidden() {
                return $rootScope.hideRightNavIcon;
              };

              /**
               * Returns whether the left nav button matches the provided type.
               *
               * @memberof navbar
               * @method leftNavButtonIs
               * @param  {String}  The button type to check for.
               * @return {Boolean} The left nav button matches the type.
               */
              $scope.leftNavButtonIs = function(type) {
                return $rootScope.leftNavButton === type;
              };
              /**
               * Toggles the menu drawer.
               *
               * @memberof navbar
               * @method toggleMenuOpen
               */
              $scope.toggleMenuOpen = function() {
                /**
                * Whether the menu is open.
                *
                * @memberof navbar
                * @member {Boolean} menuOpen
                */
                $scope.menuOpen = !$scope.menuOpen;

              };
              /**
               * Takes a member to a view.
               *
               * @memberof navbar
               * @method gotoView
               */
              $scope.gotoView = function(view) {
                $rootScope.gotoView(view);
              };

              // If the inbox menu item is present, start the unread count update
              for(var i = 0; i < $scope.navbarDetails.menuItems.length; i++) {
                if($scope.navbarDetails.menuItems[i].link === '/inbox') {
                  $timeout($scope.getUnreadMessageCount, 120 * 1000);
                }
              }

              /**
               * Focuses on the search input.
               *
               * @memberof navbar
               * @method focusOnSearchInput
               */
              $scope.focusOnSearchInput = function() {
                angular.element('.input-search').focus();
              };

              $scope.toggleQueryHasFocus = function(booleanVal) {
                $scope.queryHasFocus = booleanVal;
                $scope.expandCommonDiv = false;
                $scope.expandSpecialtiesDiv = false;
              };

              // Type Ahead Functionality
              $scope.displayFlyout = function(query) {
                // reset scroll to top and highlight to false
                angular.element(".nav-bar-search-results-container")[0].scrollTop=0;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                if (!query) {
                  return;
                }
                $scope.filterText = query;

                $scope.typeaheadInProgress = true;
                $http.get(config.typeaheadUrl + '?locale=en_us&search_term=' + query + '&network_id=' + $scope.selectedPlan.id + '&geo_location=' + (($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip)).then(function(result) {
                  $scope.typeaheadError = false;
                  $scope.typeaheadInProgress = false;
                  $scope.typeaheadResults = result.data;
                  if (result.data &&
                    !result.data.procedures.length &&
                    !result.data.providers.length &&
                    !result.data.search_specialties.length) {
                    $rootScope.healthNavTrackStates(3, {searchTerm: query});
                  }
                })
                .catch(function(error) {
                  $scope.typeaheadInProgress = false;
                  $scope.typeaheadResults = null;
                  $scope.typeaheadError = true;
                });
              };

              $scope.expandCommonTerms = function() {
                $scope.expandCommonDiv = !$scope.expandCommonDiv;
              };

              $scope.expandSpecialties = function() {
                $scope.expandSpecialtiesDiv = !$scope.expandSpecialtiesDiv;
              };

              $scope.moreCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 3: false;
              };

              $scope.anyCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 0: false;
              };

              $scope.goToDetails = function(result){
                if (result.id && !result.provider_id){
                  TransparencyFactory.setResultsTerm(result.name);
                  $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + result.name + '&id=' + result.id + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }else{
                  var searchTerm =  result.provider_id ? result.name : result;
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + searchTerm + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              $scope.launchRefineSearch = function(query){
                if (!$scope.typeaheadInProgress && !$scope.typeaheadError && query
                    && ($scope.typeaheadResults._meta.counts.total.providers!==0
                    || $scope.typeaheadResults._meta.counts.total.search_specialties!==0)){
                  $scope.modalObj.peoplePlacesLength = $scope.typeaheadResults.providers.length;
                  $scope.modalObj.specialistsWhoLength = $scope.typeaheadResults.search_specialties.length;
                  TransparencyFactory.setSearchTerm(query);
                  TransparencyFactory.setResultsTerm(query);
                  $scope.openModal(query);
                }
              };

              $scope.refineSearchClick = function(event, query){
                if(event.key === 'Enter'){
                  $scope.launchRefineSearch(query);
                }
              };

              $scope.confirmModal  = function(data, userAction) {
                if (userAction === 'specialistsWho'){
                  $scope.highlightTextSpecialists = true;
                  $anchorScroll('specialistsWho');
                } else {
                  $rootScope.gotoView('/find-doctor-search-results?name=' + TransparencyFactory.getSearchTerm() + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };
              $scope.modalObj = {
                modalTitle: $scope.findDoctorSearchDetails.modalTitle,
                modalText: $scope.findDoctorSearchDetails.modalText,
                peoplePlacesButton: {
                  title: $scope.findDoctorSearchDetails.peoplePlacesButtonTitle
                },
                specialistButton: {
                  title: $scope.findDoctorSearchDetails.specialistButtonTitle
                },
                values: {
                },
                peoplePlacesLength: null, 
                specialistsWhoLength: null
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the findDoctorResultsDetails.
 *
 * @namespace Directives
 * @class findDoctorResultsDetails
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.findDoctorResultsDetails', [])
    .directive('findDoctorResultsDetails', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-results-details.html',
          scope: {
            findDoctorResultsDetails: '=',
            smartShopperDetails: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'languageService',
            'cordovaService',
            'TransparencyFactory',
            'findDoctorService',
            'helpService',
            'adobeService',
            'analyticConstants',
            function(
              $scope,
              $rootScope,
              languageService,
              cordovaService,
              TransparencyFactory,
              findDoctorService,
              helpService,
              adobeService,
              analyticConstants
            ) {

              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.noMatchPlanFound = $rootScope.noMatchPlanFound;
              $scope.medicareUser = ($rootScope.loggedIn &&
                $rootScope.selectedPolicy.sourceSystem === 'Amisys');

              $scope.showDetails =
                $scope.findDoctorResultsDetails.showMoreDetails;
              $scope.language = $rootScope.language || 'en';
              $scope.policyMembers = $rootScope.selectedPolicy && $rootScope.selectedPolicy.policyMembers && $rootScope.selectedPolicy.policyMembers.map(function(member) {
                var firstName = member.givenName[0] + member.givenName.slice(1).toLowerCase();
                var lastName = member.familyName[0] + member.familyName.slice(1).toLowerCase();
                member.displayMemberName = firstName + ' ' + lastName + ' (' + member.dependentNumber + ')';
                return member;
              });

              $scope.recommendedFlow = ($rootScope.loggedIn && $scope.findDoctorResultsDetails.recommendedFlow && $scope.findDoctorResultsDetails.viewPcpDetails);

              $scope.smartShopperTerm = TransparencyFactory.getSmartShopperTerm();
              $scope.showSmartShopper = ($rootScope.loggedIn && TransparencyFactory.getSmartShopperResultItem());

              var providerIdentifier = null;
              var practitionerIdentifier = null;
              var locationIdentifier = null;
              var nationalProviderIdentifier = null;
              var pcpChangeRequest = null;

              if ($scope.findDoctorResultsDetails.resultSummaryIdentifiers) {
                $scope.findDoctorResultsDetails.resultSummaryIdentifiers.forEach(function(eachType) {
                  switch (eachType.type_code) {
                    case 'SYP':
                      providerIdentifier = eachType.value;
                      break;
                    case 'FAI':
                      locationIdentifier = eachType.value;
                      break;
                    case 'SYI':
                      practitionerIdentifier = eachType.value;
                      break;
                    case 'NPI':
                      nationalProviderIdentifier = eachType.value;
                      break;
                  }
                });
              }

              if ($scope.findDoctorResultsDetails.changePcp) {
                $scope.findDoctorResultsDetails.changePcp.providerData =
                  $scope.findDoctorResultsDetails.cardData.summary;
                $scope.alertModalObj = $scope.findDoctorResultsDetails.changePcp;
              }

              $scope.selectPcpAlertModalObj = {
                title: $scope.loc.PCP_COMMERCIAL_DEPENDENT_BUTTON_SELECT_PCP,
                message: $scope.loc.PCP_COMMERCIAL_DEPENDENT_SELECTED_PCP,
                members: $scope.policyMembers,
                confirmBtn: $scope.loc.PCP_COMMERCIAL_DEPENDENT_BUTTON_SELECT_PCP,
              };

              if ($scope.findDoctorResultsDetails.isPcpFlow && !$scope.recommendedProviderData && !$scope.medicareUser) {
                pcpChangeRequest = {
                  memberId: $rootScope.selectedPolicy.externalId,
                  providerIdentifier: providerIdentifier,
                  practitionerIdentifier: practitionerIdentifier,
                  locationIdentifier: locationIdentifier,
                  policyEffectiveFromDate: $rootScope.selectedPolicy.effectiveDate,
                  policyEffectiveThruDate: $rootScope.selectedPolicy.expirationDate,
                  PCPNPI: nationalProviderIdentifier,
                  PCPName: $scope.findDoctorResultsDetails.cardData.summary.name,
                  lobCode: $rootScope.selectedPolicy.lobCode,
                  groupId: $rootScope.selectedPolicy.groupNumber
                };
              }


              $scope.toggleShowDetails = function() {
                if (
                  $scope.showDetails ===
                  $scope.findDoctorResultsDetails.showMoreDetails
                ) {
                  $scope.showDetails =
                    $scope.findDoctorResultsDetails.showLessDetails;
                } else {
                  $scope.showDetails =
                    $scope.findDoctorResultsDetails.showMoreDetails;
                }
              };

              $scope.openSmartShopper = function() {
                $scope.expandSmartShopperInfo = !$scope.expandSmartShopperInfo;
                $rootScope.healthNavTrackToggleActions('smartShopperClaimReward', 'info', $scope.expandSmartShopperInfo);
              };

              $scope.openChangePcpAlert = function() {
                $scope.displayMakeThisMyPcpError = false;
                if ($scope.policyMembers.length > 1) {
                  $scope.selectPcpAlertModalObj.members.map(function(member) {
                    member.SELECTED = false;
                  });
                  $scope.openSelectPcpModal();
                } else {
                  $scope.openAlertModal();
                }
              };

              $scope.openInfoModal = function() {
                $rootScope.headerTerm = $scope.smartShopperDetails.infoModalHeader;
                $scope.helpInfo = {
                  introText_1: $scope.smartShopperDetails.infoModalBody.introText_1,
                  introText_2: $scope.smartShopperDetails.infoModalBody.introText_2,
                  title: $scope.smartShopperDetails.infoModalBody.title,
                  contents: [
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_1,
                      text: $scope.smartShopperDetails.infoModalBody.text_1,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_2,
                      text: $scope.smartShopperDetails.infoModalBody.text_2,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_3,
                      text: $scope.smartShopperDetails.infoModalBody.text_3,
                    }
                  ],
                  smartShopperInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.confirmFunc = function() {
                $scope.recommendedProviderData = ($scope.findDoctorResultsDetails.recommendedFlow && TransparencyFactory.getRecommendedPcpData()) ? TransparencyFactory.getRecommendedPcpData() : false;
                $rootScope.$emit('pageLoading');
                if ($scope.recommendedProviderData && $scope.medicareUser) {
                  pcpChangeRequest = {
                    memberId: $rootScope.selectedPolicy.externalId,
                    groupNumber: $rootScope.selectedPolicy.groupNumber,
                    lobCode: $rootScope.selectedPolicy.lobCode,
                    sourceSystem : $rootScope.selectedPolicy.sourceSystem,
                    npi: $scope.recommendedProviderData.npi,
                    pcpName: $scope.recommendedProviderData.fullName,
                    amisysPracticeCode: $scope.recommendedProviderData.affiliationId,
                  };
                } else if (!$scope.recommendedProviderData && $scope.medicareUser) {
                  pcpChangeRequest = {
                    memberId: $rootScope.selectedPolicy.externalId,
                    groupNumber: $rootScope.selectedPolicy.groupNumber,
                    lobCode: $rootScope.selectedPolicy.lobCode,
                    sourceSystem : $rootScope.selectedPolicy.sourceSystem,
                    npi: nationalProviderIdentifier,
                    pcpName: $scope.findDoctorResultsDetails.cardData.summary.name,
                    amisysPracticeCode: providerIdentifier,
                  };
                }
                findDoctorService.changePcp(pcpChangeRequest).then(function(res) {
                  $rootScope.$emit('pageLoaded');
                  if (res.successIndicator || res.success) {
                    $scope.ChangedMySelectedPcp = true;
                    $scope.findDoctorResultsDetails.cardData.ChangedMySelectedPcp =
                      $scope.ChangedMySelectedPcp;
                    adobeService.trackAction('pcpChangedSuccessful', analyticConstants.PCP_SECTION);
                  } else {
                    $scope.displayMakeThisMyPcpError = true;
                    adobeService.trackAction('pcpChangedFailed', analyticConstants.PCP_SECTION);
                  }
                }).catch(function() {
                  $scope.displayMakeThisMyPcpError = true;
                });
              };

              $scope.confirmPcpFunc = function(members) {
                var selectedMembers = [];
                members.forEach(function(member) {
                  if (member.SELECTED) {
                    selectedMembers.push(member);
                  }
                });

                var membersInfo = selectedMembers.map(function(member) {
                  var pcpChangeReqMembersData = {};
                  pcpChangeReqMembersData.memberId = member.externalSourceId + member.dependentNumber;
                  pcpChangeReqMembersData.policyEffectiveFromDate = member.enrollmentEffectiveDate;
                  pcpChangeReqMembersData.policyEffectiveThruDate = member.enrollmentExpirationDate;

                  return pcpChangeReqMembersData;
                });

                var pcpChangeRequest = {
                  providerInfo: {},
                  membersInfo: null
                };
                pcpChangeRequest.providerInfo.providerIdentifier = providerIdentifier;
                pcpChangeRequest.providerInfo.practitionerIdentifier = practitionerIdentifier;
                pcpChangeRequest.providerInfo.locationIdentifier = locationIdentifier;
                pcpChangeRequest.PCPNPI = nationalProviderIdentifier;
                pcpChangeRequest.PCPName = $scope.findDoctorResultsDetails.cardData.summary.name;
                pcpChangeRequest.lobCode = $rootScope.selectedPolicy.lobCode;
                pcpChangeRequest.groupId = $rootScope.selectedPolicy.groupNumber;
                pcpChangeRequest.membersInfo = membersInfo;

                $rootScope.$emit('pageLoading');
                findDoctorService.changeMultiPcp(pcpChangeRequest).then(function(res) {
                  $rootScope.$emit('pageLoaded');
                  res.forEach(function(eachRes) {
                    if (eachRes.updateSucceedStatus) {
                      $scope.ChangedMySelectedPcp = true;
                      adobeService.trackAction('pcpMultiChangedSuccessful', analyticConstants.PCP_SECTION, { dependentNumber: eachRes.dependentNumber });
                      if (eachRes.dependentNumber === '00') {
                        $scope.findDoctorResultsDetails.cardData.ChangedMySelectedPcp =
                          $scope.ChangedMySelectedPcp;
                      } else {
                        $scope.findDoctorResultsDetails.cardData.ChangedMyDependentSelectedPcp =
                          $scope.ChangedMySelectedPcp;
                      }
                    } else {
                      // to do: what to show if part requests fail
                      console.log('PCP update failed for this member: ', eachRes.dependentNumber);
                      adobeService.trackAction('pcpMultiChangedFailed', analyticConstants.PCP_SECTION, { dependentNumber: eachRes.dependentNumber });

                    }
                  });
                }).catch(function() {
                  $scope.serviceNotAvailable = true;
                  $scope.displayMakeThisMyPcpError = true;
                });
              };

              if ($rootScope.loggedIn) {
                $rootScope.showPolicySelect = false;
                $rootScope.showNav = false;
              } else {
                languageService
                  .getLocale($scope.language)
                  .then(function(localeReturned) {
                    $scope.loc = localeReturned;
                  })
                  .catch(console.warn);
              }

              $scope.goToHEQ = function() {
                return $rootScope.openInSecureBrowser('appsso:healthequity');
              };

              $scope.findDoctorResultsDetails.searchTerm = TransparencyFactory.getSearchTerm();
              TransparencyFactory.setResultsToShare(
                $scope.findDoctorResultsDetails
              );

              // Reset the results details card data, as it should be obtained again for each provider.
              TransparencyFactory.resetResultsDetails();

              if (!cordovaService.deviceIsBrowser()) {

                AppRate.promptForRating(false);

                AppRate.preferences = {
                  displayAppName: 'Blue Connect Mobile',
                  usesUntilPrompt: 1,
                  promptAgainForEachNewVersion: true,
                  simpleMode: true,
                  inAppReview: false,
                  storeAppURL: {
                    ios: '392607223',
                    android: 'market://details?id=com.bcbsnc.healthnav',
                  },
                  customLocale: {
                    title: $scope.loc.RATING_DID_YOU_FIND,
                    message: $scope.loc.RATING_PLEASE_RATE,
                    cancelButtonLabel: $scope.loc.RATING_NO_THANKS,
                    laterButtonLabel: $scope.loc.RATING_REMIND_ME_LATER,
                    rateButtonLabel: $scope.loc.RATING_RATE_IT_NOW,
                  },
                  callbacks: {
                    onRateDialogShow: function(callback) {
                      callback(1); // cause immediate click on 'Rate Now' button
                    },
                    onButtonClicked: function() {
                    },
                  },
                  openUrl: AppRate.preferences.openUrl,
                };
              }

              /* Search for other pcp take directly to all primary care providers results page"*/
              $scope.otherPcpSearch = function(searchInput) {
                $scope.searchTermId = '260005173';
                TransparencyFactory.setResultsTerm(searchInput.searchTerm);
                return $rootScope.gotoView(
                  searchInput.link +
                  '?id=' + $scope.searchTermId + '&network_id=' +
                  $rootScope.selectedPlan.id +
                  '&distance=' +
                  TransparencyFactory.getDistance() +
                  '&searchTerm=' +
                  searchInput.searchTerm +
                  '&zipCode=' +
                  TransparencyFactory.getCity().zip +
                  '&planName=' +
                  searchInput.planName +
                  '&isPcpFlow=true'
                );
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the find doctor search bottom bar.
 *
 * @namespace Directives
 * @class findDoctorSearchBottomBar
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.findDoctorSearchBottomBar', [])
    .directive('findDoctorSearchBottomBar', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-search-bottom-bar.html',
          scope: {
            /**
             * Information for drawing the navbar.
             *
             * @memberof findDoctorSearchBottomBar
             * @member {Object} bottomBarDetails
             */
            bottomBarDetails: '=',
            pcpDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            'TransparencyFactory',
            'languageService',
            'shareService',
            'alertService',
            'geoLocationService',
            function(
              $scope,
              $rootScope,
              TransparencyFactory,
              languageService,
              shareService,
              alertService,
              geoLocationService
            ) {
              $scope.gotoView = $rootScope.gotoView;
              $scope.trackState = $rootScope.trackState;
              $scope.trackAction = $rootScope.trackAction;
              $scope.language = $rootScope.language || 'en';
              $scope.loggedIn = $rootScope.loggedIn;

              var generateShareContent = function (data, estimatedCostInfo) {
                $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
                // Add name.
                var shareContent = data.summary.name;

                // Add degree if there is one.
                shareContent += data.summary.degrees ? data.summary.degrees + '\n' : '\n';

                // Dr. details
                shareContent += data.summary.gender + data.summary.specialty_names+ '\n';

                // Accepting new patients.
                shareContent += data.summary.accepting_new_patients ? 'Accepting new patients \n': '';

                // Main address.
                shareContent += data.summary.location_name + '\n' + data.summary.addr_line1 + '\n';

                // Addr line 2.
                shareContent += data.summary.addr_line2 ? data.summary.addr_line2 + '\n' : ''; 
                  
                // City, state, zip.
                shareContent += data.summary.city + ', ' + data.summary.state + ' ' + data.summary.postal_code + '\n';

                // Phone number.
                shareContent += data.summary.phone_raw ? 'Phone: ' + data.summary.phone_raw + '\n': '';
                
                // Fax.
                shareContent += data.summary.fax_raw ? 'Fax: ' + data.summary.fax_raw + '\n' : '';

                // If authenticated and estimatedCostInfo provided, show procedure costs info.
                if ($rootScope.loggedIn && estimatedCostInfo && !$scope.medicareUser) {
                  //total estimated cost to you
                  shareContent += estimatedCostInfo.estimatedCostToYou ? estimatedCostInfo.estimatedCostToYou.name + ' ' + estimatedCostInfo.estimatedCostToYou.amount + '\n' : '';

                  // copay.
                  shareContent += estimatedCostInfo.copay ? estimatedCostInfo.copay.name + ': ' + estimatedCostInfo.copay.amount + '\n' : '';

                  // deductible.
                  shareContent += estimatedCostInfo.deductible ? estimatedCostInfo.deductible.name + ': ' + estimatedCostInfo.deductible.amount + '\n' : '';

                  // coinsurance.
                  shareContent += estimatedCostInfo.coinsurance ? estimatedCostInfo.coinsurance.name + ': ' + estimatedCostInfo.coinsurance.amount + '\n' : '';

                  // blueCrossContribution.
                  shareContent += estimatedCostInfo.blueCrossContribution ? estimatedCostInfo.blueCrossContribution.name + ': ' + estimatedCostInfo.blueCrossContribution.amount + '\n' : '';

                  // totalCost.
                  shareContent += estimatedCostInfo.totalCost ? estimatedCostInfo.totalCost.name + ': ' + estimatedCostInfo.totalCost.amount : '';
                }
                // Return.
                return shareContent;
              }

              languageService
                .getLocale($scope.language)
                .then(function(localeReturned) {
                  $scope.loc = localeReturned;
                })
                .catch(console.warn);

              /**
               * Go to the url
               * if index is 0 i.e new search button is selected it will remove the current page from history
               * to make back button functionality works correctly.
               *
               * @memberof findDoctorSearchBottomBar
               * @method bottomBarSelected
               */

              $scope.bottomBarSelected = function(url, title) {
                var data = TransparencyFactory.getResultsToShare();
                var transparencyInfo = {};

                transparencyInfo.searchTerm = TransparencyFactory.getResultsDetailsTerm();
                transparencyInfo.title = 'profile: ' + transparencyInfo.searchTerm;
                

                if (title === $scope.loc.GET_DIRECTION) {
                  transparencyInfo.title += ': get directions'; 
                  $rootScope.healthNavTrackActions(0, transparencyInfo);
                  $rootScope.nativeMap = true;

                  var location =
                    data.cardData.summary.addr_line1 +
                    ' ' +
                    data.cardData.summary.city +
                    ', ' +
                    data.cardData.summary.state +
                    ' ' +
                    data.cardData.summary.postal_code;

                  alertService
                    .showAlert(
                      $scope.loc.EXTERNAL_LINK,
                      $scope.loc.EXTERNAL_LINK_WARNING,
                      { title: $scope.loc.CONTINUE, color: 'blue' },
                      { title: $scope.loc.CANCEL }
                    )
                    .then(function() {
                      $rootScope.blurContent = false;
                      geoLocationService.openMaps(location);
                    });
                } else if (title === $scope.loc.FILTER_RESULTS) {
                  $rootScope.newFilter = true;
                }

                // Share button
                if (title === $scope.loc.SHARE) {
                  transparencyInfo.title += ': share'; 
                  $rootScope.healthNavTrackActions(0, transparencyInfo);
                  $rootScope.pausedForShare = true;
                  
                  // Create share content from card data.
                  var shareContent = generateShareContent(data.cardData, data.cardData.estimatedCostInfo);
                    
                  shareService.showSharing(
                    shareService.contentType.TEXT,
                    shareContent
                  );
                }
                if (title === $scope.loc.HELP) {
                  url += '?expand=FIND_CARE';
                  $rootScope.gotoView(url);
                } else if (url.length > 1) {
                  // Only route if the url is not root.
                  $rootScope.gotoView(url);
                }
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the findDoctorBrowser.
 *
 * @namespace Directives
 * @class findDoctorBrowser
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.findDoctorSearchResults', [])
    .directive('findDoctorSearchResults', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-search-results.html',
          scope: {
            searchResultsDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            '$element',
            '$location',
            '$timeout',
            '$compile',
            'restService',
            'languageService',
            'TransparencyFactory',
            'helpService',
            'geoLocationService',
            'alertService',
            '$route',
            'adobeService',
            'analyticConstants',
            'findDoctorService',
            function (
              $scope,
              $rootScope,
              $element,
              $location,
              $timeout,
              $compile,
              restService,
              languageService,
              TransparencyFactory,
              helpService,
              geoLocationService,
              alertService,
              $route,
              adobeService,
              analyticConstants,
              findDoctorService
            ) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.noMatchPlanFound = $rootScope.noMatchPlanFound;
              $scope.noResultsFound = false;
              $scope.noResultsFoundMapView = false;
              $scope.mustBeNCZipError = false;
              $scope.loadMoreResults = false;
              $scope.language = $rootScope.language || 'en';
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.googleMapsResults = null;
              $scope.displayResult = null;
              $scope.contentString = null;
              $scope.estimatedAmount = null;
              $scope.lastWindowOpened = null;
              $rootScope.OpenDetailsPageFromMapView = 'list';
              var infowindow = new google.maps.InfoWindow({});
              $scope.selectedProviderResult = null;
              $scope.backProviderString = null;
              $rootScope.latlon = null;
              $scope.searchAgain = false;
              $scope.outOfNC = false;
              $scope.pcpError = false;
              $scope.isSmartShopperEligible = $rootScope.isSmartShopperEligible;

              if ($scope.searchResultsDetails.metadata.pages.next !== null) {
                $scope.loadMoreResults = true;
              }

              // initialize active tab to list view by default or to map view when navigate to details page from mapview.
              $scope.activeTab = $rootScope.openMapView ? 'map' : 'list';

              $scope.generateMapView = function() {
                // restrict map elements to first 30 results
                var results = $scope.googleMapsResults
                  ? $scope.googleMapsResults
                  : $scope.searchResultsDetails.results;

                //creating a newResultArray to get the locations list.
                var coordsArray = results.map(function(location) {
                  return (
                    String(location.longitude) + ',' + String(location.latitude)
                  );
                });

                var nonDuplicateCoords = coordsArray.filter(function(
                  coordsPair,
                  index
                ) {
                  return coordsArray.lastIndexOf(coordsPair) === index;
                });

                var newResultsArray = nonDuplicateCoords.map(function(
                  coordsPair
                ) {
                  return results.filter(function(provider) {
                    return (
                      String(provider.longitude) +
                      ',' +
                      String(provider.latitude) ===
                      coordsPair
                    );
                  });
                });

                var div = $element.find('#find-doctor-search-results-map-view');
                var initialZoomLevel =
                  $rootScope.currentZoom && $rootScope.currentZoom < 15
                    ? $rootScope.currentZoom
                    : 15;
                var map = null;
                if (results.length !== 0) {
                  // calculate bounds of initial map display
                  var bounds = new google.maps.LatLngBounds();
                  for (var i = 0; i < results.length; i++) {
                    var result = results[i];
                    result.index = i;
                    var myLatLng = new google.maps.LatLng(
                      result.latitude,
                      result.longitude
                    );
                    bounds.extend(myLatLng);
                  }

                  // Create a Google Maps display initialize to fit the markers that are on display
                  map = new google.maps.Map(div[0], {
                    disableDefaultUI: true,
                    clickableIcons: false,
                    zoom: initialZoomLevel,
                    center: bounds.getCenter(),
                  });
                  map.fitBounds(bounds, 10);
                  // reset zoom when bounds change
                  google.maps.event.addListenerOnce(
                    map,
                    'bounds_changed',
                    function(event) {
                      if (map.getZoom() > 20) {
                        map.setZoom(initialZoomLevel);
                      }
                    }
                  );
                } else {
                  // load map without markers when no results found
                  geoLocationService
                    .getNearestCityByZip(
                      $rootScope.searchAreaNearestCity
                        ? $rootScope.searchAreaNearestCity.zip
                        : TransparencyFactory.getCity().zip
                    )
                    .then(function(nearestPosition) {
                      map = new google.maps.Map(div[0], {
                        disableDefaultUI: true,
                        clickableIcons: false,
                        zoom: initialZoomLevel,
                        center: nearestPosition,
                      });
                      $scope.map = map;
                      map.addListener('dragend', $scope.onMapMove);
                      map.addListener('zoom_changed', $scope.onMapZoomChange);
                    })
                    .catch(function(error) {
                      return error;
                    });
                  return 0;
                }
                $scope.map = map;
                $timeout(
                  function() {
                    $scope.map.addListener('dragend', $scope.onMapMove);
                    $scope.map.addListener(
                      'zoom_changed',
                      $scope.onMapZoomChange
                    );
                    infowindow.close();
                  },
                  100,
                  false
                );

                google.maps.event.addListener($scope.map, 'click', function(
                  event
                ) {
                  if (infowindow && $scope.activeMarker) {
                    $scope.closeInfoWindow();
                    $('#_search-button').removeClass('hidden');
                  }
                });

                $scope.closeInfoWindow = function() {
                  infowindow.close();
                  $scope.activeMarker.setIcon('images/Map Pin - Default.png');
                  $scope.activeMarker = null;
                };

                //reset currentZoom to null
                $rootScope.currentZoom = null;
                return newResultsArray;
              };

              /**
               * Handles toggeling between list view and map view
               *
               * @memberof FindDoctorSearchResultsController
               * @method switchTab
               */
              $scope.switchTab = function(tabName) {
                $scope.activeTab = tabName;
                $scope.activeMarker = null;

                if (tabName == 'map') {
                  if (!$scope.noResultsFoundMapView) {
                    $scope.searchAgain = false;
                  }
                  if ($scope.noResultsFound || $scope.outOfNC) {
                    $scope.searchAgain = true;
                  }
                  $rootScope.openMapView = true;
                  if ($rootScope.mapsReady) {
                    $timeout(
                      function() {
                        $scope.generateMarkers();
                      },
                      1,
                      false
                    );
                  }
                } else {
                  $rootScope.openMapView = false;

                  if ($scope.outOfNC) {
                    $scope.searchResultsDetails.summary =
                      '0 ' + $scope.loc.RESULTS;
                    $scope.searchResultsDetails.results = [];
                    $scope.searchResultsDetails.metadata = null;
                    $scope.loadMoreResults = false;
                  }
                }
              };

              $scope.generateMarkers = function() {
                var newResultsArray = $scope.generateMapView();
                if (newResultsArray.length === 0) {
                  return;
                }
                for (var i = 0; i < newResultsArray.length; i++) {
                  var resultValue = newResultsArray[i];
                  var resultIn = null;
                  $scope.lastWindow = null;
                  resultIn = newResultsArray[i][0];
                  var marker = null;

                  var position = {
                    lat: resultIn.latitude,
                    lng: resultIn.longitude,
                  };
                  if (resultValue.length > 1) {
                    var markerLabel = resultValue.length;
                    marker = new google.maps.Marker({
                      position: position,
                      map: $scope.map,
                      result: resultValue,
                      title: resultIn.title,
                      animation: google.maps.Animation.DROP,
                      icon: 'images/Map Pin - Default.png',
                      label: {
                        text: markerLabel.toString(),
                        color: 'white',
                        fontSize: '10px',
                        fontWeight: 'bold',
                      },
                    });
                  } else {
                    marker = new google.maps.Marker({
                      position: position,
                      map: $scope.map,
                      result: resultValue,
                      title: resultIn.title,
                      animation: google.maps.Animation.DROP,
                      icon: 'images/Map Pin - Default.png',
                    });
                  }

                  // open info window when user clicks on marker
                  marker.addListener(
                    'click',
                    (function(marker) {
                      return function() {
                        $scope.activeMarker = marker;
                        $scope.displayResult = null;
                        $('#_search-button').addClass('hidden');
                        if (marker.result.length > 1) {
                          //multiple providers in the same location
                          $scope.displayResult = marker.result;

                          $scope.contentString =
                            '<div class="browser-item-card">';
                          $scope.contentString +=
                            '<div class="card-description maps-name-display">' +
                            $scope.displayResult[0].title +
                            '<br></div>';
                            if($scope.displayResult[0].label){
                              $scope.contentString +=
                              '<div><span class="tier p1 blue">'+
                              $scope.displayResult[0].label +
                              '</span></div>';
                            }

                          $scope.contentString +=
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult[0].address1 +
                            '</div>' +
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult[0].address2 +
                            '</div>' +
                            '<div class="card-description distance-font-size maps-address-display">' +
                            '(' +
                            $scope.displayResult[0].distance +
                            $scope.displayResult[0].distanceLabel +
                            ')' +
                            '</div>';

                          $scope.contentString +=
                            '<div class="view-details-buttons"><br>' +
                            '<button class = "google-maps-info-window-buttons google-left-button view-details" type="button" ng-click="onMapItemDirectionsClick(' +
                            $scope.displayResult[0].index +
                            ')">' +
                            $scope.loc.FIND_CARE_OPEN_IN_MAPS +
                            '</button> ' +
                            '</div>';

                          $scope.contentString +=
                            "<hr class='providers-line provider-line-top-border'><div class='providers-font-size providers-list card-bottom' ng-click= 'viewAllProvidersLocation()'><span class='med-light-blue'>" +
                            $scope.loc
                              .FIND_CARE_MAPS_VIEW_ALL_PROVIDERS_AT_LOCATION +
                            "</span><i class='fc-right-caret go-next'></i></div>";

                          $scope.contentString += '</div>';
                        } else {
                          $scope.displayResult = marker.result[0];
                          $scope.estimatedAmount = $scope.displayResult
                            .costToMember
                            ? $scope.displayResult.costToMember.toLocaleString(
                              'en-US',
                              {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2,
                                style: 'currency',
                                currency: 'USD',
                              }
                            )
                            : null;

                          $scope.contentString =
                            '<div class="browser-item-card">';
                          if (
                            $scope.displayResult.providerName !==
                            $scope.displayResult.title
                          ) {
                            $scope.contentString +=
                              '<div class="card-description maps-name-display"><span>' +
                              $scope.displayResult.providerName +
                              $scope.displayResult.degrees +
                              '</span><br></div>' +
                              '<div class="card-description address-font-size maps-address-display">' +
                              $scope.displayResult.title +
                              '<br></div>';
                          } else {
                            $scope.contentString +=
                              '<div class="card-description maps-name-display">' +
                              $scope.displayResult.title +
                              '<br></div>';
                          }
                          if($scope.displayResult.label){
                            $scope.contentString +=
                            '<div><span class="tier p1 blue">'+
                            $scope.displayResult.label +
                            '</span></div>';
                          }
                          $scope.contentString +=
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult.address1 +
                            '</div>' +
                            '<div class="card-description address-font-size maps-address-display">' +
                            $scope.displayResult.address2 +
                            '</div>' +
                            '<div class="card-description distance-font-size maps-address-display">' +
                            '(' +
                            $scope.displayResult.distance +
                            $scope.displayResult.distanceLabel +
                            ')' +
                            '</div>';
                          if ($scope.estimatedAmount) {
                            $scope.contentString +=
                              '<div class="med-blue mt2">' +
                              $scope.loc
                                .SEARCH_RESULTS_ESTIMATE_TO_YOU_UPPER_CASE +
                              '<b>' +
                              $scope.estimatedAmount +
                              '</b></div>';
                          }

                          $scope.contentString +=
                            '<div class="view-details-buttons single-provider-buttons"><br>' +
                            '<button class = "google-maps-info-window-buttons google-right-button view-details" type="button" ng-click="onMapItemDetailsClick(' +
                            $scope.displayResult.index +
                            ')">' +
                            $scope.loc.FIND_CARE_VIEW_DETAILS +
                            '</button> ' +
                            '<button class = "google-maps-info-window-buttons google-left-button view-details" type="button" ng-click="onMapItemDirectionsClick(' +
                            $scope.displayResult.index +
                            ')">' +
                            $scope.loc.FIND_CARE_OPEN_IN_MAPS +
                            '</button> ' +
                            '</div>';

                          $scope.contentString += '</div>';
                        }

                        var compiled = $compile($scope.contentString)(
                          $scope
                        )[0];

                        infowindow.setContent(compiled);
                        infowindow.open($scope.map, marker);

                        $scope.viewAllProvidersLocation = function() {
                          $scope.viewAllProvidersContentString =
                            '<div class="browser-item-card">' +
                            '<div class="provider-location-text" >' +
                            $scope.loc.FIND_CARE_PROVIDERS_AT_THIS_LOCATION +
                            '</div>' +
                            '<hr class="providers-line provider-line-bottom-border"><div class="provider-location-list">';
                          $scope.viewAllProvidersContentString =
                            $scope.viewAllProvidersContentString +
                            $scope.displayResult
                              .map(function(result) {
                                $scope.resultSelected = JSON.stringify(result);
                                return (
                                  "<div class='med-light-blue providers-font-size translate-x' ng-click='selectProvider(" +
                                  $scope.resultSelected +
                                  ")'><span>" +
                                  result.providerName +
                                  '</span><br></div>'
                                );
                              })
                              .join('') +
                            '</div></div>';

                          $scope.backProviderString =
                            $scope.viewAllProvidersContentString;

                          infowindow.setContent(
                            $compile($scope.viewAllProvidersContentString)(
                              $scope
                            )[0]
                          );
                        };

                        $scope.selectProvider = function(res) {
                          $scope.estimatedAmount = res.costToMember
                            ? res.costToMember.toLocaleString('en-US', {
                              minimumFractionDigits: 2,
                              maximumFractionDigits: 2,
                              style: 'currency',
                              currency: 'USD',
                            })
                            : null;

                          $scope.providerContentString =
                            '<div class="browser-item-card">';
                          if (res.providerName !== res.title) {
                            $scope.providerContentString +=
                              '<div class="card-description maps-name-display"><span>' +
                              res.providerName +
                              res.degrees +
                              '</span><br></div>';
                          }
                          $scope.providerContentString +=
                            '<div class="card-description maps-address-display">' +
                            res.title +
                            '<br></div>' +
                            '<div class="card-description maps-address-display">' +
                            res.address1 +
                            '</div>' +
                            '<div class="card-description maps-address-display">' +
                            res.address2 +
                            '</div>' +
                            '<div class="card-description maps-address-display distance-font-size">' +
                            '(' +
                            res.distance +
                            res.distanceLabel +
                            ')' +
                            '</div>';
                          if ($scope.estimatedAmount) {
                            $scope.providerContentString +=
                              '<div class="med-blue mt2">' +
                              $scope.loc
                                .SEARCH_RESULTS_ESTIMATE_TO_YOU_UPPER_CASE +
                              '<b>' +
                              $scope.estimatedAmount +
                              '</b></div>';
                          }

                          $scope.providerContentString +=
                            '<div class="view-details-buttons"><br>' +
                            '<button class = "google-maps-info-window-buttons google-right-button view-details" type="button" ng-click="onMapItemDetailsClick(' +
                            res.index +
                            ')">' +
                            $scope.loc.FIND_CARE_VIEW_DETAILS +
                            '</button> ' +
                            '<button class = "google-maps-info-window-buttons google-left-button view-details" type="button" ng-click="onMapItemDirectionsClick(' +
                            res.index +
                            ')">' +
                            $scope.loc.FIND_CARE_OPEN_IN_MAPS +
                            '</button> ' +
                            '</div>';

                          $scope.providerContentString +=
                            "<hr class='providers-line provider-line-top-border'><div class='providers-font-size pb3 providers-list card-bottom' ng-click= 'backToProviders()'><i class='fc-left go-previous'></i><span class='med-light-blue'>" +
                            $scope.loc
                              .FIND_CARE_MAPS_BACK_TO_PROVIDERS_AT_LOCATION +
                            '</span></div>';

                          $scope.providerContentString += '</div>';

                          infowindow.setContent(
                            $compile($scope.providerContentString)($scope)[0]
                          );
                        };

                        $scope.backToProviders = function() {
                          infowindow.setContent(
                            $compile($scope.backProviderString)($scope)[0]
                          );
                        };

                        if ($scope.lastWindow) {
                          $scope.lastWindow.setIcon(
                            'images/Map Pin - Default.png'
                          );
                        }

                        marker.setIcon('images/Map Pin - Selected.png');
                        $scope.lastWindow = marker;
                        $scope.lastWindowOpened = marker;
                      };
                    })(marker, i)
                  );
                } //end of for
              };

              $scope.onMapZoomChange = function() {
                $scope.onMapMove();

                var bounds = $scope.map.getBounds();
                var center = $scope.map.getCenter();
                $rootScope.currentZoom = $scope.map.getZoom();
                var conversionFactor = 0.000621371192;
                if (bounds && center) {
                  var eastBoundLng = bounds.getNorthEast().lng();
                  var eastBoundPosition = new google.maps.LatLng(
                    center.lat(),
                    eastBoundLng
                  );
                  // Calculate radius (in meters).
                  var radius = google.maps.geometry.spherical.computeDistanceBetween(
                    center,
                    eastBoundPosition
                  );
                  $rootScope.currentRadius = Math.round(
                    radius * conversionFactor
                  );
                  $rootScope.currentRadius =
                    $rootScope.currentRadius === 0
                      ? 1
                      : $rootScope.currentRadius;
                }
              };

              $scope.onMapMove = function() {
                $scope.searchAgain = true;
                $scope.noResultsFoundMapView = false;
                $scope.mustBeNCZipError = false;
                infowindow.close();
                $scope.newCenterGeo = $scope.map.getCenter();
                if ($scope.lastWindowOpened) {
                  $scope.lastWindowOpened.setIcon(
                    'images/Map Pin - Default.png'
                  );
                }
                $scope.$apply();
              };

              // Back to mapview from details page when navigate to details page from mapview
              if ($rootScope.openMapView) {
                $scope.switchTab('map');
              }

              $scope.onMapItemDetailsClick = function(idx) {
                var result = $scope.searchResultsDetails.results[idx];
                $rootScope.OpenDetailsPageFromMapView = 'map';
                $scope.resultsDetailsPage(
                  idx,
                  result.procedureName || result.providerName,
                  result.preposition,
                  {
                    label: result.label,
                    style: result.style,
                  },
                  result,
                  (result.smartShopperIncentiveAmount) ? result.smartShopperIncentiveAmount : null
                );
              };

              $scope.onMapItemDirectionsClick = function(idx) {
                const mapResult = $scope.searchResultsDetails.results[idx];
                const mapLocation =
                  mapResult.address1 + ' ' + mapResult.address2;

                adobeService.trackAction(
                  'healthNavOpenInMaps',
                  analyticConstants.HEALTHNAV_SECTION
                );
                alertService
                  .showAlert(
                    $scope.loc.EXTERNAL_LINK,
                    $scope.loc.EXTERNAL_LINK_WARNING,
                    {
                      title: $scope.loc.CONTINUE,
                      color: 'blue',
                    },
                    {
                      title: $scope.loc.CANCEL,
                    }
                  )
                  .then(function() {
                    $rootScope.blurContent = false;
                    geoLocationService.openMaps(mapLocation);
                  });
              };

              TransparencyFactory.setResultsToShare(
                $scope.searchResultsDetails
              );
              TransparencyFactory.setExistingSearchResults(
                $scope.searchResultsDetails
              );

              if (!$rootScope.loggedIn) {
                languageService
                  .getLocale($scope.language)
                  .then(function(localeReturned) {
                    $scope.loc = localeReturned;
                  })
                  .catch(console.warn);
              }

              if (
                $scope.searchResultsDetails.results.length === 0 &&
                !$scope.mustBeNCZipError
              ) {
                $scope.noResultsFound = true;
                $scope.noResultsFoundMapView = true;
              }
              var geo_location = TransparencyFactory.getCity().geo
                  ? TransparencyFactory.getCity().geo
                  : $rootScope.vitalsGeoCoords;

              $scope.resultsDetailsPage = function(
                selectedIndex,
                selectedItem,
                selectedPreposition,
                selectedItemLabel,
                itemData,
                smartShopperIncentiveAmount
              ) {
                $rootScope.detailsFromBackButton = false;

                if (smartShopperIncentiveAmount) {
                  TransparencyFactory.setSmartShopperTerm(selectedItem, selectedPreposition);
                  TransparencyFactory.setSmartShopperResultItem(smartShopperIncentiveAmount);
                }


                TransparencyFactory.setResultsDetailsIndex(selectedIndex)
                  .setResultsDetailsTerm(selectedItem)
                  .setResultsDetailsItemLabel(selectedItemLabel)
                  .setResultDetailsItem(itemData);


                $rootScope.healthNavTrackActions(2, {});

                // if procedure
                if (itemData.costToMember) {
                  TransparencyFactory.setResultsProcedureId(
                    itemData.procedure_id
                  );
                }

                // View url.
                var viewUrl =
                  '/find-doctor-results-details?searchTerm=' +
                  $location.search().searchTerm +
                  '&location=' +
                  itemData.location_id +
                  '&provider=' +
                  itemData.provider_id +
                  '&geo_location=' +
                  geo_location +
                  (itemData.costToMember
                    ? '&procedure_id=' + itemData.procedure_id
                    : '') +
                  '&resultsProviderName=' + itemData.name +
                  '&isPcpFlow=' +
                  itemData.isPcpFlow;

                // Go to view.
                $rootScope.gotoView(viewUrl);
              };

              $scope.gotoDetailsPage = function(providerList) {
                var requestParms = null;
                  if (providerList.vendorSource === 'Nuna'){
                    providerList.fullName = providerList.firstName + ' ' + providerList.middleInitial + ' ' + providerList.lastName;
                    providerList.zipCode = providerList.fullAddress.substring(providerList.fullAddress.length - 5);
                  }
                  TransparencyFactory.setResultsDetailsTerm(providerList.fullName);
                  requestParms = {
                    network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                    accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                    planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                    zipCode: providerList.zipCode,
                    locationName: encodeURIComponent(providerList.practiceName),
                    doctorName: providerList.fullName
                  };
                $rootScope.$emit('pageLoading');

                findDoctorService.getDoctorDetails(requestParms)
                  .then(function(doctorResult) {
                    console.log(doctorResult);
                    if (doctorResult.results && doctorResult.results.length) {
                      var viewUrl = '/find-doctor-results-details?searchTerm=' +
                      $location.search().searchTerm +
                        '&location=' + doctorResult.results[0].location_id +
                        '&provider=' + doctorResult.results[0].provider_id +
                        '&geo_location=' +
                        geo_location +
                        '&isPcpFlow=' +
                        providerList.isPcpFlow;
                      // Go to view.
                      $rootScope.gotoView(viewUrl);
                    } else {
                      $rootScope.$emit('pageLoaded');
                      $scope.pcpError = true;
                      return;
                    }
                  }).catch(function(error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.pcpError = true;
                    return error;
                  });
              };

              $scope.searchThisArea = function () {
                $rootScope.openMapView = true;

                // var bounds = $scope.map.getBounds();
                var center = $scope.map.getCenter();

                // get new center city
                geoLocationService
                  .getNearestCity(center)
                  .then(function(result) {
                    $rootScope.searchAreaNearestCity = result;
                    $rootScope.searchAreaNearestCity.cityFullName =
                      result.city +
                      ', ' +
                      result.state_code +
                      ' - ' +
                      result.zip;

                    // validate NC zip code
                    if (
                      TransparencyFactory.validateZipCode(result.zip).status
                    ) {
                      $rootScope.newCity = $rootScope.city;
                      $rootScope.city = false;
                      $scope.getSearchAgainResults();
                      if ($rootScope.mapsReady) {
                        $timeout(
                          function() {
                            $scope.generateMarkers();
                          },
                          1,
                          false
                        );
                      }
                    } else {
                      $scope.outOfNC = true;
                      $scope.mustBeNCZipError = true;
                      $scope.searchAgain = false;
                    }
                  })
                  .catch(function(error) {
                    return error;
                  });
              };

              /**
               * Retrieves additional find a doctor search results.
               * Called when the "Load More Results" button is clicked.
               */
              $scope.fetchAdditionalResults = function() {
                // Use the query created inside the controller
                var query = $scope.$parent.query;

                // Increment the requested page
                query.page = $scope.searchResultsDetails.metadata.pages.next;

                //Add locale so localization will work in node layer
                query.lang = $rootScope.language;

                // Get the data for the next page
                var pageName = 'find-doctor-search-results';
                $rootScope.$emit('pageLoading');
                restService
                  .getPageData(
                    restService.devices.MOBILE,
                    pageName,
                    $rootScope.language,
                    query
                  )
                  .then(function(resultReceived) {
                    $rootScope.$emit('pageLoaded');

                    // Select the appropriate data element
                    var searchResults = null;
                    resultReceived.forEach(function(component) {
                      if (component.name === 'findDoctorSearchResults') {
                        searchResults = component.values.searchResultsDetails;
                      }
                    });

                    // Update the page metadata returned
                    $scope.searchResultsDetails.metadata =
                      searchResults.metadata;

                    // Hide "Load More Results" button if next page is 'null'
                    if (
                      $scope.searchResultsDetails.metadata.pages.next === null
                    ) {
                      $scope.loadMoreResults = false;
                    }

                    $scope.googleMapsResults = searchResults.results;

                    // Concatenate additional results to existing results array
                    $scope.searchResultsDetails.results = $scope.searchResultsDetails.results.concat(
                      searchResults.results
                    );

                    // Update TransparencyFactory existingSearchResults field
                    TransparencyFactory.setExistingSearchResults(
                      $scope.searchResultsDetails
                    );

                    $rootScope.healthNavTrackStates(1, query);
                  })
                  .catch(function(error) {
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  });
              };

              /**
               * Retrieves search again find a doctor search results.
               * Called when the "Search this area" button is clicked.
               */
              $scope.getSearchAgainResults = function() {
                var lat = $scope.newCenterGeo.lat();
                var lng = $scope.newCenterGeo.lng();
                $rootScope.latlon = lat + ',' + lng;
                $route.updateParams({
                  latlon: $rootScope.latlon,
                  zipCode: $rootScope.searchAreaNearestCity.zip,
                  distance: $rootScope.currentRadius,
                  cityFullName: $rootScope.searchAreaNearestCity.cityFullName,
                });
              };

              $scope.openModal = function(e) {
                e.stopPropagation();
                $rootScope.headerTerm = $scope.searchResultsDetails.tierInformation.modalHeader;
                $scope.helpInfo = {
                  tierModalText: $scope.searchResultsDetails.tierInformation.modalText,
                  tierInfo: true
                };
                helpService.help($scope.helpInfo);
            };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the findDoctorSearch.
 *
 * @namespace Directives
 * @class findDoctorSearch
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.findDoctorSearch', [])
    .directive('findDoctorSearch', ['$http', 'config',
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-search.html',
          scope: {
            findDoctorSearchDetails: '=',
            smartShopperDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            '$http',
            '$anchorScroll',
            'languageService',
            'TransparencyFactory',
            'config',
            'geoLocationService',
            'helpService',
            '$timeout',
            'analyticConstants',
            function($scope, $rootScope, $http, $anchorScroll, languageService, TransparencyFactory, config, geoLocationService, helpService, $timeout, analyticConstants) {
              $rootScope.openMapView = false;
              $scope.isSmartShopperEligible = ($rootScope.loggedIn && $rootScope.isSmartShopperEligible);
              $scope.language = $rootScope.language || 'en';
              $scope.bdcLink = $scope.findDoctorSearchDetails.bdcLink;
              languageService.getLocale($scope.language).then(function(localeReturned) {
                $scope.loc = localeReturned;
              }).catch(console.warn);
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $scope.$on('validate input', function() {
                $timeout(function() {
                  $scope.validateCityInput();
                });
              });

              $scope.detectClickElement = function(event) {
                if (event.target.id !== 'city-input' && $scope.isZipDirty) {
                  $('#_cities').addClass("hidden");
                  $scope.validateCityInput();
                }
              };

              $scope.$watch('data.city.zip', function(newVal, oldVal) {
                if (newVal !== oldVal) {
                  $scope.isZipDirty = true;
                }
              });

              //for medicare supplement and blue medicare pdp plan hide search settings box on new search page.
              $scope.hideSearchSettings = ($scope.findDoctorSearchDetails.blockSearchBoxForRxPdpPlan || $scope.findDoctorSearchDetails.message) ? true : false;

              $scope.gotoView = $rootScope.gotoView;
              $scope.loc = $rootScope.loc;
              $scope.expandDiv = false;
              $scope.showCommonSearch = false;
              $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $scope.currentLocationActive = ($rootScope.toggleIcon === false) ? $rootScope.toggleIcon : $scope.currentLocation;

              TransparencyFactory.setLocationMsg($scope.findDoctorSearchDetails.locationMsg);
              $scope.nomatchPlan = $rootScope.noMatchPlanFound;

              $scope.planName = ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $scope.selectedPlan.lobDesc : $scope.selectedPlan.name;

              $scope.locationMsg = TransparencyFactory.getLocationMsg();
              $scope.locationBlocked = TransparencyFactory.getLocationBlocked();
              $scope.loggedIn = $rootScope.loggedIn;
              $scope.medicareUser = ($rootScope.loggedIn && $rootScope.selectedPolicy.sourceSystem === 'Amisys') ? true : false;
              $scope.errorText = '';
              $scope.isZipValid = true;
              $scope.isZipDirty = false;
              $scope.highlightTextSpecialists = false;
              $scope.highlightTextProcedures = false;
              $scope.displayDistance = TransparencyFactory.getDistance();
              $scope.data = {
                displayDistance: null,
                city: TransparencyFactory.getCity(),
              };

              $scope.typeaheadInProgress = false;
              $scope.queryHasFocus = false;

              // get members of current policy for members dropdown list
              $scope.policyMembersList = TransparencyFactory.getCurrentPolicyMembers();
              // set initial selectedMember if user is logged in
              if ($rootScope.isLoggedIn) {
                TransparencyFactory.setSelectedMember($scope.policyMembersList[$rootScope.indexOfSelectedMember]);
              }

              //reinitialize all the search terms each time a new search is performed
              TransparencyFactory.resetSearchTerms();

              $rootScope.healthNavTrackStates(0, { title: $scope.findDoctorSearchDetails.message ? 'select network: ' + $scope.planName : analyticConstants.HOME_SECTION });
              // Validate Zip Code when toggle plan
              $scope.onloadZipCodeValidation = function() {
                if ($scope.hideSearchSettings){
                  if (!$scope.locationBlocked && $rootScope.city) {
                    $scope.validateNCZipCode($rootScope.city.zip);
                  } else if (!$scope.locationBlocked && !$rootScope.city) {
                    $rootScope.city = $rootScope.newCity;
                    $scope.validateNCZipCode($rootScope.newCity.zip);
                  } else {
                    $scope.validateNCZipCode($scope.data.city.zip);
                  }
                }
              };

              // Enable Zip Code input and turn of current location
              $scope.enableInputZipCode = function() {
                if ($scope.currentLocationActive === true) {
                  $scope.data.city = { cityFullName: '' };
                  $scope.currentLocationActive = false;
                  $rootScope.toggleIcon = false;
                }
              };

              // NC Zip Code validation for plan toggling and current location toggling
              $scope.validateNCZipCode = function(zipCode, useCurrentLocation) {
                const resp = TransparencyFactory.validateZipCode(zipCode);
                if (!resp.status) {
                  $scope.isZipDirty = true;
                  $scope.isZipValid = false;
                  $scope.errorText = resp.message;
                  $scope.expandDiv = true;
                } else {
                  $scope.isZipValid = true;
                  $scope.isZipDirty = false;
                  $scope.errorText = '';
                  $scope.expandDiv = useCurrentLocation ? true : false;
                }
              };

              $scope.clearQueryAndTypeaheadResults = function() {
                this.query = '';
                $scope.typeaheadResults = null;
                $scope.typeaheadError = false;
                $scope.showCommonSearch = true;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                $scope.queryHasFocus = true;
                $scope.expandProceduresDiv = false;
                $scope.expandSpecialtiesDiv = false;
                angular.element('.form-control').focus();
              };

              if ($scope.findDoctorSearchDetails.searchParams.distance && $scope.findDoctorSearchDetails.searchParams.zipCode) {
                $scope.data.city.cityFullName = $scope.currentLocationActive === true ? $scope.findDoctorSearchDetails.distanceDetails.currentLocation : TransparencyFactory.getCity() ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorSearchDetails.distanceDetails.city.cityFullName;

              } else if ($scope.data.city) {
                  $scope.data.city.cityFullName = TransparencyFactory.getCity() ? TransparencyFactory.getCity().cityFullName : $scope.findDoctorSearchDetails.distanceDetails.city.cityFullName;
              }
              $scope.data.displayDistance = ($scope.displayDistance) ? $scope.displayDistance.toString() : $scope.findDoctorSearchDetails.distanceDetails.defaultDistance;

              if ($scope.policyMembersList) {
                $scope.selectedMember = (!$rootScope.indexOfSelectedMember) ? $scope.policyMembersList[0] : $scope.policyMembersList[$rootScope.indexOfSelectedMember];
              }

              $scope.selectPolicyMember = function(selectedMember) {
                $rootScope.indexOfSelectedMember = $scope.policyMembersList.indexOf(selectedMember);
                TransparencyFactory.setSelectedMember($scope.policyMembersList[$rootScope.indexOfSelectedMember]);
              };

              /**
               * Based on the user selects the search settings it will expand or collapse the div
               *
               * @memberof findDoctorSearch
               * @method expandSettings
               */
              $scope.expandSettings = function() {
                $scope.expandDiv = !$scope.expandDiv;
              };

              $scope.hideTypeAhead = function() {
                $scope.showTypeAhead = false;
                $scope.showCommonSearch = false;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
              };

              $scope.toggleQueryHasFocus = function(booleanVal) {
                $scope.queryHasFocus = booleanVal;
                $scope.expandCommonDiv = false;
              };

              $scope.displayFlyout = function(query) {
                // reset scroll to top and highlight to false
                angular.element(".type-ahead-results-container")[0].scrollTop = 0;
                $scope.highlightTextSpecialists = false;
                $scope.highlightTextProcedures = false;
                if (!query) {
                  $scope.showTypeAhead = false;
                  $scope.showCommonSearch = true;
                  $scope.typeaheadError = false;
                  $scope.highlightTextSpecialists = false;
                  $scope.highlightTextProcedures = false;
                  $scope.queryHasFocus = true;
                  return;
                }

                $scope.typeaheadInProgress = true;
                $scope.showTypeAhead = true;
                $scope.showCommonSearch = false;
                var endPoint = ($scope.loggedIn && !$rootScope.noMatchPlanFound) ? 'procedures?locale=en_us&search_term=' : '?locale=en_us&search_term=';
                endPoint = endPoint + query + '&member_number=' + $scope.selectedPlan.alphaPrefix + $scope.selectedPlan.externalId + '&network_id=' + $scope.selectedPlan.id +
                  (
                    $scope.selectedPlan.policyMembers ?
                      '&dob=' + $scope.selectedPlan.policyMembers[0].birthDate.slice(0, 10) :
                      ''
                  );
                if ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) {
                  $http.post(config.typeaheadUrl + endPoint,
                    {
                      jwt: $rootScope.vitalsJWT,
                      signature: $rootScope.vitalsSignature,
                      geo_location: ($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip
                    }
                  ).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, { searchTerm: query });
                    }
                  })
                    .catch(function() {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                    });
                } else {
                  $http.get(config.typeaheadUrl + endPoint + '&geo_location=' + (($rootScope.toggleOnOff) ? TransparencyFactory.getCurrentLocationZipCode() : TransparencyFactory.getCity().zip)).then(function(result) {
                    $scope.typeaheadInProgress = false;
                    $scope.typeaheadResults = result.data;
                    $scope.typeaheadError = false;
                    if (result.data &&
                      !result.data.procedures.length &&
                      !result.data.providers.length &&
                      !result.data.search_specialties.length) {
                      $rootScope.healthNavTrackStates(3, { searchTerm: query });
                    }
                  })
                    .catch(function() {
                      $scope.typeaheadError = true;
                      $scope.typeaheadInProgress = false;
                    });
                }
              };

              $scope.expandCommonTerms = function() {
                $scope.expandCommonDiv = !$scope.expandCommonDiv;
              };

              $scope.expandSpecialties = function() {
                $scope.expandSpecialtiesDiv = !$scope.expandSpecialtiesDiv;
              };

              $scope.expandProcedures = function() {
                $scope.expandProceduresDiv = !$scope.expandProceduresDiv;
              };

              $scope.moreCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms ? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 3 : false;
              };

              $scope.anyCommonTerms = function() {
                return $scope.findDoctorSearchDetails.commonSearchTerms ? $scope.findDoctorSearchDetails.commonSearchTerms.commonSearchTerms.length > 0 : false;
              };

              $scope.goToCommonDetails = function(commonTerm) {
                if (!$scope.isZipValid) {
                  return;
                }
                TransparencyFactory.setResultsTerm(commonTerm.commonSearchTerm);
                $rootScope.gotoView(commonTerm.browsePath);
              };

              $scope.goToDetails = function(result) {
                if (!$scope.isZipValid) {
                  return;
                }
                TransparencyFactory.setSearchSpecialtyId(null);
                if (result.id && !result.provider_id) {
                  TransparencyFactory.setSearchTerm(result.name);
                  TransparencyFactory.setResultsTerm(result.name);
                  $rootScope.gotoView('/find-doctor-search-results?searchTerm=' + result.name + '&id=' + result.id + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                } else {
                  var searchTerm = result.provider_id ? result.name : result;
                  TransparencyFactory.setSearchTerm(searchTerm);
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + searchTerm + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm, planDetails, isExternalLink) {
                // External link?
                if (isExternalLink) {
                  return $rootScope.openInBrowser(url);
                }

                // Prevent forwarding if Zip Code is invalid
                if (!$scope.isZipValid) {
                  return;
                }

                $rootScope.healthNavTrackActions(4, { searchTerm: searchTerm }, analyticConstants.HOME_SECTION);

                if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                  TransparencyFactory.setResultsTerm(searchTerm);
                  TransparencyFactory.setSearchSpecialtyId($scope.findDoctorSearchDetails.urgentCareDetails[0].id);
                  $rootScope.gotoView('/find-doctor-search-results?id=' + TransparencyFactory.getSearchSpecialtyId() + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + planDetails.distance + '&searchTerm=' + searchTerm);
                } else {
                  TransparencyFactory.setSearchTerm(searchTerm);
                  $rootScope.gotoView(url + '?searchTerm=' + searchTerm + '&planName=' + $scope.planName + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id + '&smartShopperFlow=' + planDetails.acceptedSmartShopperTerms);
                }
              };

              /**
               * Toggle Current location
               *
               * @memberof findDoctorSearch
               * @method toggleCurrentLocation
               */
              $scope.toggleCurrentLocation = function() {
                $scope.currentLocationActive = !$scope.currentLocationActive;
                $rootScope.toggleOnOff = $scope.currentLocationActive;
                $rootScope.toggleIcon = $scope.currentLocationActive;
                if ($scope.currentLocation && $scope.currentLocationActive) {
                  $scope.data.city = $rootScope.currentCity;
                  $scope.validateNCZipCode($rootScope.city.zip, true);
                  TransparencyFactory.setGeoLocationStatus(true);
                  TransparencyFactory.setCity($scope.data.city);
                } else if (!$scope.currentLocation && $scope.currentLocationActive) {
                  if (navigator.geolocation) {
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 300);
                    $rootScope.$emit('pageLoading');
                    geoLocationService.getLocation().then(function(response) {
                      $rootScope.$emit('pageLoaded');
                      if (response.data && response.data.zip) {
                        $rootScope.city = response.data;
                        $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                        $rootScope.currentCity = $rootScope.city;
                        $rootScope.vitalsGeoCoords = response.data.geo;
                        TransparencyFactory.setCity(response.data);
                        TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                        TransparencyFactory.setGeoLocationStatus(true);
                        $scope.currentLocation = TransparencyFactory.getGeoLocationStatus();
                        TransparencyFactory.setLocationBlocked(false);
                        $scope.data.city = response.data;
                        $scope.data.city.cityFullName = $scope.findDoctorSearchDetails.distanceDetails.currentLocation;
                        $scope.validateNCZipCode($rootScope.city.zip);
                        if ($scope.isZipValid) {
                          $rootScope.city = $scope.data.city;
                          $rootScope.currentCity = $rootScope.city;
                          TransparencyFactory.setCity($scope.data.city);
                        }
                      } else {
                        $scope.currentLocationFailed();
                      }
                    })
                      .catch(function() {
                        $rootScope.$emit('pageLoaded');
                        $scope.currentLocationFailed();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    $scope.currentLocationFailed();
                  }
                } else {
                  $scope.data.city = { cityFullName: '' };
                }
              };

              /**
              * if finding current location fails
              *
              * @memberof findDoctorSearch
              * @method currentLocationFailed
              */

              $scope.currentLocationFailed = function() {
                $scope.isZipDirty = true;
                $scope.isZipValid = false;
                $scope.errorText = $rootScope.loc.ERROR_ENTER_CITY_COUNTY_OR_ZIP_CODE;
                $scope.data.city = { cityFullName: '' };
              };

              $scope.validateCityInput = function() {
                const resp = TransparencyFactory.validateCity(
                  $scope.data.city
                );

                if (resp.status === true) {
                  $rootScope.city = $scope.data.city;
                  TransparencyFactory.setCity($scope.data.city);
                }

                // Set error message.
                $scope.isZipValid = resp.status;
                $scope.errorText = resp.message;
              };

              $scope.saveDistance = function() {
                TransparencyFactory.setDistance($scope.data.displayDistance);
              };

              $scope.launchRefineSearch = function(query) {
                if (!$scope.typeaheadInProgress && !$scope.typeaheadError && query
                  && ($scope.typeaheadResults._meta.counts.total.providers !== 0
                    || $scope.typeaheadResults._meta.counts.total.search_specialties !== 0
                    || $scope.typeaheadResults._meta.counts.total.procedures !== 0)) {
                  $scope.modalObj.peoplePlacesLength = $scope.typeaheadResults.providers.length;
                  $scope.modalObj.specialistsWhoLength = $scope.typeaheadResults.search_specialties.length;
                  $scope.modalObj.providersPerformLength = $scope.typeaheadResults.procedures.length;
                  TransparencyFactory.setSearchTerm(query);
                  $scope.openModal(query);
                }
              };

              $scope.refineSearchClick = function(event, query) {
                if (event.key === 'Enter') {
                  $scope.launchRefineSearch(query);
                }
              };

              $scope.confirmModal = function(data, userAction) {
                if (userAction === 'specialistsWho') {
                  $scope.highlightTextSpecialists = true;
                  $scope.highlightTextProcedures = false;
                  $anchorScroll('search_specialties');
                } else if (userAction === 'providersPerform') {
                  $scope.highlightTextProcedures = true;
                  $scope.highlightTextSpecialists = false;
                  $anchorScroll('procedures');
                } else {
                  if (!$scope.isZipValid) {
                    return;
                  }
                  TransparencyFactory.setSearchTerm(this.query);
                  TransparencyFactory.setResultsTerm(this.query);
                  $rootScope.gotoView('/find-doctor-search-results?name=' + this.query + '&network_id=' + $scope.selectedPlan.id + '&planName=' + $scope.selectedPlan.name);
                }
              };

              $scope.modalObj = {
                modalTitle: $scope.findDoctorSearchDetails.modalTitle,
                modalText: $scope.findDoctorSearchDetails.modalText,
                peoplePlacesButton: {
                  title: $scope.findDoctorSearchDetails.peoplePlacesButtonTitle
                },
                specialistButton: {
                  title: $scope.findDoctorSearchDetails.specialistButtonTitle
                },
                procedureButton: {
                  title: $scope.findDoctorSearchDetails.procedureButtonTitle
                },
                values: {
                },
                peoplePlacesLength: null,
                specialistsWhoLength: null,
                providersPerformLength: null
              };

              if ($rootScope.loggedIn) {
                $scope.termsModalObj = $scope.smartShopperDetails.acceptTermsModal;
              }

              $scope.openInfoModal = function() {
                $rootScope.headerTerm = $scope.smartShopperDetails.infoModalHeader;
                $scope.helpInfo = {
                  introText_1: $scope.smartShopperDetails.infoModalBody.introText_1,
                  introText_2: $scope.smartShopperDetails.infoModalBody.introText_2,
                  title: $scope.smartShopperDetails.infoModalBody.title,
                  contents: [
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_1,
                      text: $scope.smartShopperDetails.infoModalBody.text_1,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_2,
                      text: $scope.smartShopperDetails.infoModalBody.text_2,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_3,
                      text: $scope.smartShopperDetails.infoModalBody.text_3,
                    }
                  ],
                  smartShopperInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.confirmTermsFunc = function() {
                $rootScope.smartShopperTermsAccepted = true;
                var smartShopperSearchParams = $scope.findDoctorSearchDetails.searchParams;
                smartShopperSearchParams.acceptedSmartShopperTerms = $rootScope.smartShopperTermsAccepted;
                TransparencyFactory.setSmartShopperFilter(false);
                $scope.gotoBrowseLevelPage($scope.smartShopperDetails.url, $scope.smartShopperDetails.searchTerm, $scope.findDoctorSearchDetails.searchParams, false);
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the findDoctor.
 *
 * @namespace Directives
 * @class findDoctor
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.findDoctor', [
    'blueconnect.mobile.directives.navbar'
  ])
    .directive('findDoctor', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor.html',
          scope: {
            findDoctorDetails: '=',
            plans: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            '$timeout',
            'TransparencyFactory',
            'geoLocationService',
            'adobeService',
            'analyticConstants',
            '$window',
            function ($scope, $rootScope, $timeout, TransparencyFactory, geoLocationService, adobeService, analyticConstants, $window) {
              $rootScope.vitalsError = $scope.findDoctorDetails.vitalsError ? $scope.findDoctorDetails.vitalsError : false;
              if ($scope.findDoctorDetails.vitalsError) {
                $rootScope.vitalsDown = true;
                $window.history.back();
              }

              if ($rootScope.loggedIn) {
                $rootScope.getLocale();
              } else {
                $rootScope.getInternalLocale();
              }

              if ($rootScope.loggedIn && $rootScope.menuIsOpen()) {
                $rootScope.toggleMenuOpen();
              }

              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.loggedIn = $rootScope.loggedIn || false;

              // if logged in, plans will actually be plan
              if ($scope.loggedIn === true) {
                $rootScope.selectedPolicy = Object.assign($rootScope.selectedPolicy, $scope.plans);
                $rootScope.selectedPlan = $scope.plans;
                gotoPlanDetails($rootScope.selectedPolicy);
              }

              $scope.togglePlan = function () {
                if ($scope.expandedQuestion) {
                  $scope.expandedQuestion = false;
                }
                $scope.expandedPlan = !$scope.expandedPlan;
                $rootScope.healthNavTrackToggleActions('select network', 'list', $scope.expandedPlan);
              };

              $scope.toggleQuestion = function () {
                if ($scope.expandedPlan) {
                  $scope.expandedPlan = false;
                }
                $scope.expandedQuestion = !$scope.expandedQuestion;
              };

              /**
               * Based on the plan name it will redirect to the find doctor search page
               *
               * @memberof findDoctor
               * @method gotoPlanDetails
               */
              $scope.gotoPlanDetails = gotoPlanDetails;

              function gotoPlanDetails(plan) {
                $rootScope.selectedPlan = (!$rootScope.noMatchPlanName) ? plan : null;
                TransparencyFactory.setSelectedPlan(plan);
                TransparencyFactory.setZipRangeNC($scope.findDoctorDetails.distanceDetails.NCZipMin,$scope.findDoctorDetails.distanceDetails.NCZipMax );

                if (!plan.name) {
                  plan.name = plan.lobDesc;
                }

                if ($rootScope.loggedIn) {
                   adobeService.trackAction('provider search: guided search', analyticConstants.HEALTHNAV_SECTION);
                } else {
                  adobeService.trackAction('provider search: select network: ' + plan.name, analyticConstants.HEALTHNAV_SECTION);
                }

                if ($rootScope.noMatchPlanFound && TransparencyFactory.getCity() && TransparencyFactory.getCity().zip) {
                  $rootScope.openFindCare = true;
                  return $rootScope.gotoView('/find-care');
                } else if ((plan.name.toLowerCase() == 'medicare supplement') || (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip)) {
                  $rootScope.gotoView('/find-doctor-search');
                } else {

                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setLocationBlocked(false);
                          if ($rootScope.noMatchPlanFound) {
                            $rootScope.openFindCare = true;
                            return $rootScope.gotoView('/find-care');
                          } else {
                            $scope.gotoView('/find-doctor-search');
                          }
                        } else if (response === 'position not found') {
                          // this is when I block current location
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.findDoctorDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck = plan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.findDoctorDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = plan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              }

              $scope.confirmFunc = function(data) {
                $rootScope.distance = data.distance;
                $rootScope.city = data.city;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound){
                  $rootScope.openFindCare = true;
                  $rootScope.gotoView('/find-care');
                } else {
                  $rootScope.gotoView('/find-doctor-search');
                }
              };

              $scope.modalObj = {
                locationMsg: $scope.findDoctorDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE
                },
                values: {
                  distanceDetails: $scope.findDoctorDetails.distanceDetails,
                  distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.findDoctorDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity()
                }
              };

              $scope.alertModalObj = {
                title: $scope.findDoctorDetails.title ? $scope.findDoctorDetails.title : '',
                message: $scope.findDoctorDetails.message ? $scope.findDoctorDetails.message : '',
                confirmBtn: $scope.findDoctorDetails.confirmBtn ? $scope.findDoctorDetails.confirmBtn : '',
              };
            }]
        };
      }
    ]);
}());

/**
 * Directive for the reusable full screen modal.
 *
 * @namespace Directives
 * @class fullScreenModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.fullScreenModal', [])
  .directive('fullScreenModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'help/full-screen-modal.html',
        scope: false,
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {

            /**
             * Cancel button for full screen modal
             *
             * @memberof fullScreenModal
             * @method cancel
             */
            $scope.fullScreenCancel = function () {
              angular.element('.full-screen-modal').modal('hide');
              $rootScope.blurContent = false;

              angular.element('.navbar').toggleClass('blur',false);
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the fund balance view on benefits page.
 *
 * @namespace Directives
 * @class fundBalance
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.fundData', [])
  .directive('fundData', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/fund-data.html',
        scope: {
          /**
          * Display information for the fund page.
          *
          * @memberof fundBalance
          * @member {Object} fundBalanceDetails
          */
          funds: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'config',
          'adobeService',
          function($rootScope, $scope, config, adobeService) {
            $scope.loc = $rootScope.loc;

            $scope.goToHEQ = function() {
              return $rootScope.openInSecureBrowser('appsso:healthequity');
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a help item group on the help page.
 *
 * @namespace Directives
 * @class glossaryOfTerms
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.glossaryOfTerms', [])
  .directive('glossaryOfTerms', [
    '$rootScope',
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/glossary-of-terms.html',
        scope: {
          /**
          * Display information for the help item group.
          *
          * @memberof helpItemGroup
          * @member {Object} groupDetails
          */
          data: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          function($scope, $rootScope, $location, $timeout) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
            
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for an element to go back a screen on click.
 *
 * @namespace Directives
 * @class goBack
 */
angular.module('blueconnect.mobile.directives.goBack', [])
.directive('goBack', ['$rootScope','$window', '$location', '$timeout', 'TransparencyFactory', '$route', function($rootScope, $window, $location, $timeout, TransparencyFactory, $route) {
  return {
    restrict: 'A',
    link: function(scope, elem, attrs) {
      elem.on('click', function(event) {       
        $rootScope.fromBackButton = false;
        $rootScope.detailsFromBackButton = false;
        if ($rootScope.sentMessage || $rootScope.cliamSendMessage) {
          $window.history.go(-4);
          $rootScope.sentMessage= false;
          $rootScope.cliamSendMessage = false;
        } else if ($location.path() === '/find-doctor-search' || 
        $location.path() === '/find-doctor' || 
        $location.path() === '/find-doctor-browser') {
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $rootScope.openMapView = false;
          $window.history.back();
        } else if ($location.path() === '/find-doctor-search-results') {
          $rootScope.resultsTermsArr.shift();
          TransparencyFactory.setResultsTerm($rootScope.resultsTermsArr[0]);
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $window.history.back();
        } else if ($location.path() === '/find-doctor-results-details') {
          $rootScope.resultsDetailsTermArr.shift();
          TransparencyFactory.setResultsDetailsTerm($rootScope.resultsDetailsTermArr[0]);
          $rootScope.fromBackButton = true;
          $rootScope.detailsFromBackButton = true;
          $rootScope.openMapView = ($rootScope.OpenDetailsPageFromMapView === 'map') ? true : false;
          $window.history.back();
        } else if($rootScope.openFindCare && $location.path() === '/find-care'){
          $rootScope.openFindCare = false;
          $window.history.go(-2);
        }else {
          $window.history.back();
        }
      });
    }
  };
}]);

/**
 * Directive for an element to go back to inbox.
 *
 * @namespace Directives
 * @class goInbox
 */
angular.module('blueconnect.mobile.directives.goInbox', [])
.directive('goInbox', ['$rootScope', '$location', function($rootScope, $location) {
  return {
    restrict: 'AE',
    link: function(scope, elem, attrs) {
      elem.on('click', function() {
          scope.$apply(function() {
             if($rootScope.returnToInbox !== undefined){
                $location.url($rootScope.returnToInbox);
              }
              else{
                $location.url('/home');
              }
          });
      });
    }
  };
}]);

/**
 * Directive for the healthNav page.
 *
 * @namespace Directives
 * @class healthNav
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.healthNav', [])
  .directive('healthNav', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/health-nav.html',
        scope: {
          /**
          * Display information for the healthNav page.
          *
          * @memberof about
          * @member {Object} healthNavDetails
          */
          healthNavDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          'analyticConstants',
          '$timeout',
          function($rootScope, $scope, adobeService, analyticConstants, $timeout) {
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.startingView = $rootScope.startingView;
            $scope.trackState = $rootScope.trackState;
            $scope.trackAction = $rootScope.trackAction;
            $scope.alertModal = $rootScope.alertModal;
            adobeService.trackState('memberResources', analyticConstants.HEALTHNAV_SECTION);
            
            $timeout(function() {
              if ($rootScope.vitalsDown) {
                $rootScope.vitalsDown = false;
                return $scope.openAlertModal();
              }
            });

            $scope.checkVitalsError = function() {
              if ($rootScope.vitalsError) {
                $scope.openAlertModal();
              } else {
                $scope.gotoView('/find-doctor');
              }
            };

            $scope.alertModalObj = {
              title: $scope.healthNavDetails.title ? $scope.healthNavDetails.title : '',
              message: $scope.healthNavDetails.message ? $scope.healthNavDetails.message : '',
              confirmBtn: $scope.healthNavDetails.confirmBtn ? $scope.healthNavDetails.confirmBtn : '',
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a clickable help icon that opens the help modal.
 *
 * @namespace Directives
 * @class helpIcon
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpIcon', [])
  .directive('helpIcon', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/help-icon.html',
        scope: {
          /**
          * The filename of the help content.
          *
          * @memberof helpIcon
          * @member {String} fileName
          */
          fileName: '=',
          item: '=',
          data: '=',
          header: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            /**
            * Call the helpService to display relative information
            * that might be helpful to the user
            *
            * @memberof helpIcon
            * @method showHelp
            * @param  {String} filename The name of the helpfile to load.
            */
            $scope.showHelp = function() {
              helpService.showHelp($scope.fileName, $scope.data);
              $rootScope.headerTerm = $scope.header;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a help item group on the help page.
 *
 * @namespace Directives
 * @class helpItemGroup
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpItemGroup', [])
  .directive('helpItemGroup', ['livechatService',
    function(livechatService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/help-item-group.html',
        scope: {
          /**
          * Display information for the help item group.
          *
          * @memberof helpItemGroup
          * @member {Object} groupDetails
          */
          groupDetails: '=',
          urgentCareDetails: '=',
          geoLocationDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          'quickAlertService',
          'TransparencyFactory',
          'geoLocationService',
          'analyticConstants',
          'config',
          'livechatService',
          function($scope, $rootScope, $location, $timeout, quickAlertService, TransparencyFactory, geoLocationService, analyticConstants, config, livechatService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $rootScope.selectedPlan = TransparencyFactory.getSelectedPlan();
            $scope.urltoNavigate = null;
            $scope.searchTermPassed = null;
            $scope.livechat = $rootScope.livechat;
            var chatAvailableBtns = null;
            var chatNotAvailableBtns = null;
            $scope.chatButtons = livechatService.getChatButtons();

            $rootScope.$watch("livechat.value", function(newVal, oldVal) {
              if (newVal !== oldVal && $location.path() === '/help') {
                if ($rootScope.livechat && !$rootScope.livechat.value) {
                    chatAvailableBtns.style.display='none';
                    chatNotAvailableBtns.style.display = '';
                  } else {
                    chatNotAvailableBtns.style.display = 'none';
                    chatAvailableBtns.style.display='';
                  }
              }
            }, true);

            $scope.liveChatUpdate = function() {

              $timeout(function(){
  
                chatAvailableBtns = document.getElementById("live-chat-available");
                chatNotAvailableBtns = document.getElementById("live-chat-not-available");
                if ($rootScope.livechat && !$scope.livechat.value){
                  chatAvailableBtns.style.display='none';
                  chatNotAvailableBtns.style.display = '';
                } else {
                  chatNotAvailableBtns.style.display = 'none';
                  chatAvailableBtns.style.display='';
                }
              });
            };
            if($rootScope.liveChatIntialized) {
              $scope.liveChatUpdate();
            }


            $scope.startChat = function (buttonToken) {
              livechatService.openChat(buttonToken);
            };
            $scope.liveChatAlert = function () {
              livechatService.alert();
            }; 

            $scope.gotoSSO = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };
            $timeout(function() {
              if ($rootScope.vitalsDown) {
                $rootScope.vitalsDown = false;
                return $scope.openAlertModal();
              }
            });

            $scope.checkForSso = function(link, searchTerm, isExternalLink, index) {

              if (searchTerm) {
                $rootScope.healthNavTrackActions(4, {searchTerm: searchTerm}, analyticConstants.HELP_SECTION);
              }

              if (link === '/chatnow') {
                $scope.startChat( $scope.chatButtons[index].token);                                    
              } else if (link === '/chatalert') {
                $scope.liveChatAlert();
              } else if (link.startsWith('sso')) {
                $scope.gotoSSO(link);
              } else {
                $scope.navigatePageRequested(link, searchTerm, isExternalLink);
              }
            };

            $scope.navigatePageRequested = function (url, searchTerm, isExternalLink) {
              // External link?
              if (isExternalLink) {
                return $scope.openInBrowser(url, '_blank', {});
              }
              if (url === '/chat') {
                var bsbcUrl = config.bcbsWebUrl;
                return $scope.openInBrowser(bsbcUrl);
              } else if (!$rootScope.loggedIn) {
                if ($rootScope.vitalsError && url === '/find-doctor') {
                  return $scope.openAlertModal();
                }
                $rootScope.gotoView(url);
              } else if (!$rootScope.selectedPlan.active) {
                if ($rootScope.vitalsError && url === '/find-doctor-browser') {
                  $scope.openAlertModal();
                  return;
                }
                $rootScope.gotoView(url !== '/find-doctor-browser' ? url : '/fad-auth/find-doctor');
              } else {
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                 /* noop */
                } else if (url != '/find-doctor-browser' && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  $rootScope.gotoView(url);
                } else {
                  if ($rootScope.vitalsError) {
                    $scope.openAlertModal();
                    return;
                  }
                  if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound){
                    return $rootScope.gotoView('/find-care');
                  } 
                  if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                    $scope.gotoBrowseLevelPage(url, searchTerm);
                  } else {
                    TransparencyFactory.setZipRangeNC($scope.geoLocationDetails.distanceDetails.NCZipMin,$scope.geoLocationDetails.distanceDetails.NCZipMax);
                    if (navigator.geolocation) {
                      $rootScope.$emit('pageLoading');
                      $timeout(function () {
                        $rootScope.enableLocation = true;
                      }, 0)
                          .then(function () {
                            return geoLocationService.getLocation();
                          })
                          .then(function (response) {
                            $rootScope.$emit('pageLoaded');
                            if (response.data && response.data.zip) {
                              $rootScope.city = response.data;
                              $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                              $rootScope.currentCity = $rootScope.city;
                              $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                              $rootScope.vitalsGeoCoords = response.data.geo;
                              TransparencyFactory.setDistance($rootScope.distance);
                              TransparencyFactory.setCity($rootScope.city);
                              TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                              TransparencyFactory.setGeoLocationStatus(true);
                              TransparencyFactory.setLocationBlocked(false);
                              $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                              if ($rootScope.noMatchPlanFound){
                                $rootScope.gotoView('/find-care');
                               } else {
                                 $scope.gotoBrowseLevelPage(url, searchTerm);
                               }
                            } else if (response === 'position not found') {
                              TransparencyFactory.setLocationBlocked(true);
                              TransparencyFactory.setGeoLocationStatus(false);
                              TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                              $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                              $scope.openModal();
                            } else {
                              TransparencyFactory.setLocationBlocked(false);
                              TransparencyFactory.setGeoLocationStatus(false);
                              $rootScope.$emit('pageLoaded');
                              $scope.modalObj.values.locationNotFound = true;
                              $scope.openModal();
                            }
                          })
                          .catch(function () {
                            TransparencyFactory.setLocationBlocked(false);
                            $rootScope.$emit('pageLoaded');
                            $scope.modalObj.values.locationNotFound = true;
                            $scope.openModal();
                          });
                    } else {
                      $rootScope.$emit('pageLoaded');
                      TransparencyFactory.setLocationBlocked(true);
                      TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                      $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                      $scope.openModal();
                    }
                  }
                }
              }
            };

            /**
             * Based on the user selection, go to the url with planName, zipCode, distance and search term
             *
             * @memberof findDoctorSearch
             * @method gotoBrowseLevelPage
             */
            $scope.gotoBrowseLevelPage = function(url, searchTerm) {
              $rootScope.openMapView = false;
              $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
              if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                TransparencyFactory.setResultsTerm(searchTerm);
                $rootScope.gotoView('/find-doctor-search-results?id=' + $scope.urgentCareDetails[0].id + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + TransparencyFactory.getDistance() + '&searchTerm='+ searchTerm );
              } else {
                TransparencyFactory.setSearchTerm(searchTerm);
                $rootScope.gotoView(url + '?searchTerm='+ searchTerm + '&planName='+ $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
              }
           }; // end of gotoBrowseLevelPage function


           $scope.confirmFunc = function(data) {
             $rootScope.city = data.city;
             $rootScope.distance = data.distance;
             TransparencyFactory.setDistance($rootScope.distance);
             TransparencyFactory.setCity($rootScope.city);
             TransparencyFactory.setGeoLocationStatus(false);
             if ($rootScope.noMatchPlanFound){
              $rootScope.gotoView('/find-care');
             } else {
              $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
            }
           };

           $scope.modalObj = {
             locationMsg: $scope.geoLocationDetails.locationMsg,
             cancelButton: {
               title: $scope.loc.CANCEL
             },
             confirmButton: {
               title: $scope.loc.CONTINUE
             },
             values: {
               distanceDetails: $scope.geoLocationDetails.distanceDetails,
               distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
               city: TransparencyFactory.getCity()
             }
           };

          $scope.alertModalObj = {
            title: $scope.groupDetails.alertModal && $scope.groupDetails.alertModal.title ? $scope.groupDetails.alertModal.title : '',
            message: $scope.groupDetails.alertModal && $scope.groupDetails.alertModal.message ? $scope.groupDetails.alertModal.message : '',
            confirmBtn: $scope.groupDetails.alertModal && $scope.groupDetails.alertModal.confirmBtn ? $scope.groupDetails.alertModal.confirmBtn : '',
          };

            /**
             * Toggles the quick-alert-modal for sent message if messageSent is true
             *
             * @memberof helpItemGroup
             */
             if ($location.search().messageSent) {
               $rootScope.sentMessage = true;
               quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
               $timeout(function() {
                   angular.element('.quick-alert-modal').hide();
               }, 2000);
               var search = angular.copy($location.search());
               delete search.messageSent;
               $location.search(search);
             }
          }
        ],
        // link: function($scope, $elem) {
        //   livechatService.registerButton( $elem.find("[name='live-chat-available-button']").context, 0);
        //   livechatService.registerButton( $elem.find(["name='live-chat-not-available-button'"]).context, 1);
        // }
      };
    }
  ]
);
}());

/**
 * Directive for a clickable help icon that opens the help modal.
 *
 * @namespace Directives
 * @class helpIcon
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpLink', [])
  .directive('helpLink',  ['$compile', 
    function($compile) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/help-link.html',
        scope: {
          /**
          * The filename of the help content.
          *
          * @memberof helpIcon
          * @member {String} fileName
          */
          fileName: '=',
          item: '=',
          data: '='
        },
        link: function  (scope, element, attr) {
          scope.$watch(
            function(scope) {
              // watch the 'compile' expression for changes
              return scope.$parent.$eval(attr.data);
            },
            function(value) {
              var perferred  = scope.loc.FAMILYGRAPH_FAMILYSUMMARY_PREFERREDCARE_LABEL;
              var standard = scope.loc.FAMILYGRAPH_FAMILYSUMMARY_STANDARDCARE_LABEL;
              value = value.replace(perferred, "<A ng-click='showHelp()'>" + perferred + "</A>");
              value = value.replace(standard, "<A ng-click='showHelp()'>" + standard + "</A>");              
              // when the 'compile' expression changes
              // assign it into the current DOM
              element.html(value);
              console.log(value);
              // compile the new DOM and link it to the current
              // scope.
              // NOTE: we only compile .childNodes so that
              // we don't get into infinite loop compiling ourselves
              $compile(element.contents())(scope);
            }
          );
        },
        controller: [
          '$scope',
          '$rootScope',
          'helpService',
          function($scope, $rootScope, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            /**
            * Call the helpService to display relative information
            * that might be helpful to the user
            *
            * @memberof helpIcon
            * @method showHelp
            * @param  {String} filename The name of the helpfile to load.
            */
            $scope.showHelp = function() {
              helpService.showHelp($scope.fileName, $scope.data);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable help modal.
 *
 * @namespace Directives
 * @class helpModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.helpModal', [])
  .directive('helpModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'help/help-modal.html',
        scope: false,
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.trackAction = $rootScope.trackAction;
            

            /**
             * Cancel button for help modal
             *
             * @memberof helpModal
             * @method cancel
             */
            $scope.cancel = function () {
              angular.element('.help-modal').modal('hide');
              $rootScope.blurContent = false;

              angular.element('.navbar').toggleClass('blur',false);
            };

          }
        ]
      };
    }
  ]);
}());

/**
* Directive for the benefits card on the home screen.
*
* @namespace Directives
* @class homeCardBenefitsSelect
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardBenefitsSelect', [])
  .directive('homeCardBenefitsSelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-benefits-select.html',
        scope: {
          benefits: '=',
          policySelection: '=',
          selectedPolicy: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          'adobeService',
          function($scope, $rootScope, $filter, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.policyIndex = $scope.policyIndex || 0;
            $scope.policy = $rootScope.policies[$scope.policyIndex];
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Retrieves the policy dates display string.
             *
             * @memberof homeCardBenefits
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
             * Selects a policy type title
             *
             * @memberof homeCardBenefits
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              var response;
              if(new Date(policy.expirationDate) < new Date() && (policy.isMedical || policy.isPharmacy)) {
                 response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
              } else if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };

            /**
             * Sets the benfits available if user has benefits
             *
             * @memberof homeCardBenefits
             * @method checkLink
             */
            $scope.checkLink = function() {
             if($scope.policySelection.choice == 'DENTAL_ONLY') {
               return $scope.gotoView('/benefits/dental-only');
             } else if($scope.policy.sourceSystem.toLowerCase() == 'amisys') {
              return $scope.gotoView('/medicare-benefits');
             }

             return $scope.gotoView('/benefits');
            };

            /**
             * Pass through method to external links for dental benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDentalBenefits
             */
            $scope.gotoDentalBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDrugBenefits
             */
            $scope.gotoDrugBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

          }
        ]
      };
    }
  ]);
}());

/**
* Directive for the benefits card on the home screen.
*
* @namespace Directives
* @class homeCardBenefits
*/
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardBenefits', [])
  .directive('homeCardBenefits', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-benefits.html',
        scope: {
          benefits: '=',
          policySelection: '=',
          selectedPolicy: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          'adobeService',
          'helpService',
          function($scope, $rootScope, $filter, adobeService, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.policyIndex = $scope.policyIndex || 0;
            $scope.policy = $rootScope.policies[$rootScope.selectedPolicy.index];
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Retrieves the policy dates display string.
             *
             * @memberof homeCardBenefits
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
             * Selects a policy type title
             *
             * @memberof homeCardBenefits
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              var response;
              if (new Date(policy.expirationDate) < new Date() && (policy.isMedical || policy.isPharmacy)) {
                 response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN_INACTIVE;
              } else if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };

            /**
             * Sets the benfits available if user has benefits
             *
             * @memberof homeCardBenefits
             * @method checkLink
             */
            $scope.checkLink = function() {
             if ($scope.policySelection.choice == 'DENTAL_ONLY') {
               return (!$scope.policySelection.lowCostDentalOnlyPlan) ? $scope.gotoView('/benefits/dental-only') : $scope.gotoView('/benefits/low-cost-dental-only');
             } else if ($scope.policySelection.choice == 'CONTRACEPTIVE_ONLY') {
              return $scope.gotoView('/benefits/contraceptive-only');
            } else if ($scope.policy.sourceSystem.toLowerCase() == 'amisys') {
              return $scope.gotoView('/medicare-benefits');
            }else if ($scope.policySelection.choice == 'BBTRX_ONLY') {
              return $scope.gotoView('/benefits/bbt-only');
            }else if ($scope.policySelection.choice == 'VISION_ONLY') {
              return $scope.gotoView('/benefits/vision-only');
            } 

             return $scope.gotoView('/benefits');
            };

            $scope.openModal = function() {
              if ($scope.policySelection.choice == 'CONTRACEPTIVE_ONLY') {
                $rootScope.headerTerm = $scope.benefits.modalHeader;
                $scope.helpInfo = {
                  benefitsModalText: $scope.benefits.modalText,
                  contraceptiveInfo : true
                };
                helpService.help($scope.helpInfo);
              }
            };

            /**
             * Pass through method to external links for dental benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDentalBenefits
             */
            $scope.gotoDentalBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for vision benefits
             *
             * @memberof homeCardBenefits
             * @method gotoVisionBenefits
             */
            $scope.gotoVisionBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug benefits
             *
             * @memberof homeCardBenefits
             * @method gotoDrugBenefits
             */
            $scope.gotoDrugBenefits = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * @description
 * Directive for Members set up on AutoPay using BlueConnect Mobile before we release
 * features for AutoPay Members.
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.homeCardBillingAutopayStaticContent', [])
    .directive('homeCardBillingAutopayStaticContent', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/home-card-billing-autopay-static-content.html'
        };
      }
    ]);
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.homeCardBillingError', [])
    .directive('homeCardBillingError', function() {
      return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/home-card-billing-error.html',
        scope: {
          planDetails: '<',
          error: '<'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;
          console.warn('Error retrieving home card billing data', $scope.error);
        }]
      };
    });
})();
/**
 * Directive for the billing card on the home screen.
 *
 * @namespace Directives
 * @class homeCardBilling
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardBilling', [])
  .directive('homeCardBilling', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-billing.html',
        scope: {
          /**
          * Display information for the payment.
          *
          * @memberof homeCardBilling
          * @member {Object} paymentDetails
          */
          paymentDetails: '=',
          /**
          * Display information for the plan.
          *
          * @memberof homeCardBilling
          * @member {Object} planDetails
          */
          planDetails: '=',
          /**
          * The link to take autopay members to.
          * We will have all autopay functionality in another release
          *
          * @memberof homeCardBilling
          * @member {string} billingLink
          */
          billingLink: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          'BillingInvoiceHistoryFactory',
          function($scope, $rootScope, BillingInvoiceHistoryFactory) {
            $scope.loc = $rootScope.loc;
            $scope.enterPaymentFlow = $rootScope.enterPaymentFlow;
            $scope.billingLink = $scope.billingLink.replace(/'/g, '');
            $scope.gotoView = function(url) {
              if (url.indexOf('http') === 0) {
                return $rootScope.openInSecureBrowser(url);
              }
              $rootScope.gotoView(url);
            };

            BillingInvoiceHistoryFactory.setMedicareSSAValue(!!$scope.planDetails.medicareSSA);

            $scope.amountDue = $scope.paymentDetails.amountDue ? $scope.paymentDetails.amountDue.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) : '';
            $scope.balanceForwardAmount = $scope.paymentDetails.balanceForwardAmount ? $scope.paymentDetails.balanceForwardAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'}) : '';

            /**
             * Retrieves the payment amount dollars for display.
             *
             * @memberof homeCardBilling
             * @method getAmountDueDollars
             * @return {String} The dollar amount
             */
            $scope.getAmountDueDollars = function() {
              return $scope.amountDue.slice(0, $scope.amountDue.indexOf('.') + 1) || 0;
            };

            /**
             * Retrieves the payment amount cents for display.
             *
             * @memberof homeCardBilling
             * @method getAmountDueCents
             * @return {String} The cents amount
             */
            $scope.getAmountDueCents = function() {
              return $scope.amountDue.slice($scope.amountDue.indexOf('.') + 1);
            };

            $scope.getMonth = function(dateStr) {
              if (!dateStr) {
                return null;
              }
            return dateStr.substr(0, dateStr.indexOf(' ')).toUpperCase();
            }
          }
        ]
      };
    }
  ]);

  // https://github.com/uxitten/polyfill/blob/master/string.polyfill.js
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
  if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength,padString) {
        targetLength = targetLength>>0; //floor if number or convert non-number to 0;
        padString = String(padString || ' ');
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength-this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
            }
            return String(this) + padString.slice(0,targetLength);
        }
    };
  }
}());

/**
 * Directive for the about page.
 *
 * @namespace Directives
 * @class about
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homecardChat', [])
  .directive('homeCardChat', ['livechatService',
    function(livechatService) {
    return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-chat.html',
        scope: {
          /**
          * Display information for the about page.
          *
          * @memberof about
          * @member {Object} aboutDetails
          */
          chatDetails: '=',
          liveChatDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          'config',
          '$timeout',
          '$location',
          function($rootScope, $scope, adobeService, config, $timeout, $location) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.loc = $rootScope.loc;
            $scope.chatButtons = livechatService.getChatButtons();
            var mergedResponse = null;
            var chatAvailableBtns = document.getElementById("live-chat-available-button");
            var chatNotAvailableBtns = document.getElementById("live-chat-not-available-button");

            var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;

            var liveChatObject = $scope.liveChatDetails;
            var liveChatMemberDetailsObject = liveChatObject.livechatDetailsObject;

            $.post(url + '/livechat', liveChatObject).then(function(result) {
              if (result.dateOfBirth && /\d{8}/.test(result.dateOfBirth)) {

                if (parseInt(result.dateOfBirth.slice(0,2)) < 13) {

                  result.dateOfBirth = [
                    result.dateOfBirth.slice(0,2),
                    result.dateOfBirth.slice(2,4),
                    result.dateOfBirth.slice(4,8)
                    ].join('-');
                }
            }
            liveChatMemberDetailsObject.result = result;
            mergedResponse = angular.extend({}, liveChatMemberDetailsObject.member, liveChatMemberDetailsObject.result);

            if (!window.liveagent) {
              livechatService.reloadLivechat();
              $rootScope.liveChatIntialized = false;
            }
            if (!$rootScope.liveChatIntialized) {
              $rootScope.liveChatIntialized = true;
              if (!window._laq) {
                window._laq = [];
              }

              $timeout(function() {
                window._laq.push(function () {
                  window.liveagent.showWhenOnline($scope.chatButtons[0].token, chatAvailableBtns);
                  window.liveagent.showWhenOffline($scope.chatButtons[0].token, chatNotAvailableBtns);
                });
                
                window.liveagent.init.apply(null, config.liveagent.authInit);
                angular.forEach(mergedResponse, function (value, key) {
                  try {
                    window.liveagent.addCustomDetail(key, value + '');
                  } catch (error) {
                    console.log("error live chat" + error);
                  }
                });

                window.liveagent.addButtonEventHandler($scope.chatButtons[0].token, btnEventHandler);
              }, 1000);
            }
          });
            function btnEventHandler(e){
              if (e == window.liveagent.BUTTON_EVENT.BUTTON_AVAILABLE){
                $rootScope.livechat = { value: true };
                if ($location.path() === '/help') {
                  $rootScope.$apply();
                }
              } else if (e == window.liveagent.BUTTON_EVENT.BUTTON_UNAVAILABLE){
                $rootScope.livechat = { value: false };
                if ($location.path() === '/help') {
                  $rootScope.$apply();
                }
              }
            }

            $scope.startChat = function (buttonToken) {
              livechatService.openChat(buttonToken);
            };
            $scope.liveChatAlert = function () {
              livechatService.alert();
            };           
          }
        ]
      };
    }
  ]);
}());
/**
 * Directive for the claims card on the home screen.
 *
 * @namespace Directives
 * @class homeCardClaims
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardClaims', [])
  .directive('homeCardClaims', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-claims.html',
        scope: {
          /**
          * Up to the 4 latest claims.
          *
          * @memberof homeCardClaims
          * @member {Array} claims
          */
          claims: '=',
          claimsTitle: '=',
          totalClaims: '=',
          policySelection: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'config',
          function($scope, $rootScope, config) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Generates the claim header string based on the policy type.
             *
             * @memberof homeCardClaims
             * @method getClaimsTitle
             */
            $scope.getClaimsTitle = function() {
              var titleString = "";

              switch ($scope.policySelection.choice) {
                  case "RX_ONLY":
                    titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                    break;
                  case "BBTRX_ONLY":
                    titleString = $rootScope.loc.PRESCRIPTION_CLAIMS;
                    break;
                  case "DENTAL_ONLY":
                    titleString = $rootScope.loc.DENTAL_CLAIMS;
                    break;
                  case "VISION_ONLY":
                    titleString = $rootScope.loc.BLUE2020_CLAIMS_VISION_CLAIMS;
                    break;
                  default: //We will have some form of medical included.
                    if($scope.totalClaims === 1) {
                      titleString = '1 ' + $rootScope.loc.CLAIM;
                    }
                    else if($scope.totalClaims > 1) {
                      titleString = $scope.totalClaims + ' ' + $rootScope.loc.CLAIMS;
                    }
                    else if($scope.totalClaims === 0){
                      titleString = $scope.totalClaims + ' ' + $rootScope.loc.CLAIMS;
                    }
                    else {
                      titleString = $scope.claims.length + ' ' + $rootScope.loc.CLAIMS;
                    }

                    break;
              }

              return titleString;
            };

            /**
             * Pass through method to external links for dental claims
             *
             * @memberof homeCardClaims
             * @method gotoDentalClaims
             */
            $scope.gotoDentalClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for vision claims
             *
             * @memberof homeCardClaims
             * @method gotoVisionClaims
             */
            $scope.gotoVisionClaims = function(ssoLink) {
              return $rootScope.openInSecureBrowser(ssoLink);
            };

            /**
             * Pass through method to external links for drug claims
             *
             * @memberof homeCardClaims
             * @method gotoDrugClaims
             */
            $scope.gotoDrugClaims = function(ssoLink) {
              var data = {
                ssoLink : ssoLink,
                page : "RxClmDetl"
              };
              return $rootScope.openInSecureBrowser(data);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the  Customer service card on the home screen.
 *
 * @namespace Directives
 * @class homeCardCustomerService
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardCustomerService', [])
  .directive('homeCardCustomerService', [
    function(newsService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-customer-service.html',
        scope: {
          /**
          * Display information for the customer service
          *
          * @memberof homeCardCustomerService
          * @member {Object} customerDetails
          */
          customerDetails : "=",
          fadAlertModal : "="
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Opens the default mail application
             */
            $scope.openMail = $rootScope.openMail;

            /**
            * Based on the row size it will display the items from customerDetails
            * Dividing the customerDetails object into rows
            *
            * @memberof homeCardCustomerService
            * @method getRowContent
            **/
            var rowSize = 2;

            $scope.customerDetails1 = getRowContent($scope.customerDetails, rowSize);
            function getRowContent(source, size) {
              var data = [];
              while (source.length > 0) {
                data.push(source.splice(0, size));
              }
              return data;
            }

            /**
            * Tracks a click on the card in analytics
            *
            * @memberof homeCardCustomerService
            * @method trackClick
            **/
            $scope.trackIconClick = function(item) {
              var state = '';
              switch(item.icon) {
                case 'help-compose':
                  state += 'homeComposeSecureMessageIcon';
                  break;
                case 'help-compose':
                  state += 'homeViewSecureInboxIcon';
                  break;
                case 'phone':
                  state += 'homeCallCustomerServiceIcon';
                  break;
                case 'faq':
                  state += 'homeFaqsIcon';
                  break;
                case 'circle-healthnav':
                  state += 'homeHealthNavIcon';
                  break;
                case 'feedback':
                  state += 'homeFeedbackIcon';
                  break;
                default:
                  state += 'homeUnknownIcon';
                  break;
              }
            };

            $scope.checkVitalsError = function(url) {
              if ($rootScope.vitalsError && url === '/fad-auth/find-doctor') {
                $scope.openAlertModal();
              } else {
                $scope.gotoView(url);
              }
            };

            $scope.alertModalObj = {
              title: $scope.fadAlertModal.title ? $scope.fadAlertModal.title : '',
              message: $scope.fadAlertModal.message ? $scope.fadAlertModal.message : '',
              confirmBtn: $scope.fadAlertModal.confirmBtn ? $scope.fadAlertModal.confirmBtn : '',
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the  Find Care card on the home screen.
 *
 * @namespace Directives
 * @class homeCardFindCare
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardFindCare', [])
    .directive('homeCardFindCare', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/home-card-find-care.html',
          scope: {
            /**
            * Display information for the find care
            *
            * @memberof homeCardFindCare
            * @member {Object} findCareDetails
            */
            findCareDetails: '=',
            geoLocationDetails: '=',
            jwt: '=?',
            signature: '=?',
            smartShopperDetails: '=',
          },
          controller: [
            '$scope',
            '$rootScope',
            '$timeout',
            'TransparencyFactory',
            'geoLocationService',
            'helpService',
            'analyticConstants',
            function($scope, $rootScope, $timeout, TransparencyFactory, geoLocationService, helpService, analyticConstants) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.trackState = $rootScope.trackState;
              $scope.trackAction = $rootScope.trackAction;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $rootScope.selectedPlan = TransparencyFactory.getSelectedPlan();
              $rootScope.isSmartShopperEligible = ($rootScope.loggedIn && $scope.findCareDetails.isSmartShopperEligible);
              $scope.language = $rootScope.language;

              if ($scope.jwt) {
                console.log('storing jwt', $scope.jwt.substr(0, 5));
                $rootScope.vitalsJWT = $scope.jwt;
              }
              if ($scope.signature) {
                console.log('storing signature');
                $rootScope.vitalsSignature = $scope.signature;
              }

              /**
              * Based on the row size it will display the items from careDetails
              * Dividing the customerDetails object into rows
              *
              * @memberof homeCardCareDetails
              * @method getRowContent
              **/

              var rowSize = 2;

              $scope.hasOddItems = function(items) {
                return !(items.length % 2 === 0);
              };

              $scope.careDetailsRow = ($scope.findCareDetails.links) ? getRowContent($scope.findCareDetails.links, rowSize) : null;

              function getRowContent(source, size) {
                var data = [];
                while (source.length > 0) {
                  data.push(source.splice(0, size));
                }
                return data;
              }

              $scope.gotoSSO = function(ssoLink) {
                return $rootScope.openInSecureBrowser(ssoLink);
              };

              $scope.checkForSso = function(link, searchTerm, description, isExternalLink) {
                $rootScope.healthNavTrackActions(4, { searchTerm: searchTerm }, analyticConstants.HOME_SECTION);
                if (link.startsWith('sso')) {
                  $scope.gotoSSO(link);
                } else {
                  $scope.gotoNavigatedPage(link, searchTerm, description, isExternalLink);
                }
              };

              $scope.gotoNavigatedPage = function(url, searchTerm, planDetails, isExternalLink) {
                // External link?
                if (isExternalLink) {
                  return $rootScope.openInBrowser(url, '_blank', {});
                }

                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                $scope.planDetails = planDetails;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                }
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                } else {
                  TransparencyFactory.setZipRangeNC($scope.geoLocationDetails.distanceDetails.NCZipMin, $scope.geoLocationDetails.distanceDetails.NCZipMax);
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                          if ($rootScope.noMatchPlanFound) {
                            $rootScope.gotoView('/find-care');
                          } else {
                            $scope.gotoBrowseLevelPage(url, searchTerm, planDetails);
                          }
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };


              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound) {
                  $rootScope.gotoView('/find-care');
                } else {
                  $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed, $scope.planDetails);
                }
              };

              $scope.modalObj = {
                locationMsg: $scope.geoLocationDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE
                },
                values: {
                  distanceDetails: $scope.geoLocationDetails.distanceDetails,
                  distance: (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity()
                }
              };

              $scope.gotoBrowseLevelPage = function(url, searchTerm, planDetails) {
                $rootScope.openMapView = false;
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                if (searchTerm === $scope.loc.URGENT_CARE_HOME) { // if the selection in the browse level one have id go to reults page
                  TransparencyFactory.setResultsTerm(searchTerm);
                  $rootScope.gotoView('/find-doctor-search-results?id=' + $scope.findCareDetails.urgentCareDetails[0].id + '&network_id=' + $rootScope.selectedPlan.id + '&distance=' + planDetails.distance + '&searchTerm=' + searchTerm);
                } else {
                  TransparencyFactory.setSearchTerm(searchTerm);
                  $rootScope.gotoView(url + '?searchTerm=' + searchTerm + '&planName=' + planDetails.planName + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id + '&smartShopperFlow=' + planDetails.acceptedSmartShopperTerms);
                }
              };

              $scope.alertModalObj = {
                title: $scope.findCareDetails.title || '',
                message: $scope.findCareDetails.message || '',
                confirmBtn: $scope.findCareDetails.confirmBtn || '',
                cancelBtn: $scope.findCareDetails.cancelBtn || '',
              };

              $scope.termsModalObj = $scope.smartShopperDetails.acceptTermsModal;

              $rootScope.vitalsError = $scope.findCareDetails.vitalsError ? $scope.findCareDetails.vitalsError : false;

              $scope.checkVitalsUp = function() {
                if (!$scope.findCareDetails.showSearchNav && !$scope.findCareDetails.vitalsError) {
                  return;
                } else if (!$scope.findCareDetails.vitalsError && $scope.findCareDetails.showSearchNav) {
                  $scope.gotoView('/fad-auth/find-doctor');
                } else if ($scope.findCareDetails.vitalsError) {
                  $scope.openAlertModal();
                }
              };

              $scope.openInfoModal = function() {
                $rootScope.headerTerm = $scope.smartShopperDetails.infoModalHeader;
                $scope.helpInfo = {
                  introText_1: $scope.smartShopperDetails.infoModalBody.introText_1,
                  introText_2: $scope.smartShopperDetails.infoModalBody.introText_2,
                  title: $scope.smartShopperDetails.infoModalBody.title,
                  contents: [
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_1,
                      text: $scope.smartShopperDetails.infoModalBody.text_1,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_2,
                      text: $scope.smartShopperDetails.infoModalBody.text_2,
                    },
                    {
                      title: $scope.smartShopperDetails.infoModalBody.heading_3,
                      text: $scope.smartShopperDetails.infoModalBody.text_3,
                    }
                  ],
                  smartShopperInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.confirmTermsFunc = function() {
                $rootScope.smartShopperTermsAccepted = true;
                var smartShopperSearchParams = $scope.findCareDetails.searchParams;
                smartShopperSearchParams.acceptedSmartShopperTerms = $rootScope.smartShopperTermsAccepted;
                TransparencyFactory.setSmartShopperFilter(false);
                $scope.gotoNavigatedPage($scope.smartShopperDetails.url, $scope.smartShopperDetails.searchTerm, $scope.findCareDetails.searchParams, false);
              };
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the card on the home screen for ID card.
 *
 * @namespace Directives
 * @class homeCardIdCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardIdCard', [])
  .directive('homeCardIdCard', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-id-card.html',
        scope: {
          /**
          * The policy index of the ID card.
          *
          * @memberof homeCardIdCard
          * @member {Number} policyIndex
          */
          policyIndex: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          function($scope, $rootScope, $filter) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.policyIndex = $scope.policyIndex || 0;
            $scope.policy = $rootScope.policies[$scope.policyIndex];
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Retrieves the policy dates display string.
             *
             * @memberof homeCardBenefits
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
             * Selects a policy type title
             *
             * @memberof homeCardBenefits
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              var response;
              if (new Date(policy.expirationDate) < new Date() && (policy.isMedical || policy.isPharmacy)) {
                 response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
              } else if (new Date(policy.expirationDate) < new Date() && policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN_INACTIVE;
              } else if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision){
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the info homeCardInformationAlert card on the home screen.
 *
 * @namespace Directives
 * @class homeCardInformationAlert
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardInformationAlert', [])
  .directive('homeCardInformationAlert', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-information-alert.html',
        scope: {
          /**
          * Display information for the info alert
          *
          * @memberof homeCardInformationAlert
          * @member {Object} informationDetails
          */
          informationDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            /**
             *Display the alert window for external link to open the url in browser
            **/
            $scope.openInBrowser = $rootScope.openInBrowser;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the inbox card on the home screen.
 *
 * @namespace Directives
 * @class homeCardInbox
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardInbox', [])
  .directive('homeCardInbox', [
    'messageService',
    function(messageService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-inbox.html',
        scope: {
          /**
          * Display information for the inbox card.
          *
          * @memberof homeCardInbox
          * @member {Object} inboxDetails
          */
          inboxDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
            $rootScope.unreadMessages = $scope.inboxDetails.unreadMessages;
            $rootScope.getEmailFromCpcFailed = $scope.inboxDetails.getEmailFailed || '';

            $scope.getMessageDisplayDate = messageService.getMessageDisplayDate;
            $scope.readMessage = function(message) {
              $scope.gotoView('/inbox/messages/' + message.messageId); 
              if (message.unread) {
                $rootScope.unreadMessages--;
                $rootScope.refreshNavbar();
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the news update card on the home screen.
 *
 * @namespace Directives
 * @class homeCardNewsUpdate
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardNewsUpdate', [])
  .directive('homeCardNewsUpdate', [
    function(newsService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-news-update.html',
        scope: {
          /**
          * Display information for the news update
          *
          * @memberof homeCardNewsUpdate
          * @member {Object} newsDetails
          */
          newsDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;
            /**
             * Checks the link if it has http:// and https://
             * We want to open the link in a browser or in a local view
             *
             * @memberof homeCardNewsUpdate
             * @method handleLink
             */
            $scope.handleLink = function() {
              var url = $scope.newsDetails.link;

              if(url.indexOf('http://') === 0 || url.indexOf('https://') === 0) {
                return $scope.openInBrowser(url);
              } else {
                return $scope.gotoView(url);
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the card on the home screen for information in other languages card.
 *
 * @namespace Directives
 * @class homeCardOtherLanguagesCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardOtherLanguages', [])
  .directive('homeCardOtherLanguages', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-other-languages.html',
        scope: {
          /**
          * Display information for the information in other languages card
          *
          * @memberof homeCardIdCard
          * @member {Number}
          */
          otherLanguages: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.trackAction = $rootScope.trackAction;
            /**
             * Checks the link if it has http:// and https://
             * We want to open the link in a browser or in a local view
             *
             * @memberof homeCardNewsUpdate
             * @method handleLink
             */
            $scope.handleLink = function(link) {
              var url = link;

              if(url.indexOf('http://') === 0 || url.indexOf('https://') === 0) {
                return $rootScope.openInBrowser(url);
              } else {
                return $rootScope.gotoView(url);
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the home card pcp.
 *
 * @namespace Directives
 * @class homeCardPcp
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.homecardPcp', [])
    .directive('homeCardPcp', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/home-card-pcp.html',
          scope: {
            /**
             * Display information for the pcp home card.
             *
             * @memberof about
             * @member {Object} pcpDetails
             */
            pcpDetails: '=',
          },
          controller: [
            '$rootScope',
            '$scope',
            '$filter',
            'TransparencyFactory',
            'geoLocationService',
            '$timeout',
            'helpService',
            'findDoctorService',
            'adobeService',
            'analyticConstants',
            function(
              $rootScope,
              $scope,
              $filter,
              TransparencyFactory,
              geoLocationService,
              $timeout,
              helpService,
              findDoctorService,
              adobeService,
              analyticConstants
            ) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.loc = $rootScope.loc;
              $scope.policy = $rootScope.selectedPolicy;
              $scope.detailsPage = null;
              $scope.policyMembersList = TransparencyFactory.getCurrentPolicyMembers();
              $scope.medicareUser = ($scope.policy.sourceSystem == 'Amisys');

              
              /**
               * Retrieves the policy dates display string.
               *
               * @memberof homeCardPcp
               * @param  {Object} policy The policy to get dates for.
               * @method getPolicyDates
               */
              $scope.getPolicyDates = function(policy) {
                var startDate =
                  $rootScope.loc[
                  $filter('date')(policy.effectiveDate, 'MMM').toUpperCase()
                  ] + $filter('date')(policy.effectiveDate, ' yyyy');
                var endDate =
                  $rootScope.loc[
                  $filter('date')(policy.expirationDate, 'MMM').toUpperCase()
                  ] + $filter('date')(policy.expirationDate, ' yyyy');
                var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
                var expirationMonth =
                  $rootScope.loc[
                  $filter('date')(
                    new Date('December 31, 0000 00:00:00'),
                    'MMM'
                  ).toUpperCase()
                  ];

                if (
                  new Date(policy.expirationDate) >= new Date() &&
                  policy.active
                ) {
                  endDate = $rootScope.loc.ACTIVE;
                } else if (
                  new Date(policy.expirationDate) >= new Date() &&
                  !policy.active
                ) {
                  endDate = expirationMonth + ' ' + policyYear;
                }

                return startDate + ' - ' + endDate;
              };

              /**
               * Selects a policy type title
               *
               * @memberof homeCardPcp
               * @method getPolicyPlanTitle
               */
              $scope.getPolicyPlanTitle = function(policy) {
                var response;
                if (
                  new Date(policy.expirationDate) < new Date() &&
                  (policy.isMedical || policy.isPharmacy)
                ) {
                  response = $rootScope.loc.HEALTH_PLAN_INACTIVE;
                } else if (
                  new Date(policy.expirationDate) < new Date() &&
                  policy.isDental
                ) {
                  response = $rootScope.loc.DENTAL_PLAN_INACTIVE;
                } else if (
                  new Date(policy.expirationDate) < new Date() &&
                  policy.isVision
                ) {
                  response =
                    $rootScope.loc.BLUE2020_HEADER_VISION_PLAN_INACTIVE;
                } else if (policy.isMedical || policy.isPharmacy) {
                  response = $rootScope.loc.HEALTH_PLAN;
                } else if (policy.isDental) {
                  response = $rootScope.loc.DENTAL_PLAN;
                } else if (policy.isVision) {
                  response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
                } else {
                  response = $rootScope.loc.HEALTH_PLAN;
                }
                return response;
              };

              $scope.gotoManageDependentPcp = function() {
                $rootScope.gotoView('/pcp-manage-dependents-pcp');
              };

              $scope.otherPcpSearch = function(searchInput) {
                if ($scope.policy.sourceSystem === 'Amisys') {
                  $rootScope.city = $scope.pcpDetails.getCityForAmisysUser;
                  TransparencyFactory.setCity($scope.pcpDetails.getCityForAmisysUser)
                  .setZipRangeNC($scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMin, $scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMax);
                }
                
                if (
                  TransparencyFactory.getCity() &&
                  TransparencyFactory.getCity().zip
                ) {
                  $scope.gotoPrimaryCarePage(searchInput);
                } else {
                  TransparencyFactory.setZipRangeNC($scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMin, $scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMax);
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName =
                            $rootScope.city.city +
                            $rootScope.city.state_code +
                            ' - ' +
                            $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setCurrentLocationZipCode(
                            response.data.zip
                          );
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName =
                            $scope.pcpDetails.geoLocationDetails.distanceDetails.currentLocation;
                          $scope.gotoPrimaryCarePage(searchInput);
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg(
                            $scope.pcpDetails.geoLocationDetails.locationMsg
                          );
                          $scope.modalObj.values.NCZipCheck =
                            $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg(
                      $scope.pcpDetails.geoLocationDetails.locationMsg
                    );
                    $scope.modalObj.values.NCZipCheck =
                      $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                $scope.gotoPrimaryCarePage($scope.pcpDetails.searchInput);
              };

              if ($scope.pcpDetails.noPCP) {
                adobeService.trackAction('noPCPSelected', analyticConstants.PCP_SECTION);
              }

              if ($scope.pcpDetails.geoLocationDetails) {
                $scope.modalObj = {
                  locationMsg: $scope.pcpDetails.geoLocationDetails.locationMsg,
                  pcp: true,
                  cancelButton: {
                    title: $scope.loc.CANCEL,
                  },
                  confirmButton: {
                    title: $scope.loc.CONTINUE,
                  },
                  values: {
                    distanceDetails:
                      $scope.pcpDetails.geoLocationDetails.distanceDetails,
                    distance: TransparencyFactory.getDistance()
                      ? TransparencyFactory.getDistance().toString()
                      : $scope.pcpDetails.geoLocationDetails.distanceDetails.distance.toString(),
                    city: TransparencyFactory.getCity(),
                  },
                };
              }

              $scope.gotoPrimaryCarePage = function(searchInput) {
                $scope.searchTermId = ($rootScope.selectedPlan.sourceSystem === 'Amisys') ? '260005173' : '260005172';
                TransparencyFactory.setResultsTerm(searchInput.searchTerm);
                return $rootScope.gotoView(
                  searchInput.link +
                  '?id=' + $scope.searchTermId + '&network_id=' +
                  $rootScope.selectedPlan.id +
                  '&distance=' +
                  TransparencyFactory.getDistance() +
                  '&searchTerm=' +
                  searchInput.searchTerm +
                  '&zipCode=' +
                  TransparencyFactory.getCity().zip +
                  '&planName=' +
                  searchInput.planName +
                  '&isPcpFlow=true'
                );
              };

              $scope.gotoDetailsPage = function(providerList) {
                if ($scope.policy.sourceSystem === 'Amisys') {
                  $rootScope.city = $scope.pcpDetails.getCityForAmisysUser;
                  TransparencyFactory.setCity($scope.pcpDetails.getCityForAmisysUser)
                  .setZipRangeNC($scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMin, $scope.pcpDetails.geoLocationDetails.distanceDetails.NCZipMax);
                }
                var recommendedFlow = false;
                var requestParms = null;
                if (providerList) { // only if the selection is from recommendation list
                  recommendedFlow = true;
                  if (providerList.vendorSource === 'Nuna'){
                    providerList.fullName = providerList.firstName + ' ' + providerList.middleInitial + ' ' + providerList.lastName;
                    providerList.zipCode = providerList.fullAddress.substring(providerList.fullAddress.length - 5);
                  }
                  TransparencyFactory.setResultsDetailsTerm(providerList.fullName)
                  .setRecommendedPcpData(providerList);
                  requestParms = {
                    network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                    accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                    planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                    zipCode: providerList.zipCode,
                    locationName: encodeURIComponent(providerList.practiceName),
                    doctorName: providerList.fullName
                  };
                } else {
                  TransparencyFactory.setResultsDetailsTerm($scope.pcpDetails.providerData.pcpFullName);
                  requestParms = {
                    network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                    accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                    planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                    zipCode: $scope.pcpDetails.providerData.providerZipCode,
                    locationName: encodeURIComponent($scope.pcpDetails.providerData.providerOrganizationName),
                    doctorName: $scope.pcpDetails.providerData.pcpFullName
                  };
                }
                $rootScope.$emit('pageLoading');

                findDoctorService.getDoctorDetails(requestParms)
                  .then(function(doctorResult) {
                    if (doctorResult.results && doctorResult.results.length) {
                      var viewUrl = '/find-doctor-results-details?' +
                        '&location=' + doctorResult.results[0].location_id +
                        '&provider=' + doctorResult.results[0].provider_id +
                  '&viewPcpDetails=true&recommendedFlow='+ recommendedFlow;
                      // Go to view.
                      $rootScope.gotoView(viewUrl);
                    } else {
                      $rootScope.$emit('pageLoaded');
                      $scope.pcpDetails.displayErrorMessage = true;
                      return;
                    }
                  }).catch(function(error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.pcpDetails.displayErrorMessage = true;
                    return error;
                  });
              };

              $scope.expandRecommendationList = function() {
                $scope.expandRecommendations = !$scope.expandRecommendations;
              };

              $scope.openInformationModal = function(pcpInformation) {
                $rootScope.headerTerm =
                  pcpInformation.modalHeader;
                $scope.helpInfo = {
                  pcpModalText: pcpInformation.modalText,
                  pcpInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.gotoManageDependentPcp = function() {
                $rootScope.gotoView('/pcp-manage-dependents-pcp');
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * Directive for the security settings card on the home screen.
 *
 * @namespace Directives
 * @class homeCardSettings
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.homeCardSettings', [])
  .directive('homeCardSettings', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/home-card-settings.html',
        scope: {
          /**
          * Display information for the security settings
          *
          * @memberof homeCardSettings
          * @member {Object} settings
          */
          settings: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'cordovaService',
          function($scope, $rootScope, cordovaService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            cordovaService.checkDeviceType();
            $scope.iphone = $rootScope.iphone;
            $scope.android = $rootScope.android;

            $scope.authType = $rootScope.touchIdAvailable;

            $scope.showHomeCardSettings = $rootScope.touchIdAvailable && !$rootScope.appSettings.login.useTouchId;

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the id card bottom bar.
 *
 * @namespace Directives
 * @class idCardBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardBottomBar', [])
  .directive('idCardBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-bottom-bar.html',
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          function($scope, $rootScope, $location) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.shareIdCard = function() {
              $rootScope.shareIdCard();
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the idCard Customer service tab on details page.
 *
 * @namespace Directives
 * @class idCardGroup
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardCustomerService', [])
  .directive('idCardCustomerService', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-customer-service.html',
        scope: {
          /**
          * The customer service tab to display.
          *
          * @memberof idCardCustomerService
          * @member {Object} contactDetails
          */
          contactDetails: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          function($scope, $rootScope, $location) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the image types on the id card details page.
 *
 * @namespace Directives
 * @class idCardImageTypes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardImageTypes', [])
  .directive('idCardImageTypes', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-image-types.html',
        scope: {
          /**
          * The id card image types to display.
          *
          * @memberof idCardImageTypes
          * @member {Object} imageTypes
          */
          imageTypes: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.noImages = true;
            if ($scope.imageTypes[0].images.length === 0) {
              $scope.noImages = false;
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the info box on the id card details page.
 *
 * @namespace Directives
 * @class idCardInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardInfo', [])
  .directive('idCardInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-info.html',
        scope: {
          /**
          * The id card information to display.
          *
          * @memberof idCardInfo
          * @member {Object} info
          */
          info: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the details box on the id card details page.
 *
 * @namespace Directives
 * @class idCardMemberDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardMemberDetails', [])
  .directive('idCardMemberDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-member-details.html',
        scope: {
          /**
          * The id card details to display.
          *
          * @memberof idCardMemberDetails
          * @member {Object} details
          */
          memberDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the network details box on the id card details page.
 *
 * @namespace Directives
 * @class idCardNetworkDetails
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardNetworkDetails', [])
  .directive('idCardNetworkDetails', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card-network-details.html',
        scope: {
          /**
          * The id card network details to display.
          *
          * @memberof idCardNetworkDetails
          * @member {Object} details
          */
          networkDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.networkResponsibilities = [];
            $scope.noBenefits = true;
            var benefit = $scope.networkDetails[0].benefitOption;
            if (benefit.length === 0) {
              $scope.noBenefits = false;
            }
            for(var i=0; i< Object.keys(benefit).length; i++){
              var benefitItemShortDescriptionUpperCase = ($scope.networkDetails[0].benefitOption[i].benefitItemShortDescription).toUpperCase().replace('-','_').split(' ').join('_');
              $scope.networkResponsibilities.push({
                'benefitItemDescription': $scope.networkDetails[0].benefitOption[i].benefitItemDescription,
                'benefitItemShortDescriptionLocalization' : benefitItemShortDescriptionUpperCase,
                'benefitItemShortDescription': $scope.networkDetails[0].benefitOption[i].benefitItemShortDescription
              });
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a id card details
 *
 * @namespace Directives
 * @class idCardDetails
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCardPlanDetails', [])
    .directive('idCardPlanDetails', [
      function () {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/id-card-plan-details.html',
          scope: {
            idCardPolicyDetails: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            function ($scope, $rootScope) {
              $scope.loc = $rootScope.loc;
            }
          ]
        };
      }
    ]);
}());
/**
 * Directive for the id card page.
 *
 * @namespace Directives
 * @class idCard
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.idCard', [])
  .directive('idCard', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/id-card.html',
        scope: {
          /**
          * Display information for the id card page.
          *
          * @memberof idCard
          * @member {Object} idCardDetails
          */
          idCardDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'coachmarkService',
          'shareService',
          'helpService',
          function($rootScope, $scope, coachmarkService, shareService, helpService) {
            $scope.loc = $rootScope.loc;
            $scope.itemIndex = 0;
            $scope.images =[];
            $scope.isFlipped = false;
            $scope.mimeType =  $scope.idCardDetails.image[1].mimeType;
            $scope.trackAction = $rootScope.trackAction;

            for(var j=0; j < $scope.idCardDetails.image[0].img.length; j++) {
              for(var i = 0; i < $scope.idCardDetails.image[0].img[j].document.length; i++) {
                 if ($scope.idCardDetails.image[0].img[j].document[i].documentTypeCode === "ID_IMG_F") {
                   $scope.imageFront = $scope.idCardDetails.image[1].mimeType + ',' +$scope.idCardDetails.image[0].img[j].document[i].documentImageBlob;
                 }
                 if ($scope.idCardDetails.image[0].img[j].document[i].documentTypeCode === "ID_IMG_B") {
                   $scope.imageBack = $scope.idCardDetails.image[1].mimeType + ',' +$scope.idCardDetails.image[0].img[j].document[i].documentImageBlob;
                 }
               }
               $scope.images.push({'imageFront':$scope.imageFront, 'imageBack': $scope.imageBack, 'index' : j});
            }


            if ($scope.idCardDetails.image[0].img.length) {
              coachmarkService.showCoachmarks('id-card');
            }

            $scope.buttons = [];

            for(var k=0; k< $scope.idCardDetails.buttons.length; k++){
              $scope.buttons.push(
                {
                'title' : $scope.idCardDetails.buttons[k].title,
                'title1' : $scope.idCardDetails.buttons[k].title1,
                'icon' :  $scope.idCardDetails.buttons[k].icon
              });
            }

            $rootScope.shareIdCard = function() {
              //This is WRONG. Only for poc'ing share
              var shareContent;
              var canvas = document.createElement( "canvas" );
              var ctx = canvas.getContext( "2d" );
              var img = document.createElement( "img" );
              canvas.width = "765.69";
              canvas.height = "482.35";

              if($scope.mimeType === 'data:image/svg+xml;base64') {
                if(!$scope.isFlipped){
                  img.setAttribute( "src", $scope.images[$scope.itemIndex].imageFront );
                }else {
                  img.setAttribute( "src", $scope.images[$scope.itemIndex].imageBack );
                }
                img.onload = function() {
                  ctx.drawImage( img, 0, 0 );
                  shareService.showSharing(shareService.contentType.FILES, canvas.toDataURL( "image/png" ) );
                };
              } else {
                if(!$scope.isFlipped){
                  shareContent = $scope.images[$scope.itemIndex].imageFront;
                }else {
                  shareContent = $scope.images[$scope.itemIndex].imageBack;
                }
                shareService.showSharing(shareService.contentType.FILES, shareContent);
              }
            };

            $scope.imageLength = $scope.images.length - 1;

            /**
            * This method used to if the user has multiple images to go to next image.
            *
            * @memberof idCard
            * @method goNextImage
            */

            $scope.goNextImage = function(index) {
              if(index < 0) {
                index = 0;
              }
              if(index > ($scope.images.length-1)) {
                index = ($scope.images.length-1);
              }

              $scope.itemIndex = index;
              var left = index * -75;
              angular.element('.setup-idcard').animate({'width': 100 + '%'}, 125);
              angular.element('.setup-idcard').animate({ 'margin-left' : left + '%'}, 125);
            };

            /**
            * This method used to display the image by returning style margin-left
            *
            * @memberof idCard
            * @method displayImage
            */

            $scope.displayImage = function(index){
              var leftMargin = 0;
              if (index > 0) {
                leftMargin = index * 75;
              }
              console.log(leftMargin + '%');
              return {
                'margin-left' : leftMargin + '%'
              }
            }

            /**
            * This method used to full screen the image.
            *
            * @memberof idCard
            * @method openFullScreen
            */

            $scope.openFullScreen = function(index){
              if(!$scope.isFlipped){
                helpService.imageFullScreen($scope.images[index].imageFront);
              }else{
                helpService.imageFullScreen($scope.images[index].imageBack);
              }
            };

            /**
            * This method used to flip the image back to front.
            *
            * @memberof idCard
            * @method flipCard
            */

            $scope.flipCard = function(index) {
              if($scope.isFlipped){
                $scope.isFlipped = false;
              }else {
                $scope.isFlipped = true;
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the message list bottom bar.
 *
 * @namespace Directives
 * @class inboxBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxBottomBar', [])
  .directive('inboxBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-bottom-bar.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          'adobeService',
          function($scope, $rootScope, $location, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.returnPath = $location.$$path;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the message compose screen.
 *
 * @namespace Directives
 * @class inboxCompose
 */
(function() {
  'use strict';
    angular.module('blueconnect.mobile.directives.inboxCompose', [])
    .directive('inboxCompose', [
      'messageService',
      function(messageService) {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/inbox-compose.html',
          scope: {
            /**
            * Message data preloaded if composing a reply.
            *
            * @memberof inboxCompose
            * @member {Object} message
            */
            message: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            '$location',
            '$window',
            '$timeout',
            'inquiryService',
            'quickAlertService',
            'alertService',
            'adobeService',
            'analyticConstants',
            function($scope, $rootScope, $location, $window, $timeout, inquiryService, quickAlertService, alertService, adobeService, analyticConstants) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;

              /**
              * The available inquiry types.
              *
              * @memberof inboxCompose
              * @member {Array} inquiryTypes
              */
              $scope.inquiryTypes = inquiryService.getInquiryTypes($scope.message.state);

              /**
              * Whether the message is a reply to another message.
              *
              * @memberof inboxCompose
              * @member {Boolean} isReply
              */
              $scope.isReply = typeof $scope.message.caseId !== 'undefined';



              /**
              * ($rootScope) Validates the message form. Called by the basic navbar.
              *
              * @memberof inboxCompose
              * @method onSendValidation
              */
              $rootScope.onSendValidation = function() {
                if (!$scope.messageForm.$valid) {
                  $scope.validateMessageForm();
                } else {
                  $scope.sendMessage();
                }
                $scope.$watch('message', function() {
                  $timeout(function() {
                    $scope.validateMessageForm();
                  }, 200);
                }, true);
              };

              $scope.validateMessageForm = function() {
                /**
                * SHOW/HIDE the "REQUIRED" validation
                */
                angular.element('.ng-valid').parent().children('.gray-bar-label').children('.right-action').css('display', 'none');
                angular.element('.ng-invalid').parent().children('.gray-bar-label').children('.right-action').css('display', 'inline-table');

                angular.element('.ng-valid').parent().parent().children('.gray-bar-label').children('.right-action').css('display', 'none');
                angular.element('.ng-invalid').parent().parent().children('.gray-bar-label').children('.right-action').css('display', 'inline-table');
              };

              /**
              * Delete Message alertService called by the bacisnavbarleftclick
              *
              *@memberof inboxCompose
              *@method deleteMessage
              **/
              $rootScope.deleteMessage = function() {
                alertService.showAlert($rootScope.loc.DELETE_MESSAGE, $rootScope.loc.DELETE_MESSAGE_WARNING, {
                  title: $rootScope.loc.DELETE,
                  color: 'red'
                }, {
                  title: $rootScope.loc.CANCEL
                }).then(function() {
                  adobeService.trackAction("inbox:newMessage:delete", analyticConstants.INBOX_SECTION);
                  $window.history.back();
                }, function() {
                  adobeService.trackAction("inbox:newMessage:cancel", analyticConstants.INBOX_SECTION);
                });
              };

              /**
              * Sends the message with the message service.
              *
              * @memberof inboxCompose
              * @method sendMessage
              */
              $scope.sendMessage = function() {
                adobeService.trackAction("inbox:sendConfirmation", analyticConstants.INBOX_SECTION);
                alertService.showAlert($rootScope.loc.SEND_MESSAGE, $rootScope.loc.SEND_MESSAGE_WARNING, {
                  title: $rootScope.loc.SEND,
                  color: 'green'
                }, {
                  title: $rootScope.loc.CONTINUE_EDITING
                }).then(function() {
                  $rootScope.messageSending = true;
                  $rootScope.$emit('pageLoading');

                  messageService.composeMessage(angular.copy($scope.message)).then(function() {
                    $rootScope.messageSending = false;
                    if ($location.search().option === 'claims') {
                      $location.url('/claims/'+ $location.search().claim +'/' + $location.search().dependentNo + '?messageSent=true');
                    } else {
                      adobeService.trackAction("inbox:sendConfirmation:send", analyticConstants.INBOX_SECTION);
                      $location.url($location.search().returnTo + '?messageSent=true');
                    }

                  }, function() {
                    $rootScope.$emit('pageLoaded');
                    $rootScope.messageSending = false;

                    quickAlertService.showQuickAlert({
                      message: $rootScope.loc.SEND_ERROR,
                      color: 'red',
                      alertBottom: true
                    });
                    $timeout(function() {
                      angular.element('.quick-alert-modal').hide();
                    }, 2000);
                  });
                }, function(){
                  adobeService.trackAction("inbox:sendConfirmation:continueEditing", analyticConstants.INBOX_SECTION);
                });
              };

              /**
              * Auto-sizes the mesagge body input to fill the remainder of the screen.
              *
              * @memberof inboxCompose
              * @method sizeMessageInput
              */
              $scope.sizeMessageInput = function() {
                var input = angular.element('.message-input textarea ');
                if (!input.position()) {
                  $timeout($scope.sizeMessageInput, 100);
                  return;
                }
                input.height(angular.element(document).height() - angular.element('.message-box').position().top - input.position().top - 12);
              };
              $scope.sizeMessageInput();
              /**
              * Focus at the starting of the message body.
              *
              * @method focusMessageBody
              */
              $scope.focusMessageBody = function(){
                $timeout(function () {
                  var input = angular.element('#message');
                  input[0].focus();
                  input[0].setSelectionRange(0,0);
                }, 100);
              };

              $scope.focusMessageBody();

              /**
              * Switches focus after selecting an inquiry type
              *
              * @memberof inboxCompose
              * @method switchFocus
              */
              $scope.switchFocus = function() {
                document.getElementById('subject').focus();
              };

              /**
               *
               */
              $scope.setComposeClaim = function( claim ) {
                $('#inquiryType').val('string:CLAIMS');
                $('#subject').val($rootScope.loc.COMPOSE_SUBJECT_CLAIMS);
                $('#message').val($rootScope.loc.COMPOSE_CLAIM_NUMBER_CLAIMS + ' ' + claim );
                $('#inquiryType').trigger('input').trigger('change').trigger('keydown');
                $('#subject').trigger('input').trigger('change').trigger('keydown');
                $('#message').trigger('input').trigger('change').trigger('keydown');
              };

              if ( $scope.message.option == 'claims') {
                $timeout(function () {
                  $scope.setComposeClaim( $scope.message.claim );
                });
              }

              $scope.switchFocus();
              adobeService.trackState('inbox:compose', analyticConstants.INBOX_SECTION);
            }
          ]
        };
      }
    ]);
  }());

(function() {
  angular.module('blueconnect.mobile.directives.inboxError', [])
  .directive('inboxError', function() {
    return {
      restrict: 'E',
      replace: true,
      templateUrl: 'partials/inbox-error.html',
      controller: ['$rootScope', '$scope', function($rootScope, $scope) {
        $scope.loc = $rootScope.loc;
      }]
    };
  });
})();
/**
 * Directive for the individual message bottom bar.
 *
 * @namespace Directives
 * @class inboxMessageBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxMessageBottomBar', [])
  .directive('inboxMessageBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-message-bottom-bar.html',
        scope: {
          /**
          * The message content.
          *
          * @memberof inboxMessageBottomBar
          * @member {String} message
          */
          message: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$window',
          '$location',
          '$timeout',
          '$filter',
          'alertService',
          'messageService',
          'quickAlertService',
          'shareService',
          'adobeService',
          'analyticConstants',
          function($scope, $rootScope, $window, $location, $timeout, $filter, alertService, messageService, quickAlertService, shareService, adobeService, analyticConstants) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.returnPath = $location.$$path;

            /**
             * Confirms the deletion of a message and then calls the message service to perform the deletion.
             *
             * @memberof inboxMessageBottomBar
             * @method confirmDeleteMessage
             */
            $scope.confirmDeleteMessage = function() {

              alertService.showAlert($rootScope.loc.DELETE_MESSAGE, $rootScope.loc.DELETE_MESSAGE_WARNING, {title: $rootScope.loc.DELETE, color: 'red'}, {title: $rootScope.loc.CANCEL}).then(function() {
                $rootScope.$emit('pageLoading');
                adobeService.trackAction("inbox:deleteConfirmation", analyticConstants.INBOX_SECTION);
                $scope.hideNav = true;
                messageService.deleteMessage($scope.message.messageId).then(function() {
                  adobeService.trackAction("inbox:deleteConfirmation:success", analyticConstants.INBOX_SECTION);
                  $window.history.back();
                }, function() {
                  $scope.delete = false;
                  $scope.hideNav = false;
                });
              }, function() {
                 adobeService.trackAction("inbox:deleteConfirmation:cancel", analyticConstants.INBOX_SECTION);
              });
            };

            /**
             * Based on the bookmarked flag, message is set to bookmarked(boolean)
             *
             * @memberof inboxMessageBottomBar
             * @method bookmarkMessage
             */
            $scope.bookmarkMessage = function() {

              messageService.bookmarkMessage($scope.message.messageId, !$scope.message.bookmarked).then(function() {
                if ($scope.message.bookmarked) {
                  quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_UNBOOKMARKED, color: 'blue'}, $scope.message.bookmarked);
                  $timeout(function() {
                      angular.element('.quick-alert-modal').hide();
                  }, 1200);
                } else {
                  quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_BOOKMARKED, color: 'blue'}, $scope.message.bookmarked);
                  $timeout(function() {
                      angular.element('.quick-alert-modal').hide();
                  }, 1200);
                }

                $scope.message.bookmarked = !$scope.message.bookmarked;

                $rootScope.$emit('bookMarkAlert');

              }, function() {
                console.log('bookmark failed');
              });
            };

            /**
             * Opens the sharing modal for the message.
             *
             * @memberof inboxMessageBottomBar
             * @method shareMessage
             */
            $scope.shareMessage = function() {
              var shareContent = "From: " + $scope.message.messageInitiatedBy + "\n" +
                                 "Sent: " + $filter('date')($scope.message.createdDate, 'short') + "\n" +
                                 "Subject: " + $scope.message.subject + "\n\n" + String($scope.message.body).replace(/<[^>]+>/gm, '');

              shareService.showSharing(shareService.contentType.TEXT, shareContent);
            };

            /**
             * Selects bookmark title wether boomkark or Unbookmark
             *
             * @memberof inboxMessageBottomBar
             * @method getBookmarkTitle
             */
            $scope.getBookmarkTitle = function() {
              return $scope.message.bookmarked ? $rootScope.loc.UNBOOKMARK : $rootScope.loc.BOOKMARK;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the inbox message list element.
 *
 * @namespace Directives
 * @class inboxMessageList
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxMessageList', [])
  .directive('inboxMessageList', [
    '$rootScope',
    '$timeout',
    'alertService',
    'messageService',
    'quickAlertService',
    function($rootScope, $timeout, alertService, messageService, quickAlertService) {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-message-list.html',
        scope: {
          /**
          * Display information for the inbox message list.
          *
          * @memberof inboxMessageList
          * @member {Object} messages
          */
          messages: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$route',
          'messageService',
          'adobeService',
          function($scope, $rootScope, $location, $route, messageService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            $scope.getMessageSubjectSnippet = messageService.getMessageSubjectSnippet;
            $scope.getMessageBodySnippet = messageService.getMessageBodySnippet;
            $scope.getMessageDisplayDate = messageService.getMessageDisplayDate;

            /**
             * If user wants to return from the message view, but they just replied or composed a messages, we want to replace BACK with this returnToInbox
             *
             * @memberof inboxMessageList
             */
            $rootScope.returnToInbox = $location.url();

            /**
            * Reloads the current page
            *
            * @memberof inboxMessageList
            * @method reloadPage
            */
            $scope.reloadPage = function(){
              $route.reload();
              // angular.element('#app-container').removeClass('no-scroll');
            };

            /**
            * If user doesn't have the messages based on the $location.path it will display the messages.
            */
            if($scope.messages.length === 0){
              if($location.path() ==='/inbox'){
                $scope.noMessages = $rootScope.loc.NO_INBOX_MESSAGES;
              } else if($location.path() ==='/inbox/sent') {
                $scope.noMessages = $rootScope.loc.NO_SENT_MESSAGES;
              } else if($location.path() ==='/inbox/bookmarked') {
                $scope.noMessages = $rootScope.loc.NO_MESSAGES_BOOKMARKED;
              } else if($location.path() ==='/inbox/search' && $location.search().q) {
                $scope.noMessages = $rootScope.loc.SECURE_INBOX_NO_SEARCH_RESULTS;
              } else if($location.path() ==='/inbox/search' && !$location.search().q) {
                $scope.noMessages = $rootScope.loc.SECURE_INBOX_NO_SEARCH;
              }
           }


            /**
             * Toggles the quick-alert-modal for sent message if messageSent is true
             *
             * @memberof inboxMessageList
             */
            if($location.search().messageSent) {
              $rootScope.sentMessage = true;
              quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
              $timeout(function() {
                  angular.element('.quick-alert-modal').hide();
              }, 2000);
              var search = angular.copy($location.search());
              delete search.messageSent;
              $location.search(search);
            }

            /**
             * Opens the individual message view if no message is swiped.
             *
             * @memberof inboxMessageList
             * @method openMessage
             * @param  {Object} message The message to open.
             */
            $scope.openMessage = function(message) {
              for(var i = 0; i < $scope.messages.length; i++) {
                if($scope.messages[i].swiped) {
                  $scope.messages[i].swiped = false;
                  return;
                }
              }
              if (message.unread) {
                $rootScope.unreadMessages--;
                $rootScope.refreshNavbar();
              }

              $rootScope.gotoView('/inbox/messages/' + message.messageId);
            };

            /**
             * Opens the message options when swiped left.
             *
             * @memberof inboxMessageList
             * @method swipeMessage
             * @param  {Object} message The message swiped.
             */
            $scope.swipeMessage = function(message) {
              for(var i = 0; i < $scope.messages.length; i++) {
                if($scope.messages[i].swiped) {
                  $scope.messages[i].swiped = false;
                }
              }
              message.swiped = true;
            };

            /**
             * Closes the message options when swiped right.
             *
             * @memberof inboxMessageList
             * @method unswipeMessage
             * @param  {Object} message The message swiped.
             */
            $scope.unswipeMessage = function(message) {
              if(message.swiped) {
                message.swiped = false;
              }
            };

            /**
             * Toggles whether the message is read with the message service.
             *
             * @memberof inboxMessageList
             * @method toggleRead
             * @param  {Object} message The message to toggle.
             */
            $scope.toggleRead = function(message) {
              $rootScope.$emit('pageLoading');
              $rootScope.unreadMessages = message.unread ? $rootScope.unreadMessages - 1 : $rootScope.unreadMessages + 1;

              messageService.updateMessage(message.messageId, message.unread ? 'READ' : 'UNREAD').then(function() {
                message.unread = !message.unread;
                $scope.unswipeMessage(message);
                $rootScope.$emit('pageLoaded');
                $rootScope.refreshNavbar();
              }, function(error, status) {
                $rootScope.$emit('pageLoaded');
              });
            };

            /**
             * Toggles whether the message is bookmarked with the message service.
             *
             * @memberof inboxMessageList
             * @method toggleBookmarked
             * @param  {Object} message The message to toggle.
             */
            $scope.toggleBookmarked = function(message) {
              $rootScope.$emit('pageLoading');

              messageService.bookmarkMessage(message.messageId, !message.bookmarked).then(function() {
                if($location.url().indexOf('/bookmarked') > -1) {
                  for(var i = 0; i < $scope.messages.length; i++) {
                    if(message.messageId === $scope.messages[i].messageId) {
                      $scope.messages.splice(i, 1);
                      $scope.reloadPage();
                      break;
                    }
                  }
                }
                else {
                  message.bookmarked = !message.bookmarked;
                  $scope.unswipeMessage(message);
                }

                $rootScope.$emit('pageLoaded');
              }, function(error, status) {
                $rootScope.$emit('pageLoaded');
              });
            };

            /**
             * Confirms deletion of a message and performs the action with the message service.
             *
             * @memberof inboxMessageList
             * @method confirmDeletion
             * @param  {Object} message The message to delete.
             */
            $scope.confirmDeletion = function(message) {
              alertService.showAlert($rootScope.loc.DELETE_MESSAGE, $rootScope.loc.DELETE_MESSAGE_WARNING, {title: $rootScope.loc.DELETE, color: 'red'}, {title: $rootScope.loc.CANCEL}).then(function() {
                $rootScope.$emit('pageLoading');
                angular.element('.inbox-message-list').addClass('no-scroll');
                messageService.deleteMessage(message.messageId).then(function() {
                  for(var i = 0; i < $scope.messages.length; i++) {
                    if(message.messageId === $scope.messages[i].messageId) {
                      $scope.messages.splice(i, 1);
                      $scope.reloadPage();
                      break;
                    }
                  }
                  $rootScope.$emit('pageLoaded');
                }, function(error, status) {
                  $rootScope.$emit('pageLoaded');
                });
              });
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a single inbox message.
 *
 * @namespace Directives
 * @class inboxMessage
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxMessage', [])
  .directive('inboxMessage', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-message.html',
        scope: {
          /**
          * Display information for the inbox message.
          *
          * @memberof inboxMessage
          * @member {Object} message
          */
          message: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$timeout',
          'messageService',
          'quickAlertService',
          'adobeService',
          function($scope, $rootScope, $location, $timeout, messageService, quickAlertService, adobeService) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.getMessageBodyHtml = messageService.getMessageBodyHtml;
            $scope.getMessageDisplayDate = messageService.getMessageDisplayDate;

            /**
             * Toggles the quick-alert-modal for sent message if messageSent is true
             *
             * @memberof inboxMessage
             */
             if($location.search().messageSent) {
               $rootScope.sentMessage = true;
               quickAlertService.showQuickAlert({message: $rootScope.loc.MESSAGE_SENT, color: 'green'});
               $timeout(function() {
                   angular.element('.quick-alert-modal').hide();
               }, 2000);
               var search = angular.copy($location.search());
               delete search.messageSent;
               $location.search(search);
             }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the inbox message search screen.
 *
 * @namespace Directives
 * @class inboxMessageSearch
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.inboxSearch', [])
  .directive('inboxSearch', [
    function() {

      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/inbox-search.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.invoicePayments', [])
    .directive('invoicePayments', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/invoice-payments.html',
        scope: {
          payment: '<?'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }]
      };
    });
})();
/**
 * Directive for a list messaging window.
 *
 * @namespace Directives
 * @class listMessaging
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.listMessaging', [])
  .directive('listMessaging', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/list-messaging.html',
        scope: {
          /**
          * The title of the list messaging window
          *
          * @memberof listMessaging
          * @member {String} title
          * @member {Boolean} pageName
          */
          title: '=',
          pageName: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.isComponent = $scope.pageName ? true : false;
          }
        ]
      };
    }
  ]);
}());

/**
 * @description Directive for Salesforce-drive live Agent chat.
 * @namespace Directives
 * @class liveChat
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.liveChat', [])
  .directive('liveChat', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/live-chat.html',
        controller: [
          '$scope',
          '$window',
          'config',
          'languageService',
          'livechatService',
          function($scope, $window, config, languageService, livechatService) {
            $scope.liveChatAvailable = false;
            $scope.agentAvailable = false;
            $scope.memberInitializedLiveChat = false;
            $scope.language = languageService.getDefaultLanguage();

            if (!$window.liveagent) {
              $scope.liveChatAvailable = false;
            }

            var liveagent = $window.liveagent;

            if (!config.liveagent) {
              $scope.liveChatAvailable = false;
            }



            $scope.chatButtons = livechatService.getChatButtons();

            $scope.liveChatAvailable = true;
            $scope.initializeChat = init;

            $scope.memberHasLiveChat = livechatService.memberHasLiveChat;

            function init () {
              $scope.memberInitializedLiveChat = true;
              livechatService.init();
            };

            $scope.startChat = function(buttonToken) {
              $window.liveagent.startChat(buttonToken, config.liveagent);
            };
          }
        ],
        controllerAs: 'liveChatCtrl'
      };
    }
  ]);
}());

/**
 * Directive for the login page bottom bar.
 *
 * @namespace Directives
 * @class loginBottomBar
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.loginBottomBar', [])
  .directive('loginBottomBar', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/login-bottom-bar.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          'languageService',
          function($scope, $rootScope, languageService) {
            $scope.gotoView = $rootScope.gotoView;
            if (!$rootScope.language) {
              $rootScope.setLanguage(languageService.getDefaultLanguage());
            }

            /**
             * @description Toggles the language between English and Spanish.
             * @memberof loginBottomBar
             * @method toggleLanguage
             */
            $scope.toggleLanguage = function() {
              $rootScope
                .setLanguage($rootScope.language === 'en' ? 'es' : 'en')
                .then(function(lang) {
                  $scope.loc = $rootScope.getInternalLocale(lang);
              });
            };

          }
        ]
      };
    }
  ]);
}());

(function () {
    'use strict';
    angular.module('blueconnect.mobile.directives.lookupCitiesInput', []).directive('lookupCitiesInput', function () {
        return {
            scope: {
                city: '='
            },
            controller: ['TransparencyFactory', '$http', '$rootScope', '$scope', 'config', '$timeout', function (TransparencyFactory, $http, $rootScope, $scope, config, $timeout) {
                var url = $rootScope.loggedIn ? config.apiUrl : config.capraApiUrl;
                $scope.data = {
                    cities: null,
                    displayCityName: $scope.city ? $scope.city.cityFullName : ''
                };
                $scope.$watch('city', function() {
                    $rootScope.useCurrentLocation = ($scope.city && $scope.city.cityFullName === 'Current Location');
                    if ($scope.city) {
                        $scope.data.displayCityName = $scope.city.cityFullName;
                    }
                });

                $scope.searchCities = function () {
                    $scope.city = {cityFullName: $scope.data.displayCityName};
                    $('#_cities').removeClass('hidden');
                    if ($scope.data.displayCityName) {
                        $timeout(function () {
                            $scope.getCities($scope.data.displayCityName);
                        });
                    } else {
                        $scope.$emit('validate input');
                    }
                };

                $scope.getCities = function (citySearchTerm) {

                    const isNorthCarolinaPlan = TransparencyFactory.getSelectedPlan().isNorthCarolinaPlan;
                    var requestUrl = url + '/cities?radius=' + TransparencyFactory.getDistance() + '&name=' + citySearchTerm + (isNaN(citySearchTerm) ? isNorthCarolinaPlan ? '+nc' : '' : '');

                    $http.get(requestUrl)
                        .then(function (result) {
                            if (result.data && result.data.length > 0) {
                                $scope.data.cities = result.data;
                            } else {
                                $scope.data.cities = [];
                                $scope.data.cities.push({
                                    errorMessage: $rootScope.loc.ERROR_LOCATION_NOT_FOUND
                                });
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                };

                $scope.setCity = function (selectedCity) {
                    $scope.city = selectedCity;
                    $scope.city.cityFullName = selectedCity.city + ", " + selectedCity.state_code + " - " + selectedCity.zip;
                    $scope.data.displayCityName = $scope.city.cityFullName;
                    $scope.$emit('validate input');
                    $scope.$emit('validate city input');
                    $scope.data.cities = [];
                };

            }],
            templateUrl: 'partials/lookup-cities-input.html'
        };
    });
})();
/**
 * Directive for a low-cost-dental-only-info.
 *
 * @namespace Directives
 * @class lowCostDentalOnlyInfo
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.lowCostDentalOnlyInfo', [])
    .directive('lowCostDentalOnlyInfo', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/low-cost-dental-only-info.html',
          scope: {
            /**
            * The title of the low-cost-dental-only-info.
            *
            * @memberof lowCostDentalOnlyInfo
            * @member {String} title
            */
            data: '=',
            geoLocationDetails: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'TransparencyFactory',
            '$timeout',
            'geoLocationService',
            function($scope, $rootScope, TransparencyFactory, $timeout, geoLocationService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;


              $scope.gotoNavigatedPage = function(url, searchTerm) {
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm);
               } else {
                 TransparencyFactory.setZipRangeNC($scope.geoLocationDetails.distanceDetails.NCZipMin,$scope.geoLocationDetails.distanceDetails.NCZipMax);
                 if (navigator.geolocation) {
                   $rootScope.$emit('pageLoading');
                   $timeout(function(){
                     $rootScope.enableLocation = true;
                   }, 0)
                     .then(function(val) {
                       return geoLocationService.getLocation();
                     })
                     .then(function(response) {
                       $rootScope.$emit('pageLoaded');
                       if (response.data && response.data.zip) {
                         $rootScope.city = response.data;
                         $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                         $rootScope.currentCity = $rootScope.city;
                         $rootScope.vitalsGeoCoords = response.data.geo;
                         $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                         TransparencyFactory.setDistance($rootScope.distance);
                         TransparencyFactory.setCity($rootScope.city);
                         TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                         TransparencyFactory.setGeoLocationStatus(true);
                         TransparencyFactory.setLocationBlocked(false);
                         $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                         if ($rootScope.noMatchPlanFound){
                          $rootScope.gotoView('/find-care');
                        } else {
                          $scope.gotoBrowseLevelPage(url, searchTerm);
                        } 
                       } else if (response === 'position not found') {
                         TransparencyFactory.setLocationBlocked(true);
                         TransparencyFactory.setGeoLocationStatus(false);
                         TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                         $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                         $scope.openModal();
                       } else {
                         TransparencyFactory.setLocationBlocked(false);
                         TransparencyFactory.setGeoLocationStatus(false); 
                         $rootScope.$emit('pageLoaded');
                         $scope.modalObj.values.locationNotFound = true;
                         $scope.openModal();
                       }
                     })
                     .catch(function(error) {
                       TransparencyFactory.setLocationBlocked(false);
                       $rootScope.$emit('pageLoaded');
                       $scope.modalObj.values.locationNotFound = true;
                       $scope.openModal();
                     });
                 } else {
                   $rootScope.$emit('pageLoaded');
                   TransparencyFactory.setLocationBlocked(true);
                   TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                   $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                   $scope.openModal();
                 }
               }
              }
  
              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm) {
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                TransparencyFactory.setSearchTerm(searchTerm);
                $rootScope.gotoView(url + '?searchTerm=' + searchTerm + '&planName=' + $rootScope.selectedPlan.lobDesc + '&zipCode=' + TransparencyFactory.getCity().zip + '&distance=' + TransparencyFactory.getDistance() + '&planId=' + $rootScope.selectedPlan.id);
              };// end of gotoBrowseLevelPage function
  
  
             $scope.confirmFunc = function(data) {
               $rootScope.city = data.city;
               $rootScope.distance = data.distance;
               TransparencyFactory.setDistance($rootScope.distance);
               TransparencyFactory.setCity($rootScope.city);
               TransparencyFactory.setGeoLocationStatus(false);
               if ($rootScope.noMatchPlanFound){
                $rootScope.gotoView('/find-care');
              } else {
                $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
              }
             };
  
             $scope.modalObj = {
               locationMsg: $scope.geoLocationDetails.locationMsg,
               cancelButton: {
                 title: $scope.loc.CANCEL
               },
               confirmButton: {
                 title: $scope.loc.CONTINUE
               },
               values: {
                 distanceDetails: $scope.geoLocationDetails.distanceDetails,
                 distance : (TransparencyFactory.getDistance()) ? TransparencyFactory.getDistance().toString() : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                 city: TransparencyFactory.getCity()
               }
             };
            }
          ]
        };
      }
    ]);
  }());
  
/**
 * Directive for preventing user input in a field once maxlength has been reached
 *
 * @namespace Directives
 * @class maxLengthEnforce
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.maxLengthEnforce', [])
  .directive('maxLengthEnforce', [
    function() {
      return {
        restrict: 'A',
        link: function($scope, $elem, $attrs) {
          $elem.on('keydown', function(ev) {
            var value = $elem.find('input').val();
            if (
              (ev.key !== 'Backspace' && ev.key !== 'Delete') &&
              value.length === $attrs.maxLength - 0
            ) {
              ev.preventDefault();
            }
          });
        }
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareDrugBenefitsCoverageGap', [])
  .directive('medicareDrugBenefitsCoverageGap', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-drug-benefits-coverage-gap.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicareDrugBenefits
          * @member {Object} medicareDrugBenefitsDetails
          */
          medicareDrugBenefitsCoverageGapDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareDrugBenefitsInitialCoverage', [])
  .directive('medicareDrugBenefitsInitialCoverage', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-drug-benefits-initial-coverage.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicareDrugBenefits
          * @member {Object} medicareDrugBenefitsDetails
          */
          medicareDrugBenefitsInitialCoverageDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareDrugBenefits', [])
  .directive('medicareDrugBenefits', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-drug-benefits.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicareDrugBenefits
          * @member {Object} medicareDrugBenefitsDetails
          */
          medicareDrugBenefitsDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre footnotes page.
 *
 * @namespace Directives
 * @class medicare-footnotes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareFootnotes', [])
  .directive('medicareFootnotes', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-footnotes.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareFootnotesDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.loc = $rootScope.loc;

            $scope.toggleItem = function() {
              if($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre footnotes page.
 *
 * @namespace Directives
 * @class medicare-footnotes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareGroupInfo', [])
  .directive('medicareGroupInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-group-info.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareGroupInfoDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre footnotes page.
 *
 * @namespace Directives
 * @class medicare-footnotes
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareMoreInformationPdf', [])
  .directive('medicareMoreInformationPdf', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-more-information-pdf.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareMoreInformationPdfDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.loc = $rootScope.loc;

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the faq page.
 *
 * @namespace Directives
 * @class faq
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicarePlanBenefits', [])
  .directive('medicarePlanBenefits', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-plan-benefits.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicarePlanBenefitsDetails: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.gotoView = $rootScope.gotoView;

            $scope.toggleItem = function() {
              if ($scope.expandedDiv){
                $scope.expandedDiv = true;
              }

              $scope.expandedDiv = !$scope.expandedDiv;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the mediacre supp-plan page.
 *
 * @namespace Directives
 * @class medicare-supp-plan
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.medicareSuppPlan', [])
  .directive('medicareSuppPlan', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/medicare-supp-plan.html',
        scope: {
          /**
          * Display information for the medicare page.
          *
          * @memberof medicarePlanBenefits
          * @member {Object} medicarePlanBenefitsDetails
          */
          medicareSuppPlanDetails: '=',
          policy: '=',
          policyIndex: '='
        },
        controller: [
          '$rootScope',
          '$scope',
          'adobeService',
          function($rootScope, $scope, adobeService) {
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.gotoView = $rootScope.gotoView;
            $scope.loc = $rootScope.loc;

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the member savings total on the claims page.
 *
 * @namespace Directives
 * @class memberSavingsFooter
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.memberSavingsFooter', [])
  .directive('memberSavingsFooter', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/member-savings-footer.html',
        scope: {
          /**
          * The member savings total.
          *
          * @memberof memberSavingsFooter
          * @member {Object} memberSavings
          */
          memberSavings: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;

            /**
             * Returns the member savings amount as currency.
             *
             * @memberof memberSavingsFooter
             * @method getSavingsDollarAmount
             * return {String} The member savings as currency.
             */
            $scope.getSavingsDollarAmount = function() {
              return '$' + $scope.memberSavings.toFixed(2);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the navbar loading spinner.
 *
 * @namespace Directives
 * @class navbarLoading
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.navbarLoading', [])
  .directive('navbarLoading', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/navbar-loading.html',
        scope: false
      };
    }
  ]);
}());

/**
 * Directive for the main navbar.
 *
 * @namespace Directives
 * @class navbar
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.navbar', [])
    .directive('navbar', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/navbar.html',
          scope: {
            /**
             * Information for drawing the navbar.
             *
             * @memberof navbar
             * @member {Object} navbarDetails
             */
            navbarDetails: '=',
            urgentCareDetails: '=',
            geoLocationDetails: '=',
          },
          controller: [
            '$location',
            '$scope',
            '$rootScope',
            '$sce',
            '$timeout',
            'livechatService',
            'messageService',
            'alertService',
            'adobeService',
            'coachmarkService',
            'PaymentFlowFactory',
            'TransparencyFactory',
            'geoLocationService',
            'config',
            function(
              $location,
              $scope,
              $rootScope,
              $sce,
              $timeout,
              livechatService,
              messageService,
              alertService,
              adobeService,
              coachmarkService,
              PaymentFlowFactory,
              TransparencyFactory,
              geoLocationService,
              config
            ) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.urltoNavigate = null;
              $scope.searchTermPassed = null;
              $scope.livechatIsAvailable = false;
              $scope.loc = $rootScope.loc;
              $scope.memberInitializedLiveChat = false;
              $scope.chatButtons = livechatService.getChatButtons();

              $scope.startChat = function (buttonToken) {
                livechatService.openChat(buttonToken);
              };
              $scope.liveChatAlert = function () {
                livechatService.alert();
              }; 

              /**
               * Returns whether or not to hide the right icon on the navigation.
               *
               * @memberof navbar
               * @method rightNavIconHidden
               * @return {Boolean} Whether or not the icon should be hidden.
               */
              $scope.rightNavIconHidden = function rightNavIconHidden() {
                return $rootScope.hideRightNavIcon;
              };

              /**
               * Returns whether the left nav button matches the provided type.
               *
               * @memberof navbar
               * @method leftNavButtonIs
               * @param  {String}  The button type to check for.
               * @return {Boolean} The left nav button matches the type.
               */
              $scope.leftNavButtonIs = function(type) {
                return $rootScope.leftNavButton === type;
              };

              /**
               * Returns whether the current view is the home view.
               *
               * @memberof navbar
               * @method viewIsHome
               * @return {Boolean} Whether the view is '/' or '/home'.
               */
              $scope.viewIsHome = function() {
                return $rootScope.getViewUrl() === '/' || $rootScope.getViewUrl() === '/home';
              };

              /**
               * Toggles the menu drawer.
               *
               * @memberof navbar
               * @method toggleMenuOpen
               */
              $scope.toggleMenuOpen = function() {
                if ($rootScope.liveChatIntialized && $rootScope.selectedPolicy.active && !$rootScope.selectedPolicy.isVision && !$rootScope.selectedPolicy.isDental) {
                  $scope.chatAvailableBtns = document.getElementById("navbar-live-chat-available");
                  $scope.chatNotAvailableBtns = document.getElementById("navbar-live-chat-not-available");
                  if ($rootScope.livechat && $scope.chatAvailableBtns && $scope.chatNotAvailableBtns) {
                    if (!$rootScope.livechat.value ){
                      $scope.chatAvailableBtns.style.display='none';
                      $scope.chatNotAvailableBtns.style.display = '';
                    } else {
                      $scope.chatNotAvailableBtns.style.display = 'none';
                      $scope.chatAvailableBtns.style.display='';
                    }
                  }
                }


                $scope.trackButtonAction('homeMenu:' + ($scope.menuOpen ? 'close' : 'open'));

                $rootScope.closePolicySelect();
                $scope.menuOpen = !$scope.menuOpen;
                $rootScope.blurContent = $scope.menuOpen;
                if ($scope.menuOpen) {
                  coachmarkService.showCoachmarks('menu');
                }
              };
              $rootScope.toggleMenuOpen = $scope.toggleMenuOpen;

              $scope.menuIsOpen = function() {
                return $scope.menuOpen;
              };
              $rootScope.menuIsOpen = $scope.menuIsOpen;

              $scope.trackButtonAction = function(action) {
                var section = $location.path().split('/')[1];

                section = section[0].toUpperCase() + section.slice(1);
                adobeService.trackAction(action, section);
              };

              /**
               * Returns the current page title as trusted HTML.
               *
               * @memberof navbar
               * @method getPageTitle
               * @return {Object} The trusted HTML object.
               */
              $scope.getPageTitle = function() {
                return $sce.trustAsHtml($rootScope.pageTitle);
              };

              /**
               * Retrieves the unread inbox messge count on a 120 second interval.
               *
               * @memberof navbar
               * @method getUnreadMessageCount
               */
              $scope.getUnreadMessageCount = function() {
                messageService.getCounts().then(function(counts) {
                  for (var i = 0; i < $scope.navbarDetails.menuItems.length; i++) {
                    if ($scope.navbarDetails.menuItems[i].link === '/inbox') {
                      $scope.navbarDetails.menuItems[i].badge = counts.unreadMessages;
                      $timeout($scope.getUnreadMessageCount, 120 * 1000);
                      break;
                    }
                  }
                });
              };

              /**
               * Takes a member to a view.
               *
               * @memberof navbar
               * @method gotoView
               */
              $scope.gotoView = function(view, i) {
                if (view === 'menu'){
                  view = $scope.navbarDetails.menuItems[i].link;
                }
                if (view === '/help') {
                  $scope.trackButtonAction('help');
                }

                if (view === '/logout') {
                  return alertService
                    .showAlert(
                      $rootScope.loc.LOG_OUT_CONFIRM,
                      null,
                      { title: $rootScope.loc.LOG_OUT, color: 'red' },
                      { title: $rootScope.loc.CANCEL }
                    )
                    .then(function() {
                      $rootScope.logOut();
                    });
                }

                if (/payment/.test($location.url())) {
                  PaymentFlowFactory.reset();
                }

                if (view === '/chatnow') {
                  var chatId = $scope.navbarDetails.menuItems[i].index;
                  $scope.startChat($scope.chatButtons[chatId].token);                                   
                } else if (view === '/chatalert') {
                  $scope.liveChatAlert();
                } else {
                  $rootScope.gotoView(view);
                }
              };

              $scope.gotoNavigatedPage = function(url, searchTerm, isExternalLink) {
                // External link?
                if (isExternalLink) {
                  $scope.gotoExternalLink(url);
                } else {
                  $scope.gotoInternalPage(url, searchTerm);
                }
              };

              $scope.gotoExternalLink = function(url) {
                return $rootScope.openInBrowser(url, '_blank', {});
              };

              $scope.gotoInternalPage = function(url, searchTerm) {

                if (!url && searchTerm !== $scope.loc.URGENT_CARE_HOME) {
                  return;
                }
                if ($rootScope.vitalsError) {
                  $scope.openAlertModal();
                  return;
                }
                $scope.urltoNavigate = url;
                $scope.searchTermPassed = searchTerm;
                if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && $rootScope.noMatchPlanFound) {
                  return $rootScope.gotoView('/find-care');
                } else if (TransparencyFactory.getCity() && TransparencyFactory.getCity().zip && !$rootScope.noMatchPlanFound) {
                  $scope.gotoBrowseLevelPage(url, searchTerm);
                } else {
                  TransparencyFactory.setZipRangeNC(
                    $scope.geoLocationDetails.distanceDetails.NCZipMin,
                    $scope.geoLocationDetails.distanceDetails.NCZipMax
                  );
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName = $rootScope.city.city + $rootScope.city.state_code + ' - ' + $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setCurrentLocationZipCode(response.data.zip);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName = $scope.geoLocationDetails.distanceDetails.currentLocation;
                          if ($rootScope.noMatchPlanFound) {
                            $rootScope.gotoView('/find-care');
                          } else {
                            $scope.gotoBrowseLevelPage(url, searchTerm);
                          }
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                          $scope.modalObj.values.NCZipCheck =
                          $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg($scope.geoLocationDetails.locationMsg);
                    $scope.modalObj.values.NCZipCheck = $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };

              $scope.alertModalObj = {
                title: $scope.navbarDetails.alertModal && $scope.navbarDetails.alertModal.title ? $scope.navbarDetails.alertModal.title : '',
                message: $scope.navbarDetails.alertModal && $scope.navbarDetails.alertModal.message ? $scope.navbarDetails.alertModal.message : '',
                confirmBtn: $scope.navbarDetails.alertModal && $scope.navbarDetails.alertModal.confirmBtn ? $scope.navbarDetails.alertModal.confirmBtn : '',
              };

              /**
               * Based on the user selection, go to the url with planName, zipCode, distance and search term
               *
               * @memberof findDoctorSearch
               * @method gotoBrowseLevelPage
               */
              $scope.gotoBrowseLevelPage = function(url, searchTerm) {
                $rootScope.openMapView = false;
                $rootScope.city = (!$rootScope.city) ? $rootScope.newCity : $rootScope.city;
                if ($scope.navbarDetails.selectedPolicy.active) {
                  if (searchTerm === $scope.loc.URGENT_CARE_HOME) {
                    // if the selection in the browse level one have id go to results page
                    TransparencyFactory.setResultsTerm(searchTerm);
                    $rootScope.gotoView(
                      '/find-doctor-search-results?id=' +
                        $scope.urgentCareDetails[0].id +
                        '&network_id=' +
                        $rootScope.selectedPlan.id +
                        '&distance=' +
                        TransparencyFactory.getDistance() +
                        '&searchTerm=' +
                        searchTerm
                    );
                  } else {
                    TransparencyFactory.setSearchTerm(searchTerm);
                    $rootScope.gotoView(
                      url +
                        '?searchTerm=' +
                        searchTerm +
                        '&planName=' +
                        $rootScope.selectedPlan.lobDesc +
                        '&zipCode=' +
                        TransparencyFactory.getCity().zip +
                        '&distance=' +
                        TransparencyFactory.getDistance() +
                        '&planId=' +
                        $rootScope.selectedPlan.id
                    );
                  }
                } else {
                  //if the policy is not active redirect to search landing page
                  $rootScope.gotoView('/fad-auth/find-doctor');
                }
              }; // end of gotoBrowseLevelPage function

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                if ($rootScope.noMatchPlanFound) {
                  $rootScope.gotoView('/find-care');
                } else {
                  $scope.gotoBrowseLevelPage($scope.urltoNavigate, $scope.searchTermPassed);
                }
              };

              $scope.modalObj = {
                locationMsg: $scope.geoLocationDetails.locationMsg,
                cancelButton: {
                  title: $scope.loc.CANCEL,
                },
                confirmButton: {
                  title: $scope.loc.CONTINUE,
                },
                values: {
                  distanceDetails: $scope.geoLocationDetails.distanceDetails,
                  distance: TransparencyFactory.getDistance()
                    ? TransparencyFactory.getDistance().toString()
                    : $scope.geoLocationDetails.distanceDetails.distance.toString(),
                  city: TransparencyFactory.getCity(),
                },
              };

              $scope.returnFADLinks = function() {
                if (!$scope.navbarDetails.selectedPolicy.active) {
                  $scope.navbarDetails.findCareItems.forEach(function(element) {
                    if (!element.externalLink) {
                      element.link = '/fad-auth/find-doctor';
                    }
                  });
                }
                return $scope.navbarDetails.findCareItems;
              };

              // If the inbox menu item is present, start the unread count update
              for (var i = 0; i < $scope.navbarDetails.menuItems.length; i++) {
                if ($scope.navbarDetails.menuItems[i].link === '/inbox') {
                  $timeout($scope.getUnreadMessageCount, 120 * 1000);
                }
              }
            },
          ],
        };
      },
    ])
    .directive('findDoctorNavbarListItem', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/find-doctor-list-item.html',
          scope: {
            name: '@',
            title: '@',
            icon: '@',
            description: '@',
            externalLink: '@?',
            link: '@',
            toggleMenuOpen: '<',
            gotoNavigatedPage: '<',
          },
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.gotoView = $rootScope.gotoView;

              /**
               * Pass through method to external links for drug benefits
               *
               * @memberof homeCardBenefits
               * @method gotoDrugBenefits
               */
              $scope.gotoSSO = function(ssoLink) {
                return $rootScope.openInSecureBrowser(ssoLink);
              };

              $scope.checkForSso = function(link, description, isExternalLink) {
                $rootScope.healthNavTrackActions(
                  0,
                  { title: 'guided search: ' + description, searchTerm: description },
                  'Menu'
                );
                // Check sso.
                if (link.startsWith('sso')) {
                  $scope.gotoSSO(link);
                } else {
                  $scope.gotoNavigatedPage(link, description, isExternalLink);
                }
              };
            },
          ],
        };
      },
    ]);
})();

/**
 * @description
 * Directive for the paid component showing a Member is fully paid.
 *
 * @example
 * <paid-component></paid-component>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.paidComponent', [])
    .directive('paidComponent', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          scope: false,
          templateUrl: 'partials/paid-component.html'
        };
      }
    ]);
})();
/**
 * Directive for the payment flow autopay pending confirmation.
 *
 * @namespace Directives
 * @class paymentFlowAutoPayPending
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowAutoPayPending', [])
      .directive('paymentFlowAutoPayPending', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-autopay-pending.html',
            scope: {
              billingInfo: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowAutopayPromo', [])
    .directive('paymentFlowAutopayPromo', function() {
      return {
        restrict: 'E',
        replace: false,
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.paymentFrequencySelected = PaymentFlowFactory.getPaymentFrequency();
          $scope.hideAutopayPromo = /auto/i.test($scope.paymentFrequencySelected);
          $scope.gotoView = function(url) {
            PaymentFlowFactory.setPaymentFlow('autopay').setPaymentFrequency('autopay');
            return $rootScope.gotoView(url);
          }
        }],
        templateUrl: 'partials/payment-flow-autopay-promo.html'
      }
    });
})();
/**
 * Directive for the payment flow autopay setup confirmation.
 *
 * @namespace Directives
 * @class paymentFlowAutoPaySetup
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowAutoPaySetup', [])
      .directive('paymentFlowAutoPaySetup', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-autopay-setup.html',
            scope: {
              billingInfo: '=',
              userSelectedAutoPay: '=?',
              flowIsAutopay: '=?'
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();

                if ($scope.flowIsAutopay){
                  $scope.showAutoPay = true;
                }else {
                  //if the user is in autopay they come to the screen with only the autopay option showing and autopay automatically selected
                  $scope.showAutoPay = (
                      (
                          // Displays when account balance > 0 and user is not outside of reinstatement period.
                          $scope.billingInfo.isPaymentProcessing ?
                              $scope.billingInfo.currentInvoice.remainingBalance > 0:
                              $scope.billingInfo.currentInvoice.totalDueAmount > 0
                      )
                      // doesn't show when user is in reinstatement, at all
                      // doesn't show when user is a medicare member
                      && !$scope.billingInfo.memberInReinstatement && $scope.billingInfo.policyMembership.enrollmentSourceSystemCode.toLowerCase() !== 'amisys'
                  );

                }
              }
            ]
          };
        }
      ]);
}());

/**
 * Directive for the payment flow autopay success confirmation.
 *
 * @namespace Directives
 * @class paymentFlowAutoPaySuccess
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowAutoPaySuccess', [])
      .directive('paymentFlowAutoPaySuccess', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-autopay-success.html',
            scope: {
              billingInfo: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowBankDetails', [])
    .directive('paymentFlowBankDetails', function() {
      return {
        templateUrl: 'partials/payment-flow-bank-details.html',
        controllerAs: 'bankDetailsCtrl',
        scope: {
          billingInfo: '=',
          userData: '='
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          if(!$scope.userData.accountHolderName &&
            $scope.billingInfo &&
            $scope.billingInfo.userIdentity) {
            $scope.userData.accountHolderName = normalizedName($scope.billingInfo.userIdentity.givenName) + ' ' + normalizedName($scope.billingInfo.userIdentity.familyName);
          }
          $scope.namePattern = /[a-zA-z0-9]/;
          $scope.routingNumberPattern = /^[0-9]{9}$/;
          $scope.accountNumberPattern = /^[0-9]{8,17}$/;

          /**
           * Takes a string and makes all except the first letter lower case
           * @param {string} name
           * @return {string}
           */
          function normalizedName(name) {
            if(!name) {
              return;
            }
            return name.replace(/\B[A-Z]+/, function(ending) { return ending.toLowerCase() })
          }
        }]
      };
    });
})();
/**
 * Directive for the payment flow billing method.
 *
 * @namespace Directives
 * @class paymentFlowBillingMethod
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowBillingMethod', [])
    .directive('addressValidation', [
      'config',
      '$http',
      '$q',
      function(config, $http, $q) {
        return {
          restrict: 'A',
          require: '^form',
          link: function($scope, $elem, $attrs, $ctrl) {
            var paymentInputCtrl = $ctrl[$attrs.formLabel];
            // set lastAddress to null to track once directive is rendered
            var lastAddress = null;

            $scope.$parent.$watch('userData.preferences.mailingAddress', function() {
              // re-validate this field if the mailing address changes
              paymentInputCtrl.$validate();
            }, true);
            paymentInputCtrl.$asyncValidators.cityStateZipMatch = function(oldValue, newValue) {
              // if the value isn't changing, don't launch the async function
              // we do check if the value is null for the first time the address is rendered
              // in this way, we always check the address at least once if it exists already
              if (angular.equals(lastAddress, $scope.$parent.userData.preferences.mailingAddress) && lastAddress !== null) {
                return $q.resolve();
              }

              // if the value is different than what we last checked, let's validate
              return $q(function(resolve, reject) {
                lastAddress = angular.copy($scope.$parent.userData.preferences.mailingAddress);
                paymentInputCtrl.$setDirty();
                $http.post(
                  config.apiUrl + '/address',
                  {
                    postalCode: paymentInputCtrl.$viewValue,
                    stateCode: $scope.$parent.userData.preferences.mailingAddress.stateCode,
                    cityName: $scope.$parent.userData.preferences.mailingAddress.cityName,
                  }
                )
                .then(function(response) {
                  if (response.data.addressError === true) {
                    reject();
                    // timing issue in AngularJS is causing us to have to set this
                    // programmatically instead of it being handled by $asyncValidators
                    if (paymentInputCtrl.$valid) {
                      paymentInputCtrl.$setValidity('cityStateZipMatch', false);
                    }
                  } else {
                    return resolve();
                  }

                })
                .catch(function(error) {
                  reject();
                });
              });
            }
          }
        }
      }
    ])
    .directive('paymentFlowBillingMethod', [
      function() {
        return {
          scope: {
            /**
             * @param {Object} userData
             * @param {Object} userData.preferences
             */
            balanceInfo: '=',
            userData: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-billing-method.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            $scope.loc = $rootScope.loc;
            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            // $scope.userData = PaymentFlowFactory.getUserSetData();
            $scope.paymentFlow = PaymentFlowFactory.getPaymentFlow();

            var billingMethodSelected = PaymentFlowFactory.getBillingMethod();
            if (billingMethodSelected) {
              $scope.billingMethodSelected = billingMethodSelected;
            }
            if($scope.paymentFlow === 'otp') {
              $scope.billingMethodSelected = 'email';
            }

            if(
              (!$scope.userData.preferences ||
              !$scope.userData.preferences.emailAddress) &&
              $scope.balanceInfo.preferences &&
              $scope.balanceInfo.preferences.emailAddress
            ) {
              $scope.userData.preferences.emailAddress = $scope.balanceInfo.preferences.emailAddress;
            }

            if (
                (!$scope.userData.preferences ||
                !$scope.userData.preferences.mailingAddress.addressLine1) &&
                $scope.balanceInfo.preferences &&
                $scope.balanceInfo.preferences.mailingAddress &&
                Object.keys($scope.balanceInfo.preferences.mailingAddress).length
              ) {
                $scope.userData.preferences.mailingAddress = $scope.balanceInfo.preferences.mailingAddress;
              }

            var paymentFlowSelected = PaymentFlowFactory.getPaymentFlow();
            if (paymentFlowSelected === 'otp' &&
                $scope.preferences &&
                $scope.balanceInfo.preferences.isPaperless === false
              ) {
                $scope.billingMethodSelected = 'email';
              }
          }]
        };
      }
    ])
    .directive('paymentFlowBillingMethodMedicare', [
      function() {
        return {
          scope: {
            /**
             * @param {Object} userData
             * @param {Object} userData.preferences
             */
            balanceInfo: '=',
            userData: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-billing-method-medicare.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            // $scope.userData = PaymentFlowFactory.getUserSetData();
            $scope.paymentFlow = PaymentFlowFactory.getPaymentFlow();

            var billingMethodSelected = PaymentFlowFactory.getBillingMethod();
            if (billingMethodSelected) {
              $scope.billingMethodSelected = billingMethodSelected;
            }
            if ($scope.paymentFlow === 'otp') {
              $scope.billingMethodSelected = 'postal';
            }

            if (
              (!$scope.userData.preferences ||
              !$scope.userData.preferences.emailAddress) &&
              $scope.balanceInfo.preferences &&
              $scope.balanceInfo.preferences.emailAddress
            ) {
              $scope.userData.preferences.emailAddress = $scope.balanceInfo.preferences.emailAddress;
            }

            if (
                (!$scope.userData.preferences ||
                !$scope.userData.preferences.mailingAddress.addressLine1) &&
                $scope.balanceInfo.preferences &&
                $scope.balanceInfo.preferences.mailingAddress &&
                Object.keys($scope.balanceInfo.preferences.mailingAddress).length
              ) {
                $scope.userData.preferences.mailingAddress = $scope.balanceInfo.preferences.mailingAddress;
              }

            var paymentFlowSelected = PaymentFlowFactory.getPaymentFlow();
            if (paymentFlowSelected === 'otp' &&
                $scope.preferences &&
                $scope.balanceInfo.preferences.isPaperless === false
              ) {
                $scope.billingMethodSelected = 'email';
              }
          }]
        };
      }
    ]);
}());
(function() {
  angular.module('blueconnect.mobile.directives.paymentFlowCancelButton', [])
    .directive('paymentFlowCancelButton', function() {
      return {
        template: [
        '<cta-button-row>',
          '<cta-button ng-click="openModal()" class="white"><span ng-bind="::loc.CANCEL"></span></cta-button>',
        '</cta-button-row>',
        '<extendable-alert-modal open-modal-fn-alias="openModal" confirm-fn="goToBillingSummary"  ng-class="{show: showModal}" modal-info="cancelModalObj"></extendable-alert-modal>'
        ].join(''),
        controller: ['$rootScope', '$scope', 'PaymentFlowFactory',function($rootScope, $scope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.goToBillingSummary = function() {
            PaymentFlowFactory.reset();
            $rootScope.gotoView('/billing');
          };

          $scope.cancelModalObj = {
            title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
            body: $scope.loc.BP_ARE_YOU_SURE,
            cancelButton: {
              title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
            },
            confirmButton: {
              color: 'red',
              title: $scope.loc.BP_CANCEL_PAYMENT
            }
          };
        }]
      };
    })
    .directive('editCreditDetailsButton', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/edit-credit-details-button.html',
        scope: {
          paymentMethod: '<',
          cancelRoute: '@',
          buttonTitle: '<'
        },
        controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;
          $scope.goToBillingSummary = function() {
            PaymentFlowFactory.resetCreditCardDetails();
            $rootScope.gotoView($scope.cancelRoute);
          };

          $scope.cancelModalObj = {
            title: $scope.loc.BP_HEADER_ARE_YOU_SURE,
            body: $scope.loc.BP_EDIT_PAYMENT_REENTER_DETAILS,
            cancelButton: {
              title: $scope.loc.BP_CONTINUE_TO_MAKE_PAYMENT
            },
            confirmButton: {
              color: 'blue',
              title: $scope.loc.BP_EDIT_PAYMENT_INFO
            }
          };
        }]
      };
    });
})();
'use strict';
/**
 * Takes a parameter value as a boolean for whether the checkbox is checked or not
 */
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowCheckbox', [])
    .directive('pfCheckbox', function() {
      return {
        restrict: 'E',
        transclude: true,
        templateUrl: 'partials/payment-flow-checkbox.html',
        scope: {
          value: '='
        },
        controller: ['$scope', function($scope) {
          if($scope.value === undefined) {
            $scope.value = false;
          }
          $scope.toggleCheckbox = function() {
            $scope.value = !$scope.value;
          };
        }]
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowCreditCardDetails', [])
    .directive('mobileCreditCards', function() {
      return {
        restrict: 'E',
        template: [
          '<div class="card-logos">',
            '<img src="images/visa-logo.svg" alt="">',
            '<img src="images/mastercard-logo.svg" alt="">',
            '<img src="images/discover-logo.svg" alt="">',
            '<img src="images/amex-logo.svg" alt="">',
          '</div>'
        ].join('')
      };
    })
    .directive('paymentFlowCreditCardDetails', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/payment-flow-credit-card-details.html',
        scope: {
          billingInfo: '=',
          userData: '='
        },
        controller: ['$rootScope', '$scope', '$timeout', 'PaymentFlowFactory', function($rootScope, $scope, $timeout, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.language = $rootScope.language;
          $scope.moment = moment;

          $scope.scanCreditCard = function() {
            CardIO.scan({
              requireExpiry: true,
              scanExpiry: false,
              requirePostalCode: false,
              hideCardIOLogo: true,
              suppressScan: false,
              keepApplicationTheme: true
            }, onScanComplete, angular.noop);
            function onScanComplete(cardInfoObj) {
              $timeout(function() {
                // this happens outside of angular, so we need to use an angular construct
                // to let angular know to update the view
                var expiryMonth = cardInfoObj.expiryMonth.toString();
                if (expiryMonth.length === 1) {
                  expiryMonth = '0' + expiryMonth;
                }
                $scope.userData.creditCardDetails = {
                  firstName: cardInfoObj.cardholderName,
                  lastFour: cardInfoObj.cardNumber,
                  year: cardInfoObj.expiryYear.toString().slice(2) - 0,
                  month: expiryMonth,
                  cvn: cardInfoObj.cvv
                };
              }, 0);
            }

          };
          /*
          * @namespace Regular Expressions
          * @name cardRegex
          * @author Seth Rhodes <seth.rhodes@bcbsnc.com>
          *
          * @description
          * Use this to validate the cards which we accept. MasterCard, VISA, and Discover
          * are accepted. Length validation is handled here for 16-digit cards and 19-digit VISA
          * cards. Please refer to BCB-508 for validation rules used at the time of creation.
          */
          var cardRegex = /^(4((.{12}?)|(.{15}?)|(.{18}?)|(.{19}?))|6(011(0[0-9]|[2-4]|7(4|[7-9])(.{10})|8[6-9]|9)((\d{10})|(\d{11})?)|(4[4-9](\d{13})|5(\d{14})))|5[1-5](\d{14})|3[47][0-9]{13}|222[1-9](\d{12})|2720(\d{12}))$/
          $scope.cardRegex = cardRegex;

          var currentDate = new Date();
          var currentMonth = currentDate.getMonth() + 1;
          var currentYear = currentDate.getFullYear();
          var currentYearShort = currentYear.toString().slice(2);

          $scope.validateExpirationDate = function(month, year) {
            if (month === currentMonth && year === currentYearShort) {
              $scope.userData.creditCardDetails.month = null;
            }
            if (year === currentYearShort && month < currentMonth) {
              $scope.userData.creditCardDetails.month = null;
            }
          };

          var numberOfAvailableYears = 20;
          $scope.yearsArr = [];
          for (var i = 0; i < numberOfAvailableYears; i++) {
            var yearValue = (currentYear + i).toString();
            $scope.yearsArr.push({
              value: yearValue.slice(2),
              label: yearValue
            });
          }

          $scope.$watch('userData.creditCardDetails.year', function(n) {
            $scope
              .validateExpirationDate(
                $scope.userData.creditCardDetails.month,
                $scope.userData.creditCardDetails.year
              )
          });

          var numberOfAvailableMonths = 12;
          $scope.monthArr = [];
          for (var i = 0; i < numberOfAvailableMonths; i++) {
            var monthValue = (currentMonth + i).toString();
            $scope.monthArr.push({
              value: monthValue.slice(2),
              label: monthValue
            });
          }
          $scope.$watch('userData.creditCardDetails.month', function(n) {
            $scope
              .validateExpirationDate(
                $scope.userData.creditCardDetails.month,
                $scope.userData.creditCardDetails.year
              );
          });
        }]
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowCtaButton', [])
    /**
     * A layout directive to create a row for a cta button to be formatted well on mobile
     */
    .directive('ctaButtonRow', function() {
        return {
          restrict: 'E',
        };
      })
      /**
      * If an action funciton is passed from the parent controller it will override
      * the page transition functionality. Applied classes change the styling.
      * Available classes [ white, condensed-font, blue ]
      * @example
      * <cta-button-row>
      *   <cta-button class="white condensed-font">{{loc.buttonText}}</cta-buttonp>
      * </cta-button-row>
      *  @example
      * <cta-button-row>
      *   <cta-button class="blue">{{loc.buttonText}}</cta-buttonp>
      * </cta-button-row>
      */
      .directive('ctaButton', function() {
        return {
          restrict: 'E',
          transclude: true,
          templateUrl: 'partials/payment-flow-cta-button.html',
          scope: {
            /**
             * @param
             */
            transitionPage: '@?',
            /**
             * @param
             */
            actionFn: '=?',
            loading: '=?',
            loadingText: '=?'
          },
          controller: ['$rootScope', '$scope', function($rootScope, $scope) {
            $scope.gotoView = $rootScope.gotoView;
            $scope.loading = angular.isUndefined($scope.loading) ? false : $scope.loading;
            $scope.loadingText = angular.isUndefined($scope.loadingText) ? $rootScope.loc.BP_LOADING : $scope.loadingText;
          }],
          link: function(scope, elem, attr, ctrl) {
            elem.on('click', function() {
              scope.gotoView(scope.transitionPage);
            });
          }
        };
    });
})();
/**
 * Directive for the payment flow bottom bar.
 *
 * @namespace Directives
 * @class paymentFlowHelpShare
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowHelpShare', [])
      .directive('paymentFlowHelpShare', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-help-share.html',
            scope: {
              /**
               *
               * @memberof paymentFlowHelpShare
               * @member {Object} paymentFlow
               */
              paymentReceipt: '=',
              flowIsAutopay: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              '$filter',
              'shareService',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, $filter, shareService, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = function (url) {
                  PaymentFlowFactory.resetCreditCardDetails();
                  PaymentFlowFactory.reset();
                  $rootScope.gotoView(url);
                };
                $scope.userData = PaymentFlowFactory.getUserSetData();

                $scope.shareReceipt = function () {
                  var shareContent = '';
                  var maskFilter = $filter('maskAccount');
                  var maskAcct = maskFilter($scope.userData.accountNumber);
                  var todaysDate = new Date();

                  var billingMethod = PaymentFlowFactory.getBillingMethod();
                  if (billingMethod === 'postal') {
                    $scope.localizedBillingMethod = $scope.loc.BP_POSTAL_MAIL;
                  }
                  if (billingMethod === 'none') {
                    $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
                  }
                  if (billingMethod === 'email') {
                    $scope.localizedBillingMethod = $scope.loc.EMAIL;
                  }

                  if ($scope.flowIsAutopay) {

                    shareContent = $rootScope.loc.BP_PAYMENT_DATE + ": " + ((todaysDate.getMonth() + 1) + '/' + todaysDate.getDate() + '/' + todaysDate.getFullYear()) + "\n" +
                         $rootScope.loc.BP_CONFIRMATION_CODE + ": " + $scope.userData.successConfirmationCode + "\n" +
                         $rootScope.loc.POLICY_ID + ": " + $scope.paymentReceipt.account.policyMembership.policyId + "\n" +
                         $rootScope.loc.SUBSCRIBER_ID + ": " + $scope.paymentReceipt.account.policyMembership.fullExternalId + "\n" +
                         $rootScope.loc.BP_TITLE_PAYMENT_FREQUENCY + ": " + $scope.loc.BP_AUTOPAY + "\n" +
                         $rootScope.loc.BP_MONTHLY_DRAFT_DATE + ": " + $scope.loc.BP_MONTHLY_DRAFT + "\n" +
                         $rootScope.loc.BP_MONTHLY_PREMIUM_AMOUNT + ": " + $scope.paymentReceipt.account.currentInvoice.billedAmount  + "\n" +
                         $rootScope.loc.BP_HEADER_PAYMENT_METHOD + ": " +  (PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD) + "\n" +
                         $rootScope.loc.BP_TITLE_BILLING_METHOD + ": " +  $scope.localizedBillingMethod + "\n" ;
                    if (PaymentFlowFactory.getPaymentMethod() === 'bankdraft') {
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_ACCOUNT + ": " + $scope.userData.accountHolderName + "\n" +
                          $rootScope.loc.BP_ACCOUNT_TYPE + ": " + ($scope.userData.accountType === 'Savings' ? $scope.loc.SAVINGS : $scope.loc.BP_CHECKING) + "\n" +
                          $rootScope.loc.BP_ROUTING_NUMBER + ": " + $scope.userData.routingNumber + "\n" +
                          $rootScope.loc.BP_BANK_ACCOUNT_NUMBER + ": " + maskAcct;
                    } else {
                      //payment method is credit card
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_CARD + ": " + $scope.userData.creditCardDetails.firstName + "\n" +
                          $rootScope.loc.BP_CARD_NUMBER + ": " + maskFilter($scope.userData.creditCardDetails.lastFour) + "\n" +
                          $rootScope.loc.BP_EXPIRATION_DATE + ": " + $scope.userData.creditCardDetails.month + "/" + $scope.userData.creditCardDetails.year;
                    }
                  } else {

                    shareContent = $rootScope.loc.BP_PAYMENT_DATE + ": " + ((todaysDate.getMonth() + 1) + '/' + todaysDate.getDate() + '/' + todaysDate.getFullYear()) + "\n" +
                        $rootScope.loc.BP_CONFIRMATION_CODE + ": " + $scope.userData.successConfirmationCode + "\n" +
                        $rootScope.loc.POLICY_ID + ": " + $scope.paymentReceipt.policyMembership.policyId + "\n" +
                        $rootScope.loc.SUBSCRIBER_ID + ": " + $scope.paymentReceipt.policyMembership.fullExternalId + "\n" +
                        $rootScope.loc.BP_TITLE_PAYMENT_FREQUENCY + ": " + (PaymentFlowFactory.getPaymentFrequency() === 'autopay' ? $scope.loc.BP_AUTOPAY : $scope.loc.BP_ONE_TIME_PAYMENT) + "\n" +
                        $rootScope.loc.BP_MONTHLY_PREMIUM_AMOUNT + ": " + $scope.paymentReceipt.currentInvoice.billedAmount + "\n" +
                        $rootScope.loc.BP_TOTAL_ACCOUNT_BALANCE + ": " + $scope.paymentReceipt.currentInvoice.totalDueAmount + "\n" +
                        $rootScope.loc.BP_AMOUNT_PAID_TODAY + ": " + $scope.userData.paymentAmount + "\n" +
                        $rootScope.loc.BP_HEADER_PAYMENT_METHOD + ": " + (PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD) + "\n";

                    if ($scope.paymentReceipt.isPaymentProcessing) {
                      shareContent = shareContent +
                          $rootScope.loc.BP_PREVIOUS_PAYMENT + " (" + $rootScope.loc.BP_CURRENTLY_PROCESSING + ")" + ": " + $scope.paymentReceipt.currentInvoice.balanceForwardAmount + "\n";
                    }

                    if ($scope.paymentReceipt.preferences.isPaperless === false) {
                      shareContent = shareContent +
                          $rootScope.loc.BP_TITLE_BILLING_METHOD + ": " + (PaymentFlowFactory.getBillingMethod() === 'email' ? $scope.loc.EMAIL : $scope.loc.BP_POSTAL_MAIL) + "\n";
                    }

                    if (PaymentFlowFactory.getPaymentMethod() === 'bankdraft') {
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_ACCOUNT + ": " + $scope.userData.accountHolderName + "\n" +
                          $rootScope.loc.BP_ACCOUNT_TYPE + ": " + ($scope.userData.accountType === 'Savings' ? $scope.loc.SAVINGS : $scope.loc.BP_CHECKING) + "\n" +
                          $rootScope.loc.BP_ROUTING_NUMBER + ": " + $scope.userData.routingNumber + "\n" +
                          $rootScope.loc.BP_BANK_ACCOUNT_NUMBER + ": " + maskAcct;
                    } else {
                      //payment method is credit card
                      shareContent = shareContent +
                          $rootScope.loc.BP_NAME_ON_CARD + ": " + $scope.userData.creditCardDetails.firstName + "\n" +
                          $rootScope.loc.BP_CARD_NUMBER + ": " + maskFilter($scope.userData.creditCardDetails.lastFour) + "\n" +
                          $rootScope.loc.BP_EXPIRATION_DATE + ": " + $scope.userData.creditCardDetails.month + "/" + $scope.userData.creditCardDetails.year;
                    }
                  }//end if flowIsAutoPay

                  shareService.showSharing(shareService.contentType.TEXT, shareContent);
                };
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowInputs', [])
    /**
     * @description
     * Mostly used in parallel with the input field directive
     * @param infoModal {string} takes the name of the modal that it will activate
     */
    .directive('paymentFlowInputLabel', function() {
      return {
        scope: {
          infoModal: '@'
        },
        transclude: true,
        template: '<span class="label-title" ng-transclude></span><i ng-show="infoModal" pf-modal-open="{{infoModal}}" class="fa fc-outlined-help"></i>'
      };
    })
    /**
     *
     * @param {string} placeholder
     * @example <payment-flow-input modal-name="namePassedIntopPfModalDirective"></payment-flow-input>
     */
    .directive('paymentFlowInput', function() {
      return {
        template: [
          '<payment-flow-input-label info-modal="{{modalName}}">{{title}}</payment-flow-input-label>',
          '<input max-length="maxLength" ng-pattern="pattern" match-model match-input="matchInput" ng-model-options="{debounce: 500}" name="{{formLabel}}" ng-model="value" placeholder="{{placeholder}}" type="{{type}}" ng-required="required" ng-disabled="disabled"/>'].join(''),
        scope: {
          title: '@?',
          placeholder: '@?',
          modalName: '@?',
          value: '=',
          pattern: '=?',
          matchInput: '=?',
          formLabel: '@?',
          required: '=?',
          disabled: '=?',
          type: '@?',
          number: '=?',
          maxLength: '=?',
          ngModel: '='
        },
        link: function(scope, elem) {
          elem.find('input').on("keyup", function(ev) {
            //if the input is longer than the max length 
            //if it is not 'Delete', 'Backspace', 'Tab', 'ArrowRight', 'ArrowLeft'
            var input = elem.find('input');
            var value = input.val();
            if (input.val().length > scope.maxLength) {
                input.val(value.substr(0,value.length-1));
                scope.$apply();
                ev.preventDefault();
            } 
          });

          elem.on('cut copy paste', function(event) {
            event.preventDefault();
          });
        }
      };
    })
    .directive('routing', ['config', '$http', '$q', function(config, $http, $q) {
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, attr, elem, parentCtrl) {
          parentCtrl.$asyncValidators.validRouting = function(modelValue, viewValue) {
            var def = $q.defer();
            if(!scope.required) {
              def.resolve();
            }
            if(scope.required) {
              $http.get(config.apiUrl + '/validate-routing?routingNumber=' + modelValue)
                .then(function(response) {
                  scope.bankName = response.data.bankName;
                  def.resolve();
                })
                .catch(function(error) {
                  console.warn(error.data.error);
                  def.reject();
                });
            }
            return def.promise;
          };
        }
      };
    }])
     /**
     *
     * @param {string} placeholder
     * @example <payment-flow-input modal-name="namePassedIntopPfModalDirective"></payment-flow-input>
     */
    .directive('routingNumberInput', function() {
      return {
        template: [
          '<payment-flow-input-label info-modal="{{modalName}}">{{title}}</payment-flow-input-label>',
          '<input ng-pattern="pattern" routing bank-name="bankName" ng-model-options="{debounce: 500}" name="{{formLabel}}" ng-model="value" placeholder="{{placeholder}}" type="{{type}}" ng-required="required"/>'].join(''),
        scope: {
          title: '@?',
          placeholder: '@?',
          modalName: '@?',
          value: '=',
          pattern: '=?',
          formLabel: '@?',
          required: '=?',
          type: '@?',
          number: '=?',
          bankName: '=?'
        },
        link: function(scope, elem, attr, parentCtrl) {
          var oneKeyCode = 48;
          var zeroKeyCode = 58;
          var backspaceKeyCode = 8;
          var tabKeyCode = 9;
          elem.on('cut copy paste', function(event) {
            event.preventDefault();
          });
          if(scope.number === true) {
            elem.on('keydown', function(event) {
              if((event.keyCode < oneKeyCode || event.keyCode > zeroKeyCode) && event.keyCode != backspaceKeyCode && event.keyCode != tabKeyCode) {
                event.preventDefault();
              }
            });
          }
        }
      };
    })
    /**
     * @description
     * An atttribute to go onto a form input that makes the input valid only if the passed in value
     * matches the viewValue.
     * @example
     * <input match-model match-input="formInputToMatchAgainst" ng-model="someValueOnScope"/>
     */
    .directive('matchModel', function() {
      return {
        restrict: 'A',
        require: 'ngModel',
        scope: {
          matchInput: '=?'
        },
        link: function(scope, elem, attr, inputCtrl) {
          inputCtrl.$validators.match = function(modelValue, viewValue) {
            if(scope.matchInput && scope.matchInput.$viewValue) {
              if(scope.matchInput.$viewValue !== inputCtrl.$viewValue) {
               return false;
              }
              return true
            }
            return true;
          };
          if(scope.matchInput) {
            scope.$watch(function() {
              return scope.matchInput.$modelValue;
            }, function() {
              inputCtrl.$validate();
            });
          }

        }
      };
    })
    /**
     * @example
     * <payment-flow-select value="someValueOnScope">
     *   <option value="'checking'" ng-selected="someValueOnScope === 'checking'"></option>
     *   <option value="'savings'" ng-selected="someValueOnScope === 'savings'"></option>
     * </payment-flow-select>
     * @param {string} title
     * @param
     */
    .directive('paymentFlowSelect', function() {
      return {
        transclude: true,
        templateUrl: 'partials/payment-flow-select.html',
        scope: {
          title: '@?',
          modalName: '@?',
          value:"=",
          formLabel: '@?',
          required: '=?'
        },
        controller: ['$scope', '$rootScope', function($scope, $rootScope) {
          $scope.loc = $rootScope.loc;
        }]
      };
    });
})();
(function() {
  angular
  .module('blueconnect.mobile.directives.paperlessAgreement', [])
  .directive('paymentFlowPaperlessAgreement', function() {
    return {
      restrict: 'E',
      templateUrl: 'partials/payment-flow-paperless-agreement.html',
      scope: {
        billingInfo: '=',
        required: '=?'
      },
      controllerAs: 'paperlessCtrl',
      controller: ['$rootScope', '$scope', '$timeout', function($rootScope, $scope, $timeout) {
        var vm = this;
        $scope.loc = $rootScope.loc;
        $scope.checkboxValue = false;
        $scope.acceptPaperlessFn = function() {
          $scope.checkboxValue = true;
        };
        // queue this for later, sometimes billingMethodForm isn't there at time of evaluation
        $timeout(function() {
          if ($scope.$parent.paymentFlowBillingMethodForm && $scope.$parent.paymentFlowPageMethodForm.paymentFlowBillingMethodForm) {
            $scope.billingMethodSelected = $scope.$parent.paymentFlowPageMethodForm.paymentFlowBillingMethodForm.billingMethodSelected;
          }
        }, 0);
      }]
    };
  });
})();

/**
 * Directive for the payment flow paperless success confirmation.
 *
 * @namespace Directives
 * @class paymentFlowPaperlessSuccess
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowPaperlessSuccess', [])
      .directive('paymentFlowPaperlessSuccess', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-paperless-success.html',
            scope: {
              /**
               *
               * @memberof paymentFlowPaperlessSuccess
               * @member {Object} paymentFlow
               */
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userSetData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentAmount', [])
    .directive('paymentFlowPaymentAmount', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/payment-flow-payment-amount.html',
        controllerAs: 'totalAmntCtrl',
        scope: {
          billingInfo: '='
        },
        controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
          var vm = this;
          $scope.loc = $rootScope.loc;
          $scope.selectedPolicy = $rootScope.selectedPolicy;
          if ($scope.billingInfo.currentInvoice.minAmountDue === $scope.billingInfo.currentInvoice.totalDueAmount){
            $scope.minAmountDue = false;
          } else if ($scope.billingInfo.currentInvoice.minAmountDue === $scope.billingInfo.currentInvoice.balanceForwardAmount){
            $scope.minAmountDue = false;
          } else {
            $scope.minAmountDue = $scope.billingInfo.currentInvoice.minAmountDue > 0;
          }
          
          vm.available = true;

          if ($scope.billingInfo.isPaymentProcessing && $scope.billingInfo.currentInvoice.remainingBalance === 0) {
            vm.available = false;
          }
          if ($scope.billingInfo.preferences && $scope.billingInfo.preferences.isAutopay) {
            vm.available = false;
          }
          if (!$scope.billingInfo.currentInvoice.totalDueAmount) {
            vm.available = false;
          }
          if ($scope.billingInfo.reinstatementAmount > 0) {
            vm.available = true;
          }

          if (vm.available && $scope.billingInfo.isPaymentProcessing === true) {
            // have to coerce to string because label attr is string
            $scope.desiredPaymentAmount = $scope.billingInfo.currentInvoice.remainingBalance.toString();
          }

          if (vm.available && $scope.billingInfo.isPaymentProcessing === false) {
            $scope.desiredPaymentAmount = $scope.billingInfo.currentInvoice.totalDueAmount.toString();
          }

          if (vm.available && $scope.billingInfo.reinstatementAmount > 0) {
            $scope.desiredPaymentAmount = $scope.billingInfo.reinstatementAmount.toString();
          }

          $scope.padAmt = function(amt) {
            var amountDue = amt.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return amountDue;
          };

          var desiredPaymentAmount = PaymentFlowFactory.getPaymentAmount();
          if (desiredPaymentAmount) {
            $scope.desiredPaymentAmount = desiredPaymentAmount;
          }

        }]
      };
    });
})();
/**
 * Directive for the payment flow have questions & faqs .
 *
 * @namespace Directives
 * @class paymentFlowFaqsButton
 */
(function () {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.paymentFlowFaqsButton', [])
        .directive('paymentFlowFaqsButton', [
          function () {
            return {
              restrict: 'E',
              replace: true,
              templateUrl: 'partials/payment-flow-faqs-button.html',
              scope: {
                /**
                 *
                 * @memberof paymentFlowFaqsButton
                 * @member {Object} paymentFlow
                 */
              },
              controller: [
                '$scope',
                '$rootScope',
                function ($scope, $rootScope) {
                  $scope.loc = $rootScope.loc;
                  $scope.gotoView = $rootScope.gotoView;
                }
              ]
            };
          }
        ]);
  }());
  
/**
 * Directive for the payment flow tracker.
 *
 * @namespace Directives
 * @class paymentFlowTracker
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentFrequency', [])
    .directive('paymentFlowPaymentFrequency', [
      function() {
        return {
          scope: {
            balanceInfo: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-payment-frequency.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.frequencySelected = null;

            // defaults to squelch unreferenced property errors in the console
            $scope.balanceInfo = $scope.balanceInfo || {};

            $scope.changeBillingMethodToEmail = function(form) {
              form.$$parentForm.paymentFlowBillingMethodForm.billingMethodSelected = 'email';
            };

            var inReinstatement = $scope.balanceInfo.reinstateEligible === true && $scope.balanceInfo.reinstatementAmount > 0;

            //if the user is in autopay they come to the screen with only the autopay option showing and autopay automatically selected
            $scope.showAutoPay = (
              (
                // Displays when account balance > 0 and user is not outside of reinstatement period.
                $scope.balanceInfo.isPaymentProcessing ?
                $scope.balanceInfo.currentInvoice.remainingBalance > 0:
                $scope.balanceInfo.currentInvoice.totalDueAmount > 0
              )
              // doesn't show when user is in reinstatement, at all
              // doesn't show when user is a medicare member
              && !$scope.balanceInfo.memberInReinstatement && $scope.balanceInfo.policyMembership.enrollmentSourceSystemCode.toLowerCase() !== 'amisys'
            );

            $scope.showOneTimePayment = (
              (
                // Displays when account balance > 0 and user is not outside of reinstatement period.
                $scope.balanceInfo.isPaymentProcessing ?
                $scope.balanceInfo.currentInvoice.remainingBalance > 0:
                $scope.balanceInfo.currentInvoice.totalDueAmount > 0
              ) ||
              // can display when user is in reinstament,
              // but they have to be reinstatement eligible
              (
                $scope.balanceInfo.memberInReinstatement &&
                $scope.balanceInfo.reinstateEligible
              )
            );

            // if autopay is the only available option
            if ($scope.showAutoPay === true && $scope.showOneTimePayment === false) {
              $scope.frequencySelected = 'autopay';
            }

            // if one time payment is the only available option
            if ($scope.showAutoPay === false && $scope.showOneTimePayment === true) {
              $scope.frequencySelected = 'oneTimePayment';
            }

            var desiredFrequency = PaymentFlowFactory.getPaymentFrequency();
            if (desiredFrequency) {
              console.log('payment flow present');
              console.log(desiredFrequency);
              $scope.frequencySelected = /auto/i.test(desiredFrequency) ? 'autopay': 'oneTimePayment';
            }

            if ($scope.showAutoPay && $scope.showOneTimePayment) {
              var desiredPaymentFlow = PaymentFlowFactory.getPaymentFlow();
              if (!desiredPaymentFlow) {
                return console.warn('Probably caused by a refresh, possibly an error, but no payment flow was available!');
              }
              $scope.frequencySelected = /auto/i.test(desiredPaymentFlow) ? 'autopay': 'oneTimePayment';
            }

          }]
        };
      }
    ]);
}());

/**
 * Directive for the payment flow payment method.
 *
 * @namespace Directives
 * @class paymentFlowPaymentMethodSelected
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentMethodSelected', [])
    .directive('paymentFlowPaymentMethodSelected', [
      function() {
        return {
          scope: {
            billingInfo: '=methodInfo'
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-payment-method-selected.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.selectedPaymentAmount = PaymentFlowFactory.getPaymentAmount();
            if (!$scope.billingInfo.memberInReinstatement){
              $scope.totalAccountBalance = ($scope.selectedPaymentAmount == $scope.billingInfo.currentInvoice.totalDueAmount);
              $scope.minAmountDue = !$scope.totalAccountBalance && ($scope.selectedPaymentAmount == $scope.billingInfo.currentInvoice.minAmountDue);
              $scope.amountDue = (!$scope.totalAccountBalance && !$scope.minAmountDue); 
            }

            $scope.localizedPaymentFrequency = (
              /auto/.test(PaymentFlowFactory.getPaymentFrequency()) ?
              $scope.loc.BP_AUTOPAY :
              $scope.loc.BP_ONE_TIME_PAYMENT
            );

            $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                $scope.loc.BP_BANK_DRAFT :
                $scope.loc.BP_CREDIT_CARD
            );

            var billingMethod = PaymentFlowFactory.getBillingMethod();
            if (billingMethod === 'postal') {
              $scope.localizedBillingMethod = $scope.loc.BP_POSTAL_MAIL;
            }
            if (billingMethod === 'none') {
              $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
            }
            if (billingMethod === 'email') {
              $scope.localizedBillingMethod = $scope.loc.EMAIL;
            }

          }]
        };
      }
    ]);
}());
/**
 * Directive for the payment flow payment method.
 *
 * @namespace Directives
 * @class paymentFlowPaymentMethod
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentMethod', [])
    .directive('paymentFlowPaymentMethod', [
      function() {
        return {
          scope: {
            methodInfo: '='
          },
          restrict: 'E',
          templateUrl: 'partials/payment-flow-payment-method.html',
          controller: ['$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory) {
            var vm = this;
            $scope.loc = $rootScope.loc;
            $scope.paymentMethod = null;

            var desiredPaymentMethod = PaymentFlowFactory.getPaymentMethod();
            if (desiredPaymentMethod) {
              $scope.desiredPaymentMethod = desiredPaymentMethod;
            }
          }]
        };
      }
    ]);
}());
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentReceipt', [])
    .directive('paymentFlowPaymentReceipt', function() {
      return {
        restrict: 'E',
        replace: false,
        scope: {
          billingInfo: '='
        },
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.userSetData = PaymentFlowFactory.getUserSetData();
          $scope.paymentFrequencyDisplayValue = /auto/.test($scope.userSetData.paymentFrequency) ? $scope.loc.BP_MONTHLY_AUTOPAY : $scope.loc.BP_ONE_TIME_PAYMENT;
          $scope.paymentMethodDisplayValue = /bank/.test($scope.userSetData.paymentMethod) ? $scope.loc.BP_BANK_DRAFT : $scope.loc.BP_CREDIT_CARD;
          $scope.accountTypeDisplayValue = $scope.userSetData.accountType === 'Checking' ? $scope.loc.BP_CHECKING : $scope.loc.SAVINGS;

          var billingMethod = PaymentFlowFactory.getBillingMethod();
          if (billingMethod === 'postal') {
            $scope.billingMethodDisplayValue = $scope.loc.BP_POSTAL_MAIL;
          }
          if (billingMethod === 'none') {
            $scope.billingMethodDisplayValue = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
          }
          if (billingMethod === 'email') {
            $scope.billingMethodDisplayValue = $scope.loc.EMAIL;
          }
        }],
        templateUrl: 'partials/payment-flow-payment-receipt.html'
      }
    })
    .directive('paymentFlowReceiptRow', function() {
      return {
        restrict: 'E',
        replace: false,
        scope: {
          label: '@',
          value: '@'
        },
        templateUrl: 'partials/payment-flow-payment-receipt-row.html'
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowProcessingPayment', [])
    .directive('paymentFlowProcessingPayment', function() {
      return {
        restrict: 'E',
        replace: false,
        controller: ['$scope', '$rootScope', 'PaymentFlowFactory', function($scope, $rootScope, PaymentFlowFactory) {
          $scope.userSetData = PaymentFlowFactory.getUserSetData();
          var todaysDate  = new Date();
          $scope.todayFormatted = (todaysDate.getMonth() + 1) + '/' + todaysDate.getDate() + '/' + todaysDate.getFullYear();
        }],
        templateUrl: 'partials/payment-flow-processing-payment.html'
      }
    });
})();
/**
 *
 * Directive for a general purpose radio group for use in the billing and payment flow. All radio
 * groups (even with one button) require the parent payment-flow-radio-group for passing data.
 *
 * @namespace Directives
 * @class paymentFlowTracker
 */
(function(){
  angular
    .module('blueconnect.mobile.directives.paymentFlowRadioGroup', [])
    .directive('paymentFlowRadioGroup', [
      function() {
        return {
          restrict: 'E',
          scope: {
            groupValue: '='
          },
          bindToController: true,
          controller: [
            function() {
              var vm = this;
            }
          ]
        };
      }
    ])
    .directive('paymentFlowRadioButton', [
      function() {
        return {
          restrict: 'E',
          templateUrl: 'partials/payment-flow-radio-button.html',
          controllerAs: 'radioCtrl',
          require: '^^paymentFlowRadioGroup',
          transclude: true,
          scope: {
            label: '@',
            value: '@',
            clickHandler: '&?'
          },
          controller: ['$scope',
            function($scope) {
              var vm = this;
            }
          ],
          link: function($scope, $elem, $attrs, groupCtrl) {
            $scope.getGroupValue = function() {
              return groupCtrl.groupValue;
            };
            $scope.makeSelection = function(incomingValue) {
              groupCtrl.groupValue = incomingValue;
              if ($scope.clickHandler) {
                $scope.clickHandler();
              }
            };
          }
        };
      }
    ]);

})();
/**
 * Directive for the payment flow reinstatement pending confirmation.
 *
 * @namespace Directives
 * @class paymentFlowReinstatementPending
 */
(function () {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowReinstatementPending', [])
      .directive('paymentFlowReinstatementPending', [
        function () {
          return {
            restrict: 'AE',
            replace: true,
            templateUrl: 'partials/payment-flow-reinstatement-pending.html',
            scope: {
              billingInfo: '='
            },
            controller: [
              '$scope',
              '$rootScope',
              '$location',
              'PaymentFlowFactory',
              function ($scope, $rootScope, $location, PaymentFlowFactory) {
                $scope.loc = $rootScope.loc;
                $scope.gotoView = $rootScope.gotoView;
                $scope.userData = PaymentFlowFactory.getUserSetData();
              }
            ]
          };
        }
      ]);
}());

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowReusableDirectives', [])
    /**
     * @description
     * A reusable dividing line for spacing, designed for use in the payment flow
     */
    .directive('pfDivider', function() {
      return {
        template: '<div class="dividing-line"></div>'
      };
    })
    /**
     * @description
     * A directive used to open a pfModal. Set the attribute equal to the string name
     * of the modal directive that you want to open.
     */
    .directive('pfModalOpen', ['$rootScope', function($rootScope) {
      return {
        restrict: 'A',
        scope: true,
        link: function(scope, elem, attr) {
          elem.on('click', function() {
            $rootScope.$broadcast('openPaymentFlowModal:' + attr.pfModalOpen)
          });
        }
      };
    }])
    /**
     * @description
     * A modal used in the payment flow section of the site
     * @param {string} name The unique name for the modal which is also used with pfModalOpen
     * @param {string} title The title displayed in on the modals top bar
     * @param {function} agreementButton The passed in function to be run on the parent scope when 
     * the user accepts the information displayed in the modal. No value will hide the acceptance 
     * button.
     * @example 
     * <pf-modal 
     *  name="uniqueNameToBeUsedByPfModalOpen" 
     *  title="titleBarContent"
     *  button="textDisplayedOnTheAgreementButton"
     *  agreementButton="someFunctionFromTheParentController">
     *    <p>Place html content in p tag for text styling</p>
     * <pf-modal>
     */
    .directive('pfModal', ['$rootScope', function($rootScope) {
      return {
        restrict: 'E',
        scope: {
          name: '@',
          title: '@modalTitle',
          button: '@modalButton',
          agreementButton: '&?'
        },
        controller: ['$scope', function($scope) {
          var vm = this;
          $scope.open = false;
          $scope.closeModal = function() {
            angular.element('#pf-scrollable-section').addClass('payment-flow-phone-scroll');
            
            $scope.open = false;
          };
          
          $scope.acceptModal = function() {
            angular.element('#pf-scrollable-section').addClass('payment-flow-phone-scroll');
            $scope.agreementButton();
            $scope.open = false;
          };

        }],
        transclude: true,
        controllerAs: 'modalCtrl',
        templateUrl: 'partials/payment-flow-modal.html',
        link: function postLink(scope, elem, attr, modalOpenCtrl) {
          scope.$on('openPaymentFlowModal:' + scope.name, function() {
            scope.open = true;
            angular.element('#pf-scrollable-section').removeClass('payment-flow-phone-scroll');
            scope.$apply();
          });
        }
      };
    }])
    /**
     * A reusable error message to be used in the payment flow page
     * @description
     * @example
      <pr-error-message ng-show="forIsValid">{{loc.BP}}</pf-error-message>
     */
    .directive('pfErrorMessage', function() {
      return {
        restrict: 'E',
        transclude: true,
        template: '<p ng-transclude></p>'
      }
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowReviewDetails', [])
    .directive('paymentFlowReviewDetails', function() {
      return {
        templateUrl: 'partials/payment-flow-review-details.html',
        controllerAs: 'paymentFlowReviewDetailsCtrl',
        scope: {
          reviewDetails: '='
        },
        controller: ['$rootScope', '$scope', '$filter', 'PaymentFlowFactory', function($rootScope, $scope, $filter, PaymentFlowFactory) {
          $scope.loc = $rootScope.loc;
          $scope.gotoView = $rootScope.gotoView;

          $scope.userData = PaymentFlowFactory.getUserSetData();

          $scope.localizedPaymentFrequency = (
              /autopay/.test(PaymentFlowFactory.getPaymentFrequency()) ?
                  $scope.loc.BP_AUTOPAY :
                  $scope.loc.BP_ONE_TIME_PAYMENT
          );

          $scope.localizedPaymentMethod = (
              PaymentFlowFactory.getPaymentMethod() === 'bankdraft' ?
                  $scope.loc.BP_BANK_DRAFT :
                  $scope.loc.BP_CREDIT_CARD
          );

          var billingMethod = PaymentFlowFactory.getBillingMethod();
          if (billingMethod === 'postal') {
            $scope.localizedBillingMethod = $scope.loc.BP_POSTAL_MAIL;
          }
          if (billingMethod === 'none') {
            $scope.localizedBillingMethod = $scope.loc.BP_DO_NOT_SEND_COPY_OF_BILL;
          }
          if (billingMethod === 'email') {
            $scope.localizedBillingMethod = $scope.loc.EMAIL;
          }

          $scope.localizedAccountType = (
              $scope.userData.accountType === 'Savings' ?
                  $scope.loc.SAVINGS :
                  $scope.loc.BP_CHECKING
          );

          $scope.selectedPaymentAmount = PaymentFlowFactory.getPaymentAmount();

        }]
      };
    })
})();

(function() {
  /**
   *
   * @param {string} placeholder
   * @example <payment-flow-state-select title="::loc.state" formLabel="myForm.state"></payment-flow-state-select>
   */
  angular
  .module('blueconnect.mobile.directives.paymentFlowStateSelect', [])
  .directive('paymentFlowStateSelect', function() {
    return {
      template: [
        '<payment-flow-input-label>{{title}}</payment-flow-input-label>',
        '<div class="arrow-row"><i class="fa fc-dropdown"></i></div>',
        '<select name="{{formLabel}}" ng-options="state.value as state.label for state in statesArray" ng-model="value" placeholder="{{placeholder}}" ng-required="required">',
        '</select>'
      ].join(''),
      scope: {
        title: '@?',
        placeholder: '@?',
        value: '=',
        formLabel: '@?',
        required: '=?',
      },
      controller: ['$scope', '$rootScope', '$timeout', function($scope, $rootScope, $timeout) {
        $scope.loc = $rootScope.loc;
        $scope.statesArray = [
          {label: $scope.loc.BP_SELECT, value: null},
          {label: $scope.loc.BP_AL, value: 'AL'},
          {label: $scope.loc.BP_AK, value: 'AK'},
          {label: $scope.loc.BP_AZ, value: 'AZ'},
          {label: $scope.loc.BP_AR, value: 'AR'},
          {label: $scope.loc.BP_CA, value: 'CA'},
          {label: $scope.loc.BP_CO, value: 'CO'},
          {label: $scope.loc.BP_CT, value: 'CT'},
          {label: $scope.loc.BP_DE, value: 'DE'},
          {label: $scope.loc.BP_FL, value: 'FL'},
          {label: $scope.loc.BP_GA, value: 'GA'},
          {label: $scope.loc.BP_HI, value: 'HI'},
          {label: $scope.loc.BP_ID, value: 'ID'},
          {label: $scope.loc.BP_IL, value: 'IL'},
          {label: $scope.loc.BP_IN, value: 'IN'},
          {label: $scope.loc.BP_IA, value: 'IA'},
          {label: $scope.loc.BP_KS, value: 'KS'},
          {label: $scope.loc.BP_KY, value: 'KY'},
          {label: $scope.loc.BP_LA, value: 'LA'},
          {label: $scope.loc.BP_ME, value: 'ME'},
          {label: $scope.loc.BP_MD, value: 'MD'},
          {label: $scope.loc.BP_MA, value: 'MA'},
          {label: $scope.loc.BP_MI, value: 'MI'},
          {label: $scope.loc.BP_MN, value: 'MN'},
          {label: $scope.loc.BP_MS, value: 'MS'},
          {label: $scope.loc.BP_MO, value: 'MO'},
          {label: $scope.loc.BP_MT, value: 'MT'},
          {label: $scope.loc.BP_NE, value: 'NE'},
          {label: $scope.loc.BP_NV, value: 'NV'},
          {label: $scope.loc.BP_NH, value: 'NH'},
          {label: $scope.loc.BP_NJ, value: 'NJ'},
          {label: $scope.loc.BP_NM, value: 'NM'},
          {label: $scope.loc.BP_NY, value: 'NY'},
          {label: $scope.loc.BP_NC, value: 'NC'},
          {label: $scope.loc.BP_ND, value: 'ND'},
          {label: $scope.loc.BP_OH, value: 'OH'},
          {label: $scope.loc.BP_OK, value: 'OK'},
          {label: $scope.loc.BP_OR, value: 'OR'},
          {label: $scope.loc.BP_PA, value: 'PA'},
          {label: $scope.loc.BP_RI, value: 'RI'},
          {label: $scope.loc.BP_SC, value: 'SC'},
          {label: $scope.loc.BP_SD, value: 'SD'},
          {label: $scope.loc.BP_TN, value: 'TN'},
          {label: $scope.loc.BP_TX, value: 'TX'},
          {label: $scope.loc.BP_UT, value: 'UT'},
          {label: $scope.loc.BP_VT, value: 'VT'},
          {label: $scope.loc.BP_VA, value: 'VA'},
          {label: $scope.loc.BP_WA, value: 'WA'},
          {label: $scope.loc.BP_WV, value: 'WV'},
          {label: $scope.loc.BP_WI, value: 'WI'},
          {label: $scope.loc.BP_WY, value: 'WY'}
        ];
        $timeout(function() {
          $scope.value = isFalsy($scope.value) ? $scope.statesArray[0].value: $scope.value;
        }, 100);

        function isFalsy(val) {
          if (!val || val === null) {
            return true;
          }
          if (typeof val === 'string' && !val.length) {
            return true;
          }
          return false;
        }

      }]
    };
  })
})();
(function() {
  angular
  .module('blueconnect.mobile.directives.termsConditions', [])
  .directive('paymentFlowTermsConditions', function() {
    return {
      restrict: 'E',
      templateUrl: 'partials/payment-flow-terms-conditions.html',
      scope: {
        termsConditions: '='
      },
      controllerAs: 'termsCtrl',
      controller: ['$rootScope', '$scope', function($rootScope, $scope) {
        var vm = this;
        $scope.loc = $rootScope.loc;
        $scope.checkboxValue = false;
        $scope.acceptTermsFn = function() {
          $scope.checkboxValue = true;
        };
      }]
    };
  });
})();

/**
 * @description
 * Directive for the payment flow title bars. A reusable title bar for payment flow.
 *
 * @param {string} title The string content for the title applied with one time string binding
 * @example
  <payment-flow-title-bar title="Payment Frequency"><payment-flow-title-bar>
  
 * @example 
  <payment-flow-title-bar title="{{loc.SOME_LOC_STRING}}"></payment-flow-title-bar>
 *@example
 *With the center attribute set to true you can center the text
  <payment-flow-title-bar center="true" title="{{loc.SOME_LOC_STRING}}"</payment-flow-title-bar>
 */
(function() {
  'use strict'
  angular
    .module('blueconnect.mobile.directives.paymentFlowTitleBar', [])
    .directive('paymentFlowTitleBar', [
      function() {
        return {
          restrict: 'E',
          template: '<h6>{{title}}</h6>',
          scope: {
            title: '@'
          },
          link: function(scope, elem, attr) {
            if(attr.center) {
              elem.addClass('justify-center');
            }
          }
        };
      }
    ]);
})();
/**
 * Directive for the payment flow total account balance.
 *
 * @namespace Directives
 * @class paymentFlowTotalBalance
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.paymentFlowTotalBalance', [])
  .directive('paymentFlowTotalBalance', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/payment-flow-total-account-balance.html',
        scope: {
          balanceInfo: '='
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;

          $scope.getDollars = function(input) {
            if (!input) {
              return '';
            }
            var inputStr = input.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return inputStr.slice(1, inputStr.indexOf('.') + 1) || 0;
          };
          $scope.getCents = function(input) {
            if (!input) {
              return '';
            }
            var inputStr = input.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
            return inputStr.slice(inputStr.indexOf('.') + 1);
          };
        }]
      };
    }
  ]);
}());

/**
 * Directive for the payment flow tracker.
 *
 * @namespace Directives
 * @class paymentFlowTracker
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlowTracker', [])
    .directive('paymentFlowTracker', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/payment-flow-tracker.html',
          scope: {
            trackerInfo: '=',
            flowIsAutopay: '='
          },
          controller: ['$rootScope', '$scope', function($rootScope, $scope) {
            $scope.loc = $rootScope.loc;

          }]
        };
      }
    ]);
}());

/**
 * Directive for the payment flow container component.
 *
 * @namespace Directives
 * @class paymentFlow
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.paymentFlow', [
      'bcbsnc.cloud.services.page'
    ])
    .directive('paymentFlowPage', function() {
      return {
        restrict: 'E',
        scope: {
          loc: '=localization',
          step: '=',
          billingInfo: '=',
          trackerInfo: '=',
          validateForm: '=',
          navbarDetails: '='
        },
        templateUrl: function($elem, $attrs) {
          var url = 'views/payment-flow-page-' + $attrs.step.toLowerCase() + '.html';
          return url;
        },
        controller: ['$rootScope', '$scope', '$routeParams', 'PaymentFlowFactory', function($rootScope, $scope, $routeParams, PaymentFlowFactory) {
          $scope.selectedPolicy = $rootScope.selectedPolicy;
          $scope.userData = PaymentFlowFactory.getUserSetData();
          $scope.gotoView = $rootScope.gotoView;
          $scope.trackerInfo = {
            step: $routeParams.step.toUpperCase()
          };
        }]
      };
    })
    .directive('paymentFlow', [
      function() {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'views/payment-flow.html',
          controller: 'PaymentFlowController',
          link: function($scope, $elem, $attrs) {

          }
        };
      }
    ]);
}());

/**
 * @description
 * Directive for when a payment is processing.
 *
 * @example
 * <payment-processing payment-date="dateScopeVar" payment-amount="amountScopeVar"></payment-processing>
 */
(function() {
  'use strict';
  angular
    .module('blueconnect.mobile.directives.paymentProcessing', [])
    .directive('paymentProcessing', [
      function() {
        return {
          restrict: 'E',
          scope: {
            paymentAmount: '<',
            paymentDate: '<'
          },
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
            }
          ],
          templateUrl: 'partials/payment-processing.html'
        };
      }
    ]);
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.invoicePayments')
    .directive('paymentSuccess', function() {
      return {
        templateUrl: 'partials/payment-success.html',
        scope: {
          paymentAmount: '<',
          paymentDate: '<'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }] 
      };
    });
})();
(function() {
  angular
    .module('blueconnect.mobile.directives.paymentUnsuccessful', [])
    .directive('unsuccessfulHeader', function() {
      return {
        scope: {
          headerContent: '<?'
        },
        template: [
          '<h3 class="flex-row flex-center-center">',
            '<div class="icon-halo mr2">',
              '<i class="fa fa-2x fc-warning" aria-hidden="true"></i>',
            '</div>',
            '<span class="text-center pt2" ng-bind="::headerContent || loc.BP_UNSUCCESSFUL"></span>',
          '</h3>'
        ].join(''),
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
        }],
        restrict: 'E'
      };
    })
    .directive('paymentUnsuccessful', function() {
      return {
        templateUrl: 'partials/payment-unsuccessful.html',
        scope: {
          paymentAmount: '<',
          paymentDate: '<'
        },
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
          $scope.moment = moment;
        }]
      };
    });
})();
/**
 * Directive for the pcp dependent pcp card.
 *
 * @namespace Directives
 * @class pcpDependentPcps
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.pcpDependentPcps', [])
    .directive('pcpDependentPcps', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/pcp-dependent-pcps.html',
          scope: {
            /**
             * Display information for the dependent pcp.
             *
             * @memberof about
             * @member {Object} dependentPcpDetails
             */
            dependentPcpDetails: '=',
          },
          controller: [
            '$rootScope',
            '$scope',
            '$filter',
            'TransparencyFactory',
            'geoLocationService',
            '$timeout',
            'helpService',
            'findDoctorService',
            function(
              $rootScope,
              $scope,
              $filter,
              TransparencyFactory,
              geoLocationService,
              $timeout,
              helpService,
              findDoctorService
            ) {
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.loc = $rootScope.loc;
              $scope.policy = $rootScope.selectedPolicy;
              $scope.detailsPage = null;
              $scope.policyMembersList = TransparencyFactory.getCurrentPolicyMembers();

              $scope.toggleCollapse = function(index) {
                var cardClose = 'cardClose' + index;
                $scope[cardClose] = !$scope[cardClose];
              };

              $scope.otherPcpSearch = function(searchInput) {
                if (
                  TransparencyFactory.getCity() &&
                  TransparencyFactory.getCity().zip
                ) {
                  $scope.gotoPrimaryCarePage(searchInput);
                } else {
                  if (navigator.geolocation) {
                    $rootScope.$emit('pageLoading');
                    $timeout(function() {
                      $rootScope.enableLocation = true;
                    }, 0)
                      .then(function() {
                        return geoLocationService.getLocation();
                      })
                      .then(function(response) {
                        $rootScope.$emit('pageLoaded');
                        if (response.data && response.data.zip) {
                          $rootScope.city = response.data;
                          $rootScope.city.cityFullName =
                            $rootScope.city.city +
                            $rootScope.city.state_code +
                            ' - ' +
                            $rootScope.city.zip;
                          $rootScope.currentCity = $rootScope.city;
                          $rootScope.vitalsGeoCoords = response.data.geo;
                          $rootScope.distance = 25; // TODO default value, figure out how this really should be set
                          TransparencyFactory.setDistance($rootScope.distance);
                          TransparencyFactory.setCity($rootScope.city);
                          TransparencyFactory.setGeoLocationStatus(true);
                          TransparencyFactory.setCurrentLocationZipCode(
                            response.data.zip
                          );
                          TransparencyFactory.setLocationBlocked(false);
                          $rootScope.city.cityFullName =
                            $scope.dependentPcpDetails.geoLocationDetails.distanceDetails.currentLocation;
                          $scope.gotoPrimaryCarePage(searchInput);
                        } else if (response === 'position not found') {
                          TransparencyFactory.setLocationBlocked(true);
                          TransparencyFactory.setGeoLocationStatus(false);
                          TransparencyFactory.setLocationMsg(
                            $scope.dependentPcpDetails.geoLocationDetails.locationMsg
                          );
                          $scope.modalObj.values.NCZipCheck =
                            $rootScope.selectedPlan.isNorthCarolinaPlan;
                          $scope.openModal();
                        } else {
                          TransparencyFactory.setLocationBlocked(false);
                          TransparencyFactory.setGeoLocationStatus(false);
                          $rootScope.$emit('pageLoaded');
                          $scope.modalObj.values.locationNotFound = true;
                          $scope.openModal();
                        }
                      })
                      .catch(function() {
                        TransparencyFactory.setLocationBlocked(false);
                        $rootScope.$emit('pageLoaded');
                        $scope.modalObj.values.locationNotFound = true;
                        $scope.openModal();
                      });
                  } else {
                    $rootScope.$emit('pageLoaded');
                    TransparencyFactory.setLocationBlocked(true);
                    TransparencyFactory.setLocationMsg(
                      $scope.dependentPcpDetails.geoLocationDetails.locationMsg
                    );
                    $scope.modalObj.values.NCZipCheck =
                      $rootScope.selectedPlan.isNorthCarolinaPlan;
                    $scope.openModal();
                  }
                }
              };

              $scope.confirmFunc = function(data) {
                $rootScope.city = data.city;
                $rootScope.distance = data.distance;
                TransparencyFactory.setDistance($rootScope.distance);
                TransparencyFactory.setCity($rootScope.city);
                TransparencyFactory.setGeoLocationStatus(false);
                $scope.gotoPrimaryCarePage($scope.dependentPcpDetails.searchInput);
              };

              if ($scope.dependentPcpDetails.geoLocationDetails) {
                $scope.modalObj = {
                  locationMsg: $scope.dependentPcpDetails.geoLocationDetails.locationMsg,
                  pcp: true,
                  cancelButton: {
                    title: $scope.loc.CANCEL,
                  },
                  confirmButton: {
                    title: $scope.loc.CONTINUE,
                  },
                  values: {
                    distanceDetails:
                      $scope.dependentPcpDetails.geoLocationDetails.distanceDetails,
                    distance: TransparencyFactory.getDistance()
                      ? TransparencyFactory.getDistance().toString()
                      : $scope.dependentPcpDetails.geoLocationDetails.distanceDetails.distance.toString(),
                    city: TransparencyFactory.getCity(),
                  },
                };
              }

              $scope.gotoPrimaryCarePage = function(searchInput) {
                TransparencyFactory.setResultsTerm(searchInput.searchTerm);
                return $rootScope.gotoView(
                  searchInput.link +
                  '?id=260005172&network_id=' +
                  $rootScope.selectedPlan.id +
                  '&distance=' +
                  TransparencyFactory.getDistance() +
                  '&searchTerm=' +
                  searchInput.searchTerm +
                  '&zipCode=' +
                  TransparencyFactory.getCity().zip +
                  '&planName=' +
                  searchInput.planName +
                  '&isPcpFlow=true'
                );
              };

              $scope.openInformationModal = function(pcpInformation) {
                $rootScope.headerTerm =
                  pcpInformation.modalHeader;
                $scope.helpInfo = {
                  pcpModalText: pcpInformation.modalText,
                  pcpInfo: true,
                };
                helpService.help($scope.helpInfo);
              };

              $scope.gotoDetailsPage = function(event, index, displayMember) {
                TransparencyFactory.setResultsDetailsTerm($scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.pcpFullName);
                var requestParms = {
                  network_id: $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                  accountId: $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                  planName: ($rootScope.loggedIn && !$rootScope.noMatchPlanFound) ? $rootScope.selectedPlan.lobDesc : $rootScope.selectedPlan.name,
                  zipCode: $scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.providerZipCode,
                  locationName: encodeURIComponent($scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.providerOrganizationName),
                  doctorName: $scope.dependentPcpDetails.providerData[index].selectedPrimaryCarePhysician.pcpFullName
                };
                $rootScope.$emit('pageLoading');

                findDoctorService.getDoctorDetails(requestParms)
                  .then(function(doctorResult) {
                    if (doctorResult.results && doctorResult.results.length) {
                      var viewUrl = '/find-doctor-results-details?' +
                        '&location=' + doctorResult.results[0].location_id +
                        '&provider=' + doctorResult.results[0].provider_id +
                        '&dependentName=' + displayMember +
                        '&viewPcpDetails=true&dependentPcp=true';
                      // Go to view.
                      $rootScope.gotoView(viewUrl);
                    } else {
                      $rootScope.$emit('pageLoaded');
                      $scope.dependentPcpDetails.providerData[index].displayErrorMessage = true;
                      $scope.dependentPcpDetails.displayErrorMessage = true;
                      event.target.parentNode.parentNode.style.display = 'none';
                      return;
                    }
                  }).catch(function(error) {
                    $rootScope.$emit('pageLoaded');
                    $scope.dependentPcpDetails.providerData[index].displayErrorMessage = true;
                    $scope.dependentPcpDetails.displayErrorMessage = true;
                    event.target.parentNode.parentNode.style.display = 'none';
                    return error;
                  });
              };
            },
          ],
        };
      },
    ]);
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.planDetails', [])
    .directive('planDetails', function() {
      return {
        restrict: 'E',
        scope: {
          /**
           * @param {object} policy
           * @param {Array} policy.policyMembers
           * @param {string} policy.policyMembers[x].givenName
           * @param {string} policy.alphaPrefix
           * @param {string} policy.eternalId
           */
          policy: '<'
        },
        templateUrl: 'partials/plan-details.html',
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
        }]
      };
    });
})();
/**
 * Directive for the static blue plan header (for find doctor).
 *
 * @namespace Directives
 * @class planHeader
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.planHeader', [])
    .directive('planHeader', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/plan-header.html',
          scope: false,
          controller: [
            '$scope',
            '$rootScope',
            'TransparencyFactory',
            function($scope, $rootScope, TransparencyFactory) {
              if (!$rootScope.loggedIn) {
                $rootScope.getInternalLocale();
              }
              $scope.loc = $rootScope.loc;
              $scope.selectedPlan = TransparencyFactory.getSelectedPlan();
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the plan select.
 *
 * @namespace Directives
 * @class planSelect
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.planSelect', [])
  .directive('planSelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/plan-select.html',
        scope: {
          planSelectDetails: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'TransparencyFactory',
          function($scope, $rootScope, TransparencyFactory) {
            $scope.loc = $rootScope.loc;
            $scope.selectedPlan = $rootScope.selectedPlan;

            $scope.togglePlan = function () {
              $scope.expandedPlan = !$scope.expandedPlan;
            };

            $scope.selectPlan = function(plan){
              $scope.selectedPlan = plan;
              $rootScope.selectedUnauthenticatedPlanName = plan.name;
              $rootScope.selectedPlan = $scope.selectedPlan;
              TransparencyFactory.setSelectedPlan(plan);
              $rootScope.selectsPlan(plan);
              $scope.togglePlan();
            };

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the static blue policy header.
 *
 * @namespace Directives
 * @class policyHeaderBlue
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.policyHeaderBlue', [])
  .directive('policyHeaderBlue', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/policy-header-blue.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          function($scope, $rootScope, $filter) {
            /**
             * Retrieves the policy dates display string.
             *
             * @memberof policyHeaderBlue
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates 
             */
            $scope.getPolicyDates = function(policy) {
              var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth = $rootScope.loc[$filter('date')(new Date("December 31, 0000 00:00:00"), 'MMM').toUpperCase()];

              if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }

              return startDate + ' - ' + endDate;
            };

            /**
              * Selects a policy type title
              *
              * @memberof policyHeaderBlue
              * @method getPolicyPlanTitle
              */
             $scope.getPolicyPlanTitle = function(policy) {
              var response;
              policy = policy || {};
              if (policy.isMedical || policy.isPharmacy){
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental){
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision) {
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the static gray policy header.
 *
 * @namespace Directives
 * @class policyHeaderGray
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.policyHeaderGray', [])
  .directive('policyHeaderGray', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/policy-header-gray.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          function($scope, $rootScope, $filter) {
            /**
             * Retrieves the policy dates display string.
             *
             * @memberof policyHeaderGray
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
             $scope.getPolicyDates = function(policy) {
               policy = policy || {};
               var startDate = $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] + $filter('date')(policy.effectiveDate, ' yyyy');
               var endDate = $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] + $filter('date')(policy.expirationDate, ' yyyy');

               if(new Date(policy.expirationDate) >= new Date() && policy.active) {
                 endDate = $rootScope.loc.ACTIVE;
               }

               if (policy.active) {
                 return startDate + ' - ' + endDate;
               } else if (!policy.active && new Date(policy.effectiveDate) >= new Date()) {
                 return $rootScope.loc.BP_FUTURE_POLICY;
               } else if (!policy.active) {
                 return $rootScope.loc.INACTIVE_POLICY;
               }
             };

             /**
              * Selects a policy type title
              *
              * @memberof policySelect
              * @method getPolicyPlanTitle
              */
             $scope.getPolicyPlanTitle = function(policy) {
               var response;
               policy = policy || {};
               if (policy.isMedical || policy.isPharmacy){
                 response = $rootScope.loc.HEALTH_PLAN;
               } else if (policy.isDental){
                 response = $rootScope.loc.DENTAL_PLAN;
               } else if (policy.isVision) {
                  response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
               } else {
                 response = $rootScope.loc.HEALTH_PLAN;
               }
               return response;
             };
           }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the policy select element.
 *
 * @namespace Directives
 * @class policySelect
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.policySelect', []).directive('policySelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/policy-select.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$filter',
          'adobeService',
          '$location',
          function($scope, $rootScope, $filter, adobeService, $location) {
            /**
             * Retrieves the policy dates display string.
             *
             * @memberof policySelect
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDates
             */
            $scope.getPolicyDates = function(policy) {
              var startDate =
                $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate =
                $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.expirationDate, ' yyyy');
              var policyYear = $filter('date')(policy.effectiveDate, 'yyyy');
              var expirationMonth =
                $rootScope.loc[
                  $filter('date')(new Date('December 31, 0000 00:00:00'), 'MMM').toUpperCase()
                ];

              if (new Date(policy.expirationDate) >= new Date() && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              } else if (new Date(policy.expirationDate) >= new Date() && !policy.active) {
                endDate = expirationMonth + ' ' + policyYear;
              }
              return startDate + ' - ' + endDate;
            };

            /**
             * Retrieves the policy dates display string for header.
             *
             * @memberof policySelect
             * @param  {Object} policy The policy to get dates for.
             * @method getPolicyDatesHeader
             */
            $scope.getPolicyDatesHeader = function(policy) {
              var response;
              if (!policy) {
                return policy;
              }

              var startDate =
                $rootScope.loc[$filter('date')(policy.effectiveDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.effectiveDate, ' yyyy');
              var endDate =
                $rootScope.loc[$filter('date')(policy.expirationDate, 'MMM').toUpperCase()] +
                $filter('date')(policy.expirationDate, ' yyyy');
              var current = new Date();

              if (new Date(policy.expirationDate) >= current && policy.active) {
                endDate = $rootScope.loc.ACTIVE;
              }
              if (policy.active) {
                response = startDate + ' - ' + endDate;
              } else if (!policy.active && new Date(policy.effectiveDate) >= current) {
                response = $rootScope.loc.BP_FUTURE_POLICY;
              } else if (!policy.active) {
                response = $rootScope.loc.INACTIVE_POLICY;
              }

              return response;
            };

            /**
             * Toggles the select element.
             *
             * @memberof policySelect
             * @method toggleSelectOpen
             */
            $scope.toggleSelectOpen = function(isOpen) {
              $scope.trackselectDropDownAction(isOpen ? 'close' : 'open');
              if ($rootScope.policies || $rootScope.policies.length > 1) {
                /**
                 * Whether the select element is open.
                 *
                 * @memberof policySelect
                 * @member {Boolean} selectOpen
                 */
                $scope.selectOpen = !$scope.selectOpen;
                $rootScope.blurContent = $scope.selectOpen;
              }
            };

            /**
             * ($rootScope) Allows outside controllers and directives to close the policy select.
             *
             * @memberof policySelect
             * @method closePolicySelect
             */
            $rootScope.closePolicySelect = function() {
              if ($scope.selectOpen) {
                $scope.selectOpen = false;
                $rootScope.blurContent = false;
              }
            };

            /**
             * Returns whether a policy is active.
             *
             * @memberof policySelect
             * @method isActive
             * @param  {Object} policy The policy to check
             * @return {Boolean} Whether the policy is active
             */
            $scope.isActive = function(policy) {
              return new Date(policy.expirationDate) > new Date();
            };

            /**
             * Returns whether a policy is future policy or not.
             *
             * @memberof policySelect
             * @method isActiveFuture
             * @param  {Object} policy The policy to check
             * @return {Boolean} Whether the policy is Future
             */

            $scope.isActiveFuture = function(policy) {
              if (new Date(policy.effectiveDate) > new Date()){
                $rootScope.futurePolicy = true;
                return true;
              }
              
            };

            /**
             * Selects a policy index.
             *
             * @memberof policySelect
             * @method selectPolicy
             * @param  {Number} index The policy index
             */
            $scope.selectPolicyFromDropdown = function(index) {
              $scope.trackselectDropDownAction('select');
              $scope.toggleSelectOpen(true);
              $rootScope.selectPolicy(index);
              $rootScope.refreshNavbar();
            };

            /**
             * Tracks the action of the plan dropdown.
             *
             * @memberof policySelect
             * @method trackselectDropDownAction
             * @param  {String} actionVariable the action to track ('open','close' or 'select')
             *
             */
            $scope.trackselectDropDownAction = function(actionVariable) {
              var action = 'homePlanDropdown:' + actionVariable;
              var section = $location.path().split('/')[1];

              section = section[0].toUpperCase() + section.slice(1);
              adobeService.trackAction(action, section);
            };

            /**
             * Selects a policy type title
             *
             * @memberof policySelect
             * @method getPolicyPlanTitle
             */
            $scope.getPolicyPlanTitle = function(policy) {
              if (!policy) {
                return policy;
              }
              // FIX: why is response set like this?
              var response;
              if (policy.isMedical || policy.isPharmacy) {
                response = $rootScope.loc.HEALTH_PLAN;
              } else if (policy.isDental) {
                response = $rootScope.loc.DENTAL_PLAN;
              } else if (policy.isVision) {
                response = $rootScope.loc.BLUE2020_HEADER_VISION_PLAN;
              } else {
                response = $rootScope.loc.HEALTH_PLAN;
              }
              return response;
            };
          },
        ],
      };
    },
  ]);
})();

/**
 * Directive for a prescription-only-info.
 *
 * @namespace Directives
 * @class prescriptionOnlyInfo
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.prescriptionOnlyInfo', [])
  .directive('prescriptionOnlyInfo', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/prescription-only-info.html',
        scope: {
          /**
          * The title of the prescription-only-info.
          *
          * @memberof prescriptionOnlyInfo
          * @member {String} title
          */
          data: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          'shareService',
          '$window',
          function($scope, $rootScope, shareService, $window) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
            $scope.language = $rootScope.language;

            document.addEventListener("deviceready", onDeviceReady, false);

            function onDeviceReady() {
              var devicePlatform = device.platform;
              $scope.openPDF = function(url){
                if (devicePlatform !== 'iOS') {
                /**
                * Android can not open PDF using openInBrowser
                * Adding google drive prefix link to open PDF in browser
                */
                $rootScope.$emit('pageLoading');
                DocumentViewer.previewFileFromUrlOrPath(
                      function (success) {
                        $rootScope.$emit('pageLoaded');
                    },
                      function (error) {
                        console.log(error);
                        $rootScope.$emit('pageLoaded');
                    },
                    url, 'benefits.pdf');
                } else {
                  $scope.openInBrowser(url);
                }
              }
            }
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable quick alert modal.
 *
 * @namespace Directives
 * @class quickAlertModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.quickAlertModal', [])
  .directive('quickAlertModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/quick-alert-modal.html',
        scope: false,
        controller: [
          '$rootScope',
          '$scope',
          function($rootScope, $scope) {

          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the radio button element.
 *
 * @namespace Directives
 * @class radioButton
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.radioButton', [])
  .directive('radioButton', [
    function() {
      return {
        restrict: 'E',
        replace: true,
        templateUrl: 'partials/radio-button.html',
        scope: {
          /**
          * The radio buttons defined for usage. Each button consists of a name, label, value, and status.
          *
          * @memberof radioButton
          * @member {Array} buttons
          */
          buttons:'=',

          /**
          * This is the single value representing the radio button group.
          *
          * @memberof radioButton
          * @member {String} buttons
          */
          value:'='
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope, $rootScope) {

            /**
            * This method toggles on non-selected buttons off and turns on the selected button.
            *
            * @memberof radioButton
            * @member {Object} selectedButton  The currently seleted button.
            * @member {Array} buttonCollection The collection of buttons within this group.
            */
            $scope.toggleRadio = function(selectedButton, buttonCollection) {
              disableButtons(buttonCollection);

              selectedButton.status = true;
              $scope.value          = selectedButton.value;
            };

            var disableButtons = function(buttonCollection) {
              for (var index = 0; index < buttonCollection.length; index++) {
                buttonCollection[index].status = false;
              }
            };

            var init = function(buttons) {
              for (var index = 0; index < buttons.length; index++) {
                if (buttons[index].status === true) {
                  $scope.value = buttons[index].value;
                  break;
                }
              }
            };

            init($scope.buttons);
          }
        ]
      };
    }
  ]);
}());

var MAX_AFFILIATIONS = 3;
var FIND_DOCTOR_RESULTS_DETAILS = 'findDoctorResultsDetails';
/**
 * Directive for the result details blocks.
 *
 * @namespace Directives
 * @class resultsDetailsBlocks
 */
(function() {
  'use strict';
  var pageName = 'find-doctor-results-details';
  angular
    .module('blueconnect.mobile.directives.resultsDetailsBlocks', [])
    .directive('findDoctorResultsDetailsNameCard', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/find-doctor-results-details-name-card.html',
          scope: {
            doctorNameCardInfo: '<doctorNameCardObj',
            viewPcpDetailsValue: '<viewPcpDetailsValue',
            recommendedFlowValue: '<recommendedFlowValue',
            dependentPcp: '<dependentPcp'
          },
          controller: [
            '$rootScope',
            '$scope',
            'TransparencyFactory',
            'helpService',
            function($rootScope, $scope, TransparencyFactory, helpService) {
              // Set the locale from the parent directive
              $scope.loc = $scope.$parent.loc;
              $scope.noMatchPlanFound = $rootScope.noMatchPlanFound;
              $scope.recommendedProviderData = ($scope.recommendedFlowValue && TransparencyFactory.getRecommendedPcpData()) ? TransparencyFactory.getRecommendedPcpData() : false;

              $scope.doctorNameCardOpen = true;
              $scope.tierDetails = TransparencyFactory.getResultsDetailsItemLabel();
              $scope.toggleCollapse = function() {
                $scope.doctorNameCardOpen = !$scope.doctorNameCardOpen;
                $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_NAME_CARD, $scope.doctorNameCardOpen);
              };

              $scope.openOutNetworkInformation = function() {
                $rootScope.headerTerm = $scope.loc.INFORMATION;
                $scope.helpInfo = {
                  makeMyPcpQuestion: $scope.loc.PCP_MEDICARE_DETAILS_OUTOFNETWORKPCP,
                  makeMyPcpAnswer: $scope.loc.PCP_MEDICARE_MODAL_OUTOFNETWORKPCP,
                  makePcpInfo: true
                };
                helpService.help($scope.helpInfo);

              };

              $scope.openTierInfoModal = function() {
                $rootScope.headerTerm = $scope.loc.INFORMATION;
                $scope.helpInfo = {
                  tierModalText: $scope.loc.CLEAR_PRICING_TIER_INFORMATION,
                  tierInfo: true
                };
                helpService.help($scope.helpInfo);
              };
            },
          ],
        };
      },
    ])

    .directive('findDoctorResultsDetailsOfficeLocationCard', function() {
      return {
        restrict: 'E',
        scope: {
          locationAndContactCardInfo: '<locationAndContactInfoCardObj',
        },
        templateUrl:
          'partials/find-doctor-results-details-office-location-card.html',
        controller: [
          '$rootScope',
          '$scope',
          'alertService',
          'geoLocationService',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            alertService,
            geoLocationService,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Default params.
            $scope.officeAndLocationCardOpen = true;
            $scope.expandedLocation = false;
            $scope.isLoadingMore = false;

            $scope.toggleItem = function() {
              $scope.officeAndLocationCardOpen = !$scope.officeAndLocationCardOpen;
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.OFFICE_LOCATION, $scope.officeAndLocationCardOpen);
            };

            $scope.locationsArray = $scope.locationAndContactCardInfo
              ? $scope.locationAndContactCardInfo.details
              : [];

            // Display other locations, if any
            $scope.displayOtherLocations = function(locationDetails) {
              $scope.expandedLocation = !$scope.expandedLocation;
            };

            $scope.getDirectionsClicked = function() {
              var location =
                $scope.locationAndContactCardInfo.summary.addr_line1 +
                ' ' +
                $scope.locationAndContactCardInfo.summary.city +
                ', ' +
                $scope.locationAndContactCardInfo.summary.state +
                ' ' +
                $scope.locationAndContactCardInfo.summary.postal_code;

              alertService
                .showAlert(
                  $scope.loc.EXTERNAL_LINK,
                  $scope.loc.EXTERNAL_LINK_WARNING,
                  { title: $scope.loc.CONTINUE, color: 'blue' },
                  { title: $scope.loc.CANCEL }
                )
                .then(function() {
                  $rootScope.blurContent = false;

                  geoLocationService.openMaps(location);
                });
            };

            // Handle go to details of location.
            $scope.viewDetailsOfLocation = function(selectedLocation) {
              $rootScope.detailsFromBackButton = false;
              // Set results details term/item.
              var resultsDetailsTerm = selectedLocation.name || selectedLocation.title;
              var resultsDetailsItem = { location_id: selectedLocation.location_id, provider_id: selectedLocation.provider_id };

              // Populate transparency factory.
              TransparencyFactory
                .setResultsDetailsTerm(resultsDetailsTerm)
                .setResultDetailsItem(resultsDetailsItem);

              // Construct url.
              var viewUrl = '/find-doctor-results-details?location=' + selectedLocation.location_id + '&provider=' + selectedLocation.provider_id;

              // Navigate.
              $rootScope.gotoView(viewUrl);
            };

            $scope.canLoadMore = function() {
              return $scope.locationAndContactCardInfo.other_locations._meta
                .pages.next;
            };

            $scope.loadMore = function() {
              // Construct query params.
              var query = {
                account_id:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.accountId,
                card: 'location',
                distance: TransparencyFactory.getDistance(),
                lang: $rootScope.language,
                location_id: TransparencyFactory.getResultsDetailsItem()
                  .location_id,
                loggedIn: $rootScope.loggedIn,
                network_id:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.id,
                page:
                  $scope.locationAndContactCardInfo.other_locations._meta.pages
                    .next,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                provider_id: TransparencyFactory.getResultsDetailsItem()
                  .provider_id,
                resultsTerm: TransparencyFactory.getResultsDetailsTerm(),
                zipCode: TransparencyFactory.getCity() ? TransparencyFactory.getCity().zip : null,
              };

              // Toggle loading more.
              $scope.isLoadingMore = true;

              // Call rest service.
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(function(res) {
                  // Toggle isLoadingMore
                  $scope.isLoadingMore = false;

                  // Select the appropriate data element.
                  var data = res.find(function(c) {
                    return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                  }).values.findDoctorResultsDetails.cardData;

                  // Get new meta.
                  $scope.locationAndContactCardInfo.other_locations._meta =
                    data._meta;

                  // Concat results.
                  $scope.locationAndContactCardInfo.other_locations.other_provider_locations = $scope.locationAndContactCardInfo.other_locations.other_provider_locations.concat(
                    data.other_provider_locations
                  );
                });
            };
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsNetworksCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl: 'partials/find-doctor-results-details-networks-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.networksCardOpen = false;

            var loadNetworks = function() {
              // if no data is saved, retrieve it
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName = $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'networks';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('networkCardLoading');

              // Retrieve the required provider networks data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('networkCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.providerNetworks =
                          component.values.findDoctorResultsDetails.cardData.networks_accepted;
                        TransparencyFactory.setResultsDetailsNetworksAccepted(
                          $scope.providerNetworks
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('networkCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_NETWORKS_ACCEPTED_CARD, !$scope.networksCardOpen);
              // When card is being expanded
              if (!$scope.networksCardOpen) {
                var savedNetworks = TransparencyFactory.getResultsDetailsNetworksAccepted();

                // Check if networks data has already been obtained previously
                if (savedNetworks) {
                  $scope.providerNetworks = savedNetworks;
                } else {
                  // retrieve data.
                  loadNetworks();
                }
              }

              // Toggle card state
              $scope.networksCardOpen = !$scope.networksCardOpen;
            };

            // Show card loading spinner
            $scope.$on('networkCardLoading', function() {
              angular.element('.network-data').hide();
              angular.element('.network-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('networkCardLoaded', function() {
              angular.element('.network-data').show();
              angular.element('.network-card-loading-spinner').hide();
            });

            // kick off load networks.
            loadNetworks();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsSpecialtiesCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-specialties-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.specialtiesCardOpen = false;
            angular.element('.specialties-card-loading-spinner').hide();

            var loadSpecialties = function() {

              // if no data is saved, retrieve it
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName =
                $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'specialties';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('specialtiesCardLoading');

              // Retrieve the required provider specialties data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('specialtiesCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.loggedIn = $rootScope.loggedIn;
                        $scope.providerSpecialties =
                          component.values.findDoctorResultsDetails.cardData.specialties;
                        $scope.providerInfo = {};
                        $scope.providerInfo.providerName =
                          component.values.findDoctorResultsDetails.cardData.providerName;
                        $scope.providerInfo.isPcp =
                          component.values.findDoctorResultsDetails.cardData.isPcp;
                        $scope.providerInfo.isProvider =
                          component.values.findDoctorResultsDetails.cardData.isProvider;
                        TransparencyFactory.setResultsDetailsSpecialties(
                          $scope.providerSpecialties
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('specialtiesCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_SPECIALTIES_CARD, !$scope.specialtiesCardOpen);
              // When card is being expanded
              if (!$scope.specialtiesCardOpen) {
                var savedSpecialties = TransparencyFactory.getResultsDetailsSpecialties();

                // Check if specialties data has already been obtained previously
                if (savedSpecialties) {
                  $scope.providerSpecialties = savedSpecialties;
                } else {
                  // load data.
                  loadSpecialties();
                }
              }

              // Toggle card state
              $scope.specialtiesCardOpen = !$scope.specialtiesCardOpen;


            };

            // Show card loading spinner
            $scope.$on('specialtiesCardLoading', function() {
              angular.element('.specialties-data').hide();
              angular.element('.specialties-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('specialtiesCardLoaded', function() {
              angular.element('.specialties-data').show();
              angular.element('.specialties-card-loading-spinner').hide();
            });

            // Initialize data load.
            loadSpecialties();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsCredentialCard', function() {
      return {
        restrict: 'E',
        scope: {
          providerType: '<providerType',
        },
        templateUrl:
          'partials/find-doctor-results-details-credential-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.credentialCardOpen = false;
            angular.element('.credentials-card-loading-spinner').hide();

            // function to load data
            var loadCredentials = function() {
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName =
                $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'credentials';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('credentialsCardLoading');

              // Retrieve the required provider credentials data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('credentialsCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.providerCredentials =
                          component.values.findDoctorResultsDetails.cardData;
                        TransparencyFactory.setResultsDetailsCredentials(
                          $scope.providerCredentials
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('credentialsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );

            };

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_CREDENTIALS_CARD, !$scope.credentialCardOpen);
              // When card is being expanded
              if (!$scope.credentialCardOpen) {
                var savedCredentials = TransparencyFactory.getResultsDetailsCredentials();

                // Check if credentials data has already been obtained previously
                if (savedCredentials) {
                  $scope.providerCredentials = savedCredentials;
                } else {
                  // if no data is saved, retrieve it
                  loadCredentials();
                }
              }

              // Toggle card state
              $scope.credentialCardOpen = !$scope.credentialCardOpen;
            };

            // Show card loading spinner
            $scope.$on('credentialsCardLoading', function() {
              angular.element('.credentials-data').hide();
              angular.element('.credentials-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('credentialsCardLoaded', function() {
              angular.element('.credentials-data').show();
              angular.element('.credentials-card-loading-spinner').hide();
            });

            // Initial data load.
            loadCredentials();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsAwardsCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl: 'partials/find-doctor-results-details-awards-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;

            // Card is initially collapsed
            $scope.awardsCardOpen = false;
            angular.element('.awards-card-loading-spinner').hide();

            var loadAwards = function() {
              var query = $location.search();
              query.loggedIn = $rootScope.loggedIn;
              query.planName =
                $rootScope.selectedPlan && $rootScope.selectedPlan.name;
              if (query.viewPcpDetails != 'true') {
                query.zipCode = TransparencyFactory.getCity().zip;
                query.distance = TransparencyFactory.getDistance();
              }
              query.resultsTerm = TransparencyFactory.getResultsDetailsTerm();
              query.card = 'awards';

              var pageName = 'find-doctor-results-details';
              $scope.$emit('awardsCardLoading');

              // Retrieve the required provider awards data
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(resultReceived) {
                    $scope.$emit('awardsCardLoaded');

                    // Select the appropriate data element
                    resultReceived.forEach(function(component) {
                      if (component.name === FIND_DOCTOR_RESULTS_DETAILS) {
                        $scope.providerAwards =
                          component.values.findDoctorResultsDetails.cardData;
                        TransparencyFactory.setResultsDetailsAwards(
                          $scope.providerAwards
                        );
                      }
                    });
                  },
                  function(error, status) {
                    $scope.$emit('awardsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            }

            // Expand card on click
            $scope.toggleItem = function() {
              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_AWARDS_CARD, !$scope.awardsCardOpen);
              // When card is being expanded
              if (!$scope.awardsCardOpen) {
                var savedAwards = TransparencyFactory.getResultsDetailsAwards();

                // Check if awards data has already been obtained previously
                if (savedAwards) {
                  $scope.providerAwards = savedAwards;
                } else {
                  // if no data is saved, retrieve it
                  loadAwards()
                }
              }

              // Toggle card state
              $scope.awardsCardOpen = !$scope.awardsCardOpen;
            };

            // Show card loading spinner
            $scope.$on('awardsCardLoading', function() {
              angular.element('.awards-data').hide();
              angular.element('.awards-card-loading-spinner').show();
            });

            // Hide card loading spinner
            $scope.$on('awardsCardLoaded', function() {
              angular.element('.awards-data').show();
              angular.element('.awards-card-loading-spinner').hide();
            });

            loadAwards();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsAffiliationCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-affiliation-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Default variables.
            $scope.loc = $scope.$parent.loc;
            $scope.affiliationsCardOpen = false;
            $scope.showOtherAffiliations = false;
            $scope.loadMoreAffiliationsMessage =
              $scope.loc.RESULTS_DETAILS_MORE_AFFILIATES;
            var query = $location.search();

            var loadAffiliations = function() {

              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'affiliations',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('affiliationsCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('affiliationsCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope affiliations.
                    $scope.affiliations =
                      resultDetails.values.findDoctorResultsDetails.cardData.topAffiliations;
                    $scope.otherAffiliations =
                      resultDetails.values.findDoctorResultsDetails.cardData.otherAffiliations;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsAffiliations(
                      $scope.affiliations
                    );
                  },
                  function(error, status) {
                    $scope.$emit('affiliationsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.affiliationsCardOpen = !$scope.affiliationsCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_AFFILIATIONS_CARD, $scope.affiliationsCardOpen);

              // Load affiliations from transparency factory.
              if (TransparencyFactory.hasResultsDetailsAffiliations()) {
                $scope.affiliations = TransparencyFactory.getResultsDetailsAffiliations();
              } else {
                // Load data.
                loadAffiliations();
              }
            };


            $scope.toggleOtherAffiliations = function() {
              // Toggle show other affiliations.
              $scope.showOtherAffiliations = !$scope.showOtherAffiliations;

              if ($scope.showOtherAffiliations) {
                // Set message.
                $scope.loadMoreAffiliationsMessage =
                  $scope.loc.RESULTS_DETAILS_SEE_LESS;

                // Concat array.
                $scope.affiliations = $scope.affiliations.concat(
                  $scope.otherAffiliations
                );
              } else {
                // Set message.
                $scope.loadMoreAffiliationsMessage =
                  $scope.loc.RESULTS_DETAILS_MORE_AFFILIATES;

                // Slice array.
                $scope.affiliations = $scope.affiliations.slice(
                  0,
                  MAX_AFFILIATIONS
                );
              }
            };

            $scope.canLoadMore = true;

            // Handle go to details of location.
            $scope.viewDetailsOfAffiliate = function(affiliate) {
              $rootScope.detailsFromBackButton = false;
              // Set results details term/item.
              var resultsDetailsTerm = affiliate.name;
              var resultsDetailsItem = { location_id: affiliate.location_id, provider_id: affiliate.provider_id };

              // Populate transparency factory.
              TransparencyFactory
                .setResultsDetailsTerm(resultsDetailsTerm)
                .setResultDetailsItem(resultsDetailsItem);

              // Construct url.
              var viewUrl = '/find-doctor-results-details?location=' + affiliate.location_id + '&provider=' + affiliate.provider_id;

              // Navigate.
              $rootScope.gotoView(viewUrl);
            };


            // Hide card loading spinner.
            $scope.$on('affiliationsCardLoaded', function() {
              angular.element('.affiliation-data').show();
              angular.element('.affiliation-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('affiliationsCardLoading', function() {
              angular.element('.affiliation-data').hide();
              angular.element('.affiliation-card-loading-spinner').show();
            });

            loadAffiliations();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsLanguagesCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl: 'partials/find-doctor-results-details-languages-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.languagesCardOpen = false;
            var query = $location.search();

            var loadLanguages = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'languages',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('languagesCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('languagesCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope languages.
                    $scope.languages =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsLanguages(
                      $scope.languages
                    );
                  },
                  function(error, status) {
                    $scope.$emit('languagesCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.languagesCardOpen = !$scope.languagesCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_LANGUAGES_CARD, $scope.languagesCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsLanguages()) {
                $scope.languages = TransparencyFactory.getResultsDetailsLanguages();
              } else {
                loadLanguages();
              }
            };

            // Hide card loading spinner.
            $scope.$on('languagesCardLoaded', function() {
              angular.element('.language-data').show();
              angular.element('.language-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('languagesCardLoading', function() {
              angular.element('.language-data').hide();
              angular.element('.language-card-loading-spinner').show();
            });

            loadLanguages();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsLimitationsCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-limitations-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.limitationsCardOpen = false;
            var query = $location.search();

            var loadLimitations = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'limitations',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('limitationsCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('limitationsCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope limitations.
                    $scope.limitations =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    $scope.limitations = ($scope.limitations.length > 0 && $scope.limitations[0].type_code === 'toa') ? $scope.limitations.reverse() : $scope.limitations;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsLimitations(
                      $scope.limitations
                    );
                  },
                  function(error, status) {
                    $scope.$emit('limitationsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.limitationsCardOpen = !$scope.limitationsCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_LIMITATIONS_CARD, $scope.limitationsCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsLimitations()) {
                $scope.limitations = TransparencyFactory.getResultsDetailsLimitations();
              } else {
                loadLimitations();
              }
            };

            // Hide card loading spinner.
            $scope.$on('limitationsCardLoaded', function() {
              angular.element('.limitation-data').show();
              angular.element('.limitation-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('limitationsCardLoading', function() {
              angular.element('.limitation-data').hide();
              angular.element('.limitation-card-loading-spinner').show();
            });

            $scope.limits = { min: 0, max: 99 };

            loadLimitations();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsLocationAmenitiesCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-location-amenities-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.amenitiesCardOpen = false;
            var query = $location.search();

            var loadLocationAmenties = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'amenities',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('amenitiesCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('amenitiesCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope amenities.
                    $scope.amenities =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsAmenities(
                      $scope.amenities
                    );
                  },
                  function(error, status) {
                    $scope.$emit('amenitiesCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.amenitiesCardOpen = !$scope.amenitiesCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_AMENITIESS_CARD, $scope.amenitiesCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsAmenities()) {
                $scope.amenities = TransparencyFactory.getResultsDetailsAmenities();
              } else {
                loadLocationAmenties();
              }
            };

            // Hide card loading spinner.
            $scope.$on('amenitiesCardLoaded', function() {
              angular.element('.amenity-data').show();
              angular.element('.amenity-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('amenitiesCardLoading', function() {
              angular.element('.amenity-data').hide();
              angular.element('.amenity-card-loading-spinner').show();
            });

            loadLocationAmenties();
          },
        ],
      };
    })

    .directive('findDoctorResultsDetailsMoreProviderDetailsCard', function() {
      return {
        restrict: 'E',
        scope: {},
        templateUrl:
          'partials/find-doctor-results-details-more-provider-details-card.html',
        controller: [
          '$rootScope',
          '$scope',
          '$location',
          'restService',
          'TransparencyFactory',
          function(
            $rootScope,
            $scope,
            $location,
            restService,
            TransparencyFactory
          ) {
            // Set the locale from the parent directive
            $scope.loc = $scope.$parent.loc;
            $scope.detailsCardOpen = false;
            var query = $location.search();

            var loadProviderDetails = function() {
              // Merge query and variables for card.
              query = Object.assign(query, {
                card: 'identifiers',
                distance: TransparencyFactory.getDistance(),
                loggedIn: $rootScope.loggedIn,
                planName:
                  $rootScope.selectedPlan && $rootScope.selectedPlan.name,
                resultsTerm: TransparencyFactory.getResultsTerm(),
                zipCode: query.viewPcpDetails != "true" ? TransparencyFactory.getCity().zip : null,
              });

              // Retrieve the required provider awards data
              $scope.$emit('detailsCardLoading');
              restService
                .getPageData(
                  restService.devices.MOBILE,
                  pageName,
                  $rootScope.language,
                  query
                )
                .then(
                  function(res) {
                    $scope.$emit('detailsCardLoaded');

                    // Select the appropriate data element.
                    var resultDetails = res.find(function(c) {
                      return c.name === FIND_DOCTOR_RESULTS_DETAILS;
                    });

                    // Scope identifiers.
                    $scope.identifiers =
                      resultDetails.values.findDoctorResultsDetails.cardData;

                    // Set in factory.
                    TransparencyFactory.setResultsDetailsIdentifiers(
                      $scope.identifiers
                    );
                  },
                  function(error, status) {
                    $scope.$emit('detailsCardLoaded');
                    if ($rootScope.loggedIn) {
                      $rootScope.showNetworkErrorAlert();
                    } else {
                      $rootScope.showNetworkErrorUnautenticated();
                    }
                  }
                );
            };

            // Function to toggle card.
            $scope.toggleItem = function() {
              $scope.detailsCardOpen = !$scope.detailsCardOpen;

              $rootScope.healthNavTrackToggleActions('profile', $scope.loc.RESULTS_DETAILS_MORE_INFO_CARD, $scope.detailsCardOpen);

              // Load data from transparency factory.
              if (TransparencyFactory.hasResultsDetailsIdentifiers()) {
                $scope.identifiers = TransparencyFactory.getResultsDetailsIdentifiers();
              } else {
                loadProviderDetails();
              }
            };

            // Hide card loading spinner.
            $scope.$on('detailsCardLoaded', function() {
              angular.element('.details-data').show();
              angular.element('.details-card-loading-spinner').hide();
            });

            // Show card loading spinner.
            $scope.$on('detailsCardLoading', function() {
              angular.element('.details-data').hide();
              angular.element('.details-card-loading-spinner').show();
            });

            loadProviderDetails();
          },
        ],
      };
    });
})();

/**
 * Directive for the removal of URL unsafe characters from an input.
 *
 * @namespace Directives
 * @class safeInput
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.safeInput', [])
  .directive('safeInput', function(){
  	return {
      restrict: 'A',
  		require: 'ngModel',
  		link: function(scope, element, attrs, modelCtrl) {
  			modelCtrl.$parsers.push(function (inputValue) {
  				if(inputValue){
  					if(!inputValue.length) {
  						return inputValue;
  					}

  					var transformedInput = inputValue.replace(/[^a-zA-Z0-9_-\s]/g, '');
  					if (transformedInput!=inputValue) {
  						modelCtrl.$setViewValue(transformedInput);
  						modelCtrl.$render();
  					}

  					return transformedInput;
  				}
  				return inputValue;
  			});
  		}
  	};
  });

}());

/**
 * Directive for the id card scroll div end.
 *
 * @namespace Directives
 * @class idCardScrollEnd
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.scrollEnd', [])
  .directive('scrollEnd', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/scroll-end.html',
      };
    }
  ]);
}());

/**
 * Directive for the id card scroll div start.
 *
 * @namespace Directives
 * @class idCardScrollStart
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.scrollStart', [])
  .directive('scrollStart', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/scroll-start.html',
      };
    }
  ]);
}());

/**
 * Directive for a standalone search input.
 *
 * @namespace Directives
 * @class searchInput
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.searchInput', [])
  .directive('searchInput', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/search-input.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          function($scope, $rootScope, $location) {
            $scope.loc = $rootScope.loc;

            /**
            * The query string to search by.
            *
            * @memberof searchInput
            * @member {String} query
            */
            $scope.query = $location.search().q || '';

            /**
             * Focuses on the search input.
             *
             * @memberof searchInput
             * @method focusOnSearchInput
             */
            $scope.focusOnSearchInput = function() {
              angular.element('.search-input input').focus();
            };

            /**
             * Validates the query string.
             *
             * @memberof searchInput
             * @method queryIsValid
             */
            $scope.queryIsValid = function() {
              if($scope.query.length < 3) {
                return false;
              }
              if($scope.query === $location.search().q) {
                return false;
              }

              return true;
            };

            /**
             * Performs the search.
             *
             * @memberof searchInput
             * @method search
             */
            $scope.search = function() {
              $scope.hideKeyboard();
              if(!$scope.queryIsValid()) {
                return;
              }
              $location.url($location.path() + '?q=' + $scope.query);
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the application settings page.
 *
 * @namespace Directives
 * @class settings
 */
(function() {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.settingsList', [])
    .directive('settingsList', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/settings-list.html',
        scope: {
          /**
           * The settings information to display.
           *
           * @memberof settings
           * @member {Object} data
           */
          settingsData: '=',
        },
        controller: [
          '$scope',
          '$rootScope',
          '$route',
          '$window',
          '$q',
          'cordovaService',
          'restService',
          'languageService',
          'loginService',
          'touchIdService',
          'adobeService',
          'analyticConstants',
          function(
            $scope,
            $rootScope,
            $route,
            $window,
            $q,
            cordovaService,
            restService,
            languageService,
            loginService,
            touchIdService,
            adobeService,
            analyticConstants
          ) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.language = $rootScope.language;

            $scope.loginSettings = {
              touchIdAvailable: null,
              biometricEnabled: null,
              faceId: null
            };
            $scope.settingData = $scope.settingsData; //I could not use $scope.settingsData in template because it was not being updated.

            touchIdService
              .isAvailable()
              .then(function(result) {
                $scope.loginSettings.touchIdAvailable = true;
                $scope.loginSettings.faceId = result === 'face';
                return loginService.getBiometricEnabled();
              })
              .then(function(bioBoolean) {
                $scope.loginSettings.biometricEnabled = bioBoolean;

                // Set display text.
                updateTouchIdMessage($scope.loginSettings.biometricEnabled);
              })
              .catch(function() {
                $scope.loginSettings.touchIdAvailable = false;
              });

            for (var setting in $scope.settingsData) {
              var currentSetting = $scope.settingsData[setting].settings;
              for (var key in currentSetting) {
                // eslint-disable-next-line no-undefined
                if ($rootScope.appSettings[setting] !== undefined) {
                  if ($rootScope.appSettings[setting].hasOwnProperty(key)) {
                    $scope.settingsData[setting].settings[key].value =
                      $rootScope.appSettings[setting][key];
                  }
                }
              }
            }



            /* setting device type for setting list if statement */
            var deviceResult = cordovaService.checkDeviceType();
            $scope.iphone = deviceResult.ios;
            $scope.android = deviceResult.android;

            // Set display text based on current scope.
            function updateTouchIdMessage(useTouchId) {
              if ($scope.android === true) {
                $scope.touchIdDisplayText = useTouchId === false ?
                $rootScope.loc.ENABLE_FINGERPRINT_AUTH:
                $rootScope.loc.DISABLE_FINGERPRINT_AUTH;
              } else {
                if ($scope.loginSettings.faceId === true) {
                  $scope.touchIdDisplayText = useTouchId === false ?
                  $rootScope.loc.ENABLE_FACE_ID:
                  $rootScope.loc.DISABLE_FACE_ID;
                } else {
                  $scope.touchIdDisplayText = useTouchId === false ?
                  $rootScope.loc.ENABLE_TOUCH_ID:
                  $rootScope.loc.DISABLE_TOUCH_ID;
                }
              }
            }

            /**
             * Allows the user to select the language used by the application.
             *
             * @memberof settings
             * @method toggleLanguage
             * @param  {String} languageToBe The selected language to make active on the screen by user.
             */
            $scope.toggleLanguage = function(languageToBe) {
              $rootScope.setLanguage(languageToBe);
              $scope.language = languageToBe;

              languageService
                .getLocale(languageToBe)
                .then(function(locale) {
                  $rootScope.loc = locale;
                  $scope.loc = $rootScope.loc;
                  return $scope.getPolicies($rootScope.policyIndex);
                })
                .then(function(policies) {
                  $rootScope.policies = policies;
                  $rootScope.refreshNavbar();
                  $route.reload();
                  return $scope.loc;
                });
            };

            /**
             * Retrieves the member's policies from the data service.
             *
             * @memberof settings
             * @method getPolicies
             */
            $scope.getPolicies = function(policyToSelect) {
              var deferred = $q.defer();
              restService.getData('policies', $rootScope.language || 'en').then(function(policies) {
                $rootScope.policies = policies;
                $rootScope.selectPolicy(policyToSelect);
                deferred.resolve(policies);
              });

              return deferred.promise;
            };

            /**
             * opens the external link to reset the password.
             *
             * @memberof settings
             * @method gotoResetPassword
             */

            $scope.gotoResetPassword = function() {
              return $rootScope.openInBrowser($scope.settingsData.login.settings.link);
            };

            /**
             * Submits the settings form and saves data to local database and rootscope.
             *
             * @memberof settings
             * @method saveSettings
             * @param  {Object} formData The settings data to be saved on the device.
             */
            $scope.saveSettings = function(formData) {
              for (var category in formData) {
                //Category is login, pushNotifications, etc..
                var settings = { data: [] };

                var currentSetting = formData[category].settings; //currentSetting is the full key/value pairs for a category
                for (var key in currentSetting) {
                  //key is the individual fields in a specific category
                  var setting = { key: key, value: formData[category].settings[key].value };
                  settings.data.push(setting);

                  $rootScope.appSettings[category][key] = setting.value;
                }

                cordovaService.updateAppSettings(category, settings);
              }

              $window.history.back();
            };

            /**
             * Toggles the touch ID value on/off. It sets the value and switches the button text.
             *
             * @memberof settings
             * @method onToggleTouchId
             * @param  {Boolean} useTouchId
             */
            $scope.onToggleTouchId = function() {
              return (
                $scope.loginSettings.biometricEnabled === false ?
                touchIdService
                  .isAvailable()
                  .then(function(biometric) {
                    console.log(biometric);
                    return touchIdService.verifyFingerprint('Sign into your Member Profile');
                  }) :
                  $q.resolve(false)
              )
              .then(function() {
                return loginService.setBiometricEnabled(!$scope.loginSettings.biometricEnabled);
              })
              .then(function(bioBoolean) {
                console.log(bioBoolean);
                adobeService.trackAction('settings:update:biometrics:' + bioBoolean ? 'on' : 'off', analyticConstants.SETTINGS_SECTION);
                return loginService.getBiometricEnabled();
              })
              .then(function(bioBooleanFromAppSettings) {
                $scope.loginSettings.biometricEnabled = bioBooleanFromAppSettings;
                // Update message.
                updateTouchIdMessage($scope.loginSettings.biometricEnabled);
              })
              .catch(function(setBioBooleanError) {
                console.warn('Error setting biometric boolean', setBioBooleanError);
                loginService
                  .getBiometricEnabled()
                  .then(function(bioBooleanToRevert) {
                    $scope.loginSettings.biometricEnabled = bioBooleanToRevert;
                  });
              });
            };
          },
        ],
      };
    },
  ]);
})();

/**
 * Directive for the reusable share modal.
 *
 * @namespace Directives
 * @class shareModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.shareModal', [])
  .directive('shareModal', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/share-modal.html',
        scope: false,
        controller: [
          '$scope',
          '$rootScope',
          'adobeService',
          function($scope, $rootScope, adobeService) {
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the billingPreferencesUpdate in the payment flow.
 *
 * @namespace Directives
 * @class billingPreferencesUpdate
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.stopAutopay', [])
        .directive('stopAutopay', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/stop-autopay.html',
                    scope: {
                        /**
                         * Display information for the billingPreferencesUpdate.
                         *
                         * @memberof billingPreferencesUpdate
                         * @member {Object} billingPreferencesUpdateData
                         */
                        stopAutopayData: '=',
                        policy: '=',
                        billingToken: '<token'
                    },
                    controller: [
                        'config',
                        '$http',
                        '$rootScope',
                        '$scope',
                        function (config, $http, $rootScope, $scope) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;
                            $scope.stopAutopayError = false;
                            $scope.strictEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

                            // Defaults to EMAIL to encourage email as a selection
                            $scope.billingMethodSelected = 'EMAIL';

                            // Building object to work with existing template
                            $scope.userData = {
                                preferences: $scope.stopAutopayData
                            };
                            $scope.checkboxValue = false;

                            $scope.acceptPaperlessFn = function () {
                                $scope.checkboxValue = true;
                            };

                            $scope.stopAutopay = function(formObj) {
                                if(formObj.memberEmail) {
                                    formObj.memberEmail.$setDirty();
                                }
                                if(formObj.paperlessAgreement) {
                                    formObj.paperlessAgreement.$setDirty();
                                }
                                if($scope.billingMethodSelected === 'POSTAL') {
                                    formObj.streetAddress.$setDirty();
                                    formObj.city.$setDirty();
                                    formObj.state.$setDirty();
                                    formObj.zipcode.$setDirty();
                                }
                                if(formObj.$invalid) {
                                    return;
                                }

                                // TODO this needs to be removed when services are updated Dec 28th, 2017
                                if($scope.userData.preferences.payment.bankDraftDetails) {
                                    $scope.userData.preferences.payment.bankDraftDetails.bankName = "BANK OF AMERICA";
                                }
                                $rootScope.$emit('pageLoading');
                                $http.post(config.apiUrl + '/setBillingPreferences', {
                                    account: {
                                        token: $scope.billingToken
                                      },
                                      preferences: {
                                        mailingAddress: $scope.userData.preferences.mailingAddress,
                                        emailAddress: $scope.userData.preferences.emailAddress,
                                        payment: $scope.userData.preferences.payment,
                                        updatedPreferences: {
                                          paymentMethod: $scope.userData.preferences.paymentMethod,
                                          billingMethod: ($scope.stopAutopayForm.billingMethodSelected && $scope.stopAutopayForm.billingMethodSelected.$modelValue) || $scope.stopAutopayData.billingMethod,
                                          paymentFrequency: 'DIRECTBILL'
                                        },
                                        priorBillingNotifPrefCode: $scope.userData.preferences.priorBillingNotifPrefCode
                                      },
                                      TIPData: $rootScope.getTIPData($scope.userData.preferences.paymentMethod.toLowerCase() === 'creditcard' ? 'TurnOffRcrCreditCard' : 'TurnOffRcrBankDraft', '/setBillingPreferences')
                                }).then(function() {
                                    $rootScope.$emit('pageLoaded');
                                    $rootScope.gotoView('/billing-preferences?success=true');
                                })
                                .catch(function() {
                                    $rootScope.$emit('pageLoaded');
                                    $scope.stopAutopayError = true;
                                });
                            };
                        }
                    ]
                };
            }
        ]);
}());

/**
 * Directive for the tab select element.
 *
 * @namespace Directives
 * @class tabSelect
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.tabSelect', [])
  .directive('tabSelect', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/tab-select.html',
        scope: {
          /**
          * Display information for a tab select element.
          *
          * @memberof tabSelect
          * @member {Object} inboxDetails
          */
          tabs: '='
        },
        controller: [
          '$scope',
          '$rootScope',
          '$location',
          '$httpParamSerializer',
          function($scope, $rootScope, $location, $httpParamSerializer) {
            $scope.loc = $rootScope.loc;
            $scope.gotoView = $rootScope.gotoView;
            $scope.trackAction = $rootScope.trackAction;

            /**
             * Navigates to a view when a tab is clicked.
             *
             * @memberof tabSelect
             * @method tabToView
             */
            $scope.tabToView = function(url) {
              $rootScope.gotoView(url + '?' + $httpParamSerializer($location.search()));
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the reusable terms modal.
 *
 * @namespace Directives
 * @class termsModal
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.termsModal', [])
    .directive('termsModal', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'help/terms-modal.html',
          scope: false,
          controller: [
            '$rootScope',
            '$scope',
            function($rootScope, $scope) {
              $scope.trackAction = $rootScope.trackAction;


              /**
               * goBack button for terms modal
               *
               * @memberof termsModal
               * @method goBack
               */
              $scope.goBack = function() {
                angular.element('.terms-modal').modal('hide');
                $rootScope.blurContent = false;

                angular.element('.navbar').toggleClass('blur', false);
              };

            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the toggle switch element.
 *
 * @namespace Directives
 * @class toggleSwitch
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.toggleSwitch', [])
  .directive('toggleSwitch', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/toggle-switch.html',
        scope: {
          /**
          * Boolean to tie to the toggle.
          *
          * @memberof tabSelect
          * @member {Boolean} model
          */
          model: '=',
          /**
          * Function to callback with the model value.
          *
          * @member {Function} onClick
          */
          onClick: '=',
          controlled: '=?'
        },
        controller: [
          '$scope',
          '$rootScope',
          function($scope) {
            /**
             * Toggles the model between true and false.
             *
             * @memberof tabSelect
             * @method toggleModel
             */
            $scope.toggleModel = function() {
              if (!$scope.controlled) {
                $scope.model = !$scope.model;
              }

              // Event.
              if ($scope.onClick) {
                $scope.onClick($scope.model);
              };
            };

            /**
             * Toggles the model on.
             *
             * @memberof tabSelect
             * @method modelOn
             */
            $scope.modelOn = function() {
              if (!$scope.model) {
                $scope.toggleModel();
              }
            };

            /**
             * Toggles the model off.
             *
             * @memberof tabSelect
             * @method modelOff
             */
            $scope.modelOff = function() {
              if ($scope.model) {
                $scope.toggleModel();
              }
            };
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for the total remaining balance when there's a
 * payment processing and the member isn't overdue
 *
 * @namespace Directives
 * @class totalRemainingBalance
 */
(function () {
  'use strict';

  angular
    .module('blueconnect.mobile.directives.totalRemainingBalance', [])
    .directive('totalRemainingBalance', [
      function () {
        return {
          restrict: 'E',
          replace: true,
          templateUrl: 'partials/total-remaining-balance.html',
          controller: [
            '$rootScope',
            '$scope',
            function ($rootScope, $scope) {
              $scope.loc = $rootScope.loc;
            }
          ]
        };
      }
    ]);
}());

/**
 * Directive for the trackerBillingSummary in the payment flow.
 *
 * @namespace Directives
 * @class trackerBillingSummary
 */
(function () {
    'use strict';

    angular.module('blueconnect.mobile.directives.trackerBillingSummary', [])
        .directive('trackerBillingSummary', [
            function () {
                return {
                    restrict: 'AE',
                    replace: true,
                    templateUrl: 'partials/tracker-billing-summary.html',
                    scope: {
                        /**
                         * Display information for the trackerBillingSummary in the payment flow.
                         *
                         * @memberof trackerBillingSummary
                         * @member {Object} trackerBillingData
                         */
                        trackerBillingData: '='
                    },
                    controller: [
                        '$rootScope',
                        '$scope',
                        function ($rootScope, $scope) {
                            $scope.loc = $rootScope.loc;
                            $scope.gotoView = $rootScope.gotoView;

                          $scope.padAmt = function(amt) {
                            var amountDue = amt.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2, style: 'currency', currency: 'USD'});
                            return amountDue;
                          }

                            /**
                             * Toggle
                             *
                             */

                            $scope.toggleItem = function () {
                                if ($scope.expandedDiv) {
                                    $scope.expandedDiv = true;
                                }
                                $scope.expandedDiv = !$scope.expandedDiv;
                            };

                        }
                    ]
                };
            }
        ]);
}());

/**
 * Directive for a vertical bar graph.
 *
 * @namespace Directives
 * @class verticalBarGraph
 */
(function() {
  'use strict';

  angular.module('blueconnect.mobile.directives.verticalBarGraph', [])
  .directive('verticalBarGraph', [
    function() {
      return {
        restrict: 'AE',
        replace: true,
        templateUrl: 'partials/vertical-bar-graph.html',
        scope: {
          /**
          * Values to display in the graph.
          *
          * @memberof verticalBarGraph
          * @member {Object} graphValues
          */
          graphValues: '=',

          /**
          * Optional height.
          *
          * @memberof verticalBarGraph
          * @member {Object} height
          */
          graphHeight: '@'
        },
        controller: [
          '$scope',
          function($scope) {
            $scope.graphHeight = $scope.graphHeight || 6;
          }
        ]
      };
    }
  ]);
}());

/**
 * Directive for a vision-only-info.
 *
 * @namespace Directives
 * @class visionOnlyInfo
 */
(function() {
    'use strict';
  
    angular.module('blueconnect.mobile.directives.visionOnlyInfo', [])
    .directive('visionOnlyInfo', [
      function() {
        return {
          restrict: 'AE',
          replace: true,
          templateUrl: 'partials/vision-only-info.html',
          scope: {
            /**
            * The title of the vision-only-info.
            *
            * @memberof visionOnlyInfo
            * @member {String} title
            */
           visionBenefitsData: '='
          },
          controller: [
            '$scope',
            '$rootScope',
            'shareService',
            'adobeService',
            function($scope, $rootScope, shareService, adobeService) {
              $scope.loc = $rootScope.loc;
              $scope.gotoView = $rootScope.gotoView;
              $scope.openInBrowser = $rootScope.openInBrowser;
              $scope.openInSecureBrowser = $rootScope.openInSecureBrowser;
              $scope.trackAction = $rootScope.trackAction;
              $scope.footnotesBottom = $scope.visionBenefitsData[3].showFullText;
              $scope.visionPlan = $rootScope.selectedPolicy.visionPlan;
  
              document.addEventListener("deviceready", onDeviceReady, false);
  
              $scope.toggleItem = function() {
                if ($scope.expandedDiv){
                  $scope.expandedDiv = true;
                  $scope.footnotesBottom = $scope.visionBenefitsData[3].showFullText;
                } else {
                  $scope.footnotesBottom = $scope.visionBenefitsData[3].hideFullText;
                }
  
                $scope.expandedDiv = !$scope.expandedDiv;
              };
  
              function onDeviceReady() {
                var devicePlatform = device.platform;
                $scope.openPDF = function(url){
                  if (devicePlatform !== 'iOS') {
                    /**
                    * Android can not open PDF using openInBrowser
                    * Adding google drive prefix link to open PDF in browser
                    */
                    $rootScope.$emit('pageLoading');
                    DocumentViewer.previewFileFromUrlOrPath(
                          function (success) {
                            $rootScope.$emit('pageLoaded');
                        },
                          function (error) {
                            console.log(error);
                            $rootScope.$emit('pageLoaded');
                        },
                        url, 'benefits.pdf');
                    } else {
                      $scope.openInBrowser(url);
                    }
                };
              }
            }
          ]
        };
      }
    ]);
  }());
(function () {
  angular
      .module('blueconnect.mobile.directives.billingInvoiceHistoryFilterRibbon', [])
      .directive('billingInvoiceHistoryFilterRibbon', function () {
        return {
          restrict: 'E',
          scope: {
            resultsCount: '='
          },
          templateUrl: 'partials/billing-invoice-history/billing-invoice-history-filter-ribbon.html',
          controller: ['$rootScope', '$scope', 'BillingInvoiceHistoryFactory', function ($rootScope, $scope, BillingInvoiceHistoryFactory) {
            $scope.loc = $rootScope.loc;
            $scope.isMedicareSSA = BillingInvoiceHistoryFactory.getMedicareSSAValue();

            $scope.resetFilter = function(){
              BillingInvoiceHistoryFactory.resetFilter();
              $rootScope.gotoView('billing-invoice-history');
            };

            var transType = BillingInvoiceHistoryFactory.getHistoryType();
            switch (transType) {
              case 'P':
                $scope.filterTransType = $rootScope.loc.BP_PAYMENTS;
                break;
              case 'I':
                $scope.filterTransType = $rootScope.loc.BP_INVOICES;
                break;
              default:
                $scope.filterTransType = $rootScope.loc.BP_PAYMENT_INVOICES;
            }

            var currentSpan = BillingInvoiceHistoryFactory.getTimeSpan().toString();

            switch (currentSpan) {
              case '3':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_3_MONTHS;
                break;
              case '6':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_6_MONTHS;
                break;
              case '12':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_12_MONTHS;
                break;
              case '24':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_24_MONTHS;
                break;
              case '0':
                $scope.resultsCountText = $rootScope.loc.BP_LAST_YEARS_PLAN;
                break;
              default:
                $scope.resultsCountText = (moment(BillingInvoiceHistoryFactory.getStartDate()).format('MMMM YYYY') + ' - ' + moment(BillingInvoiceHistoryFactory.getEndDate()).format('MMMM YYYY'));
            }

          }]
        };
      })
})();
(function () {
  angular.module('blueconnect.mobile.directives.downloadPDFButton', [])
    .directive('downloadPdfButton', function () {
      return {
        scope: {
          invoice: '<'
        },
        controller: ['BillingInvoiceHistoryFactory', 'config', '$http', '$rootScope', '$scope',
          function (BillingInvoiceHistoryFactory, config, $http, $rootScope, $scope) {
            $scope.loc = $rootScope.loc;
            $scope.openInBrowser = $rootScope.openInBrowser;
            $scope.failedToLoad = false;
            $scope.loading = false;
            $scope.pdfReady = false;
            $scope.downloadAll = $scope.invoice.length ? true : false;

            $scope.downloadInvoice = function(invoice) {
              var serviceName = null;
              var startDate = null;
              var endDate = null;
              var body = null;
              var transactionCode = null;
              $scope.loading = true;
              $scope.pdfReady = false;
              $scope.failedToLoad = false;
              
              if ($scope.downloadAll) {
                serviceName = 'getBillingHistoryAsPdf';
                startDate = BillingInvoiceHistoryFactory.serviceFormattedSearchFromDate();
                endDate = BillingInvoiceHistoryFactory.serviceFormattedSearchToDate();
                transactionCode = 'ViewInvcPDF';
              } else {
                serviceName = 'getInvoice';
                startDate = invoice.invoiceStartDate;
                endDate = invoice.invoiceEndDate;
                transactionCode = 'ViewInvoice';
              }
              body = {
                token: BillingInvoiceHistoryFactory.getAccountToken(),
                startDate: startDate,
                endDate: endDate,
                TIPData: $rootScope.getTIPData(transactionCode, '/' + serviceName)
              };

              $http.post(config.apiUrl + '/' + serviceName, body)
                .then(function (response) {
                  $scope.loading = false;
                  if (response.status === 200 && response.data) {
                    $scope.pdfFile = 'data:application/pdf;base64,' + response.data;
                    $scope.pdfReady = true;
                  }
                })
                .catch(function (err) {
                  $scope.loading = false;
                  $scope.failedToLoad = true;
                  console.log(err);
                });
            };
            $scope.viewPdf = function () {
              var device = window.device || null;
              var devicePlatform = navigator.userAgent;
              if (device) {
                devicePlatform = device.platform;
              }
              switch(devicePlatform){
                case 'Android':
                case 'amazon-fireos':
                  /**
                  * Android devices cannot open up PDFs in a sub web view (inAppBrowser) so the PDF needs to be downloaded and then opened with whatever
                  * native PDF viewer is installed on the app.
                  */
                  $rootScope.$emit('pageLoading');
                  DocumentViewer.saveAndPreviewBase64File(
                    function (success) {
                      $rootScope.$emit('pageLoaded');
                      $rootScope.pausedForReadPDF = true;
                    },
                      function (error) {
                        console.log(error);
                        $rootScope.$emit('pageLoaded');
                    },
                    $scope.pdfFile.replace('data:application/pdf;base64,', ''), 'application/pdf', cordova.file.cacheDirectory, 'invoice-preview.pdf');
                break;

              default:
                /**
                * IOS can open PDF using openInBrowser
                */
                $scope.openInBrowser($scope.pdfFile);

                break;
              }
            };

          }
        ],
        templateUrl: 'partials/billing-invoice-history/download-pdf-button.html'
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.invoiceHistoryCard', [])
    .directive('invoiceHistoryCard', function() {
      return {
        restrict: 'E',
        scope: {
          invoice: '<'
        },
        templateUrl: 'partials/billing-invoice-history/invoice-history-card.html',
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc || {};
        }]
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.billingInvoiceHistoryNoInvoices', [])
    .directive('noInvoicesMessage', function() {
      return {
        scope: true,
        controller: ['$rootScope', '$routeParams', '$scope', function($rootScope, $routeParams, $scope) {
          $scope.loc = $rootScope.loc || {};
          $scope.searchContext = $routeParams.search;
        }],
        templateUrl: 'partials/billing-invoice-history/no-invoices-message.html'
      };
    });
})();

(function() {
  angular
    .module('blueconnect.mobile.directives.paymentFlowPaymentError', [])
    .directive('detailsPagePaymentError', function() {
      return {
        restrict: 'E',
        template: '<p><span ng-bind="::loc.BP_PAYMENT_DETAILS_NOT_ACCEPTED"></span></p>',
        controller: ['$rootScope', '$scope', function($rootScope, $scope){
          $scope.loc = $rootScope.loc;
        }]
      };
    })
    .directive('reviewPagePaymentError', function() {
      return {
        restrict: 'E',
        template: [
          '<unsuccessful-header class="mb4"></unsuccessful-header>',
          '<p ng-bind="::loc.BP_TECHNICAL_DIFFICULTIES"></p>',
          '<p ng-bind="::loc.BP_TECHNICAL_DIFFICULTIES_LINE2"></p>'
        ].join(''),
        controller: ['$rootScope', '$scope', function($rootScope, $scope){
          $scope.loc = $rootScope.loc;
        }]
      };
    })
    .directive('confirmationPagePaymentError', function() {
      return {
        restrict: 'E',
        templateUrl: 'partials/confirmation-page-payment-error.html',
        controller: [ '$rootScope', '$scope', 'PaymentFlowFactory', function($rootScope, $scope, PaymentFlowFactory){
          $scope.loc = $rootScope.loc;
          $scope.paymentAmount = PaymentFlowFactory.getUserSetData().paymentAmount;
          $scope.paymentDate = moment().format('MMMM Do YYYY');
          $scope.gotoView = $rootScope.gotoView;
        }]
      };
    })
    .directive('mobileErrorMessage', function() {
      return {
        restrict: 'E',
        transclude: true,
        controller: ['$rootScope', '$scope', function($rootScope, $scope) {
          $scope.loc = $rootScope.loc;
        }],
        template: '<div ng-transclude></div>'
      };
    });
})();
(function () {
  'use strict';

  angular.module('blueconnect.mobile.config', []).constant('config', {
    env: 'LOCAL',
    merchantId: 'bcbsncdev',
    liveagent: {
      publicInit: [],
      publicWindowHeight: 610,
      publicWindowWidth: 650,

      authInit: [
        'https://d.la1-c1cs-ord.salesforceliveagent.com/chat',
        '572440000000GHz',
        '00D2C000000CmhL',
      ],

      authWindowHeight: 610,
      authWindowWidth: 650,

      authButtons: {
        shp: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '57344000000PTtd',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '57344000000PTtd',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '57344000000PTtY',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '57344000000PTtY',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
        iu65: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '573440000000ImI',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '573440000000ImI',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '573440000000ImD',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '573440000000ImD',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
        signature: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '573440000000ImS',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '573440000000ImS',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '573440000000ImN',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '573440000000ImN',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
        medicare: {
          es: [
            {
              label: 'Conversar Ahora',
              token: '5732S000000k9dO',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat No Disponible',
              token: '5732S000000k9dO',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
          en: [
            {
              label: 'Chat Available',
              token: '5732S000000k9dN',
              id: 'live-chat-available-button',
              btn_id: 'live-chat-available',
            },
            {
              label: 'Chat Unavailable',
              token: '5732S000000k9dN',
              id: 'live-chat-not-available-button',
              btn_id: 'live-chat-not-available',
            },
          ],
        },
      },
    },
    apiUrl: 'https://localhost:8800/api',
    apiVersion: '0.1.6',
    capraApiUrl: 'https://localhost:8801/api',
    capraVersion: '0.1.1',
    loginUrl: 'https://mobileps.bcbsnc.com/mga/sps/oauth/oauth20/token',
    typeaheadUrl: 'https://localhost:8802/',
    bcbsWebUrl: 'https://wwwps.bcbsnc.com',
    bcbsWebMobileUrl: 'https://mobileps.bcbsnc.com',
    bcbsAccountUrl: 'https://accountbs.bcbsnc.com',
    key: 'a3VuZyBmdSBhY3Rpb24gZ3JpcA==',
    heurl:
      'https://mobileps.bcbsnc.com/FIM/sps/BCBSNCNWFIDP/saml20/logininitial?RequestBinding=HTTPPost&NameIdFormat=Email&PartnerId=https://pi.healthequity.com/HEAppSaml2.aspx',
    credentials: {
      clientId:
        'U2FsdGVkX1/BzlSXUdiA3vkRFSfJ/46aYwRknc6P2A0Ucd2mGGGybKcEq5AQtPnM',
      clientSecret:
        'U2FsdGVkX18wQqUrxye346kY0uvquTXK8DcKgyrKnbQWUaDZOTvKyqhKWRSBjZVU',
    },
  });
})();
